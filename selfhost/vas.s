	.text
_us32_ge:
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edi, -4(%rbp)
	movl	%esi, -8(%rbp)
	cmpl	$2147483646, -4(%rbp)
	ja	.L2
	movl	-4(%rbp), %eax
	cmpl	%eax, -8(%rbp)
	jg	.L3
.L2:
	movl	$1, %eax
	jmp	.L4
.L3:
	movl	$0, %eax
.L4:
	popq	%rbp
	ret
_us32_eq:
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edi, -4(%rbp)
	movl	%esi, -8(%rbp)
	movl	-4(%rbp), %eax
	testl	%eax, %eax
	js	.L7
	movl	-4(%rbp), %eax
	cmpl	%eax, -8(%rbp)
	jne	.L7
	movl	$1, %eax
	jmp	.L8
.L7:
	movl	$0, %eax
.L8:
	popq	%rbp
	ret
_us32_lt:
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edi, -4(%rbp)
	movl	%esi, -8(%rbp)
	cmpl	$2147483646, -4(%rbp)
	ja	.L11
	movl	-4(%rbp), %eax
	cmpl	%eax, -8(%rbp)
	jle	.L11
	movl	$1, %eax
	jmp	.L12
.L11:
	movl	$0, %eax
.L12:
	popq	%rbp
	ret
_wymum:
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -16(%rbp)
	movq	$0, -8(%rbp)
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, %rax
	movl	$0, %edx
	movq	-8(%rbp), %rcx
	movq	%rcx, %rsi
	imulq	%rax, %rsi
	movq	-16(%rbp), %rcx
	imulq	%rdx, %rcx
	addq	%rsi, %rcx
	mulq	-16(%rbp)
	addq	%rdx, %rcx
	movq	%rcx, %rdx
	movq	%rax, -16(%rbp)
	movq	%rdx, -8(%rbp)
	movq	%rax, -16(%rbp)
	movq	%rdx, -8(%rbp)
	movq	-16(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, (%rax)
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rdx
	movq	%rdx, %rax
	xorl	%edx, %edx
	movq	%rax, %rdx
	movq	-32(%rbp), %rax
	movq	%rdx, (%rax)
	nop
	popq	%rbp
	ret
_wymix:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	leaq	-16(%rbp), %rdx
	leaq	-8(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	_wymum
	movq	-8(%rbp), %rdx
	movq	-16(%rbp), %rax
	xorq	%rdx, %rax
	leave
	ret
_wyr8:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rcx
	leaq	-8(%rbp), %rax
	movl	$8, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy
	movq	-8(%rbp), %rax
	leave
	ret
_wyr4:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rcx
	leaq	-4(%rbp), %rax
	movl	$4, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy
	movl	-4(%rbp), %eax
	movl	%eax, %eax
	leave
	ret
_wyr3:
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	salq	$16, %rax
	movq	%rax, %rdx
	movq	-16(%rbp), %rax
	shrq	%rax
	movq	%rax, %rcx
	movq	-8(%rbp), %rax
	addq	%rcx, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	salq	$8, %rax
	orq	%rax, %rdx
	movq	-16(%rbp), %rax
	leaq	-1(%rax), %rcx
	movq	-8(%rbp), %rax
	addq	%rcx, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	orq	%rdx, %rax
	popq	%rbp
	ret
wyhash:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$88, %rsp
	movq	%rdi, -72(%rbp)
	movq	%rsi, -80(%rbp)
	movq	%rdx, -88(%rbp)
	movq	%rcx, -96(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	xorq	%rax, -88(%rbp)
	cmpq	$16, -80(%rbp)
	setbe	%al
	movzbl	%al, %eax
	testq	%rax, %rax
	je	.L24
	cmpq	$3, -80(%rbp)
	seta	%al
	movzbl	%al, %eax
	testq	%rax, %rax
	je	.L25
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	_wyr4
	salq	$32, %rax
	movq	%rax, %rbx
	movq	-80(%rbp), %rax
	shrq	$3, %rax
	leaq	0(,%rax,4), %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, %rdi
	call	_wyr4
	orq	%rbx, %rax
	movq	%rax, -32(%rbp)
	movq	-80(%rbp), %rax
	leaq	-4(%rax), %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, %rdi
	call	_wyr4
	salq	$32, %rax
	movq	%rax, %rbx
	movq	-80(%rbp), %rax
	shrq	$3, %rax
	salq	$2, %rax
	movq	-80(%rbp), %rdx
	subq	%rax, %rdx
	subq	$4, %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, %rdi
	call	_wyr4
	orq	%rbx, %rax
	movq	%rax, -40(%rbp)
	jmp	.L26
.L25:
	cmpq	$0, -80(%rbp)
	setne	%al
	movzbl	%al, %eax
	testq	%rax, %rax
	je	.L27
	movq	-80(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	_wyr3
	movq	%rax, -32(%rbp)
	movq	$0, -40(%rbp)
	jmp	.L26
.L27:
	movq	$0, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, -32(%rbp)
	jmp	.L26
.L24:
	movq	-80(%rbp), %rax
	movq	%rax, -48(%rbp)
	cmpq	$48, -48(%rbp)
	seta	%al
	movzbl	%al, %eax
	testq	%rax, %rax
	je	.L30
	movq	-88(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	-88(%rbp), %rax
	movq	%rax, -64(%rbp)
.L29:
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, %rdi
	call	_wyr8
	xorq	-88(%rbp), %rax
	movq	%rax, %rbx
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	_wyr8
	movq	-96(%rbp), %rdx
	addq	$8, %rdx
	movq	(%rdx), %rdx
	xorq	%rdx, %rax
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	_wymix
	movq	%rax, -88(%rbp)
	movq	-24(%rbp), %rax
	addq	$24, %rax
	movq	%rax, %rdi
	call	_wyr8
	xorq	-56(%rbp), %rax
	movq	%rax, %rbx
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, %rdi
	call	_wyr8
	movq	-96(%rbp), %rdx
	addq	$16, %rdx
	movq	(%rdx), %rdx
	xorq	%rdx, %rax
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	_wymix
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	addq	$40, %rax
	movq	%rax, %rdi
	call	_wyr8
	xorq	-64(%rbp), %rax
	movq	%rax, %rbx
	movq	-24(%rbp), %rax
	addq	$32, %rax
	movq	%rax, %rdi
	call	_wyr8
	movq	-96(%rbp), %rdx
	addq	$24, %rdx
	movq	(%rdx), %rdx
	xorq	%rdx, %rax
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	_wymix
	movq	%rax, -64(%rbp)
	addq	$48, -24(%rbp)
	subq	$48, -48(%rbp)
	cmpq	$48, -48(%rbp)
	seta	%al
	movzbl	%al, %eax
	testq	%rax, %rax
	jne	.L29
	movq	-56(%rbp), %rax
	xorq	-64(%rbp), %rax
	xorq	%rax, -88(%rbp)
	jmp	.L30
.L31:
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, %rdi
	call	_wyr8
	xorq	-88(%rbp), %rax
	movq	%rax, %rbx
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	_wyr8
	movq	-96(%rbp), %rdx
	addq	$8, %rdx
	movq	(%rdx), %rdx
	xorq	%rdx, %rax
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	_wymix
	movq	%rax, -88(%rbp)
	subq	$16, -48(%rbp)
	addq	$16, -24(%rbp)
.L30:
	cmpq	$16, -48(%rbp)
	seta	%al
	movzbl	%al, %eax
	testq	%rax, %rax
	jne	.L31
	movq	-48(%rbp), %rax
	leaq	-16(%rax), %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, %rdi
	call	_wyr8
	movq	%rax, -32(%rbp)
	movq	-48(%rbp), %rax
	leaq	-8(%rax), %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, %rdi
	call	_wyr8
	movq	%rax, -40(%rbp)
.L26:
	movq	-40(%rbp), %rax
	xorq	-88(%rbp), %rax
	movq	%rax, %rdx
	movq	-96(%rbp), %rax
	addq	$8, %rax
	movq	(%rax), %rax
	xorq	-32(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	_wymix
	movq	%rax, %rdx
	movq	-96(%rbp), %rax
	addq	$8, %rax
	movq	(%rax), %rax
	xorq	-80(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	_wymix
	movq	-8(%rbp), %rbx
	leave
	ret
	.section	.rodata, "a"
_wyp:
	.quad	-6884282663029611473
	.quad	-1800455987208640293
	.quad	-8161530843051276573
	.quad	6384245875588680899
	.text
wyhash64:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rax
	movabsq	$-6884282663029611473, %rdx
	xorq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movq	-16(%rbp), %rax
	movabsq	$-1800455987208640293, %rdx
	xorq	%rdx, %rax
	movq	%rax, -16(%rbp)
	leaq	-16(%rbp), %rdx
	leaq	-8(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	_wymum
	movq	-16(%rbp), %rax
	movabsq	$-1800455987208640293, %rdx
	xorq	%rax, %rdx
	movq	-8(%rbp), %rax
	movabsq	$-6884282663029611473, %rcx
	xorq	%rcx, %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	_wymix
	leave
	ret
	.globl	_const_strconv__digit_pairs
	.bss
_const_strconv__digit_pairs:
	.zero	16
	.globl	_const_strconv__base_digits
_const_strconv__base_digits:
	.zero	16
	.globl	_const_digit_pairs
_const_digit_pairs:
	.zero	16
	.globl	_const_flag__space
_const_flag__space:
	.zero	16
	.globl	_const_flag__underline
_const_flag__underline:
	.zero	16
	.globl	_const_os__empty_str
_const_os__empty_str:
	.zero	16
	.globl	_const_os__dot_str
_const_os__dot_str:
	.zero	16
	.globl	_const_os__path_separator
_const_os__path_separator:
	.zero	16
	.globl	_const_math__bits__de_bruijn64
	.section	.rodata, "a"
_const_math__bits__de_bruijn64:
	.quad	285870213051353865
	.globl	_const_math__bits__de_bruijn64tab
	.bss
_const_math__bits__de_bruijn64tab:
	.zero	32
	.globl	_const_math__bits__two32
	.section	.rodata, "a"
_const_math__bits__two32:
	.quad	4294967296
	.globl	_const_math__bits__mask32
_const_math__bits__mask32:
	.quad	4294967295
	.globl	_const_strconv__single_plus_zero
_const_strconv__single_plus_zero:
	.zero	4
	.globl	_const_strconv__single_minus_zero
_const_strconv__single_minus_zero:
	.long	-2147483648
	.globl	_const_strconv__single_plus_infinity
_const_strconv__single_plus_infinity:
	.long	2139095040
	.globl	_const_strconv__single_minus_infinity
_const_strconv__single_minus_infinity:
	.long	-8388608
	.globl	_const_strconv__double_plus_zero
_const_strconv__double_plus_zero:
	.zero	8
	.globl	_const_strconv__double_minus_zero
_const_strconv__double_minus_zero:
	.quad	-9223372036854775808
	.globl	_const_strconv__double_plus_infinity
_const_strconv__double_plus_infinity:
	.quad	9218868437227405312
	.globl	_const_strconv__double_minus_infinity
_const_strconv__double_minus_infinity:
	.quad	-4503599627370496
	.globl	_const_strconv__max_u64
_const_strconv__max_u64:
	.quad	-1
	.globl	_const_strconv__ten_pow_table_64
	.bss
_const_strconv__ten_pow_table_64:
	.zero	32
	.globl	_const_strconv__mantbits64
	.section	.rodata, "a"
_const_strconv__mantbits64:
	.long	52
	.globl	_const_strconv__expbits64
_const_strconv__expbits64:
	.long	11
	.globl	_const_strconv__dec_round
	.bss
_const_strconv__dec_round:
	.zero	32
	.globl	_const_strconv__pow5_split_64
_const_strconv__pow5_split_64:
	.zero	32
	.globl	_const_strconv__pow5_inv_split_64
_const_strconv__pow5_inv_split_64:
	.zero	32
	.globl	g_main_argc
g_main_argc:
	.zero	4
	.globl	g_main_argv
g_main_argv:
	.zero	8
	.globl	as_cast_type_indexes
as_cast_type_indexes:
	.zero	32
	.globl	_const_max_load_factor
	.section	.rodata, "a"
_const_max_load_factor:
	.zero	8
	.globl	_const_hash_mask
_const_hash_mask:
	.long	16777215
	.globl	_const_probe_inc
_const_probe_inc:
	.long	16777216
	.globl	_const_none__
	.bss
_const_none__:
	.zero	32
	.globl	_const_elf__header__r_x86_64_64
	.section	.rodata, "a"
_const_elf__header__r_x86_64_64:
	.quad	1
	.globl	_const_elf__header__r_x86_64_pc32
_const_elf__header__r_x86_64_pc32:
	.quad	2
	.globl	_const_elf__header__r_x86_64_plt32
_const_elf__header__r_x86_64_plt32:
	.quad	4
	.globl	_const_elf__header__r_x86_64_32
_const_elf__header__r_x86_64_32:
	.quad	10
	.globl	_const_elf__header__r_x86_64_32s
_const_elf__header__r_x86_64_32s:
	.quad	11
	.globl	_const_elf__header__r_x86_64_16
_const_elf__header__r_x86_64_16:
	.quad	12
	.globl	_const_elf__header__r_x86_64_8
_const_elf__header__r_x86_64_8:
	.quad	14
	.globl	_const_os__o_rdonly
	.bss
_const_os__o_rdonly:
	.zero	4
	.globl	_const_os__o_wronly
_const_os__o_wronly:
	.zero	4
	.globl	_const_os__o_rdwr
_const_os__o_rdwr:
	.zero	4
	.globl	_const_os__o_create
_const_os__o_create:
	.zero	4
	.globl	_const_os__o_noctty
_const_os__o_noctty:
	.zero	4
	.globl	_const_os__o_trunc
_const_os__o_trunc:
	.zero	4
	.globl	_const_os__o_append
_const_os__o_append:
	.zero	4
	.globl	_const_os__o_nonblock
_const_os__o_nonblock:
	.zero	4
	.globl	_const_os__o_sync
_const_os__o_sync:
	.zero	4
	.globl	_const_os__args
_const_os__args:
	.zero	32
	.globl	_const_encoder__mod_indirection_with_no_disp
	.section	.rodata, "a"
_const_encoder__mod_indirection_with_no_disp:
	.zero	1
	.globl	_const_encoder__mod_indirection_with_disp8
_const_encoder__mod_indirection_with_disp8:
	.byte	1
	.globl	_const_encoder__mod_indirection_with_disp32
_const_encoder__mod_indirection_with_disp32:
	.byte	2
	.globl	_const_encoder__mod_regi
_const_encoder__mod_regi:
	.byte	3
	.globl	_const_encoder__operand_size_prefix16
_const_encoder__operand_size_prefix16:
	.byte	102
	.globl	_const_encoder__regi_base_code_offset_over_8
	.bss
_const_encoder__regi_base_code_offset_over_8:
	.zero	32
	.globl	_IError_None___index
	.section	.rodata, "a"
_IError_None___index:
	.zero	4
	.globl	_IError_voidptr_index
_IError_voidptr_index:
	.long	1
	.globl	_IError_Error_index
_IError_Error_index:
	.long	2
	.globl	_IError_MessageError_index
_IError_MessageError_index:
	.long	3
	.globl	_IError_flag__UnknownFlagError_index
_IError_flag__UnknownFlagError_index:
	.long	4
	.globl	_IError_flag__ArgsCountError_index
_IError_flag__ArgsCountError_index:
	.long	5
	.globl	_IError_os__Eof_index
_IError_os__Eof_index:
	.long	6
	.globl	_IError_os__NotExpected_index
_IError_os__NotExpected_index:
	.long	7
	.globl	_IError_os__FileNotOpenedError_index
_IError_os__FileNotOpenedError_index:
	.long	8
	.globl	_IError_os__SizeOfTypeIs0Error_index
_IError_os__SizeOfTypeIs0Error_index:
	.long	9
	.globl	_IError_os__ExecutableNotFoundError_index
_IError_os__ExecutableNotFoundError_index:
	.long	10
	.text
None___msg_Interface_IError_method_wrapper:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	call	Error_msg
	leave
	ret
None___code_Interface_IError_method_wrapper:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	call	Error_code
	leave
	ret
Error_msg_Interface_IError_method_wrapper:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	call	Error_msg
	leave
	ret
Error_code_Interface_IError_method_wrapper:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	call	Error_code
	leave
	ret
MessageError_msg_Interface_IError_method_wrapper:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	subq	$8, %rsp
	movq	-8(%rbp), %rcx
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	call	MessageError_msg
	addq	$32, %rsp
	leave
	ret
MessageError_code_Interface_IError_method_wrapper:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	subq	$8, %rsp
	movq	-8(%rbp), %rcx
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	call	MessageError_code
	addq	$32, %rsp
	leave
	ret
flag__UnknownFlagError_msg_Interface_IError_method_wrapper:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rdx
	movq	8(%rax), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	flag__UnknownFlagError_msg
	leave
	ret
flag__UnknownFlagError_code_Interface_IError_method_wrapper:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	call	Error_code
	leave
	ret
flag__ArgsCountError_msg_Interface_IError_method_wrapper:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	flag__ArgsCountError_msg
	leave
	ret
flag__ArgsCountError_code_Interface_IError_method_wrapper:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	call	Error_code
	leave
	ret
os__Eof_msg_Interface_IError_method_wrapper:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	call	Error_msg
	leave
	ret
os__Eof_code_Interface_IError_method_wrapper:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	call	Error_code
	leave
	ret
os__NotExpected_msg_Interface_IError_method_wrapper:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	subq	$8, %rsp
	movq	-8(%rbp), %rcx
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	call	os__NotExpected_msg
	addq	$32, %rsp
	leave
	ret
os__NotExpected_code_Interface_IError_method_wrapper:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	subq	$8, %rsp
	movq	-8(%rbp), %rcx
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	call	os__NotExpected_code
	addq	$32, %rsp
	leave
	ret
os__FileNotOpenedError_msg_Interface_IError_method_wrapper:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	call	os__FileNotOpenedError_msg
	leave
	ret
os__FileNotOpenedError_code_Interface_IError_method_wrapper:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	call	Error_code
	leave
	ret
os__SizeOfTypeIs0Error_msg_Interface_IError_method_wrapper:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	call	os__SizeOfTypeIs0Error_msg
	leave
	ret
os__SizeOfTypeIs0Error_code_Interface_IError_method_wrapper:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	call	Error_code
	leave
	ret
os__ExecutableNotFoundError_msg_Interface_IError_method_wrapper:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	call	os__ExecutableNotFoundError_msg
	leave
	ret
os__ExecutableNotFoundError_code_Interface_IError_method_wrapper:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	call	Error_code
	leave
	ret
	.globl	IError_name_table
	.section	.data.rel.local,"aw"
IError_name_table:
	.quad	None___msg_Interface_IError_method_wrapper
	.quad	None___code_Interface_IError_method_wrapper
	.quad	0
	.quad	0
	.quad	Error_msg_Interface_IError_method_wrapper
	.quad	Error_code_Interface_IError_method_wrapper
	.quad	MessageError_msg_Interface_IError_method_wrapper
	.quad	MessageError_code_Interface_IError_method_wrapper
	.quad	flag__UnknownFlagError_msg_Interface_IError_method_wrapper
	.quad	flag__UnknownFlagError_code_Interface_IError_method_wrapper
	.quad	flag__ArgsCountError_msg_Interface_IError_method_wrapper
	.quad	flag__ArgsCountError_code_Interface_IError_method_wrapper
	.quad	os__Eof_msg_Interface_IError_method_wrapper
	.quad	os__Eof_code_Interface_IError_method_wrapper
	.quad	os__NotExpected_msg_Interface_IError_method_wrapper
	.quad	os__NotExpected_code_Interface_IError_method_wrapper
	.quad	os__FileNotOpenedError_msg_Interface_IError_method_wrapper
	.quad	os__FileNotOpenedError_code_Interface_IError_method_wrapper
	.quad	os__SizeOfTypeIs0Error_msg_Interface_IError_method_wrapper
	.quad	os__SizeOfTypeIs0Error_code_Interface_IError_method_wrapper
	.quad	os__ExecutableNotFoundError_msg_Interface_IError_method_wrapper
	.quad	os__ExecutableNotFoundError_code_Interface_IError_method_wrapper
	.text
I_None___to_Interface_IError:
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	$0, %ecx
	movq	-40(%rbp), %rax
	movq	-48(%rbp), %rdx
	movq	%rdx, (%rax)
	movq	-40(%rbp), %rax
	movl	%ecx, 8(%rax)
	movq	-40(%rbp), %rax
	movq	-48(%rbp), %rdx
	movq	%rdx, 16(%rax)
	movq	-40(%rbp), %rax
	movq	-48(%rbp), %rdx
	movq	%rdx, 24(%rax)
	movq	-40(%rbp), %rax
	popq	%rbp
	ret
I_MessageError_to_Interface_IError:
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	$3, %edi
	movq	-48(%rbp), %rdx
	movq	-48(%rbp), %rax
	leaq	16(%rax), %rsi
	movq	-40(%rbp), %rax
	movq	-48(%rbp), %rcx
	movq	%rcx, (%rax)
	movq	-40(%rbp), %rax
	movl	%edi, 8(%rax)
	movq	-40(%rbp), %rax
	movq	%rdx, 16(%rax)
	movq	-40(%rbp), %rax
	movq	%rsi, 24(%rax)
	movq	-40(%rbp), %rax
	popq	%rbp
	ret
I_flag__UnknownFlagError_to_Interface_IError:
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	$4, %ecx
	movq	-40(%rbp), %rax
	movq	-48(%rbp), %rdx
	movq	%rdx, (%rax)
	movq	-40(%rbp), %rax
	movl	%ecx, 8(%rax)
	movq	-40(%rbp), %rax
	movq	-48(%rbp), %rdx
	movq	%rdx, 16(%rax)
	movq	-40(%rbp), %rax
	movq	-48(%rbp), %rdx
	movq	%rdx, 24(%rax)
	movq	-40(%rbp), %rax
	popq	%rbp
	ret
I_flag__ArgsCountError_to_Interface_IError:
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	$5, %ecx
	movq	-40(%rbp), %rax
	movq	-48(%rbp), %rdx
	movq	%rdx, (%rax)
	movq	-40(%rbp), %rax
	movl	%ecx, 8(%rax)
	movq	-40(%rbp), %rax
	movq	-48(%rbp), %rdx
	movq	%rdx, 16(%rax)
	movq	-40(%rbp), %rax
	movq	-48(%rbp), %rdx
	movq	%rdx, 24(%rax)
	movq	-40(%rbp), %rax
	popq	%rbp
	ret
I_os__Eof_to_Interface_IError:
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	$6, %ecx
	movq	-40(%rbp), %rax
	movq	-48(%rbp), %rdx
	movq	%rdx, (%rax)
	movq	-40(%rbp), %rax
	movl	%ecx, 8(%rax)
	movq	-40(%rbp), %rax
	movq	-48(%rbp), %rdx
	movq	%rdx, 16(%rax)
	movq	-40(%rbp), %rax
	movq	-48(%rbp), %rdx
	movq	%rdx, 24(%rax)
	movq	-40(%rbp), %rax
	popq	%rbp
	ret
I_os__FileNotOpenedError_to_Interface_IError:
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	$8, %ecx
	movq	-40(%rbp), %rax
	movq	-48(%rbp), %rdx
	movq	%rdx, (%rax)
	movq	-40(%rbp), %rax
	movl	%ecx, 8(%rax)
	movq	-40(%rbp), %rax
	movq	-48(%rbp), %rdx
	movq	%rdx, 16(%rax)
	movq	-40(%rbp), %rax
	movq	-48(%rbp), %rdx
	movq	%rdx, 24(%rax)
	movq	-40(%rbp), %rax
	popq	%rbp
	ret
I_os__SizeOfTypeIs0Error_to_Interface_IError:
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	$9, %ecx
	movq	-40(%rbp), %rax
	movq	-48(%rbp), %rdx
	movq	%rdx, (%rax)
	movq	-40(%rbp), %rax
	movl	%ecx, 8(%rax)
	movq	-40(%rbp), %rax
	movq	-48(%rbp), %rdx
	movq	%rdx, 16(%rax)
	movq	-40(%rbp), %rax
	movq	-48(%rbp), %rdx
	movq	%rdx, 24(%rax)
	movq	-40(%rbp), %rax
	popq	%rbp
	ret
	.section	.rodata, "a"
.LC0:
	.string	"suffix_byte"
.LC1:
	.string	"suffix_word"
.LC2:
	.string	"suffix_long"
.LC3:
	.string	"suffix_quad"
.LC4:
	.string	"suffix_single"
.LC5:
	.string	"suffix_double"
.LC6:
	.string	"unknown enum value"
	.text
encoder__DataSize_str:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	movl	%edi, -20(%rbp)
	cmpl	$5, -20(%rbp)
	ja	.L90
	movl	-20(%rbp), %ecx
	leaq	0(,%rcx,4), %rsi
	leaq	.L92(%rip), %rcx
	movl	(%rsi,%rcx), %ecx
	movslq	%ecx, %rcx
	leaq	.L92(%rip), %rsi
	addq	%rsi, %rcx
	jmp	*%rcx
	.section	.rodata, "a"
.L92:
	.text
.L97:
	leaq	.LC0(%rip), %rax
	movq	%rdx, %rsi
	movabsq	$-4294967296, %rcx
	andq	%rsi, %rcx
	orq	$11, %rcx
	movq	%rcx, %rdx
	movq	%rdx, %rcx
	movl	%ecx, %esi
	movabsq	$4294967296, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	jmp	.L98
.L96:
	leaq	.LC1(%rip), %rax
	movq	%rdx, %rsi
	movabsq	$-4294967296, %rcx
	andq	%rsi, %rcx
	orq	$11, %rcx
	movq	%rcx, %rdx
	movq	%rdx, %rcx
	movl	%ecx, %esi
	movabsq	$4294967296, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	jmp	.L98
.L95:
	leaq	.LC2(%rip), %rax
	movq	%rdx, %rsi
	movabsq	$-4294967296, %rcx
	andq	%rsi, %rcx
	orq	$11, %rcx
	movq	%rcx, %rdx
	movq	%rdx, %rcx
	movl	%ecx, %esi
	movabsq	$4294967296, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	jmp	.L98
.L94:
	leaq	.LC3(%rip), %rax
	movq	%rdx, %rsi
	movabsq	$-4294967296, %rcx
	andq	%rsi, %rcx
	orq	$11, %rcx
	movq	%rcx, %rdx
	movq	%rdx, %rcx
	movl	%ecx, %esi
	movabsq	$4294967296, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	jmp	.L98
.L93:
	leaq	.LC4(%rip), %rax
	movq	%rdx, %rsi
	movabsq	$-4294967296, %rcx
	andq	%rsi, %rcx
	orq	$13, %rcx
	movq	%rcx, %rdx
	movq	%rdx, %rcx
	movl	%ecx, %esi
	movabsq	$4294967296, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	jmp	.L98
.L91:
	leaq	.LC5(%rip), %rax
	movq	%rdx, %rsi
	movabsq	$-4294967296, %rcx
	andq	%rsi, %rcx
	orq	$13, %rcx
	movq	%rcx, %rdx
	movq	%rdx, %rcx
	movl	%ecx, %esi
	movabsq	$4294967296, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	jmp	.L98
.L90:
	leaq	.LC6(%rip), %rax
	movq	%rdx, %rsi
	movabsq	$-4294967296, %rcx
	andq	%rsi, %rcx
	orq	$18, %rcx
	movq	%rcx, %rdx
	movq	%rdx, %rcx
	movl	%ecx, %esi
	movabsq	$4294967296, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %rdx
.L98:
	movq	-8(%rbp), %rbx
	leave
	ret
encoder__Number_to_sumtype_encoder__Expr:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rax
	movl	$40, %esi
	movq	%rax, %rdi
	call	memdup
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	leaq	16(%rax), %rcx
	movq	-40(%rbp), %rax
	movq	-8(%rbp), %rdx
	movq	%rdx, (%rax)
	movq	-40(%rbp), %rax
	movl	$174, 8(%rax)
	movq	-40(%rbp), %rax
	movq	%rcx, 16(%rax)
	movq	-40(%rbp), %rax
	leave
	ret
encoder__Ident_to_sumtype_encoder__Expr:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rax
	movl	$40, %esi
	movq	%rax, %rdi
	call	memdup
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	leaq	16(%rax), %rcx
	movq	-40(%rbp), %rax
	movq	-8(%rbp), %rdx
	movq	%rdx, (%rax)
	movq	-40(%rbp), %rax
	movl	$169, 8(%rax)
	movq	-40(%rbp), %rax
	movq	%rcx, 16(%rax)
	movq	-40(%rbp), %rax
	leave
	ret
encoder__Neg_to_sumtype_encoder__Expr:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rax
	movl	$48, %esi
	movq	%rax, %rdi
	call	memdup
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	leaq	24(%rax), %rcx
	movq	-40(%rbp), %rax
	movq	-8(%rbp), %rdx
	movq	%rdx, (%rax)
	movq	-40(%rbp), %rax
	movl	$176, 8(%rax)
	movq	-40(%rbp), %rax
	movq	%rcx, 16(%rax)
	movq	-40(%rbp), %rax
	leave
	ret
encoder__Binop_to_sumtype_encoder__Expr:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rax
	movl	$80, %esi
	movq	%rax, %rdi
	call	memdup
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	leaq	56(%rax), %rcx
	movq	-40(%rbp), %rax
	movq	-8(%rbp), %rdx
	movq	%rdx, (%rax)
	movq	-40(%rbp), %rax
	movl	$175, 8(%rax)
	movq	-40(%rbp), %rax
	movq	%rcx, 16(%rax)
	movq	-40(%rbp), %rax
	leave
	ret
encoder__Immediate_to_sumtype_encoder__Expr:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rax
	movl	$48, %esi
	movq	%rax, %rdi
	call	memdup
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	leaq	24(%rax), %rcx
	movq	-40(%rbp), %rax
	movq	-8(%rbp), %rdx
	movq	%rdx, (%rax)
	movq	-40(%rbp), %rax
	movl	$168, 8(%rax)
	movq	-40(%rbp), %rax
	movq	%rcx, 16(%rax)
	movq	-40(%rbp), %rax
	leave
	ret
encoder__Xmm_to_sumtype_encoder__Expr:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rax
	movl	$40, %esi
	movq	%rax, %rdi
	call	memdup
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	leaq	16(%rax), %rcx
	movq	-40(%rbp), %rax
	movq	-8(%rbp), %rdx
	movq	%rdx, (%rax)
	movq	-40(%rbp), %rax
	movl	$166, 8(%rax)
	movq	-40(%rbp), %rax
	movq	%rcx, 16(%rax)
	movq	-40(%rbp), %rax
	leave
	ret
encoder__Register_to_sumtype_encoder__Expr:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rax
	movl	$48, %esi
	movq	%rax, %rdi
	call	memdup
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	leaq	24(%rax), %rcx
	movq	-40(%rbp), %rax
	movq	-8(%rbp), %rdx
	movq	%rdx, (%rax)
	movq	-40(%rbp), %rax
	movl	$165, 8(%rax)
	movq	-40(%rbp), %rax
	movq	%rcx, 16(%rax)
	movq	-40(%rbp), %rax
	leave
	ret
encoder__Star_to_sumtype_encoder__Expr:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rax
	movl	$72, %esi
	movq	%rax, %rdi
	call	memdup
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	leaq	48(%rax), %rcx
	movq	-40(%rbp), %rax
	movq	-8(%rbp), %rdx
	movq	%rdx, (%rax)
	movq	-40(%rbp), %rax
	movl	$177, 8(%rax)
	movq	-40(%rbp), %rax
	movq	%rcx, 16(%rax)
	movq	-40(%rbp), %rax
	leave
	ret
encoder__Indirection_to_sumtype_encoder__Expr:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rax
	movl	$176, %esi
	movq	%rax, %rdi
	call	memdup
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	leaq	144(%rax), %rcx
	movq	-40(%rbp), %rax
	movq	-8(%rbp), %rdx
	movq	%rdx, (%rax)
	movq	-40(%rbp), %rax
	movl	$167, 8(%rax)
	movq	-40(%rbp), %rax
	movq	%rcx, 16(%rax)
	movq	-40(%rbp), %rax
	leave
	ret
Array_string_contains:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$32, %rsp
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movq	%rcx, %rdx
	movq	%rax, -32(%rbp)
	movq	%rdx, -24(%rbp)
	movl	$0, -4(%rbp)
	jmp	.L119
.L122:
	movq	24(%rbp), %rax
	movl	-4(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	leaq	(%rax,%rdx), %rcx
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdx
	movq	(%rcx), %rdi
	movq	8(%rcx), %rsi
	movq	%rdx, %rcx
	movq	%rax, %rdx
	call	fast_string_eq
	testb	%al, %al
	je	.L120
	movl	$1, %eax
	jmp	.L121
.L120:
	addl	$1, -4(%rbp)
.L119:
	movl	36(%rbp), %eax
	cmpl	%eax, -4(%rbp)
	jl	.L122
	movl	$0, %eax
.L121:
	leave
	ret
Array_encoder__DataSize_contains:
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edi, -20(%rbp)
	movl	$0, -4(%rbp)
	jmp	.L124
.L127:
	movq	24(%rbp), %rax
	movl	-4(%rbp), %edx
	movslq	%edx, %rdx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	cmpl	%eax, -20(%rbp)
	jne	.L125
	movl	$1, %eax
	jmp	.L126
.L125:
	addl	$1, -4(%rbp)
.L124:
	movl	36(%rbp), %eax
	cmpl	%eax, -4(%rbp)
	jl	.L127
	movl	$0, %eax
.L126:
	popq	%rbp
	ret
Array_string_index:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$32, %rsp
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movq	%rcx, %rdx
	movq	%rax, -32(%rbp)
	movq	%rdx, -24(%rbp)
	movq	24(%rbp), %rax
	movq	%rax, -8(%rbp)
	movl	$0, -12(%rbp)
	jmp	.L129
.L132:
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdx
	movq	-8(%rbp), %rcx
	movq	(%rcx), %rdi
	movq	8(%rcx), %rsi
	movq	%rdx, %rcx
	movq	%rax, %rdx
	call	fast_string_eq
	testb	%al, %al
	je	.L130
	movl	-12(%rbp), %eax
	jmp	.L131
.L130:
	addl	$1, -12(%rbp)
	addq	$16, -8(%rbp)
.L129:
	movl	36(%rbp), %eax
	cmpl	%eax, -12(%rbp)
	jl	.L132
	movl	$-1, %eax
.L131:
	leave
	ret
	.section	.rodata, "a"
.LC7:
	.string	"None__"
.LC8:
	.string	"voidptr"
.LC9:
	.string	"Error"
.LC10:
	.string	"MessageError"
.LC11:
	.string	"flag.UnknownFlagError"
.LC12:
	.string	"flag.ArgsCountError"
.LC13:
	.string	"os.Eof"
.LC14:
	.string	"os.NotExpected"
.LC15:
	.string	"os.FileNotOpenedError"
.LC16:
.LC17:
	.string	"os.ExecutableNotFoundError"
.LC18:
	.string	"unknown IError"
	.text
v_typeof_interface_IError:
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edi, -4(%rbp)
	movl	$0, %eax
	cmpl	%eax, -4(%rbp)
	jne	.L134
	leaq	.LC7(%rip), %rax
	jmp	.L135
.L134:
	movl	$1, %eax
	cmpl	%eax, -4(%rbp)
	jne	.L136
	leaq	.LC8(%rip), %rax
	jmp	.L135
.L136:
	movl	$2, %eax
	cmpl	%eax, -4(%rbp)
	jne	.L137
	leaq	.LC9(%rip), %rax
	jmp	.L135
.L137:
	movl	$3, %eax
	cmpl	%eax, -4(%rbp)
	jne	.L138
	leaq	.LC10(%rip), %rax
	jmp	.L135
.L138:
	movl	$4, %eax
	cmpl	%eax, -4(%rbp)
	jne	.L139
	leaq	.LC11(%rip), %rax
	jmp	.L135
.L139:
	movl	$5, %eax
	cmpl	%eax, -4(%rbp)
	jne	.L140
	leaq	.LC12(%rip), %rax
	jmp	.L135
.L140:
	movl	$6, %eax
	cmpl	%eax, -4(%rbp)
	jne	.L141
	leaq	.LC13(%rip), %rax
	jmp	.L135
.L141:
	movl	$7, %eax
	cmpl	%eax, -4(%rbp)
	jne	.L142
	leaq	.LC14(%rip), %rax
	jmp	.L135
.L142:
	movl	$8, %eax
	cmpl	%eax, -4(%rbp)
	jne	.L143
	leaq	.LC15(%rip), %rax
	jmp	.L135
.L143:
	movl	$9, %eax
	cmpl	%eax, -4(%rbp)
	jne	.L144
	leaq	.LC16(%rip), %rax
	jmp	.L135
.L144:
	movl	$10, %eax
	cmpl	%eax, -4(%rbp)
	jne	.L145
	leaq	.LC17(%rip), %rax
	jmp	.L135
.L145:
	leaq	.LC18(%rip), %rax
.L135:
	popq	%rbp
	ret
v_typeof_interface_idx_IError:
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edi, -4(%rbp)
	movl	$0, %eax
	cmpl	%eax, -4(%rbp)
	jne	.L147
	movl	$65609, %eax
	jmp	.L148
.L147:
	movl	$1, %eax
	cmpl	%eax, -4(%rbp)
	jne	.L149
	movl	$2, %eax
	jmp	.L148
.L149:
	movl	$2, %eax
	cmpl	%eax, -4(%rbp)
	jne	.L150
	movl	$74, %eax
	jmp	.L148
.L150:
	movl	$3, %eax
	cmpl	%eax, -4(%rbp)
	jne	.L151
	movl	$75, %eax
	jmp	.L148
.L151:
	movl	$4, %eax
	cmpl	%eax, -4(%rbp)
	jne	.L152
	movl	$65686, %eax
	jmp	.L148
.L152:
	movl	$5, %eax
	cmpl	%eax, -4(%rbp)
	jne	.L153
	movl	$65687, %eax
	jmp	.L148
.L153:
	movl	$6, %eax
	cmpl	%eax, -4(%rbp)
	jne	.L154
	movl	$113, %eax
	jmp	.L148
.L154:
	movl	$7, %eax
	cmpl	%eax, -4(%rbp)
	jne	.L155
	movl	$114, %eax
	jmp	.L148
.L155:
	movl	$8, %eax
	cmpl	%eax, -4(%rbp)
	jne	.L156
	movl	$65653, %eax
	jmp	.L148
.L156:
	movl	$9, %eax
	cmpl	%eax, -4(%rbp)
	jne	.L157
	movl	$65654, %eax
	jmp	.L148
.L157:
	movl	$10, %eax
	cmpl	%eax, -4(%rbp)
	jne	.L158
	movl	$65668, %eax
	jmp	.L148
.L158:
	movl	$29, %eax
.L148:
	popq	%rbp
	ret
	.section	.rodata, "a"
.LC19:
	.string	"encoder.Expr"
.LC20:
	.string	"encoder.Ident"
.LC21:
	.string	"encoder.Immediate"
.LC22:
	.string	"encoder.Register"
.LC23:
	.string	"encoder.Indirection"
.LC24:
	.string	"encoder.Number"
.LC25:
	.string	"encoder.Binop"
.LC26:
	.string	"encoder.Neg"
.LC27:
	.string	"encoder.Xmm"
.LC28:
	.string	"encoder.Star"
.LC29:
	.string	"unknown encoder.Expr"
	.text
	.globl	v_typeof_sumtype_encoder__Expr
v_typeof_sumtype_encoder__Expr:
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %eax
	subl	$165, %eax
	cmpl	$13, %eax
	ja	.L160
	movl	%eax, %eax
	leaq	0(,%rax,4), %rdx
	leaq	.L162(%rip), %rax
	movl	(%rdx,%rax), %eax
	cltq
	leaq	.L162(%rip), %rdx
	addq	%rdx, %rax
	jmp	*%rax
	.section	.rodata, "a"
.L162:
	.text
.L161:
	leaq	.LC19(%rip), %rax
	jmp	.L172
.L167:
	leaq	.LC20(%rip), %rax
	jmp	.L172
.L168:
	leaq	.LC21(%rip), %rax
	jmp	.L172
.L171:
	leaq	.LC22(%rip), %rax
	jmp	.L172
.L169:
	leaq	.LC23(%rip), %rax
	jmp	.L172
.L166:
	leaq	.LC24(%rip), %rax
	jmp	.L172
.L165:
	leaq	.LC25(%rip), %rax
	jmp	.L172
.L164:
	leaq	.LC26(%rip), %rax
	jmp	.L172
.L170:
	leaq	.LC27(%rip), %rax
	jmp	.L172
.L163:
	leaq	.LC28(%rip), %rax
	jmp	.L172
.L160:
	leaq	.LC29(%rip), %rax
.L172:
	popq	%rbp
	ret
	.globl	v_typeof_sumtype_idx_encoder__Expr
v_typeof_sumtype_idx_encoder__Expr:
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %eax
	subl	$165, %eax
	cmpl	$13, %eax
	ja	.L174
	movl	%eax, %eax
	leaq	0(,%rax,4), %rdx
	leaq	.L176(%rip), %rax
	movl	(%rdx,%rax), %eax
	cltq
	leaq	.L176(%rip), %rdx
	addq	%rdx, %rax
	jmp	*%rax
	.section	.rodata, "a"
.L176:
	.text
.L175:
	movl	$178, %eax
	jmp	.L186
.L181:
	movl	$169, %eax
	jmp	.L186
.L182:
	movl	$168, %eax
	jmp	.L186
.L185:
	movl	$165, %eax
	jmp	.L186
.L183:
	movl	$167, %eax
	jmp	.L186
.L180:
	movl	$174, %eax
	jmp	.L186
.L179:
	movl	$175, %eax
	jmp	.L186
.L178:
	movl	$176, %eax
	jmp	.L186
.L184:
	movl	$166, %eax
	jmp	.L186
.L177:
	movl	$177, %eax
	jmp	.L186
.L174:
	movl	$178, %eax
.L186:
	popq	%rbp
	ret
	.globl	strings__new_builder
strings__new_builder:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movl	%esi, -44(%rbp)
	leaq	-32(%rbp), %rax
	movl	-44(%rbp), %edx
	movl	$0, %r8d
	movl	$1, %ecx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array_with_default
	leaq	-32(%rbp), %rax
	addq	$28, %rax
	movl	$1, %esi
	movq	%rax, %rdi
	call	ArrayFlags_set
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movq	-40(%rbp), %rax
	leave
	ret
	.globl	strings__Builder_reuse_as_plain_u8_array
strings__Builder_reuse_as_plain_u8_array:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$28, %rax
	movl	$1, %esi
	movq	%rax, %rdi
	call	ArrayFlags_clear
	movq	-8(%rbp), %rcx
	movq	-16(%rbp), %rsi
	movq	(%rsi), %rax
	movq	8(%rsi), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	16(%rsi), %rax
	movq	24(%rsi), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movq	-8(%rbp), %rax
	leave
	ret
	.globl	strings__Builder_write_ptr
strings__Builder_write_ptr:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -20(%rbp)
	cmpl	$0, -20(%rbp)
	je	.L194
	movl	-20(%rbp), %edx
	movq	-16(%rbp), %rcx
	movq	-8(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	array_push_many
	jmp	.L191
.L194:
	nop
.L191:
	leave
	ret
	.globl	strings__Builder_write_rune
strings__Builder_write_rune:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movl	%esi, -44(%rbp)
	movl	$0, -5(%rbp)
	movb	$0, -1(%rbp)
	leaq	-5(%rbp), %rdx
	movl	-44(%rbp), %eax
	movq	%rdx, %rsi
	movl	%eax, %edi
	call	utf32_to_str_no_malloc
	movq	%rax, -32(%rbp)
	movq	%rdx, -24(%rbp)
	movl	-24(%rbp), %eax
	testl	%eax, %eax
	je	.L198
	movl	-24(%rbp), %edx
	movq	-32(%rbp), %rcx
	movq	-40(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	array_push_many
	jmp	.L195
.L198:
	nop
.L195:
	leave
	ret
	.globl	strings__Builder_write_runes
strings__Builder_write_runes:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movl	$0, -13(%rbp)
	movb	$0, -9(%rbp)
	movl	$0, -4(%rbp)
	jmp	.L200
.L203:
	movq	24(%rbp), %rax
	movl	-4(%rbp), %edx
	movslq	%edx, %rdx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	movl	%eax, -8(%rbp)
	leaq	-13(%rbp), %rdx
	movl	-8(%rbp), %eax
	movq	%rdx, %rsi
	movl	%eax, %edi
	call	utf32_to_str_no_malloc
	movq	%rax, -32(%rbp)
	movq	%rdx, -24(%rbp)
	movl	-24(%rbp), %eax
	testl	%eax, %eax
	je	.L204
	movl	-24(%rbp), %edx
	movq	-32(%rbp), %rcx
	movq	-40(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	array_push_many
	jmp	.L202
.L204:
	nop
.L202:
	addl	$1, -4(%rbp)
.L200:
	movl	36(%rbp), %eax
	cmpl	%eax, -4(%rbp)
	jl	.L203
	nop
	nop
	leave
	ret
	.globl	strings__Builder_clear
strings__Builder_clear:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$56, %rsp
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	24(%rax), %edx
	movq	-24(%rbp), %rbx
	leaq	-64(%rbp), %rax
	movl	$0, %r8d
	movl	$1, %ecx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array_with_default
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, (%rbx)
	movq	%rdx, 8(%rbx)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16(%rbx)
	movq	%rdx, 24(%rbx)
	nop
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	strings__Builder_write_u8
strings__Builder_write_u8:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, %eax
	movb	%al, -28(%rbp)
	movzbl	-28(%rbp), %eax
	movb	%al, -1(%rbp)
	leaq	-1(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	array_push
	nop
	leave
	ret
	.globl	strings__Builder_write_byte
strings__Builder_write_byte:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, %eax
	movb	%al, -28(%rbp)
	movzbl	-28(%rbp), %eax
	movb	%al, -1(%rbp)
	leaq	-1(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	array_push
	nop
	leave
	ret
	.globl	strings__Builder_write
strings__Builder_write:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$136, %rsp
	movq	%rdi, -136(%rbp)
	movq	%rsi, -144(%rbp)
	movl	36(%rbp), %eax
	testl	%eax, %eax
	jne	.L209
	movl	$0, -72(%rbp)
	leaq	-128(%rbp), %rcx
	leaq	-72(%rbp), %rax
	movl	$4, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_result_ok
	movq	-136(%rbp), %rax
	movq	-128(%rbp), %rcx
	movq	-120(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-112(%rbp), %rcx
	movq	-104(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-96(%rbp), %rcx
	movq	-88(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	jmp	.L208
.L209:
	movq	16(%rbp), %rax
	movq	24(%rbp), %rdx
	movq	%rax, -128(%rbp)
	movq	%rdx, -120(%rbp)
	movq	32(%rbp), %rax
	movq	40(%rbp), %rdx
	movq	%rax, -112(%rbp)
	movq	%rdx, -104(%rbp)
	movl	-108(%rbp), %edx
	movq	-120(%rbp), %rcx
	movq	-144(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	array_push_many
	movl	36(%rbp), %eax
	movl	%eax, -68(%rbp)
	leaq	-64(%rbp), %rcx
	leaq	-68(%rbp), %rax
	movl	$4, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_result_ok
	movq	-136(%rbp), %rax
	movq	-64(%rbp), %rcx
	movq	-56(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-48(%rbp), %rcx
	movq	-40(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
.L208:
	movq	-136(%rbp), %rax
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	strings__Builder_drain_builder
strings__Builder_drain_builder:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$104, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movl	%edx, -68(%rbp)
	movq	-64(%rbp), %rax
	movl	20(%rax), %eax
	testl	%eax, %eax
	jle	.L213
	movq	-64(%rbp), %rcx
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, -48(%rbp)
	movq	%rdx, -40(%rbp)
	movq	16(%rcx), %rax
	movq	24(%rcx), %rdx
	movq	%rax, -32(%rbp)
	movq	%rdx, -24(%rbp)
	movl	-28(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-56(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	array_push_many
.L213:
	movq	-64(%rbp), %rax
	movq	%rax, %rdi
	call	strings__Builder_free
	movq	-64(%rbp), %rbx
	leaq	-112(%rbp), %rax
	movl	-68(%rbp), %edx
	movl	%edx, %esi
	movq	%rax, %rdi
	call	strings__new_builder
	movq	-112(%rbp), %rax
	movq	-104(%rbp), %rdx
	movq	%rax, (%rbx)
	movq	%rdx, 8(%rbx)
	movq	-96(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rax, 16(%rbx)
	movq	%rdx, 24(%rbx)
	nop
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	strings__Builder_byte_at
strings__Builder_byte_at:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movl	-12(%rbp), %edi
	movq	-8(%rbp), %rcx
	subq	$32, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	24(%rcx), %rdx
	movq	%rax, 16(%rsi)
	movq	%rdx, 24(%rsi)
	call	array_get
	addq	$32, %rsp
	movzbl	(%rax), %eax
	leave
	ret
	.globl	strings__Builder_write_string
strings__Builder_write_string:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdx, %rcx
	movq	%rsi, %rax
	movq	%rdi, %rdx
	movq	%rcx, %rdx
	movq	%rax, -32(%rbp)
	movq	%rdx, -24(%rbp)
	movl	-24(%rbp), %eax
	testl	%eax, %eax
	je	.L219
	movl	-24(%rbp), %edx
	movq	-32(%rbp), %rcx
	movq	-8(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	array_push_many
	jmp	.L216
.L219:
	nop
.L216:
	leave
	ret
	.globl	strings__Builder_go_back
strings__Builder_go_back:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	subl	-12(%rbp), %eax
	movl	%eax, %edx
	movq	-8(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	array_trim
	nop
	leave
	ret
	.globl	strings__Builder_spart
	.hidden	strings__Builder_spart
strings__Builder_spart:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$40, %rsp
	movq	%rdi, -40(%rbp)
	movl	%esi, -44(%rbp)
	movl	%edx, -48(%rbp)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	cltq
	movq	%rax, %rdi
	call	malloc_noscan
	movq	%rax, -24(%rbp)
	movl	-48(%rbp), %eax
	movslq	%eax, %rdx
	movq	-40(%rbp), %rax
	movq	8(%rax), %rcx
	movl	-44(%rbp), %eax
	cltq
	addq	%rax, %rcx
	movq	-24(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	vmemcpy
	movl	-48(%rbp), %eax
	movslq	%eax, %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movb	$0, (%rax)
	movl	-48(%rbp), %edx
	movq	-24(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	tos
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	strings__Builder_cut_last
strings__Builder_cut_last:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movl	%esi, -44(%rbp)
	movq	-40(%rbp), %rax
	movl	20(%rax), %eax
	subl	-44(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-44(%rbp), %edx
	movl	-4(%rbp), %ecx
	movq	-40(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	strings__Builder_spart
	movq	%rax, -32(%rbp)
	movq	%rdx, -24(%rbp)
	movl	-4(%rbp), %edx
	movq	-40(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	array_trim
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdx
	leave
	ret
	.section	.rodata, "a"
.LC30:
	.string	""
	.text
	.globl	strings__Builder_cut_to
strings__Builder_cut_to:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$24, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	-24(%rbp), %rcx
	movl	20(%rcx), %ecx
	cmpl	%ecx, -28(%rbp)
	jle	.L226
	leaq	.LC30(%rip), %rax
	movq	%rdx, %rsi
	movabsq	$-4294967296, %rcx
	andq	%rsi, %rcx
	movq	%rcx, %rdx
	movq	%rdx, %rcx
	movl	%ecx, %esi
	movabsq	$4294967296, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	jmp	.L227
.L226:
	movq	-24(%rbp), %rax
	movl	20(%rax), %eax
	subl	-28(%rbp), %eax
	movl	%eax, %edx
	movq	-24(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	strings__Builder_cut_last
.L227:
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	strings__Builder_go_back_to
strings__Builder_go_back_to:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movl	-12(%rbp), %edx
	movq	-8(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	array_trim
	nop
	leave
	ret
	.globl	strings__Builder_writeln
strings__Builder_writeln:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rdx, %rcx
	movq	%rsi, %rax
	movq	%rdi, %rdx
	movq	%rcx, %rdx
	movq	%rax, -48(%rbp)
	movq	%rdx, -40(%rbp)
	movl	-40(%rbp), %eax
	testl	%eax, %eax
	jle	.L230
	movl	-40(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-24(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	array_push_many
.L230:
	movb	$10, -1(%rbp)
	leaq	-1(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	array_push
	nop
	leave
	ret
	.globl	strings__Builder_last_n
strings__Builder_last_n:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$24, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	-24(%rbp), %rcx
	movl	20(%rcx), %ecx
	cmpl	%ecx, -28(%rbp)
	jle	.L232
	leaq	.LC30(%rip), %rax
	movq	%rdx, %rsi
	movabsq	$-4294967296, %rcx
	andq	%rsi, %rcx
	movq	%rcx, %rdx
	movq	%rdx, %rcx
	movl	%ecx, %esi
	movabsq	$4294967296, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	jmp	.L233
.L232:
	movq	-24(%rbp), %rax
	movl	20(%rax), %eax
	subl	-28(%rbp), %eax
	movl	%eax, %ecx
	movl	-28(%rbp), %edx
	movq	-24(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	strings__Builder_spart
.L233:
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	strings__Builder_after
strings__Builder_after:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$24, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	-24(%rbp), %rcx
	movl	20(%rcx), %ecx
	cmpl	%ecx, -28(%rbp)
	jl	.L235
	leaq	.LC30(%rip), %rax
	movq	%rdx, %rsi
	movabsq	$-4294967296, %rcx
	andq	%rsi, %rcx
	movq	%rcx, %rdx
	movq	%rdx, %rcx
	movl	%ecx, %esi
	movabsq	$4294967296, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	jmp	.L236
.L235:
	movq	-24(%rbp), %rax
	movl	20(%rax), %eax
	subl	-28(%rbp), %eax
	movl	%eax, %edx
	movl	-28(%rbp), %ecx
	movq	-24(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	strings__Builder_spart
.L236:
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	strings__Builder_str
strings__Builder_str:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movb	$0, -9(%rbp)
	leaq	-9(%rbp), %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	array_push
	movq	-40(%rbp), %rax
	movl	20(%rax), %edx
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	memdup_noscan
	movq	%rax, -8(%rbp)
	movq	-40(%rbp), %rax
	movl	20(%rax), %eax
	leal	-1(%rax), %edx
	movq	-8(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	u8_vstring_with_len
	movq	%rax, -32(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-40(%rbp), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	array_trim
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdx
	leave
	ret
	.globl	strings__Builder_ensure_cap
strings__Builder_ensure_cap:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	24(%rax), %eax
	cmpl	%eax, -28(%rbp)
	jle	.L243
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	imull	-28(%rbp), %eax
	cltq
	movq	%rax, %rdi
	call	vcalloc
	movq	%rax, -8(%rbp)
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L242
	movq	-24(%rbp), %rax
	movl	20(%rax), %edx
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	imull	%edx, %eax
	movslq	%eax, %rdx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rcx
	movq	-8(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	vmemcpy
	movq	-24(%rbp), %rax
	addq	$28, %rax
	movl	$1, %esi
	movq	%rax, %rdi
	call	ArrayFlags_has
	testb	%al, %al
	je	.L242
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	call	_v_free
.L242:
	movq	-24(%rbp), %rax
	movq	-8(%rbp), %rdx
	movq	%rdx, 8(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-24(%rbp), %rax
	movl	-28(%rbp), %edx
	movl	%edx, 24(%rax)
	jmp	.L239
.L243:
	nop
.L239:
	leave
	ret
	.globl	strings__Builder_free
strings__Builder_free:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L246
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	call	_v_free
	movq	-8(%rbp), %rax
	movq	$0, 8(%rax)
.L246:
	nop
	leave
	ret
	.globl	math__bits__trailing_zeros_64
math__bits__trailing_zeros_64:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.L248
	movl	$64, %eax
	jmp	.L249
.L248:
	movq	-8(%rbp), %rax
	negq	%rax
	andq	-8(%rbp), %rax
	movabsq	$285870213051353865, %rdx
	imulq	%rdx, %rax
	shrq	$58, %rax
	movl	%eax, %esi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	_const_math__bits__de_bruijn64tab(%rip), %rax
	movq	8+_const_math__bits__de_bruijn64tab(%rip), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	16+_const_math__bits__de_bruijn64tab(%rip), %rax
	movq	24+_const_math__bits__de_bruijn64tab(%rip), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	%esi, %edi
	call	array_get
	addq	$32, %rsp
	movzbl	(%rax), %eax
	movzbl	%al, %eax
.L249:
	leave
	ret
	.globl	math__bits__mul_64
math__bits__mul_64:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	movq	%rdi, -104(%rbp)
	movq	%rsi, -112(%rbp)
	movl	$4294967295, %ecx
	andq	-104(%rbp), %rcx
	movq	%rcx, -24(%rbp)
	movq	-104(%rbp), %rcx
	shrq	$32, %rcx
	movq	%rcx, -32(%rbp)
	movl	$4294967295, %ecx
	andq	-112(%rbp), %rcx
	movq	%rcx, -40(%rbp)
	movq	-112(%rbp), %rcx
	shrq	$32, %rcx
	movq	%rcx, -48(%rbp)
	movq	-24(%rbp), %rcx
	imulq	-40(%rbp), %rcx
	movq	%rcx, -56(%rbp)
	movq	-32(%rbp), %rcx
	imulq	-40(%rbp), %rcx
	movq	-56(%rbp), %rsi
	shrq	$32, %rsi
	addq	%rsi, %rcx
	movq	%rcx, -64(%rbp)
	movl	$4294967295, %ecx
	andq	-64(%rbp), %rcx
	movq	%rcx, -72(%rbp)
	movq	-64(%rbp), %rcx
	shrq	$32, %rcx
	movq	%rcx, -80(%rbp)
	movq	-24(%rbp), %rcx
	imulq	-48(%rbp), %rcx
	addq	%rcx, -72(%rbp)
	movq	-32(%rbp), %rcx
	movq	%rcx, %rsi
	imulq	-48(%rbp), %rsi
	movq	-80(%rbp), %rcx
	addq	%rcx, %rsi
	movq	-72(%rbp), %rcx
	shrq	$32, %rcx
	addq	%rsi, %rcx
	movq	%rcx, -88(%rbp)
	movq	-104(%rbp), %rcx
	imulq	-112(%rbp), %rcx
	movq	%rcx, -96(%rbp)
	movq	-88(%rbp), %rax
	movq	-96(%rbp), %rdx
	movq	-8(%rbp), %rbx
	leave
	ret
	.section	.rodata, "a"
.LC31:
	.string	"common_parse_uint: wrong base "
.LC32:
	.string	" for "
.LC33:
	.string	"common_parse_uint: wrong bit size "
.LC34:
	.string	"common_parse_uint: integer overflow "
.LC35:
	.string	"common_parse_uint: syntax error "
	.text
	.globl	strconv__common_parse_uint
strconv__common_parse_uint:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$392, %rsp
	movq	%rdi, -360(%rbp)
	movq	%rsi, %rax
	movq	%rdx, %rsi
	movq	%rsi, %rdx
	movq	%rax, -384(%rbp)
	movq	%rdx, -376(%rbp)
	movl	%ecx, -364(%rbp)
	movl	%r8d, -368(%rbp)
	movl	%r9d, %edx
	movl	16(%rbp), %eax
	movb	%dl, -388(%rbp)
	movb	%al, -392(%rbp)
	movl	-368(%rbp), %ecx
	movl	-364(%rbp), %edx
	movq	-384(%rbp), %rsi
	movq	-376(%rbp), %rax
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	strconv__common_parse_uint2
	movq	%rax, -176(%rbp)
	movq	%rdx, -168(%rbp)
	movq	-176(%rbp), %rax
	movq	%rax, -24(%rbp)
	movl	-168(%rbp), %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -28(%rbp)
	je	.L253
	cmpb	$0, -388(%rbp)
	jne	.L254
	cmpb	$0, -392(%rbp)
	je	.L253
.L254:
	cmpl	$-1, -28(%rbp)
	je	.L255
	cmpl	$0, -28(%rbp)
	jns	.L256
	cmpl	$-3, -28(%rbp)
	je	.L257
	cmpl	$-2, -28(%rbp)
	je	.L258
	jmp	.L256
.L255:
	leaq	-352(%rbp), %rdx
	movl	$0, %eax
	movl	$15, %ecx
	movq	%rdx, %rdi
	rep stosq
	leaq	.LC31(%rip), %rax
	movq	%rax, -352(%rbp)
	movl	$30, -344(%rbp)
	movl	$1, -340(%rbp)
	movl	$65031, -336(%rbp)
	movl	-364(%rbp), %eax
	movl	%eax, -328(%rbp)
	leaq	.LC32(%rip), %rax
	movq	%rax, -312(%rbp)
	movl	$5, -304(%rbp)
	movl	$1, -300(%rbp)
	movl	$65040, -296(%rbp)
	movq	-384(%rbp), %rax
	movq	-376(%rbp), %rdx
	movq	%rax, -288(%rbp)
	movq	%rdx, -280(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -272(%rbp)
	movl	$1, -260(%rbp)
	leaq	-352(%rbp), %rax
	movq	%rax, %rsi
	movl	$3, %edi
	call	str_intp
	leaq	-160(%rbp), %rcx
	movq	%rax, %rsi
	movq	%rdx, %rdi
	movq	%rdx, %rax
	movq	%rax, %rdx
	movq	%rcx, %rdi
	call	_v_error
	movq	-360(%rbp), %rax
	pxor	%xmm0, %xmm0
	movups	%xmm0, (%rax)
	movups	%xmm0, 16(%rax)
	movups	%xmm0, 32(%rax)
	movq	-360(%rbp), %rax
	movb	$1, (%rax)
	movq	-360(%rbp), %rcx
	movq	-160(%rbp), %rax
	movq	-152(%rbp), %rdx
	movq	%rax, 8(%rcx)
	movq	%rdx, 16(%rcx)
	movq	-144(%rbp), %rax
	movq	-136(%rbp), %rdx
	movq	%rax, 24(%rcx)
	movq	%rdx, 32(%rcx)
	jmp	.L252
.L258:
	leaq	-352(%rbp), %rdx
	movl	$0, %eax
	movl	$15, %ecx
	movq	%rdx, %rdi
	rep stosq
	leaq	.LC33(%rip), %rax
	movq	%rax, -352(%rbp)
	movl	$34, -344(%rbp)
	movl	$1, -340(%rbp)
	movl	$65031, -336(%rbp)
	movl	-368(%rbp), %eax
	movl	%eax, -328(%rbp)
	leaq	.LC32(%rip), %rax
	movq	%rax, -312(%rbp)
	movl	$5, -304(%rbp)
	movl	$1, -300(%rbp)
	movl	$65040, -296(%rbp)
	movq	-384(%rbp), %rax
	movq	-376(%rbp), %rdx
	movq	%rax, -288(%rbp)
	movq	%rdx, -280(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -272(%rbp)
	movl	$1, -260(%rbp)
	leaq	-352(%rbp), %rax
	movq	%rax, %rsi
	movl	$3, %edi
	call	str_intp
	leaq	-128(%rbp), %rcx
	movq	%rax, %rsi
	movq	%rdx, %rdi
	movq	%rdx, %rax
	movq	%rax, %rdx
	movq	%rcx, %rdi
	call	_v_error
	movq	-360(%rbp), %rax
	pxor	%xmm0, %xmm0
	movups	%xmm0, (%rax)
	movups	%xmm0, 16(%rax)
	movups	%xmm0, 32(%rax)
	movq	-360(%rbp), %rax
	movb	$1, (%rax)
	movq	-360(%rbp), %rcx
	movq	-128(%rbp), %rax
	movq	-120(%rbp), %rdx
	movq	%rax, 8(%rcx)
	movq	%rdx, 16(%rcx)
	movq	-112(%rbp), %rax
	movq	-104(%rbp), %rdx
	movq	%rax, 24(%rcx)
	movq	%rdx, 32(%rcx)
	jmp	.L252
.L257:
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -352(%rbp)
	movaps	%xmm0, -336(%rbp)
	movaps	%xmm0, -320(%rbp)
	movaps	%xmm0, -304(%rbp)
	movaps	%xmm0, -288(%rbp)
	leaq	.LC34(%rip), %rax
	movq	%rax, -352(%rbp)
	movl	$36, -344(%rbp)
	movl	$1, -340(%rbp)
	movl	$65040, -336(%rbp)
	movq	-384(%rbp), %rax
	movq	-376(%rbp), %rdx
	movq	%rax, -328(%rbp)
	movq	%rdx, -320(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -312(%rbp)
	movl	$1, -300(%rbp)
	leaq	-352(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	leaq	-96(%rbp), %rcx
	movq	%rax, %rsi
	movq	%rdx, %rdi
	movq	%rdx, %rax
	movq	%rax, %rdx
	movq	%rcx, %rdi
	call	_v_error
	movq	-360(%rbp), %rax
	pxor	%xmm0, %xmm0
	movups	%xmm0, (%rax)
	movups	%xmm0, 16(%rax)
	movups	%xmm0, 32(%rax)
	movq	-360(%rbp), %rax
	movb	$1, (%rax)
	movq	-360(%rbp), %rcx
	movq	-96(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rax, 8(%rcx)
	movq	%rdx, 16(%rcx)
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, 24(%rcx)
	movq	%rdx, 32(%rcx)
	jmp	.L252
.L256:
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -352(%rbp)
	movaps	%xmm0, -336(%rbp)
	movaps	%xmm0, -320(%rbp)
	movaps	%xmm0, -304(%rbp)
	movaps	%xmm0, -288(%rbp)
	leaq	.LC35(%rip), %rax
	movq	%rax, -352(%rbp)
	movl	$32, -344(%rbp)
	movl	$1, -340(%rbp)
	movl	$65040, -336(%rbp)
	movq	-384(%rbp), %rax
	movq	-376(%rbp), %rdx
	movq	%rax, -328(%rbp)
	movq	%rdx, -320(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -312(%rbp)
	movl	$1, -300(%rbp)
	leaq	-352(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	leaq	-64(%rbp), %rcx
	movq	%rax, %rsi
	movq	%rdx, %rdi
	movq	%rdx, %rax
	movq	%rax, %rdx
	movq	%rcx, %rdi
	call	_v_error
	movq	-360(%rbp), %rax
	pxor	%xmm0, %xmm0
	movups	%xmm0, (%rax)
	movups	%xmm0, 16(%rax)
	movups	%xmm0, 32(%rax)
	movq	-360(%rbp), %rax
	movb	$1, (%rax)
	movq	-360(%rbp), %rcx
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 8(%rcx)
	movq	%rdx, 16(%rcx)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 24(%rcx)
	movq	%rdx, 32(%rcx)
	jmp	.L252
.L253:
	movq	-24(%rbp), %rax
	movq	%rax, -232(%rbp)
	leaq	-224(%rbp), %rcx
	leaq	-232(%rbp), %rax
	movl	$8, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_result_ok
	movq	-360(%rbp), %rax
	movq	-224(%rbp), %rcx
	movq	-216(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-208(%rbp), %rcx
	movq	-200(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-192(%rbp), %rcx
	movq	-184(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
.L252:
	movq	-360(%rbp), %rax
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	strconv__common_parse_uint2
strconv__common_parse_uint2:
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rsi, %rax
	movq	%rdi, %r10
	movq	%r10, %rsi
	movq	%r11, %rdi
	movq	%rax, %rdi
	movq	%rsi, -80(%rbp)
	movq	%rdi, -72(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -88(%rbp)
	movl	-72(%rbp), %eax
	testl	%eax, %eax
	jg	.L262
	movl	$0, %r8d
	movq	%r9, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$1, %rax
	movq	%rax, %r9
	jmp	.L263
.L262:
	movl	-88(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-84(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$0, -8(%rbp)
	jne	.L264
	movl	$10, -8(%rbp)
	movq	-80(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$48, %al
	jne	.L264
	movq	-80(%rbp), %rax
	addq	$1, %rax
	movzbl	(%rax), %eax
	orl	$32, %eax
	movb	%al, -30(%rbp)
	movl	-72(%rbp), %eax
	cmpl	$2, %eax
	jle	.L265
	cmpb	$98, -30(%rbp)
	jne	.L266
	movl	$2, -8(%rbp)
	addl	$2, -12(%rbp)
	jmp	.L267
.L266:
	cmpb	$111, -30(%rbp)
	jne	.L268
	movl	$8, -8(%rbp)
	addl	$2, -12(%rbp)
	jmp	.L267
.L268:
	cmpb	$120, -30(%rbp)
	jne	.L267
	movl	$16, -8(%rbp)
	addl	$2, -12(%rbp)
.L267:
	movq	-80(%rbp), %rdx
	movl	-12(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	cmpb	$95, %al
	jne	.L264
	addl	$1, -12(%rbp)
	jmp	.L264
.L265:
	movl	-72(%rbp), %eax
	cmpl	$1, %eax
	jle	.L269
	movq	-80(%rbp), %rax
	addq	$1, %rax
	movzbl	(%rax), %eax
	cmpb	$47, %al
	jbe	.L269
	movq	-80(%rbp), %rax
	addq	$1, %rax
	movzbl	(%rax), %eax
	cmpb	$57, %al
	ja	.L269
	movl	$10, -8(%rbp)
	addl	$1, -12(%rbp)
	jmp	.L264
.L269:
	movl	$8, -8(%rbp)
	addl	$1, -12(%rbp)
.L264:
	cmpl	$0, -4(%rbp)
	jne	.L270
	movl	$32, -4(%rbp)
	jmp	.L271
.L270:
	cmpl	$0, -4(%rbp)
	js	.L272
	cmpl	$64, -4(%rbp)
	jle	.L271
.L272:
	movl	$0, %r8d
	movq	%r9, %rdx
	movabsq	$-4294967296, %rax
	andq	%rax, %rdx
	movl	$4294967294, %eax
	orq	%rdx, %rax
	movq	%rax, %r9
	jmp	.L263
.L271:
	movq	$-1, %rcx
	movl	-8(%rbp), %eax
	movslq	%eax, %rdi
	movq	%rcx, %rax
	movl	$0, %edx
	divq	%rdi
	addq	$1, %rax
	movq	%rax, -40(%rbp)
	cmpl	$64, -4(%rbp)
	je	.L273
	movl	-4(%rbp), %eax
	movl	$1, %edx
	movl	%eax, %ecx
	salq	%cl, %rdx
	movq	%rdx, %rax
	subq	$1, %rax
	jmp	.L274
.L273:
	movq	$-1, %rax
.L274:
	movq	%rax, -48(%rbp)
	movq	$0, -24(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.L275
.L288:
	movq	-80(%rbp), %rdx
	movl	-28(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	movb	%al, -29(%rbp)
	cmpb	$95, -29(%rbp)
	jne	.L276
	movl	-28(%rbp), %eax
	cmpl	-12(%rbp), %eax
	je	.L277
	movl	-72(%rbp), %eax
	subl	$1, %eax
	cmpl	%eax, -28(%rbp)
	jl	.L278
.L277:
	movl	$0, %r8d
	movq	%r9, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$1, %rax
	movq	%rax, %r9
	jmp	.L263
.L278:
	movq	-80(%rbp), %rax
	movl	-28(%rbp), %edx
	movslq	%edx, %rdx
	subq	$1, %rdx
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	cmpb	$95, %al
	je	.L279
	movq	-80(%rbp), %rax
	movl	-28(%rbp), %edx
	movslq	%edx, %rdx
	addq	$1, %rdx
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	cmpb	$95, %al
	jne	.L290
.L279:
	movl	$0, %r8d
	movq	%r9, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$1, %rax
	movq	%rax, %r9
	jmp	.L263
.L276:
	subb	$48, -29(%rbp)
	movzbl	-29(%rbp), %eax
	cmpl	%eax, -8(%rbp)
	jg	.L282
	subb	$7, -29(%rbp)
.L282:
	movzbl	-29(%rbp), %eax
	cmpl	%eax, -8(%rbp)
	jg	.L283
	subb	$32, -29(%rbp)
.L283:
	movzbl	-29(%rbp), %eax
	cmpl	%eax, -8(%rbp)
	jg	.L284
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movq	-24(%rbp), %r8
	movl	%eax, %edx
	movq	%r9, %rcx
	movabsq	$-4294967296, %rax
	andq	%rcx, %rax
	orq	%rdx, %rax
	movq	%rax, %r9
	jmp	.L263
.L284:
	movq	-24(%rbp), %rax
	cmpq	-40(%rbp), %rax
	jb	.L285
	movq	-48(%rbp), %r8
	movq	%r9, %rdx
	movabsq	$-4294967296, %rax
	andq	%rax, %rdx
	movl	$4294967293, %eax
	orq	%rdx, %rax
	movq	%rax, %r9
	jmp	.L263
.L285:
	movl	-8(%rbp), %eax
	cltq
	movq	-24(%rbp), %rdx
	imulq	%rdx, %rax
	movq	%rax, -24(%rbp)
	movzbl	-29(%rbp), %edx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jb	.L286
	movq	-56(%rbp), %rax
	cmpq	%rax, -48(%rbp)
	jnb	.L287
.L286:
	movq	-48(%rbp), %r8
	movq	%r9, %rdx
	movabsq	$-4294967296, %rax
	andq	%rax, %rdx
	movl	$4294967293, %eax
	orq	%rdx, %rax
	movq	%rax, %r9
	jmp	.L263
.L287:
	movq	-56(%rbp), %rax
	movq	%rax, -24(%rbp)
	jmp	.L281
.L290:
	nop
.L281:
	addl	$1, -28(%rbp)
.L275:
	movl	-72(%rbp), %eax
	cmpl	%eax, -28(%rbp)
	jl	.L288
	movq	-24(%rbp), %r8
	movq	%r9, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, %r9
.L263:
	movq	%r8, %rax
	movq	%r9, %rdx
	popq	%rbp
	ret
	.globl	strconv__common_parse_int
strconv__common_parse_int:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$296, %rsp
	movq	%rdi, -264(%rbp)
	movq	%rsi, %rax
	movq	%rdx, %rsi
	movq	%rsi, %rdx
	movq	%rax, -288(%rbp)
	movq	%rdx, -280(%rbp)
	movl	%ecx, -268(%rbp)
	movl	%r8d, -272(%rbp)
	movl	%r9d, %edx
	movl	16(%rbp), %eax
	movb	%dl, -292(%rbp)
	movb	%al, -296(%rbp)
	movl	-280(%rbp), %eax
	testl	%eax, %eax
	jg	.L292
	movq	$0, -168(%rbp)
	leaq	-256(%rbp), %rcx
	leaq	-168(%rbp), %rax
	movl	$8, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_result_ok
	movq	-264(%rbp), %rax
	movq	-256(%rbp), %rcx
	movq	-248(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-240(%rbp), %rcx
	movq	-232(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-224(%rbp), %rcx
	movq	-216(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	jmp	.L291
.L292:
	movl	-272(%rbp), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.L294
	movl	$32, -20(%rbp)
.L294:
	movq	-288(%rbp), %rax
	movq	-280(%rbp), %rdx
	movq	%rax, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movb	$0, -21(%rbp)
	movq	-64(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$43, %al
	jne	.L295
	movl	-56(%rbp), %eax
	leal	-1(%rax), %edx
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	tos
	movq	%rax, -64(%rbp)
	movq	%rdx, -56(%rbp)
	jmp	.L296
.L295:
	movq	-64(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$45, %al
	jne	.L296
	movb	$1, -21(%rbp)
	movl	-56(%rbp), %eax
	leal	-1(%rax), %edx
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	tos
	movq	%rax, -64(%rbp)
	movq	%rdx, -56(%rbp)
.L296:
	movzbl	-296(%rbp), %edi
	movzbl	-292(%rbp), %r9d
	leaq	-112(%rbp), %rax
	movl	-20(%rbp), %r8d
	movl	-268(%rbp), %ecx
	movq	-64(%rbp), %rsi
	movq	-56(%rbp), %rdx
	subq	$8, %rsp
	pushq	%rdi
	movq	%rax, %rdi
	call	strconv__common_parse_uint
	addq	$16, %rsp
	movzbl	-112(%rbp), %eax
	testb	%al, %al
	je	.L297
	leaq	-112(%rbp), %rcx
	leaq	-256(%rbp), %rax
	movl	$40, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy
	movq	-264(%rbp), %rax
	movq	-256(%rbp), %rcx
	movq	-248(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-240(%rbp), %rcx
	movq	-232(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-224(%rbp), %rcx
	movq	-216(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	jmp	.L291
.L297:
	leaq	-112(%rbp), %rax
	addq	$40, %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.L298
	movq	$0, -176(%rbp)
	leaq	-256(%rbp), %rcx
	leaq	-176(%rbp), %rax
	movl	$8, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_result_ok
	movq	-264(%rbp), %rax
	movq	-256(%rbp), %rcx
	movq	-248(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-240(%rbp), %rcx
	movq	-232(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-224(%rbp), %rcx
	movq	-216(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	jmp	.L291
.L298:
	movl	-20(%rbp), %eax
	subl	$1, %eax
	movl	$1, %edx
	movl	%eax, %ecx
	salq	%cl, %rdx
	movq	%rdx, %rax
	movq	%rax, -40(%rbp)
	cmpb	$0, -21(%rbp)
	jne	.L299
	movq	-32(%rbp), %rax
	cmpq	-40(%rbp), %rax
	jb	.L299
	movq	-40(%rbp), %rax
	subq	$1, %rax
	movq	%rax, -184(%rbp)
	leaq	-256(%rbp), %rcx
	leaq	-184(%rbp), %rax
	movl	$8, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_result_ok
	movq	-264(%rbp), %rax
	movq	-256(%rbp), %rcx
	movq	-248(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-240(%rbp), %rcx
	movq	-232(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-224(%rbp), %rcx
	movq	-216(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	jmp	.L291
.L299:
	cmpb	$0, -21(%rbp)
	je	.L300
	movq	-32(%rbp), %rax
	cmpq	%rax, -40(%rbp)
	jnb	.L300
	movq	-40(%rbp), %rax
	negq	%rax
	movq	%rax, -192(%rbp)
	leaq	-256(%rbp), %rcx
	leaq	-192(%rbp), %rax
	movl	$8, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_result_ok
	movq	-264(%rbp), %rax
	movq	-256(%rbp), %rcx
	movq	-248(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-240(%rbp), %rcx
	movq	-232(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-224(%rbp), %rcx
	movq	-216(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	jmp	.L291
.L300:
	cmpb	$0, -21(%rbp)
	je	.L301
	movq	-32(%rbp), %rax
	negq	%rax
	movq	%rax, -200(%rbp)
	leaq	-160(%rbp), %rcx
	leaq	-200(%rbp), %rax
	movl	$8, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_result_ok
	jmp	.L302
.L301:
	movq	-32(%rbp), %rax
	movq	%rax, -208(%rbp)
	leaq	-160(%rbp), %rcx
	leaq	-208(%rbp), %rax
	movl	$8, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_result_ok
.L302:
	movq	-264(%rbp), %rax
	movq	-160(%rbp), %rcx
	movq	-152(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-144(%rbp), %rcx
	movq	-136(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-128(%rbp), %rcx
	movq	-120(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
.L291:
	movq	-264(%rbp), %rax
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	strconv__parse_int
strconv__parse_int:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, %rax
	movq	%rdx, %rsi
	movq	%rsi, %rdx
	movq	%rax, -32(%rbp)
	movq	%rdx, -24(%rbp)
	movl	%ecx, -12(%rbp)
	movl	%r8d, -16(%rbp)
	movq	-8(%rbp), %rax
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rdx
	subq	$8, %rsp
	pushq	$1
	movl	$1, %r9d
	movl	%edi, %r8d
	movq	%rax, %rdi
	call	strconv__common_parse_int
	addq	$16, %rsp
	movq	-8(%rbp), %rax
	leave
	ret
	.globl	strconv__Dec64_get_string_64
	.hidden	strconv__Dec64_get_string_64
strconv__Dec64_get_string_64:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$144, %rsp
	movq	%rsi, %rax
	movq	%rdi, %r9
	movq	%r9, %rsi
	movq	%r10, %rdi
	movq	%rax, %rdi
	movq	%rsi, -128(%rbp)
	movq	%rdi, -120(%rbp)
	movl	%edx, %eax
	movl	%ecx, -136(%rbp)
	movl	%r8d, -140(%rbp)
	movb	%al, -132(%rbp)
	movl	-136(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-140(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	movq	-128(%rbp), %rax
	movq	%rax, -16(%rbp)
	movl	-120(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, %rdi
	call	strconv__dec_digits
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -28(%rbp)
	movl	-48(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jle	.L307
	movl	-48(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -28(%rbp)
.L307:
	movl	-24(%rbp), %eax
	leal	8(%rax), %edx
	movl	-28(%rbp), %eax
	leal	(%rdx,%rax), %esi
	leaq	-112(%rbp), %rax
	movl	$0, %r8d
	movl	$1, %ecx
	movl	$0, %edx
	movq	%rax, %rdi
	call	__new_array_with_default
	movl	$0, -32(%rbp)
	cmpb	$0, -132(%rbp)
	je	.L308
	movq	-104(%rbp), %rdx
	movl	-32(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movb	$45, (%rax)
	addl	$1, -32(%rbp)
.L308:
	movl	$0, -36(%rbp)
	cmpl	$1, -24(%rbp)
	jg	.L309
	movl	$1, -36(%rbp)
.L309:
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.L310
	movq	8+_const_strconv__ten_pow_table_64(%rip), %rdx
	movl	-24(%rbp), %eax
	subl	-4(%rbp), %eax
	cltq
	salq	$3, %rax
	subq	$8, %rax
	addq	%rdx, %rax
	movq	(%rax), %rdx
	movq	%rdx, %rax
	salq	$2, %rax
	addq	%rdx, %rax
	addq	%rax, -16(%rbp)
	movq	8+_const_strconv__ten_pow_table_64(%rip), %rdx
	movl	-24(%rbp), %eax
	subl	-4(%rbp), %eax
	cltq
	salq	$3, %rax
	addq	%rdx, %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rax
	movl	$0, %edx
	divq	%rdi
	movq	%rax, -16(%rbp)
	movq	-128(%rbp), %rax
	movq	8+_const_strconv__ten_pow_table_64(%rip), %rcx
	movl	-24(%rbp), %edx
	subl	-4(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rcx, %rdx
	movq	(%rdx), %rsi
	movl	$0, %edx
	divq	%rsi
	cmpq	-16(%rbp), %rax
	jnb	.L311
	addl	$1, -20(%rbp)
	addl	$1, -4(%rbp)
.L311:
	movl	-4(%rbp), %eax
	movl	%eax, -24(%rbp)
.L310:
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %eax
	addl	%edx, %eax
	movl	%eax, -56(%rbp)
	movl	$0, -40(%rbp)
.L314:
	movl	-24(%rbp), %eax
	subl	-36(%rbp), %eax
	subl	$1, %eax
	cmpl	%eax, -40(%rbp)
	jge	.L328
	movq	-16(%rbp), %rcx
	movabsq	$-3689348814741910323, %rdx
	movq	%rcx, %rax
	mulq	%rdx
	shrq	$3, %rdx
	movq	%rdx, %rax
	salq	$2, %rax
	addq	%rdx, %rax
	addq	%rax, %rax
	subq	%rax, %rcx
	movq	%rcx, %rdx
	movl	%edx, %ecx
	movq	-104(%rbp), %rdx
	movl	-56(%rbp), %eax
	subl	-40(%rbp), %eax
	cltq
	addq	%rdx, %rax
	leal	48(%rcx), %edx
	movb	%dl, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$-3689348814741910323, %rdx
	mulq	%rdx
	movq	%rdx, %rax
	shrq	$3, %rax
	movq	%rax, -16(%rbp)
	addl	$1, -32(%rbp)
	addl	$1, -40(%rbp)
	jmp	.L314
.L328:
	nop
	cmpl	$0, -136(%rbp)
	jne	.L315
	movq	-104(%rbp), %rdx
	movl	-32(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movb	$0, (%rax)
	movq	-104(%rbp), %rax
	movl	-32(%rbp), %edx
	movl	%edx, %esi
	movq	%rax, %rdi
	call	tos
	jmp	.L325
.L315:
	cmpl	$0, -24(%rbp)
	jle	.L317
	movq	-104(%rbp), %rdx
	movl	-56(%rbp), %eax
	subl	-40(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movb	$46, (%rax)
	addl	$1, -40(%rbp)
	addl	$1, -32(%rbp)
.L317:
	movl	-56(%rbp), %eax
	subl	-40(%rbp), %eax
	testl	%eax, %eax
	js	.L321
	movq	-16(%rbp), %rcx
	movabsq	$-3689348814741910323, %rdx
	movq	%rcx, %rax
	mulq	%rdx
	shrq	$3, %rdx
	movq	%rdx, %rax
	salq	$2, %rax
	addq	%rdx, %rax
	addq	%rax, %rax
	subq	%rax, %rcx
	movq	%rcx, %rdx
	movl	%edx, %ecx
	movq	-104(%rbp), %rdx
	movl	-56(%rbp), %eax
	subl	-40(%rbp), %eax
	cltq
	addq	%rdx, %rax
	leal	48(%rcx), %edx
	movb	%dl, (%rax)
	addl	$1, -32(%rbp)
.L321:
	cmpl	$0, -28(%rbp)
	jle	.L329
	movq	-104(%rbp), %rdx
	movl	-32(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movb	$48, (%rax)
	addl	$1, -32(%rbp)
	subl	$1, -28(%rbp)
	jmp	.L321
.L329:
	nop
	movq	-104(%rbp), %rdx
	movl	-32(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movb	$101, (%rax)
	addl	$1, -32(%rbp)
	movl	-20(%rbp), %edx
	movl	-52(%rbp), %eax
	addl	%edx, %eax
	subl	$1, %eax
	movl	%eax, -44(%rbp)
	cmpl	$0, -44(%rbp)
	jns	.L322
	movq	-104(%rbp), %rdx
	movl	-32(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movb	$45, (%rax)
	addl	$1, -32(%rbp)
	negl	-44(%rbp)
	jmp	.L323
.L322:
	movq	-104(%rbp), %rdx
	movl	-32(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movb	$43, (%rax)
	addl	$1, -32(%rbp)
.L323:
	movl	-44(%rbp), %edx
	movslq	%edx, %rax
	imulq	$1717986919, %rax, %rax
	shrq	$32, %rax
	movl	%eax, %ecx
	sarl	$2, %ecx
	movl	%edx, %eax
	sarl	$31, %eax
	subl	%eax, %ecx
	movl	%ecx, %eax
	sall	$2, %eax
	addl	%ecx, %eax
	addl	%eax, %eax
	subl	%eax, %edx
	movl	%edx, -60(%rbp)
	movl	-44(%rbp), %eax
	movslq	%eax, %rdx
	imulq	$1717986919, %rdx, %rdx
	shrq	$32, %rdx
	movl	%edx, %ecx
	sarl	$2, %ecx
	cltd
	movl	%ecx, %eax
	subl	%edx, %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edx
	movslq	%edx, %rax
	imulq	$1717986919, %rax, %rax
	shrq	$32, %rax
	movl	%eax, %ecx
	sarl	$2, %ecx
	movl	%edx, %eax
	sarl	$31, %eax
	subl	%eax, %ecx
	movl	%ecx, %eax
	sall	$2, %eax
	addl	%ecx, %eax
	addl	%eax, %eax
	subl	%eax, %edx
	movl	%edx, -64(%rbp)
	movl	-44(%rbp), %eax
	movslq	%eax, %rdx
	imulq	$1717986919, %rdx, %rdx
	shrq	$32, %rdx
	movl	%edx, %ecx
	sarl	$2, %ecx
	cltd
	movl	%ecx, %eax
	subl	%edx, %eax
	movl	%eax, -68(%rbp)
	cmpl	$0, -68(%rbp)
	jle	.L324
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	movq	-104(%rbp), %rdx
	movl	-32(%rbp), %eax
	cltq
	addq	%rdx, %rax
	leal	48(%rcx), %edx
	movb	%dl, (%rax)
	addl	$1, -32(%rbp)
.L324:
	movl	-64(%rbp), %eax
	movl	%eax, %ecx
	movq	-104(%rbp), %rdx
	movl	-32(%rbp), %eax
	cltq
	addq	%rdx, %rax
	leal	48(%rcx), %edx
	movb	%dl, (%rax)
	addl	$1, -32(%rbp)
	movl	-60(%rbp), %eax
	movl	%eax, %ecx
	movq	-104(%rbp), %rdx
	movl	-32(%rbp), %eax
	cltq
	addq	%rdx, %rax
	leal	48(%rcx), %edx
	movb	%dl, (%rax)
	addl	$1, -32(%rbp)
	movq	-104(%rbp), %rdx
	movl	-32(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movb	$0, (%rax)
	movq	-104(%rbp), %rax
	movl	-32(%rbp), %edx
	movl	%edx, %esi
	movq	%rax, %rdi
	call	tos
.L325:
	leave
	ret
	.globl	strconv__f64_to_decimal_exact_int
	.hidden	strconv__f64_to_decimal_exact_int
strconv__f64_to_decimal_exact_int:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$56, %rsp
	movq	%rdi, -152(%rbp)
	movq	%rsi, -160(%rbp)
	movq	%rdx, -168(%rbp)
	movq	$0, -48(%rbp)
	movl	$0, -40(%rbp)
	movq	-168(%rbp), %rax
	subq	$1023, %rax
	movq	%rax, -8(%rbp)
	movl	$52, %eax
	movl	%eax, %eax
	cmpq	-8(%rbp), %rax
	jnb	.L331
	movq	-152(%rbp), %rcx
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-152(%rbp), %rax
	movb	$0, 16(%rax)
	jmp	.L332
.L331:
	movl	$52, %eax
	movl	%eax, %eax
	subq	-8(%rbp), %rax
	movq	%rax, -16(%rbp)
	movabsq	$4503599627370496, %rax
	orq	-160(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	movl	%eax, %edx
	movq	-24(%rbp), %rax
	movl	%edx, %ecx
	shrq	%cl, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	-16(%rbp), %rdx
	movl	%edx, %ecx
	salq	%cl, %rax
	cmpq	%rax, -24(%rbp)
	je	.L333
	movq	-152(%rbp), %rcx
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-152(%rbp), %rax
	movb	$0, 16(%rax)
	jmp	.L332
.L333:
	movq	-48(%rbp), %rcx
	movabsq	$-3689348814741910323, %rdx
	movq	%rcx, %rax
	mulq	%rdx
	shrq	$3, %rdx
	movq	%rdx, %rax
	salq	$2, %rax
	addq	%rdx, %rax
	addq	%rax, %rax
	subq	%rax, %rcx
	movq	%rcx, %rdx
	testq	%rdx, %rdx
	jne	.L338
	movq	-48(%rbp), %rax
	movabsq	$-3689348814741910323, %rdx
	mulq	%rdx
	movq	%rdx, %rax
	shrq	$3, %rax
	movq	%rax, -48(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.L333
.L338:
	nop
	movq	-152(%rbp), %rcx
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-152(%rbp), %rax
	movb	$1, 16(%rax)
.L332:
	movq	-152(%rbp), %rax
	leave
	ret
	.globl	strconv__f64_to_decimal
	.hidden	strconv__f64_to_decimal
strconv__f64_to_decimal:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$264, %rsp
	movq	%rdi, -280(%rbp)
	movq	%rsi, -288(%rbp)
	movl	$0, -36(%rbp)
	movq	$0, -48(%rbp)
	cmpq	$0, -288(%rbp)
	jne	.L340
	movl	$52, %eax
	movl	%eax, %edx
	movl	$-1024, %eax
	subl	%edx, %eax
	movl	%eax, -36(%rbp)
	movq	-280(%rbp), %rax
	movq	%rax, -48(%rbp)
	jmp	.L341
.L340:
	movq	-288(%rbp), %rax
	movl	$52, %edx
	subl	%edx, %eax
	subl	$1025, %eax
	movl	%eax, -36(%rbp)
	movl	$52, %eax
	movl	$1, %edx
	movl	%eax, %ecx
	salq	%cl, %rdx
	movq	%rdx, %rax
	orq	-280(%rbp), %rax
	movq	%rax, -48(%rbp)
.L341:
	movq	-48(%rbp), %rax
	andl	$1, %eax
	testq	%rax, %rax
	sete	%al
	movb	%al, -98(%rbp)
	movzbl	-98(%rbp), %eax
	movb	%al, -99(%rbp)
	movq	-48(%rbp), %rax
	salq	$2, %rax
	movq	%rax, -112(%rbp)
	cmpq	$0, -280(%rbp)
	jne	.L342
	cmpq	$1, -288(%rbp)
	ja	.L343
.L342:
	movl	$1, %eax
	jmp	.L344
.L343:
	movl	$0, %eax
.L344:
	movzbl	%al, %eax
	movl	%eax, %edi
	call	strconv__bool_to_u64
	movq	%rax, -120(%rbp)
	movq	$0, -56(%rbp)
	movq	$0, -64(%rbp)
	movq	$0, -72(%rbp)
	movl	$0, -76(%rbp)
	movb	$0, -77(%rbp)
	movb	$0, -78(%rbp)
	cmpl	$0, -36(%rbp)
	js	.L345
	movl	-36(%rbp), %eax
	movl	%eax, %edi
	call	strconv__log10_pow2
	movl	%eax, %ebx
	cmpl	$3, -36(%rbp)
	setg	%al
	movzbl	%al, %eax
	movl	%eax, %edi
	call	strconv__bool_to_u32
	subl	%eax, %ebx
	movl	%ebx, %edx
	movl	%edx, -140(%rbp)
	movl	-140(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-140(%rbp), %eax
	movl	%eax, %edi
	call	strconv__pow5_bits
	addl	$121, %eax
	movl	%eax, -144(%rbp)
	movl	-140(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, %edx
	movl	-144(%rbp), %eax
	addl	%edx, %eax
	movl	%eax, -148(%rbp)
	movl	-140(%rbp), %esi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	_const_strconv__pow5_inv_split_64(%rip), %rax
	movq	8+_const_strconv__pow5_inv_split_64(%rip), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	16+_const_strconv__pow5_inv_split_64(%rip), %rax
	movq	24+_const_strconv__pow5_inv_split_64(%rip), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	%esi, %edi
	call	array_get
	addq	$32, %rsp
	movq	8(%rax), %rdx
	movq	(%rax), %rax
	movq	%rax, -256(%rbp)
	movq	%rdx, -248(%rbp)
	movq	-48(%rbp), %rax
	leaq	0(,%rax,4), %rdi
	movl	-148(%rbp), %ecx
	movq	-256(%rbp), %rdx
	movq	-248(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdx
	call	strconv__mul_shift_64
	movq	%rax, -56(%rbp)
	movq	-48(%rbp), %rax
	salq	$2, %rax
	leaq	2(%rax), %rdi
	movl	-148(%rbp), %ecx
	movq	-256(%rbp), %rdx
	movq	-248(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdx
	call	strconv__mul_shift_64
	movq	%rax, -64(%rbp)
	movq	-48(%rbp), %rax
	salq	$2, %rax
	subq	-120(%rbp), %rax
	leaq	-1(%rax), %rdi
	movl	-148(%rbp), %ecx
	movq	-256(%rbp), %rdx
	movq	-248(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdx
	call	strconv__mul_shift_64
	movq	%rax, -72(%rbp)
	cmpl	$21, -140(%rbp)
	ja	.L349
	movq	-112(%rbp), %rcx
	movabsq	$-3689348814741910323, %rdx
	movq	%rcx, %rax
	mulq	%rdx
	shrq	$2, %rdx
	movq	%rdx, %rax
	salq	$2, %rax
	addq	%rdx, %rax
	subq	%rax, %rcx
	movq	%rcx, %rdx
	testq	%rdx, %rdx
	jne	.L347
	movl	-140(%rbp), %edx
	movq	-112(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	strconv__multiple_of_power_of_five_64
	movb	%al, -78(%rbp)
	jmp	.L349
.L347:
	cmpb	$0, -99(%rbp)
	je	.L348
	movq	-112(%rbp), %rax
	subq	-120(%rbp), %rax
	leaq	-1(%rax), %rdx
	movl	-140(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	strconv__multiple_of_power_of_five_64
	movb	%al, -77(%rbp)
	jmp	.L349
.L348:
	movq	-112(%rbp), %rax
	leaq	2(%rax), %rdx
	movl	-140(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	strconv__multiple_of_power_of_five_64
	testb	%al, %al
	je	.L349
	subq	$1, -64(%rbp)
	jmp	.L349
.L345:
	movl	-36(%rbp), %eax
	negl	%eax
	movl	%eax, %edi
	call	strconv__log10_pow5
	movl	%eax, %ebx
	cmpl	$-1, -36(%rbp)
	setl	%al
	movzbl	%al, %eax
	movl	%eax, %edi
	call	strconv__bool_to_u32
	subl	%eax, %ebx
	movl	%ebx, %edx
	movl	%edx, -124(%rbp)
	movl	-124(%rbp), %edx
	movl	-36(%rbp), %eax
	addl	%edx, %eax
	movl	%eax, -76(%rbp)
	movl	-36(%rbp), %eax
	negl	%eax
	movl	%eax, %edx
	movl	-124(%rbp), %eax
	subl	%eax, %edx
	movl	%edx, -128(%rbp)
	movl	-128(%rbp), %eax
	movl	%eax, %edi
	call	strconv__pow5_bits
	subl	$121, %eax
	movl	%eax, -132(%rbp)
	movl	-124(%rbp), %eax
	subl	-132(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-128(%rbp), %esi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	_const_strconv__pow5_split_64(%rip), %rax
	movq	8+_const_strconv__pow5_split_64(%rip), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	16+_const_strconv__pow5_split_64(%rip), %rax
	movq	24+_const_strconv__pow5_split_64(%rip), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	%esi, %edi
	call	array_get
	addq	$32, %rsp
	movq	8(%rax), %rdx
	movq	(%rax), %rax
	movq	%rax, -272(%rbp)
	movq	%rdx, -264(%rbp)
	movq	-48(%rbp), %rax
	leaq	0(,%rax,4), %rdi
	movl	-136(%rbp), %ecx
	movq	-272(%rbp), %rdx
	movq	-264(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdx
	call	strconv__mul_shift_64
	movq	%rax, -56(%rbp)
	movq	-48(%rbp), %rax
	salq	$2, %rax
	leaq	2(%rax), %rdi
	movl	-136(%rbp), %ecx
	movq	-272(%rbp), %rdx
	movq	-264(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdx
	call	strconv__mul_shift_64
	movq	%rax, -64(%rbp)
	movq	-48(%rbp), %rax
	salq	$2, %rax
	subq	-120(%rbp), %rax
	leaq	-1(%rax), %rdi
	movl	-136(%rbp), %ecx
	movq	-272(%rbp), %rdx
	movq	-264(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdx
	call	strconv__mul_shift_64
	movq	%rax, -72(%rbp)
	cmpl	$1, -124(%rbp)
	ja	.L350
	movb	$1, -78(%rbp)
	cmpb	$0, -99(%rbp)
	je	.L351
	cmpq	$1, -120(%rbp)
	sete	%al
	movb	%al, -77(%rbp)
	jmp	.L349
.L351:
	subq	$1, -64(%rbp)
	jmp	.L349
.L350:
	cmpl	$62, -124(%rbp)
	ja	.L349
	movl	-124(%rbp), %eax
	leal	-1(%rax), %edx
	movq	-112(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	strconv__multiple_of_power_of_two_64
	movb	%al, -78(%rbp)
.L349:
	movl	$0, -84(%rbp)
	movb	$0, -85(%rbp)
	movq	$0, -96(%rbp)
	cmpb	$0, -77(%rbp)
	jne	.L361
	cmpb	$0, -78(%rbp)
	je	.L354
.L361:
	movq	-64(%rbp), %rax
	movabsq	$-3689348814741910323, %rdx
	mulq	%rdx
	movq	%rdx, %rax
	shrq	$3, %rax
	movq	%rax, -160(%rbp)
	movq	-72(%rbp), %rax
	movabsq	$-3689348814741910323, %rdx
	mulq	%rdx
	movq	%rdx, %rax
	shrq	$3, %rax
	movq	%rax, -168(%rbp)
	movq	-160(%rbp), %rax
	cmpq	%rax, -168(%rbp)
	jnb	.L383
	movq	-72(%rbp), %rcx
	movabsq	$-3689348814741910323, %rdx
	movq	%rcx, %rax
	mulq	%rdx
	shrq	$3, %rdx
	movq	%rdx, %rax
	salq	$2, %rax
	addq	%rdx, %rax
	addq	%rax, %rax
	subq	%rax, %rcx
	movq	%rcx, %rdx
	movq	%rdx, -176(%rbp)
	movq	-56(%rbp), %rax
	movabsq	$-3689348814741910323, %rdx
	mulq	%rdx
	movq	%rdx, %rax
	shrq	$3, %rax
	movq	%rax, -184(%rbp)
	movq	-56(%rbp), %rcx
	movabsq	$-3689348814741910323, %rdx
	movq	%rcx, %rax
	mulq	%rdx
	shrq	$3, %rdx
	movq	%rdx, %rax
	salq	$2, %rax
	addq	%rdx, %rax
	addq	%rax, %rax
	subq	%rax, %rcx
	movq	%rcx, %rdx
	movq	%rdx, -192(%rbp)
	cmpb	$0, -77(%rbp)
	je	.L357
	cmpq	$0, -176(%rbp)
	jne	.L357
	movl	$1, %eax
	jmp	.L358
.L357:
	movl	$0, %eax
.L358:
	movb	%al, -77(%rbp)
	cmpb	$0, -78(%rbp)
	je	.L359
	cmpb	$0, -85(%rbp)
	jne	.L359
	movl	$1, %eax
	jmp	.L360
.L359:
	movl	$0, %eax
.L360:
	movb	%al, -78(%rbp)
	movq	-192(%rbp), %rax
	movb	%al, -85(%rbp)
	movq	-184(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	-160(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	-168(%rbp), %rax
	movq	%rax, -72(%rbp)
	addl	$1, -84(%rbp)
	jmp	.L361
.L383:
	nop
	cmpb	$0, -77(%rbp)
	je	.L362
.L366:
	movq	-72(%rbp), %rax
	movabsq	$-3689348814741910323, %rdx
	mulq	%rdx
	movq	%rdx, %rax
	shrq	$3, %rax
	movq	%rax, -200(%rbp)
	movq	-72(%rbp), %rcx
	movabsq	$-3689348814741910323, %rdx
	movq	%rcx, %rax
	mulq	%rdx
	shrq	$3, %rdx
	movq	%rdx, %rax
	salq	$2, %rax
	addq	%rdx, %rax
	addq	%rax, %rax
	subq	%rax, %rcx
	movq	%rcx, %rdx
	movq	%rdx, -208(%rbp)
	cmpq	$0, -208(%rbp)
	jne	.L384
	movq	-64(%rbp), %rax
	movabsq	$-3689348814741910323, %rdx
	mulq	%rdx
	movq	%rdx, %rax
	shrq	$3, %rax
	movq	%rax, -216(%rbp)
	movq	-56(%rbp), %rax
	movabsq	$-3689348814741910323, %rdx
	mulq	%rdx
	movq	%rdx, %rax
	shrq	$3, %rax
	movq	%rax, -224(%rbp)
	movq	-56(%rbp), %rcx
	movabsq	$-3689348814741910323, %rdx
	movq	%rcx, %rax
	mulq	%rdx
	shrq	$3, %rdx
	movq	%rdx, %rax
	salq	$2, %rax
	addq	%rdx, %rax
	addq	%rax, %rax
	subq	%rax, %rcx
	movq	%rcx, %rdx
	movq	%rdx, -232(%rbp)
	cmpb	$0, -78(%rbp)
	je	.L364
	cmpb	$0, -85(%rbp)
	jne	.L364
	movl	$1, %eax
	jmp	.L365
.L364:
	movl	$0, %eax
.L365:
	movb	%al, -78(%rbp)
	movq	-232(%rbp), %rax
	movb	%al, -85(%rbp)
	movq	-224(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	-216(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	-200(%rbp), %rax
	movq	%rax, -72(%rbp)
	addl	$1, -84(%rbp)
	jmp	.L366
.L384:
	nop
.L362:
	cmpb	$0, -78(%rbp)
	je	.L367
	cmpb	$5, -85(%rbp)
	jne	.L367
	movq	-56(%rbp), %rax
	andl	$1, %eax
	testq	%rax, %rax
	jne	.L367
	movb	$4, -85(%rbp)
.L367:
	movq	-56(%rbp), %rax
	movq	%rax, -96(%rbp)
	movq	-56(%rbp), %rax
	cmpq	-72(%rbp), %rax
	jne	.L368
	cmpb	$0, -99(%rbp)
	je	.L369
	cmpb	$0, -77(%rbp)
	je	.L369
.L368:
	cmpb	$4, -85(%rbp)
	jbe	.L385
.L369:
	addq	$1, -96(%rbp)
	jmp	.L385
.L354:
	movb	$0, -97(%rbp)
.L374:
	movq	-64(%rbp), %rax
	shrq	$2, %rax
	movabsq	$2951479051793528259, %rdx
	mulq	%rdx
	movq	%rdx, %rcx
	shrq	$2, %rcx
	movq	-72(%rbp), %rax
	shrq	$2, %rax
	movabsq	$2951479051793528259, %rdx
	mulq	%rdx
	movq	%rdx, %rax
	shrq	$2, %rax
	cmpq	%rcx, %rax
	jb	.L372
	jmp	.L373
.L372:
	movq	-56(%rbp), %rcx
	movq	%rcx, %rax
	shrq	$2, %rax
	movabsq	$2951479051793528259, %rdx
	mulq	%rdx
	shrq	$2, %rdx
	movq	%rdx, %rax
	salq	$2, %rax
	addq	%rdx, %rax
	leaq	0(,%rax,4), %rdx
	addq	%rdx, %rax
	salq	$2, %rax
	subq	%rax, %rcx
	movq	%rcx, %rdx
	cmpq	$49, %rdx
	seta	%al
	movb	%al, -97(%rbp)
	movq	-56(%rbp), %rax
	shrq	$2, %rax
	movabsq	$2951479051793528259, %rdx
	mulq	%rdx
	movq	%rdx, %rax
	shrq	$2, %rax
	movq	%rax, -56(%rbp)
	movq	-64(%rbp), %rax
	shrq	$2, %rax
	movabsq	$2951479051793528259, %rdx
	mulq	%rdx
	movq	%rdx, %rax
	shrq	$2, %rax
	movq	%rax, -64(%rbp)
	movq	-72(%rbp), %rax
	shrq	$2, %rax
	movabsq	$2951479051793528259, %rdx
	mulq	%rdx
	movq	%rdx, %rax
	shrq	$2, %rax
	movq	%rax, -72(%rbp)
	addl	$2, -84(%rbp)
	jmp	.L374
.L373:
	movq	-64(%rbp), %rax
	movabsq	$-3689348814741910323, %rdx
	mulq	%rdx
	movq	%rdx, %rcx
	shrq	$3, %rcx
	movq	-72(%rbp), %rax
	movabsq	$-3689348814741910323, %rdx
	mulq	%rdx
	movq	%rdx, %rax
	shrq	$3, %rax
	cmpq	%rcx, %rax
	jnb	.L386
	movq	-56(%rbp), %rcx
	movabsq	$-3689348814741910323, %rdx
	movq	%rcx, %rax
	mulq	%rdx
	shrq	$3, %rdx
	movq	%rdx, %rax
	salq	$2, %rax
	addq	%rdx, %rax
	addq	%rax, %rax
	subq	%rax, %rcx
	movq	%rcx, %rdx
	cmpq	$4, %rdx
	seta	%al
	movb	%al, -97(%rbp)
	movq	-56(%rbp), %rax
	movabsq	$-3689348814741910323, %rdx
	mulq	%rdx
	movq	%rdx, %rax
	shrq	$3, %rax
	movq	%rax, -56(%rbp)
	movq	-64(%rbp), %rax
	movabsq	$-3689348814741910323, %rdx
	mulq	%rdx
	movq	%rdx, %rax
	shrq	$3, %rax
	movq	%rax, -64(%rbp)
	movq	-72(%rbp), %rax
	movabsq	$-3689348814741910323, %rdx
	mulq	%rdx
	movq	%rdx, %rax
	shrq	$3, %rax
	movq	%rax, -72(%rbp)
	addl	$1, -84(%rbp)
	jmp	.L373
.L386:
	nop
	movq	-56(%rbp), %rax
	cmpq	-72(%rbp), %rax
	je	.L377
	cmpb	$0, -97(%rbp)
	je	.L378
.L377:
	movl	$1, %eax
	jmp	.L379
.L378:
	movl	$0, %eax
.L379:
	movzbl	%al, %eax
	movl	%eax, %edi
	call	strconv__bool_to_u64
	movq	-56(%rbp), %rdx
	addq	%rdx, %rax
	movq	%rax, -96(%rbp)
	jmp	.L371
.L385:
	nop
.L371:
	movl	-76(%rbp), %edx
	movl	-84(%rbp), %eax
	addl	%edx, %eax
	movq	-96(%rbp), %r12
	movl	%eax, %edx
	movq	%r13, %rcx
	movabsq	$-4294967296, %rax
	andq	%rcx, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	%r12, %rax
	movq	%r13, %rdx
	leaq	-24(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%rbp
	ret
	.globl	strconv__f64_to_str
strconv__f64_to_str:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$112, %rsp
	movq	%rdi, -104(%rbp)
	movl	%esi, -108(%rbp)
	movq	$0, -48(%rbp)
	movq	-104(%rbp), %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -8(%rbp)
	movl	$52, %edx
	movl	$11, %eax
	addl	%edx, %eax
	movq	-8(%rbp), %rdx
	movl	%eax, %ecx
	shrq	%cl, %rdx
	movq	%rdx, %rax
	testq	%rax, %rax
	setne	%al
	movb	%al, -9(%rbp)
	movl	$52, %eax
	movq	$-1, %rdx
	movl	%eax, %ecx
	salq	%cl, %rdx
	movq	%rdx, %rax
	notq	%rax
	andq	-8(%rbp), %rax
	movq	%rax, -24(%rbp)
	movl	$52, %edx
	movq	-8(%rbp), %rax
	movl	%edx, %ecx
	shrq	%cl, %rax
	movq	%rax, %rdx
	movl	$11, %eax
	movq	$-1, %rsi
	movl	%eax, %ecx
	salq	%cl, %rsi
	movq	%rsi, %rax
	notq	%rax
	andq	%rdx, %rax
	movq	%rax, -32(%rbp)
	cmpq	$2047, -32(%rbp)
	je	.L388
	cmpq	$0, -32(%rbp)
	jne	.L389
	cmpq	$0, -24(%rbp)
	jne	.L389
.L388:
	cmpq	$0, -24(%rbp)
	sete	%al
	movzbl	%al, %edx
	cmpq	$0, -32(%rbp)
	sete	%al
	movzbl	%al, %ecx
	movzbl	-9(%rbp), %eax
	movl	%ecx, %esi
	movl	%eax, %edi
	call	strconv__get_string_special
	jmp	.L392
.L389:
	leaq	-80(%rbp), %rax
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	strconv__f64_to_decimal_exact_int
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, -96(%rbp)
	movq	%rdx, -88(%rbp)
	movzbl	-64(%rbp), %eax
	movb	%al, -33(%rbp)
	cmpb	$0, -33(%rbp)
	jne	.L391
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	strconv__f64_to_decimal
	movq	%rax, -96(%rbp)
	movq	%rdx, -88(%rbp)
.L391:
	movzbl	-9(%rbp), %edx
	movl	-108(%rbp), %ecx
	movq	-96(%rbp), %rsi
	movq	-88(%rbp), %rax
	movl	$0, %r8d
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	strconv__Dec64_get_string_64
.L392:
	leave
	ret
	.globl	strconv__f64_to_str_pad
strconv__f64_to_str_pad:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$112, %rsp
	movq	%rdi, -104(%rbp)
	movl	%esi, -108(%rbp)
	movq	$0, -48(%rbp)
	movq	-104(%rbp), %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -8(%rbp)
	movl	$52, %edx
	movl	$11, %eax
	addl	%edx, %eax
	movq	-8(%rbp), %rdx
	movl	%eax, %ecx
	shrq	%cl, %rdx
	movq	%rdx, %rax
	testq	%rax, %rax
	setne	%al
	movb	%al, -9(%rbp)
	movl	$52, %eax
	movq	$-1, %rdx
	movl	%eax, %ecx
	salq	%cl, %rdx
	movq	%rdx, %rax
	notq	%rax
	andq	-8(%rbp), %rax
	movq	%rax, -24(%rbp)
	movl	$52, %edx
	movq	-8(%rbp), %rax
	movl	%edx, %ecx
	shrq	%cl, %rax
	movq	%rax, %rdx
	movl	$11, %eax
	movq	$-1, %rsi
	movl	%eax, %ecx
	salq	%cl, %rsi
	movq	%rsi, %rax
	notq	%rax
	andq	%rdx, %rax
	movq	%rax, -32(%rbp)
	cmpq	$2047, -32(%rbp)
	je	.L394
	cmpq	$0, -32(%rbp)
	jne	.L395
	cmpq	$0, -24(%rbp)
	jne	.L395
.L394:
	cmpq	$0, -24(%rbp)
	sete	%al
	movzbl	%al, %edx
	cmpq	$0, -32(%rbp)
	sete	%al
	movzbl	%al, %ecx
	movzbl	-9(%rbp), %eax
	movl	%ecx, %esi
	movl	%eax, %edi
	call	strconv__get_string_special
	jmp	.L398
.L395:
	leaq	-80(%rbp), %rax
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	strconv__f64_to_decimal_exact_int
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, -96(%rbp)
	movq	%rdx, -88(%rbp)
	movzbl	-64(%rbp), %eax
	movb	%al, -33(%rbp)
	cmpb	$0, -33(%rbp)
	jne	.L397
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	strconv__f64_to_decimal
	movq	%rax, -96(%rbp)
	movq	%rdx, -88(%rbp)
.L397:
	movzbl	-9(%rbp), %edx
	movl	-108(%rbp), %edi
	movl	-108(%rbp), %ecx
	movq	-96(%rbp), %rsi
	movq	-88(%rbp), %rax
	movl	%edi, %r8d
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	strconv__Dec64_get_string_64
.L398:
	leave
	ret
	.globl	strconv__format_str_sb
strconv__format_str_sb:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$56, %rsp
	movq	%rdi, %rcx
	movq	%rsi, %rax
	movq	%rax, %rbx
	movq	%rcx, -48(%rbp)
	movq	%rbx, -40(%rbp)
	movq	%rdx, -56(%rbp)
	movl	20(%rbp), %eax
	testl	%eax, %eax
	jg	.L400
	movq	-48(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movq	-56(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	strings__Builder_write_string
	jmp	.L399
.L400:
	movl	20(%rbp), %ebx
	movq	-48(%rbp), %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	utf8_str_visible_length
	subl	%eax, %ebx
	movl	%ebx, %edx
	movl	%edx, -28(%rbp)
	cmpl	$0, -28(%rbp)
	jg	.L402
	movq	-48(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movq	-56(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	strings__Builder_write_string
	jmp	.L399
.L402:
	movl	32(%rbp), %eax
	testl	%eax, %eax
	jne	.L403
	movl	$0, -20(%rbp)
	jmp	.L404
.L405:
	movzbl	16(%rbp), %eax
	movzbl	%al, %edx
	movq	-56(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	strings__Builder_write_u8
	addl	$1, -20(%rbp)
.L404:
	movl	-20(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jl	.L405
.L403:
	movq	-48(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movq	-56(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	strings__Builder_write_string
	movl	32(%rbp), %eax
	cmpl	$1, %eax
	jne	.L399
	movl	$0, -24(%rbp)
	jmp	.L406
.L407:
	movzbl	16(%rbp), %eax
	movzbl	%al, %edx
	movq	-56(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	strings__Builder_write_u8
	addl	$1, -24(%rbp)
.L406:
	movl	-24(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jl	.L407
.L399:
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	strconv__format_dec_sb
strconv__format_dec_sb:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$112, %rsp
	movq	%rdi, -104(%rbp)
	movq	%rsi, -112(%rbp)
	movq	-104(%rbp), %rax
	movq	%rax, %rdi
	call	strconv__dec_digits
	movl	%eax, -40(%rbp)
	movzbl	28(%rbp), %eax
	testb	%al, %al
	je	.L409
	movzbl	29(%rbp), %eax
	testb	%al, %al
	je	.L410
.L409:
	movl	$1, %eax
	jmp	.L411
.L410:
	movl	$0, %eax
.L411:
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edx
	movl	-40(%rbp), %eax
	addl	%edx, %eax
	movl	%eax, -48(%rbp)
	movl	20(%rbp), %eax
	subl	-48(%rbp), %eax
	movl	%eax, -52(%rbp)
	movb	$0, -1(%rbp)
	movl	32(%rbp), %eax
	testl	%eax, %eax
	jne	.L412
	movzbl	16(%rbp), %eax
	cmpb	$48, %al
	jne	.L413
	movzbl	28(%rbp), %eax
	testb	%al, %al
	je	.L414
	movzbl	29(%rbp), %eax
	testb	%al, %al
	je	.L413
	movq	-112(%rbp), %rax
	movl	$43, %esi
	movq	%rax, %rdi
	call	strings__Builder_write_u8
	movb	$1, -1(%rbp)
	jmp	.L413
.L414:
	movq	-112(%rbp), %rax
	movl	$45, %esi
	movq	%rax, %rdi
	call	strings__Builder_write_u8
	movb	$1, -1(%rbp)
.L413:
	movl	$0, -8(%rbp)
	jmp	.L415
.L416:
	movzbl	16(%rbp), %eax
	movzbl	%al, %edx
	movq	-112(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	strings__Builder_write_u8
	addl	$1, -8(%rbp)
.L415:
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jl	.L416
.L412:
	cmpb	$0, -1(%rbp)
	jne	.L417
	movzbl	28(%rbp), %eax
	testb	%al, %al
	je	.L418
	movzbl	29(%rbp), %eax
	testb	%al, %al
	je	.L417
	movq	-112(%rbp), %rax
	movl	$43, %esi
	movq	%rax, %rdi
	call	strings__Builder_write_u8
	jmp	.L417
.L418:
	movq	-112(%rbp), %rax
	movl	$45, %esi
	movq	%rax, %rdi
	call	strings__Builder_write_u8
.L417:
	movq	$0, -96(%rbp)
	movq	$0, -88(%rbp)
	movq	$0, -80(%rbp)
	movq	$0, -72(%rbp)
	movl	$20, -12(%rbp)
	movq	-104(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	$0, -32(%rbp)
	cmpq	$0, -24(%rbp)
	je	.L419
.L422:
	cmpq	$0, -24(%rbp)
	je	.L430
	movq	-24(%rbp), %rax
	shrq	$2, %rax
	movabsq	$2951479051793528259, %rdx
	mulq	%rdx
	movq	%rdx, %rax
	shrq	$2, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rdx
	movq	%rdx, %rax
	salq	$2, %rax
	addq	%rdx, %rax
	leaq	0(,%rax,4), %rdx
	addq	%rdx, %rax
	salq	$2, %rax
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	subq	%rdx, %rax
	addq	%rax, %rax
	movq	%rax, -32(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	_const_strconv__digit_pairs(%rip), %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	movzbl	(%rax), %edx
	movl	-12(%rbp), %eax
	cltq
	movb	%dl, -96(%rbp,%rax)
	subl	$1, -12(%rbp)
	addq	$1, -32(%rbp)
	movq	_const_strconv__digit_pairs(%rip), %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	movzbl	(%rax), %edx
	movl	-12(%rbp), %eax
	cltq
	movb	%dl, -96(%rbp,%rax)
	subl	$1, -12(%rbp)
	jmp	.L422
.L430:
	nop
	addl	$1, -12(%rbp)
	cmpq	$19, -32(%rbp)
	ja	.L423
	addl	$1, -12(%rbp)
.L423:
	leaq	-96(%rbp), %rdx
	movl	-12(%rbp), %eax
	cltq
	leaq	(%rdx,%rax), %rcx
	movl	-40(%rbp), %edx
	movq	-112(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	strings__Builder_write_ptr
	jmp	.L424
.L419:
	movq	-112(%rbp), %rax
	movl	$48, %esi
	movq	%rax, %rdi
	call	strings__Builder_write_u8
.L424:
	movl	32(%rbp), %eax
	cmpl	$1, %eax
	jne	.L431
	movl	$0, -36(%rbp)
	jmp	.L426
.L427:
	movzbl	16(%rbp), %eax
	movzbl	%al, %edx
	movq	-112(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	strings__Builder_write_u8
	addl	$1, -36(%rbp)
.L426:
	movl	-36(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jl	.L427
	nop
.L431:
	nop
	leave
	ret
	.section	.rodata, "a"
.LC36:
	.string	"[Float conversion error!!]"
	.text
	.globl	strconv__f64_to_str_lnd1
strconv__f64_to_str_lnd1:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$232, %rsp
	movq	%rdi, -248(%rbp)
	movl	%esi, -252(%rbp)
	movq	8+_const_strconv__dec_round(%rip), %rax
	movl	-252(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rdx
	movq	-248(%rbp), %rax
	addq	%rdx, %rax
	movl	$18, %esi
	movq	%rax, %rdi
	call	strconv__f64_to_str
	movq	%rax, -112(%rbp)
	movq	%rdx, -104(%rbp)
	movl	-104(%rbp), %eax
	cmpl	$2, %eax
	jle	.L433
	movq	-112(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$110, %al
	je	.L434
	movq	-112(%rbp), %rax
	addq	$1, %rax
	movzbl	(%rax), %eax
	cmpb	$105, %al
	jne	.L433
.L434:
	movq	-112(%rbp), %r12
	movq	-104(%rbp), %r13
	jmp	.L435
.L433:
	movb	$0, -85(%rbp)
	movl	$1, -36(%rbp)
	movq	$0, -144(%rbp)
	movq	$0, -136(%rbp)
	movq	$0, -134(%rbp)
	movq	$0, -126(%rbp)
	movl	$1, -40(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -52(%rbp)
	movl	$1, -56(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -64(%rbp)
	jmp	.L436
.L446:
	movq	-112(%rbp), %rdx
	movl	-64(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	movb	%al, -86(%rbp)
	cmpb	$45, -86(%rbp)
	jne	.L437
	movl	$-1, -36(%rbp)
	addl	$1, -44(%rbp)
	jmp	.L438
.L437:
	cmpb	$43, -86(%rbp)
	jne	.L439
	movl	$1, -36(%rbp)
	addl	$1, -44(%rbp)
	jmp	.L438
.L439:
	cmpb	$47, -86(%rbp)
	jbe	.L440
	cmpb	$57, -86(%rbp)
	ja	.L440
	movl	-48(%rbp), %eax
	cltq
	movzbl	-86(%rbp), %edx
	movb	%dl, -144(%rbp,%rax)
	addl	$1, -48(%rbp)
	addl	$1, -44(%rbp)
	jmp	.L438
.L440:
	cmpb	$46, -86(%rbp)
	jne	.L441
	cmpl	$0, -36(%rbp)
	jle	.L442
	movl	-44(%rbp), %eax
	movl	%eax, -40(%rbp)
	jmp	.L443
.L442:
	movl	-44(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -40(%rbp)
.L443:
	addl	$1, -44(%rbp)
	jmp	.L438
.L441:
	cmpb	$101, -86(%rbp)
	jne	.L444
	addl	$1, -44(%rbp)
	jmp	.L445
.L444:
	leaq	-112(%rbp), %rax
	movq	%rax, %rdi
	call	string_free
	leaq	.LC36(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$26, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	jmp	.L435
.L438:
	addl	$1, -64(%rbp)
.L436:
	movl	-104(%rbp), %eax
	cmpl	%eax, -64(%rbp)
	jl	.L446
.L445:
	movl	-48(%rbp), %eax
	cltq
	movb	$0, -144(%rbp,%rax)
	movq	-112(%rbp), %rdx
	movl	-44(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	cmpb	$45, %al
	jne	.L447
	movl	$-1, -56(%rbp)
	addl	$1, -44(%rbp)
	jmp	.L448
.L447:
	movq	-112(%rbp), %rdx
	movl	-44(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	cmpb	$43, %al
	jne	.L448
	movl	$1, -56(%rbp)
	addl	$1, -44(%rbp)
.L448:
	movl	-44(%rbp), %eax
	movl	%eax, -68(%rbp)
.L451:
	movl	-104(%rbp), %eax
	cmpl	%eax, -68(%rbp)
	jge	.L481
	movl	-52(%rbp), %edx
	movl	%edx, %eax
	sall	$2, %eax
	addl	%edx, %eax
	addl	%eax, %eax
	movl	%eax, %ecx
	movq	-112(%rbp), %rdx
	movl	-68(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	subl	$48, %eax
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	addl	$1, -68(%rbp)
	jmp	.L451
.L481:
	nop
	movb	$0, -145(%rbp)
	movl	-52(%rbp), %eax
	leal	32(%rax), %esi
	leaq	-240(%rbp), %rax
	leaq	-145(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$0, %edx
	movq	%rax, %rdi
	call	__new_array_with_default
	movl	$0, -72(%rbp)
	leaq	-112(%rbp), %rax
	movq	%rax, %rdi
	call	string_free
	cmpl	$1, -36(%rbp)
	jne	.L452
	cmpb	$0, -85(%rbp)
	je	.L453
	movq	-232(%rbp), %rdx
	movl	-72(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movb	$43, (%rax)
	addl	$1, -72(%rbp)
	jmp	.L453
.L452:
	movq	-232(%rbp), %rdx
	movl	-72(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movb	$45, (%rax)
	addl	$1, -72(%rbp)
.L453:
	movl	$0, -44(%rbp)
	cmpl	$0, -56(%rbp)
	js	.L454
.L459:
	movl	-44(%rbp), %eax
	cltq
	movzbl	-144(%rbp,%rax), %eax
	testb	%al, %al
	jne	.L455
	jmp	.L456
.L455:
	movq	-232(%rbp), %rdx
	movl	-72(%rbp), %eax
	cltq
	addq	%rax, %rdx
	movl	-44(%rbp), %eax
	cltq
	movzbl	-144(%rbp,%rax), %eax
	movb	%al, (%rdx)
	addl	$1, -72(%rbp)
	addl	$1, -44(%rbp)
	movl	-44(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jl	.L459
	cmpl	$0, -52(%rbp)
	js	.L459
	cmpl	$0, -52(%rbp)
	jne	.L458
	movl	-72(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	-232(%rbp), %rdx
	movl	-72(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movb	$46, (%rax)
	addl	$1, -72(%rbp)
.L458:
	subl	$1, -52(%rbp)
	jmp	.L459
.L456:
	cmpl	$0, -52(%rbp)
	js	.L482
	movq	-232(%rbp), %rdx
	movl	-72(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movb	$48, (%rax)
	addl	$1, -72(%rbp)
	subl	$1, -52(%rbp)
	jmp	.L456
.L454:
	movb	$1, -73(%rbp)
.L466:
	cmpl	$0, -52(%rbp)
	jg	.L463
	jmp	.L464
.L463:
	movq	-232(%rbp), %rdx
	movl	-72(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movb	$48, (%rax)
	addl	$1, -72(%rbp)
	subl	$1, -52(%rbp)
	cmpb	$0, -73(%rbp)
	je	.L466
	movl	-72(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	-232(%rbp), %rdx
	movl	-72(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movb	$46, (%rax)
	addl	$1, -72(%rbp)
	movb	$0, -73(%rbp)
	jmp	.L466
.L464:
	movl	-44(%rbp), %eax
	cltq
	movzbl	-144(%rbp,%rax), %eax
	testb	%al, %al
	je	.L483
	movq	-232(%rbp), %rdx
	movl	-72(%rbp), %eax
	cltq
	addq	%rax, %rdx
	movl	-44(%rbp), %eax
	cltq
	movzbl	-144(%rbp,%rax), %eax
	movb	%al, (%rdx)
	addl	$1, -72(%rbp)
	addl	$1, -44(%rbp)
	jmp	.L464
.L482:
	nop
	jmp	.L462
.L483:
	nop
.L462:
	cmpl	$0, -252(%rbp)
	jg	.L468
	cmpl	$0, -60(%rbp)
	jns	.L469
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
.L469:
	movq	-232(%rbp), %rax
	movl	-60(%rbp), %edx
	movl	%edx, %esi
	movq	%rax, %rdi
	call	tos
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	string_clone
	movq	%rax, -176(%rbp)
	movq	%rdx, -168(%rbp)
	leaq	-240(%rbp), %rax
	movq	%rax, %rdi
	call	array_free
	movq	-176(%rbp), %r12
	movq	-168(%rbp), %r13
	jmp	.L435
.L468:
	cmpl	$0, -60(%rbp)
	js	.L470
	movl	-60(%rbp), %edx
	movl	-252(%rbp), %eax
	addl	%edx, %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movq	-232(%rbp), %rdx
	movl	-72(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movb	$0, (%rax)
	movl	$1, -80(%rbp)
	jmp	.L471
.L473:
	movq	-232(%rbp), %rdx
	movl	-72(%rbp), %eax
	subl	-80(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	testb	%al, %al
	jne	.L472
	movq	-232(%rbp), %rdx
	movl	-72(%rbp), %eax
	subl	-80(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movb	$48, (%rax)
.L472:
	addl	$1, -80(%rbp)
.L471:
	movl	-252(%rbp), %eax
	cmpl	-80(%rbp), %eax
	jge	.L473
	movq	-232(%rbp), %rax
	movl	-72(%rbp), %edx
	movl	%edx, %esi
	movq	%rax, %rdi
	call	tos
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	string_clone
	movq	%rax, -192(%rbp)
	movq	%rdx, -184(%rbp)
	leaq	-240(%rbp), %rax
	movq	%rax, %rdi
	call	array_free
	movq	-192(%rbp), %r12
	movq	-184(%rbp), %r13
	jmp	.L435
.L470:
	cmpl	$0, -252(%rbp)
	jle	.L474
	movl	$0, -84(%rbp)
	movq	-232(%rbp), %rdx
	movl	-72(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movb	$46, (%rax)
	addl	$1, -72(%rbp)
.L477:
	movl	-84(%rbp), %eax
	cmpl	-252(%rbp), %eax
	jge	.L484
	movq	-232(%rbp), %rdx
	movl	-72(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movb	$48, (%rax)
	addl	$1, -72(%rbp)
	addl	$1, -84(%rbp)
	jmp	.L477
.L484:
	nop
	movq	-232(%rbp), %rdx
	movl	-72(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movb	$0, (%rax)
.L474:
	movq	-232(%rbp), %rax
	movl	-72(%rbp), %edx
	movl	%edx, %esi
	movq	%rax, %rdi
	call	tos
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	string_clone
	movq	%rax, -208(%rbp)
	movq	%rdx, -200(%rbp)
	leaq	-240(%rbp), %rax
	movq	%rax, %rdi
	call	array_free
	movq	-208(%rbp), %r12
	movq	-200(%rbp), %r13
.L435:
	movq	%r12, %rax
	movq	%r13, %rdx
	addq	$232, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%rbp
	ret
	.globl	strconv__format_fl
strconv__format_fl:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$168, %rsp
	movq	%rdi, -168(%rbp)
	movl	24(%rbp), %edx
	movq	-168(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	strconv__f64_to_str_lnd1
	movq	%rax, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-64(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$91, %al
	jne	.L486
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	jmp	.L487
.L486:
	movzbl	36(%rbp), %eax
	testb	%al, %al
	je	.L488
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, -96(%rbp)
	movq	%rdx, -88(%rbp)
	movq	-64(%rbp), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	strconv__remove_tail_zeros
	movq	%rax, -64(%rbp)
	movq	%rdx, -56(%rbp)
	leaq	-96(%rbp), %rax
	movq	%rax, %rdi
	call	string_free
.L488:
	movq	$0, -160(%rbp)
	movq	$0, -152(%rbp)
	movq	$0, -144(%rbp)
	movq	$0, -136(%rbp)
	movq	$0, -128(%rbp)
	movq	$0, -120(%rbp)
	movq	$0, -112(%rbp)
	movq	$0, -104(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -28(%rbp)
	movzbl	16(%rbp), %eax
	cmpb	$48, %al
	jne	.L489
	movzbl	28(%rbp), %eax
	testb	%al, %al
	je	.L490
	movzbl	29(%rbp), %eax
	testb	%al, %al
	je	.L491
	movl	-24(%rbp), %eax
	cltq
	movb	$43, -128(%rbp,%rax)
	addl	$1, -24(%rbp)
	movl	$-1, -28(%rbp)
	jmp	.L491
.L490:
	movl	-24(%rbp), %eax
	cltq
	movb	$45, -128(%rbp,%rax)
	addl	$1, -24(%rbp)
	movl	$-1, -28(%rbp)
	jmp	.L491
.L489:
	movzbl	28(%rbp), %eax
	testb	%al, %al
	je	.L492
	movzbl	29(%rbp), %eax
	testb	%al, %al
	je	.L491
	movl	-20(%rbp), %eax
	cltq
	movb	$43, -160(%rbp,%rax)
	addl	$1, -20(%rbp)
	jmp	.L491
.L492:
	movl	-20(%rbp), %eax
	cltq
	movb	$45, -160(%rbp,%rax)
	addl	$1, -20(%rbp)
.L491:
	movl	-56(%rbp), %eax
	movslq	%eax, %rdx
	movq	-64(%rbp), %rax
	leaq	-160(%rbp), %rsi
	movl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	addq	%rsi, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	vmemcpy
	movl	-56(%rbp), %eax
	addl	%eax, -20(%rbp)
	movl	20(%rbp), %eax
	subl	-20(%rbp), %eax
	movl	%eax, %edx
	movl	-28(%rbp), %eax
	addl	%edx, %eax
	movl	%eax, -40(%rbp)
	movl	32(%rbp), %eax
	testl	%eax, %eax
	jne	.L493
	movl	$0, -32(%rbp)
	jmp	.L494
.L495:
	movzbl	16(%rbp), %edx
	movl	-24(%rbp), %eax
	cltq
	movb	%dl, -128(%rbp,%rax)
	addl	$1, -24(%rbp)
	addl	$1, -32(%rbp)
.L494:
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jl	.L495
.L493:
	movl	-20(%rbp), %eax
	movslq	%eax, %rdx
	leaq	-128(%rbp), %rcx
	movl	-24(%rbp), %eax
	cltq
	addq	%rax, %rcx
	leaq	-160(%rbp), %rax
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	vmemcpy
	movl	-20(%rbp), %eax
	addl	%eax, -24(%rbp)
	movl	32(%rbp), %eax
	cmpl	$1, %eax
	jne	.L496
	movl	$0, -36(%rbp)
	jmp	.L497
.L498:
	movzbl	16(%rbp), %edx
	movl	-24(%rbp), %eax
	cltq
	movb	%dl, -128(%rbp,%rax)
	addl	$1, -24(%rbp)
	addl	$1, -36(%rbp)
.L497:
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jl	.L498
.L496:
	movl	-24(%rbp), %eax
	cltq
	movb	$0, -128(%rbp,%rax)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, -80(%rbp)
	movq	%rdx, -72(%rbp)
	leaq	-128(%rbp), %rax
	movq	%rax, %rdi
	call	tos_clone
	movq	%rax, -64(%rbp)
	movq	%rdx, -56(%rbp)
	leaq	-80(%rbp), %rax
	movq	%rax, %rdi
	call	string_free
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
.L487:
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	strconv__format_es
strconv__format_es:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$168, %rsp
	movq	%rdi, -168(%rbp)
	movl	24(%rbp), %edx
	movq	-168(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	strconv__f64_to_str_pad
	movq	%rax, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movzbl	36(%rbp), %eax
	testb	%al, %al
	je	.L501
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, -96(%rbp)
	movq	%rdx, -88(%rbp)
	movq	-64(%rbp), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	strconv__remove_tail_zeros
	movq	%rax, -64(%rbp)
	movq	%rdx, -56(%rbp)
	leaq	-96(%rbp), %rax
	movq	%rax, %rdi
	call	string_free
.L501:
	movq	$0, -160(%rbp)
	movq	$0, -152(%rbp)
	movq	$0, -144(%rbp)
	movq	$0, -136(%rbp)
	movq	$0, -128(%rbp)
	movq	$0, -120(%rbp)
	movq	$0, -112(%rbp)
	movq	$0, -104(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -28(%rbp)
	movzbl	16(%rbp), %eax
	cmpb	$48, %al
	jne	.L502
	movzbl	28(%rbp), %eax
	testb	%al, %al
	je	.L503
	movzbl	29(%rbp), %eax
	testb	%al, %al
	je	.L504
	movl	-24(%rbp), %eax
	cltq
	movb	$43, -128(%rbp,%rax)
	addl	$1, -24(%rbp)
	movl	$-1, -28(%rbp)
	jmp	.L504
.L503:
	movl	-24(%rbp), %eax
	cltq
	movb	$45, -128(%rbp,%rax)
	addl	$1, -24(%rbp)
	movl	$-1, -28(%rbp)
	jmp	.L504
.L502:
	movzbl	28(%rbp), %eax
	testb	%al, %al
	je	.L505
	movzbl	29(%rbp), %eax
	testb	%al, %al
	je	.L504
	movl	-20(%rbp), %eax
	cltq
	movb	$43, -160(%rbp,%rax)
	addl	$1, -20(%rbp)
	jmp	.L504
.L505:
	movl	-20(%rbp), %eax
	cltq
	movb	$45, -160(%rbp,%rax)
	addl	$1, -20(%rbp)
.L504:
	movl	-56(%rbp), %eax
	movslq	%eax, %rdx
	movq	-64(%rbp), %rax
	leaq	-160(%rbp), %rsi
	movl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	addq	%rsi, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	vmemcpy
	movl	-56(%rbp), %eax
	addl	%eax, -20(%rbp)
	movl	20(%rbp), %eax
	subl	-20(%rbp), %eax
	movl	%eax, %edx
	movl	-28(%rbp), %eax
	addl	%edx, %eax
	movl	%eax, -40(%rbp)
	movl	32(%rbp), %eax
	testl	%eax, %eax
	jne	.L506
	movl	$0, -32(%rbp)
	jmp	.L507
.L508:
	movzbl	16(%rbp), %edx
	movl	-24(%rbp), %eax
	cltq
	movb	%dl, -128(%rbp,%rax)
	addl	$1, -24(%rbp)
	addl	$1, -32(%rbp)
.L507:
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jl	.L508
.L506:
	movl	-20(%rbp), %eax
	movslq	%eax, %rdx
	leaq	-128(%rbp), %rcx
	movl	-24(%rbp), %eax
	cltq
	addq	%rax, %rcx
	leaq	-160(%rbp), %rax
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	vmemcpy
	movl	-20(%rbp), %eax
	addl	%eax, -24(%rbp)
	movl	32(%rbp), %eax
	cmpl	$1, %eax
	jne	.L509
	movl	$0, -36(%rbp)
	jmp	.L510
.L511:
	movzbl	16(%rbp), %edx
	movl	-24(%rbp), %eax
	cltq
	movb	%dl, -128(%rbp,%rax)
	addl	$1, -24(%rbp)
	addl	$1, -36(%rbp)
.L510:
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jl	.L511
.L509:
	movl	-24(%rbp), %eax
	cltq
	movb	$0, -128(%rbp,%rax)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, -80(%rbp)
	movq	%rdx, -72(%rbp)
	leaq	-128(%rbp), %rax
	movq	%rax, %rdi
	call	tos_clone
	movq	%rax, -64(%rbp)
	movq	%rdx, -56(%rbp)
	leaq	-80(%rbp), %rax
	movq	%rax, %rdi
	call	string_free
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	strconv__remove_tail_zeros
strconv__remove_tail_zeros:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$56, %rsp
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movq	%rcx, %rdx
	movq	%rax, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	cltq
	movq	%rax, %rdi
	call	malloc_noscan
	movq	%rax, -48(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -24(%rbp)
.L516:
	movl	-56(%rbp), %eax
	cmpl	%eax, -24(%rbp)
	jge	.L514
	movq	-64(%rbp), %rdx
	movl	-24(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	cmpb	$45, %al
	je	.L514
	movq	-64(%rbp), %rdx
	movl	-24(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	cmpb	$43, %al
	je	.L514
	movq	-64(%rbp), %rdx
	movl	-24(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	cmpb	$57, %al
	ja	.L515
	movq	-64(%rbp), %rdx
	movl	-24(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	cmpb	$47, %al
	ja	.L514
.L515:
	movq	-64(%rbp), %rdx
	movl	-24(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movl	-20(%rbp), %edx
	movslq	%edx, %rcx
	movq	-48(%rbp), %rdx
	addq	%rcx, %rdx
	movzbl	(%rax), %eax
	movb	%al, (%rdx)
	addl	$1, -24(%rbp)
	addl	$1, -20(%rbp)
	jmp	.L516
.L514:
	movl	-56(%rbp), %eax
	cmpl	%eax, -24(%rbp)
	jge	.L520
	movq	-64(%rbp), %rdx
	movl	-24(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	cmpb	$45, %al
	je	.L518
	movq	-64(%rbp), %rdx
	movl	-24(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	cmpb	$43, %al
	jne	.L520
.L518:
	movq	-64(%rbp), %rdx
	movl	-24(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movl	-20(%rbp), %edx
	movslq	%edx, %rcx
	movq	-48(%rbp), %rdx
	addq	%rcx, %rdx
	movzbl	(%rax), %eax
	movb	%al, (%rdx)
	addl	$1, -24(%rbp)
	addl	$1, -20(%rbp)
.L520:
	movl	-56(%rbp), %eax
	cmpl	%eax, -24(%rbp)
	jge	.L519
	movq	-64(%rbp), %rdx
	movl	-24(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	cmpb	$47, %al
	jbe	.L519
	movq	-64(%rbp), %rdx
	movl	-24(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	cmpb	$57, %al
	ja	.L519
	movq	-64(%rbp), %rdx
	movl	-24(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movl	-20(%rbp), %edx
	movslq	%edx, %rcx
	movq	-48(%rbp), %rdx
	addq	%rcx, %rdx
	movzbl	(%rax), %eax
	movb	%al, (%rdx)
	addl	$1, -24(%rbp)
	addl	$1, -20(%rbp)
	jmp	.L520
.L519:
	movl	-56(%rbp), %eax
	cmpl	%eax, -24(%rbp)
	jge	.L521
	movq	-64(%rbp), %rdx
	movl	-24(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	cmpb	$46, %al
	jne	.L521
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	$0, -32(%rbp)
.L523:
	movl	-56(%rbp), %eax
	cmpl	%eax, -28(%rbp)
	jge	.L522
	movq	-64(%rbp), %rdx
	movl	-28(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	cmpb	$47, %al
	jbe	.L522
	movq	-64(%rbp), %rdx
	movl	-28(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	cmpb	$57, %al
	ja	.L522
	movq	-64(%rbp), %rdx
	movl	-28(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	subl	$48, %eax
	addl	%eax, -32(%rbp)
	addl	$1, -28(%rbp)
	jmp	.L523
.L522:
	cmpl	$0, -32(%rbp)
	jle	.L524
	movl	-24(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.L525
.L526:
	movq	-64(%rbp), %rdx
	movl	-36(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movl	-20(%rbp), %edx
	movslq	%edx, %rcx
	movq	-48(%rbp), %rdx
	addq	%rcx, %rdx
	movzbl	(%rax), %eax
	movb	%al, (%rdx)
	addl	$1, -20(%rbp)
	addl	$1, -36(%rbp)
.L525:
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jl	.L526
.L524:
	movl	-28(%rbp), %eax
	movl	%eax, -24(%rbp)
.L521:
	movl	-56(%rbp), %eax
	cmpl	%eax, -24(%rbp)
	jge	.L527
	movq	-64(%rbp), %rdx
	movl	-24(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	cmpb	$46, %al
	je	.L527
.L529:
	movq	-64(%rbp), %rdx
	movl	-24(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movl	-20(%rbp), %edx
	movslq	%edx, %rcx
	movq	-48(%rbp), %rdx
	addq	%rcx, %rdx
	movzbl	(%rax), %eax
	movb	%al, (%rdx)
	addl	$1, -24(%rbp)
	addl	$1, -20(%rbp)
	movl	-56(%rbp), %eax
	cmpl	%eax, -24(%rbp)
	jge	.L531
	jmp	.L529
.L531:
	nop
.L527:
	movl	-20(%rbp), %eax
	movslq	%eax, %rdx
	movq	-48(%rbp), %rax
	addq	%rdx, %rax
	movb	$0, (%rax)
	movl	-20(%rbp), %edx
	movq	-48(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	tos
	movq	-8(%rbp), %rbx
	leave
	ret
	.section	.rodata, "a"
.LC37:
	.string	"invalid radix: "
.LC38:
	.string	" . It should be => 2 and <= 36"
.LC39:
	.string	"0"
.LC40:
	.string	"-"
	.text
	.globl	strconv__format_int
strconv__format_int:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$184, %rsp
	movq	%rdi, -200(%rbp)
	movl	%esi, -204(%rbp)
	cmpl	$1, -204(%rbp)
	jle	.L533
	cmpl	$36, -204(%rbp)
	jle	.L534
.L533:
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -192(%rbp)
	movaps	%xmm0, -176(%rbp)
	movaps	%xmm0, -160(%rbp)
	movaps	%xmm0, -144(%rbp)
	movaps	%xmm0, -128(%rbp)
	leaq	.LC37(%rip), %rax
	movq	%rax, -192(%rbp)
	movl	$15, -184(%rbp)
	movl	$1, -180(%rbp)
	movl	$65031, -176(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -168(%rbp)
	leaq	.LC38(%rip), %rax
	movq	%rax, -152(%rbp)
	movl	$30, -144(%rbp)
	movl	$1, -140(%rbp)
	leaq	-192(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	_v_panic
.L534:
	cmpq	$0, -200(%rbp)
	jne	.L535
	leaq	.LC39(%rip), %rax
	movq	%rdx, %rsi
	movabsq	$-4294967296, %rcx
	andq	%rsi, %rcx
	orq	$1, %rcx
	movq	%rcx, %rdx
	movq	%rdx, %rcx
	movl	%ecx, %esi
	movabsq	$4294967296, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	jmp	.L536
.L535:
	movq	-200(%rbp), %rax
	movq	%rax, -40(%rbp)
	movb	$0, -41(%rbp)
	cmpq	$0, -200(%rbp)
	jns	.L537
	movb	$1, -41(%rbp)
	negq	-40(%rbp)
.L537:
	leaq	.LC30(%rip), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -56(%rbp)
	movl	$1, -52(%rbp)
.L541:
	cmpq	$0, -40(%rbp)
	jne	.L538
	cmpb	$0, -41(%rbp)
	jne	.L539
	jmp	.L543
.L538:
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, -80(%rbp)
	movq	%rdx, -72(%rbp)
	movl	-204(%rbp), %eax
	movslq	%eax, %rcx
	movq	-40(%rbp), %rax
	cqto
	idivq	%rcx
	movq	%rdx, %rax
	movl	%eax, -48(%rbp)
	movq	_const_strconv__base_digits(%rip), %rdx
	movl	-48(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	movl	%eax, %edi
	call	u8_ascii_str
	movq	%rax, -96(%rbp)
	movq	%rdx, -88(%rbp)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	-96(%rbp), %rdi
	movq	-88(%rbp), %rsi
	movq	%rdx, %rcx
	movq	%rax, %rdx
	call	string__plus
	movq	%rax, -64(%rbp)
	movq	%rdx, -56(%rbp)
	leaq	-80(%rbp), %rax
	movq	%rax, %rdi
	call	string_free
	leaq	-96(%rbp), %rax
	movq	%rax, %rdi
	call	string_free
	movl	-204(%rbp), %eax
	movslq	%eax, %rbx
	movq	-40(%rbp), %rax
	cqto
	idivq	%rbx
	movq	%rax, -40(%rbp)
	jmp	.L541
.L539:
	leaq	.LC40(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$1, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%r12, %rsi
	movq	%r13, %rdi
	movq	%r12, %rcx
	movq	%r13, %rbx
	movq	%rsi, %rdi
	movq	%rbx, %rsi
	movq	%rdx, %rcx
	movq	%rax, %rdx
	call	string__plus
	movq	%rax, -112(%rbp)
	movq	%rdx, -104(%rbp)
	leaq	-64(%rbp), %rax
	movq	%rax, %rdi
	call	string_free
	movq	-112(%rbp), %rax
	movq	-104(%rbp), %rdx
	jmp	.L536
.L543:
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
.L536:
	addq	$184, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%rbp
	ret
	.globl	strconv__format_uint
strconv__format_uint:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$168, %rsp
	movq	%rdi, -168(%rbp)
	movl	%esi, -172(%rbp)
	cmpl	$1, -172(%rbp)
	jle	.L545
	cmpl	$36, -172(%rbp)
	jle	.L546
.L545:
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -160(%rbp)
	movaps	%xmm0, -144(%rbp)
	movaps	%xmm0, -128(%rbp)
	movaps	%xmm0, -112(%rbp)
	movaps	%xmm0, -96(%rbp)
	leaq	.LC37(%rip), %rax
	movq	%rax, -160(%rbp)
	movl	$15, -152(%rbp)
	movl	$1, -148(%rbp)
	movl	$65031, -144(%rbp)
	movl	-172(%rbp), %eax
	movl	%eax, -136(%rbp)
	leaq	.LC38(%rip), %rax
	movq	%rax, -120(%rbp)
	movl	$30, -112(%rbp)
	movl	$1, -108(%rbp)
	leaq	-160(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	_v_panic
.L546:
	cmpq	$0, -168(%rbp)
	jne	.L547
	leaq	.LC39(%rip), %rax
	movq	%rdx, %rsi
	movabsq	$-4294967296, %rcx
	andq	%rsi, %rcx
	orq	$1, %rcx
	movq	%rcx, %rdx
	movq	%rdx, %rcx
	movl	%ecx, %esi
	movabsq	$4294967296, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	jmp	.L548
.L547:
	movq	-168(%rbp), %rax
	movq	%rax, -24(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -40(%rbp)
	movl	$1, -36(%rbp)
	movl	-172(%rbp), %eax
	cltq
	movq	%rax, -32(%rbp)
.L550:
	cmpq	$0, -24(%rbp)
	jne	.L549
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	jmp	.L548
.L549:
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movq	_const_strconv__base_digits(%rip), %rcx
	movq	-24(%rbp), %rax
	movl	$0, %edx
	divq	-32(%rbp)
	movq	%rdx, %rax
	addq	%rcx, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	movl	%eax, %edi
	call	u8_ascii_str
	movq	%rax, -80(%rbp)
	movq	%rdx, -72(%rbp)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	-80(%rbp), %rdi
	movq	-72(%rbp), %rsi
	movq	%rdx, %rcx
	movq	%rax, %rdx
	call	string__plus
	movq	%rax, -48(%rbp)
	movq	%rdx, -40(%rbp)
	leaq	-64(%rbp), %rax
	movq	%rax, %rdi
	call	string_free
	leaq	-80(%rbp), %rax
	movq	%rax, %rdi
	call	string_free
	movq	-24(%rbp), %rax
	movl	$0, %edx
	divq	-32(%rbp)
	movq	%rax, -24(%rbp)
	jmp	.L550
.L548:
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	strconv__bool_to_u32
	.hidden	strconv__bool_to_u32
strconv__bool_to_u32:
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edi, %eax
	movb	%al, -4(%rbp)
	cmpb	$0, -4(%rbp)
	je	.L553
	movl	$1, %eax
	jmp	.L554
.L553:
	movl	$0, %eax
.L554:
	popq	%rbp
	ret
	.globl	strconv__bool_to_u64
	.hidden	strconv__bool_to_u64
strconv__bool_to_u64:
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edi, %eax
	movb	%al, -4(%rbp)
	cmpb	$0, -4(%rbp)
	je	.L556
	movl	$1, %eax
	jmp	.L557
.L556:
	movl	$0, %eax
.L557:
	popq	%rbp
	ret
	.section	.rodata, "a"
.LC41:
	.string	"nan"
.LC42:
	.string	"-inf"
.LC43:
	.string	"+inf"
.LC44:
	.string	"-0e+00"
.LC45:
	.string	"0e+00"
	.text
	.globl	strconv__get_string_special
	.hidden	strconv__get_string_special
strconv__get_string_special:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	movl	%edx, %eax
	movl	%edi, %edx
	movb	%dl, -20(%rbp)
	movl	%esi, %edx
	movb	%dl, -24(%rbp)
	movb	%al, -28(%rbp)
	cmpb	$0, -28(%rbp)
	jne	.L559
	leaq	.LC41(%rip), %rcx
	movq	%rbx, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, %rbx
	movq	%rbx, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %rbx
	jmp	.L560
.L559:
	cmpb	$0, -24(%rbp)
	jne	.L561
	cmpb	$0, -20(%rbp)
	je	.L562
	leaq	.LC42(%rip), %rcx
	movq	%rbx, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, %rbx
	movq	%rbx, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %rbx
	jmp	.L560
.L562:
	leaq	.LC43(%rip), %rcx
	movq	%rbx, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, %rbx
	movq	%rbx, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %rbx
	jmp	.L560
.L561:
	cmpb	$0, -20(%rbp)
	je	.L563
	leaq	.LC44(%rip), %rcx
	movq	%rbx, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$6, %rax
	movq	%rax, %rbx
	movq	%rbx, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %rbx
	jmp	.L560
.L563:
	leaq	.LC45(%rip), %rcx
	movq	%rbx, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$5, %rax
	movq	%rax, %rbx
	movq	%rbx, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %rbx
.L560:
	movq	%rcx, %rax
	movq	%rbx, %rdx
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	strconv__log10_pow2
	.hidden	strconv__log10_pow2
strconv__log10_pow2:
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %eax
	imull	$78913, %eax, %eax
	shrl	$18, %eax
	popq	%rbp
	ret
	.globl	strconv__log10_pow5
	.hidden	strconv__log10_pow5
strconv__log10_pow5:
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %eax
	imull	$732923, %eax, %eax
	shrl	$20, %eax
	popq	%rbp
	ret
	.globl	strconv__pow5_bits
	.hidden	strconv__pow5_bits
strconv__pow5_bits:
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %eax
	imull	$1217359, %eax, %eax
	shrl	$19, %eax
	addl	$1, %eax
	popq	%rbp
	ret
	.globl	strconv__shift_right_128
	.hidden	strconv__shift_right_128
strconv__shift_right_128:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	movq	%rdi, %rcx
	movq	%rsi, %rax
	movq	%rax, %rbx
	movq	%rcx, -32(%rbp)
	movq	%rbx, -24(%rbp)
	movl	%edx, -36(%rbp)
	movq	-24(%rbp), %rax
	movl	$64, %edx
	subl	-36(%rbp), %edx
	movl	%edx, %ecx
	salq	%cl, %rax
	movq	%rax, %rsi
	movq	-32(%rbp), %rdx
	movl	-36(%rbp), %eax
	movl	%eax, %ecx
	shrq	%cl, %rdx
	movq	%rdx, %rax
	orq	%rsi, %rax
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	strconv__mul_shift_64
	.hidden	strconv__mul_shift_64
strconv__mul_shift_64:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$120, %rsp
	movq	%rdi, -104(%rbp)
	movq	%rsi, %rax
	movq	%rdx, %rsi
	movq	%rsi, %rdx
	movq	%rax, -128(%rbp)
	movq	%rdx, -120(%rbp)
	movl	%ecx, -108(%rbp)
	movq	-120(%rbp), %rdx
	movq	-104(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	math__bits__mul_64
	movq	%rax, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	-128(%rbp), %rdx
	movq	-104(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	math__bits__mul_64
	movq	%rax, -80(%rbp)
	movq	%rdx, -72(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -96(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, -88(%rbp)
	movq	-96(%rbp), %rax
	cmpq	-40(%rbp), %rax
	jnb	.L574
	movq	-88(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -88(%rbp)
.L574:
	movl	-108(%rbp), %eax
	leal	-64(%rax), %edx
	movq	-96(%rbp), %rcx
	movq	-88(%rbp), %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	strconv__shift_right_128
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	strconv__pow5_factor_64
	.hidden	strconv__pow5_factor_64
strconv__pow5_factor_64:
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, -8(%rbp)
	movl	$0, -12(%rbp)
.L579:
	movq	-8(%rbp), %rax
	movabsq	$-3689348814741910323, %rdx
	mulq	%rdx
	movq	%rdx, %rax
	shrq	$2, %rax
	movq	%rax, -24(%rbp)
	movq	-8(%rbp), %rcx
	movabsq	$-3689348814741910323, %rdx
	movq	%rcx, %rax
	mulq	%rdx
	shrq	$2, %rdx
	movq	%rdx, %rax
	salq	$2, %rax
	addq	%rdx, %rax
	subq	%rax, %rcx
	movq	%rcx, %rdx
	movq	%rdx, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.L577
	movl	-12(%rbp), %eax
	jmp	.L580
.L577:
	movq	-24(%rbp), %rax
	movq	%rax, -8(%rbp)
	addl	$1, -12(%rbp)
	jmp	.L579
.L580:
	popq	%rbp
	ret
	.globl	strconv__multiple_of_power_of_five_64
	.hidden	strconv__multiple_of_power_of_five_64
strconv__multiple_of_power_of_five_64:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	strconv__pow5_factor_64
	cmpl	-12(%rbp), %eax
	setnb	%al
	leave
	ret
	.globl	strconv__multiple_of_power_of_two_64
	.hidden	strconv__multiple_of_power_of_two_64
strconv__multiple_of_power_of_two_64:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	math__bits__trailing_zeros_64
	cmpl	-12(%rbp), %eax
	setnb	%al
	leave
	ret
	.globl	strconv__dec_digits
strconv__dec_digits:
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, -8(%rbp)
	movabsq	$9999999999, %rax
	cmpq	-8(%rbp), %rax
	jb	.L586
	cmpq	$99999, -8(%rbp)
	ja	.L587
	cmpq	$99, -8(%rbp)
	ja	.L588
	cmpq	$9, -8(%rbp)
	ja	.L589
	movl	$1, %eax
	jmp	.L590
.L589:
	movl	$2, %eax
	jmp	.L590
.L588:
	cmpq	$999, -8(%rbp)
	ja	.L591
	movl	$3, %eax
	jmp	.L590
.L591:
	cmpq	$9999, -8(%rbp)
	ja	.L592
	movl	$4, %eax
	jmp	.L590
.L592:
	movl	$5, %eax
	jmp	.L590
.L587:
	cmpq	$9999999, -8(%rbp)
	ja	.L593
	cmpq	$999999, -8(%rbp)
	ja	.L594
	movl	$6, %eax
	jmp	.L590
.L594:
	movl	$7, %eax
	jmp	.L590
.L593:
	cmpq	$99999999, -8(%rbp)
	ja	.L595
	movl	$8, %eax
	jmp	.L590
.L595:
	cmpq	$999999999, -8(%rbp)
	ja	.L596
	movl	$9, %eax
	jmp	.L590
.L596:
	movl	$10, %eax
	jmp	.L590
.L586:
	movabsq	$999999999999999, %rax
	cmpq	-8(%rbp), %rax
	jb	.L597
	movabsq	$999999999999, %rax
	cmpq	-8(%rbp), %rax
	jb	.L598
	movabsq	$99999999999, %rax
	cmpq	-8(%rbp), %rax
	jb	.L599
	movl	$11, %eax
	jmp	.L590
.L599:
	movl	$12, %eax
	jmp	.L590
.L598:
	movabsq	$9999999999999, %rax
	cmpq	-8(%rbp), %rax
	jb	.L600
	movl	$13, %eax
	jmp	.L590
.L600:
	movabsq	$99999999999999, %rax
	cmpq	-8(%rbp), %rax
	jb	.L601
	movl	$14, %eax
	jmp	.L590
.L601:
	movl	$15, %eax
	jmp	.L590
.L597:
	movabsq	$99999999999999999, %rax
	cmpq	-8(%rbp), %rax
	jb	.L602
	movabsq	$9999999999999999, %rax
	cmpq	-8(%rbp), %rax
	jb	.L603
	movl	$16, %eax
	jmp	.L590
.L603:
	movl	$17, %eax
	jmp	.L590
.L602:
	movabsq	$999999999999999999, %rax
	cmpq	-8(%rbp), %rax
	jb	.L604
	movl	$18, %eax
	jmp	.L590
.L604:
	movabsq	$-8446744073709551617, %rax
	cmpq	-8(%rbp), %rax
	jb	.L605
	movl	$19, %eax
	jmp	.L590
.L605:
	movl	$20, %eax
.L590:
	popq	%rbp
	ret
	.globl	__new_array
	.hidden	__new_array
__new_array:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$112, %rsp
	movq	%rdi, -88(%rbp)
	movl	%esi, -92(%rbp)
	movl	%edx, -96(%rbp)
	movl	%ecx, -100(%rbp)
	movl	-96(%rbp), %edx
	movl	-92(%rbp), %eax
	cmpl	%eax, %edx
	cmovgel	%edx, %eax
	movl	%eax, -4(%rbp)
	movl	-100(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-4(%rbp), %eax
	movslq	%eax, %rdx
	movl	-100(%rbp), %eax
	cltq
	imulq	%rdx, %rax
	movq	%rax, %rdi
	call	vcalloc
	movq	%rax, -40(%rbp)
	movl	$0, -32(%rbp)
	movl	-92(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-4(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -20(%rbp)
	movq	-88(%rbp), %rcx
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movq	-88(%rbp), %rax
	leave
	ret
	.globl	__new_array_with_default
	.hidden	__new_array_with_default
__new_array_with_default:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$144, %rsp
	movq	%rdi, -120(%rbp)
	movl	%esi, -124(%rbp)
	movl	%edx, -128(%rbp)
	movl	%ecx, -132(%rbp)
	movq	%r8, -144(%rbp)
	movl	-128(%rbp), %edx
	movl	-124(%rbp), %eax
	cmpl	%eax, %edx
	cmovgel	%edx, %eax
	movl	%eax, -20(%rbp)
	movl	-132(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	$0, -72(%rbp)
	movl	$0, -64(%rbp)
	movl	-124(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -52(%rbp)
	movl	-20(%rbp), %eax
	movslq	%eax, %rdx
	movl	-132(%rbp), %eax
	cltq
	imulq	%rdx, %rax
	movq	%rax, -32(%rbp)
	cmpl	$0, -20(%rbp)
	jle	.L609
	cmpl	$0, -124(%rbp)
	jne	.L609
	movq	-32(%rbp), %rax
	movq	%rax, %rdi
	call	__at_least_one
	movq	%rax, %rdi
	call	_v_malloc
	movq	%rax, -72(%rbp)
	jmp	.L610
.L609:
	movq	-32(%rbp), %rax
	movq	%rax, %rdi
	call	vcalloc
	movq	%rax, -72(%rbp)
.L610:
	cmpq	$0, -144(%rbp)
	je	.L611
	movq	-72(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L611
	movl	-80(%rbp), %eax
	cmpl	$1, %eax
	jne	.L612
	movq	-144(%rbp), %rax
	movzbl	(%rax), %eax
	movb	%al, -33(%rbp)
	movl	$0, -12(%rbp)
	jmp	.L613
.L614:
	movl	-12(%rbp), %eax
	movslq	%eax, %rdx
	movq	-8(%rbp), %rax
	addq	%rax, %rdx
	movzbl	-33(%rbp), %eax
	movb	%al, (%rdx)
	addl	$1, -12(%rbp)
.L613:
	movl	-60(%rbp), %eax
	cmpl	%eax, -12(%rbp)
	jl	.L614
	jmp	.L611
.L612:
	movl	$0, -16(%rbp)
	jmp	.L615
.L616:
	movl	-80(%rbp), %eax
	movslq	%eax, %rdx
	movq	-144(%rbp), %rcx
	movq	-8(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	vmemcpy
	movl	-80(%rbp), %eax
	cltq
	addq	%rax, -8(%rbp)
	addl	$1, -16(%rbp)
.L615:
	movl	-60(%rbp), %eax
	cmpl	%eax, -16(%rbp)
	jl	.L616
.L611:
	movq	-120(%rbp), %rcx
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movq	-120(%rbp), %rax
	leave
	ret
	.globl	__new_array_with_multi_default
	.hidden	__new_array_with_multi_default
__new_array_with_multi_default:
	pushq	%rbp
	movq	%rsp, %rbp
	addq	$-128, %rsp
	movq	%rdi, -104(%rbp)
	movl	%esi, -108(%rbp)
	movl	%edx, -112(%rbp)
	movl	%ecx, -116(%rbp)
	movq	%r8, -128(%rbp)
	movl	-112(%rbp), %edx
	movl	-108(%rbp), %eax
	cmpl	%eax, %edx
	cmovgel	%edx, %eax
	movl	%eax, -16(%rbp)
	movl	-116(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	$0, -56(%rbp)
	movl	$0, -48(%rbp)
	movl	-108(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-16(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	$0, -36(%rbp)
	movl	-16(%rbp), %eax
	movslq	%eax, %rdx
	movl	-116(%rbp), %eax
	cltq
	imulq	%rdx, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	__at_least_one
	movq	%rax, %rdi
	call	vcalloc
	movq	%rax, -56(%rbp)
	cmpq	$0, -128(%rbp)
	je	.L619
	movq	-56(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L619
	movl	$0, -12(%rbp)
	jmp	.L620
.L621:
	movl	-64(%rbp), %eax
	movslq	%eax, %rdx
	movl	-64(%rbp), %eax
	imull	-12(%rbp), %eax
	movslq	%eax, %rcx
	movq	-128(%rbp), %rax
	addq	%rax, %rcx
	movq	-8(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	vmemcpy
	movl	-64(%rbp), %eax
	cltq
	addq	%rax, -8(%rbp)
	addl	$1, -12(%rbp)
.L620:
	movl	-44(%rbp), %eax
	cmpl	%eax, -12(%rbp)
	jl	.L621
.L619:
	movq	-104(%rbp), %rcx
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movq	-104(%rbp), %rax
	leave
	ret
	.globl	__new_array_with_array_default
	.hidden	__new_array_with_array_default
__new_array_with_array_default:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$144, %rsp
	movq	%rdi, -120(%rbp)
	movl	%esi, -124(%rbp)
	movl	%edx, -128(%rbp)
	movl	%ecx, -132(%rbp)
	movl	%r8d, -136(%rbp)
	movl	-128(%rbp), %edx
	movl	-124(%rbp), %eax
	cmpl	%eax, %edx
	cmovgel	%edx, %eax
	movl	%eax, -16(%rbp)
	movl	-132(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-16(%rbp), %eax
	movslq	%eax, %rdx
	movl	-132(%rbp), %eax
	cltq
	imulq	%rdx, %rax
	movq	%rax, %rdi
	call	__at_least_one
	movq	%rax, %rdi
	call	_v_malloc
	movq	%rax, -40(%rbp)
	movl	$0, -32(%rbp)
	movl	-124(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-16(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -20(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L624
	movl	$0, -12(%rbp)
	jmp	.L625
.L626:
	leaq	-112(%rbp), %rax
	movl	-136(%rbp), %edx
	leaq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	array_clone_to_depth
	movl	-48(%rbp), %eax
	movslq	%eax, %rdx
	leaq	-112(%rbp), %rcx
	movq	-8(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	vmemcpy
	movl	-48(%rbp), %eax
	cltq
	addq	%rax, -8(%rbp)
	addl	$1, -12(%rbp)
.L625:
	movl	-28(%rbp), %eax
	cmpl	%eax, -12(%rbp)
	jl	.L626
.L624:
	movq	-120(%rbp), %rcx
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movq	-120(%rbp), %rax
	leave
	ret
	.globl	new_array_from_c_array
	.hidden	new_array_from_c_array
new_array_from_c_array:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$112, %rsp
	movq	%rdi, -88(%rbp)
	movl	%esi, -92(%rbp)
	movl	%edx, -96(%rbp)
	movl	%ecx, -100(%rbp)
	movq	%r8, -112(%rbp)
	movl	-96(%rbp), %edx
	movl	-92(%rbp), %eax
	cmpl	%eax, %edx
	cmovgel	%edx, %eax
	movl	%eax, -4(%rbp)
	movl	-100(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-4(%rbp), %eax
	movslq	%eax, %rdx
	movl	-100(%rbp), %eax
	cltq
	imulq	%rdx, %rax
	movq	%rax, %rdi
	call	vcalloc
	movq	%rax, -40(%rbp)
	movl	$0, -32(%rbp)
	movl	-92(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-4(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -20(%rbp)
	movl	-92(%rbp), %eax
	movslq	%eax, %rdx
	movl	-100(%rbp), %eax
	cltq
	imulq	%rdx, %rax
	movq	%rax, %rdx
	movq	-40(%rbp), %rax
	movq	-112(%rbp), %rcx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	vmemcpy
	movq	-88(%rbp), %rcx
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movq	-88(%rbp), %rax
	leave
	ret
	.section	.rodata, "a"
.LC46:
	.string	"array.ensure_cap: array with the flag `.nogrow` cannot grow in size, array required new size: "
	.text
	.globl	array_ensure_cap
	.hidden	array_ensure_cap
array_ensure_cap:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$136, %rsp
	movq	%rdi, -136(%rbp)
	movl	%esi, -140(%rbp)
	movq	-136(%rbp), %rax
	movl	24(%rax), %eax
	cmpl	%eax, -140(%rbp)
	jle	.L641
	movq	-136(%rbp), %rax
	addq	$28, %rax
	movl	$4, %esi
	movq	%rax, %rdi
	call	ArrayFlags_has
	testb	%al, %al
	je	.L633
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -128(%rbp)
	movaps	%xmm0, -112(%rbp)
	movaps	%xmm0, -96(%rbp)
	movaps	%xmm0, -80(%rbp)
	movaps	%xmm0, -64(%rbp)
	leaq	.LC46(%rip), %rax
	movq	%rax, -128(%rbp)
	movl	$94, -120(%rbp)
	movl	$1, -116(%rbp)
	movl	$65031, -112(%rbp)
	movl	-140(%rbp), %eax
	movl	%eax, -104(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -88(%rbp)
	movl	$1, -76(%rbp)
	leaq	-128(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	_v_panic
.L633:
	movq	-136(%rbp), %rax
	movl	24(%rax), %eax
	testl	%eax, %eax
	jle	.L634
	movq	-136(%rbp), %rax
	movl	24(%rax), %eax
	jmp	.L635
.L634:
	movl	$2, %eax
.L635:
	movl	%eax, -20(%rbp)
.L638:
	movl	-140(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jle	.L642
	sall	-20(%rbp)
	jmp	.L638
.L642:
	nop
	movl	-20(%rbp), %eax
	movslq	%eax, %rdx
	movq	-136(%rbp), %rax
	movl	(%rax), %eax
	cltq
	imulq	%rdx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, %rdi
	call	__at_least_one
	movq	%rax, %rdi
	call	_v_malloc
	movq	%rax, -40(%rbp)
	movq	-136(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L639
	movq	-136(%rbp), %rax
	movl	20(%rax), %eax
	movslq	%eax, %rdx
	movq	-136(%rbp), %rax
	movl	(%rax), %eax
	cltq
	imulq	%rdx, %rax
	movq	%rax, %rdx
	movq	-136(%rbp), %rax
	movq	8(%rax), %rcx
	movq	-40(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	vmemcpy
	movq	-136(%rbp), %rax
	addq	$28, %rax
	movl	$1, %esi
	movq	%rax, %rdi
	call	ArrayFlags_has
	testb	%al, %al
	je	.L639
	movq	-136(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	call	_v_free
.L639:
	movq	-136(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rdx, 8(%rax)
	movq	-136(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-136(%rbp), %rax
	movl	-20(%rbp), %edx
	movl	%edx, 24(%rax)
	jmp	.L630
.L641:
	nop
.L630:
	movq	-8(%rbp), %rbx
	leave
	ret
	.section	.rodata, "a"
.LC47:
	.string	"array.repeat: count is negative: "
	.text
	.globl	array_repeat_to_depth
array_repeat_to_depth:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$216, %rsp
	movq	%rdi, -216(%rbp)
	movl	%esi, -220(%rbp)
	movl	%edx, -224(%rbp)
	cmpl	$0, -220(%rbp)
	jns	.L644
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -208(%rbp)
	movaps	%xmm0, -192(%rbp)
	movaps	%xmm0, -176(%rbp)
	movaps	%xmm0, -160(%rbp)
	movaps	%xmm0, -144(%rbp)
	leaq	.LC47(%rip), %rax
	movq	%rax, -208(%rbp)
	movl	$33, -200(%rbp)
	movl	$1, -196(%rbp)
	movl	$65031, -192(%rbp)
	movl	-220(%rbp), %eax
	movl	%eax, -184(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -168(%rbp)
	movl	$1, -156(%rbp)
	leaq	-208(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	_v_panic
.L644:
	movl	-220(%rbp), %eax
	movslq	%eax, %rdx
	movl	36(%rbp), %eax
	cltq
	imulq	%rax, %rdx
	movl	16(%rbp), %eax
	cltq
	imulq	%rdx, %rax
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.L645
	movl	16(%rbp), %eax
	cltq
	movq	%rax, -24(%rbp)
.L645:
	movl	16(%rbp), %eax
	movl	%eax, -96(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	vcalloc
	movq	%rax, -88(%rbp)
	movl	$0, -80(%rbp)
	movl	36(%rbp), %eax
	imull	-220(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	36(%rbp), %eax
	imull	-220(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	$0, -68(%rbp)
	movl	36(%rbp), %eax
	testl	%eax, %eax
	jle	.L646
	movl	36(%rbp), %eax
	movslq	%eax, %rdx
	movl	16(%rbp), %eax
	cltq
	imulq	%rdx, %rax
	movq	%rax, -48(%rbp)
	movl	36(%rbp), %eax
	movslq	%eax, %rdx
	movl	-96(%rbp), %eax
	cltq
	imulq	%rdx, %rax
	movq	%rax, -56(%rbp)
	movq	-88(%rbp), %rax
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.L646
	movl	$0, -36(%rbp)
	jmp	.L647
.L650:
	cmpl	$0, -224(%rbp)
	jle	.L648
	leaq	-208(%rbp), %rax
	movl	-224(%rbp), %edx
	leaq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	array_clone_to_depth
	movq	-48(%rbp), %rdx
	movq	-200(%rbp), %rcx
	movq	-32(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	vmemcpy
	jmp	.L649
.L648:
	movq	-48(%rbp), %rdx
	movq	24(%rbp), %rcx
	movq	-32(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	vmemcpy
.L649:
	movq	-56(%rbp), %rax
	addq	%rax, -32(%rbp)
	addl	$1, -36(%rbp)
.L647:
	movl	-36(%rbp), %eax
	cmpl	-220(%rbp), %eax
	jl	.L650
.L646:
	movq	-216(%rbp), %rcx
	movq	-96(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movq	-216(%rbp), %rax
	movq	-8(%rbp), %rbx
	leave
	ret
	.section	.rodata, "a"
.LC48:
	.string	"array.insert_many: index out of range (i == "
.LC49:
	.string	", a.len == "
.LC50:
	.string	")"
	.text
	.globl	array_insert_many
	.hidden	array_insert_many
array_insert_many:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$184, %rsp
	movq	%rdi, -168(%rbp)
	movl	%esi, -172(%rbp)
	movq	%rdx, -184(%rbp)
	movl	%ecx, -176(%rbp)
	cmpl	$0, -172(%rbp)
	js	.L653
	movq	-168(%rbp), %rax
	movl	20(%rax), %eax
	cmpl	%eax, -172(%rbp)
	jle	.L654
.L653:
	leaq	-160(%rbp), %rdx
	movl	$0, %eax
	movl	$15, %ecx
	movq	%rdx, %rdi
	rep stosq
	leaq	.LC48(%rip), %rax
	movq	%rax, -160(%rbp)
	movl	$44, -152(%rbp)
	movl	$1, -148(%rbp)
	movl	$65031, -144(%rbp)
	movl	-172(%rbp), %eax
	movl	%eax, -136(%rbp)
	leaq	.LC49(%rip), %rax
	movq	%rax, -120(%rbp)
	movl	$11, -112(%rbp)
	movl	$1, -108(%rbp)
	movl	$65031, -104(%rbp)
	movq	-168(%rbp), %rax
	movl	20(%rax), %eax
	movl	%eax, -96(%rbp)
	leaq	.LC50(%rip), %rax
	movq	%rax, -80(%rbp)
	movl	$1, -72(%rbp)
	movl	$1, -68(%rbp)
	leaq	-160(%rbp), %rax
	movq	%rax, %rsi
	movl	$3, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	_v_panic
.L654:
	movq	-168(%rbp), %rax
	movl	20(%rax), %edx
	movl	-176(%rbp), %eax
	addl	%eax, %edx
	movq	-168(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	array_ensure_cap
	movq	-168(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -20(%rbp)
	movl	-172(%rbp), %edi
	movq	-168(%rbp), %rcx
	subq	$32, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	24(%rcx), %rdx
	movq	%rax, 16(%rsi)
	movq	%rdx, 24(%rsi)
	call	array_get_unsafe
	addq	$32, %rsp
	movq	%rax, -32(%rbp)
	movq	-168(%rbp), %rax
	movl	20(%rax), %eax
	subl	-172(%rbp), %eax
	movslq	%eax, %rdx
	movl	-20(%rbp), %eax
	cltq
	imulq	%rdx, %rax
	movq	%rax, %rbx
	movl	-172(%rbp), %edx
	movl	-176(%rbp), %eax
	leal	(%rdx,%rax), %edi
	movq	-168(%rbp), %rcx
	subq	$32, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	24(%rcx), %rdx
	movq	%rax, 16(%rsi)
	movq	%rdx, 24(%rsi)
	call	array_get_unsafe
	addq	$32, %rsp
	movq	%rax, %rcx
	movq	-32(%rbp), %rax
	movq	%rbx, %rdx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	vmemmove
	movl	-176(%rbp), %eax
	movslq	%eax, %rdx
	movl	-20(%rbp), %eax
	cltq
	imulq	%rdx, %rax
	movq	%rax, %rdx
	movq	-184(%rbp), %rcx
	movq	-32(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	vmemcpy
	movq	-168(%rbp), %rax
	movl	20(%rax), %edx
	movl	-176(%rbp), %eax
	addl	%eax, %edx
	movq	-168(%rbp), %rax
	movl	%edx, 20(%rax)
	nop
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	array_prepend_many
	.hidden	array_prepend_many
array_prepend_many:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	array_insert_many
	nop
	leave
	ret
	.globl	array_delete
array_delete:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movl	-12(%rbp), %ecx
	movq	-8(%rbp), %rax
	movl	$1, %edx
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	array_delete_many
	nop
	leave
	ret
	.section	.rodata, "a"
.LC51:
	.string	".."
.LC52:
	.string	"array.delete: index out of range (i == "
	.text
	.globl	array_delete_many
array_delete_many:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$296, %rsp
	movq	%rdi, -296(%rbp)
	movl	%esi, -300(%rbp)
	movl	%edx, -304(%rbp)
	cmpl	$0, -300(%rbp)
	js	.L658
	movl	-300(%rbp), %edx
	movl	-304(%rbp), %eax
	addl	%eax, %edx
	movq	-296(%rbp), %rax
	movl	20(%rax), %eax
	cmpl	%eax, %edx
	jle	.L659
.L658:
	cmpl	$1, -304(%rbp)
	jle	.L660
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -288(%rbp)
	movaps	%xmm0, -272(%rbp)
	movaps	%xmm0, -256(%rbp)
	movaps	%xmm0, -240(%rbp)
	movaps	%xmm0, -224(%rbp)
	leaq	.LC51(%rip), %rax
	movq	%rax, -288(%rbp)
	movl	$2, -280(%rbp)
	movl	$1, -276(%rbp)
	movl	$65031, -272(%rbp)
	movl	-300(%rbp), %edx
	movl	-304(%rbp), %eax
	addl	%edx, %eax
	movl	%eax, -264(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -248(%rbp)
	movl	$1, -236(%rbp)
	leaq	-288(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	movq	%rax, -48(%rbp)
	movq	%rdx, -40(%rbp)
	jmp	.L661
.L660:
	leaq	.LC30(%rip), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -40(%rbp)
	movl	$1, -36(%rbp)
.L661:
	leaq	-208(%rbp), %rdx
	movl	$0, %eax
	movl	$20, %ecx
	movq	%rdx, %rdi
	rep stosq
	leaq	.LC52(%rip), %rax
	movq	%rax, -208(%rbp)
	movl	$39, -200(%rbp)
	movl	$1, -196(%rbp)
	movl	$65031, -192(%rbp)
	movl	-300(%rbp), %eax
	movl	%eax, -184(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -168(%rbp)
	movl	$1, -156(%rbp)
	movl	$65040, -152(%rbp)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, -144(%rbp)
	movq	%rdx, -136(%rbp)
	leaq	.LC49(%rip), %rax
	movq	%rax, -128(%rbp)
	movl	$11, -120(%rbp)
	movl	$1, -116(%rbp)
	movl	$65031, -112(%rbp)
	movq	-296(%rbp), %rax
	movl	20(%rax), %eax
	movl	%eax, -104(%rbp)
	leaq	.LC50(%rip), %rax
	movq	%rax, -88(%rbp)
	movl	$1, -80(%rbp)
	movl	$1, -76(%rbp)
	leaq	-208(%rbp), %rax
	movq	%rax, %rsi
	movl	$4, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	_v_panic
.L659:
	movq	-296(%rbp), %rax
	addq	$28, %rax
	movl	$3, %esi
	movq	%rax, %rdi
	call	ArrayFlags_all
	testb	%al, %al
	je	.L662
	movq	-296(%rbp), %rax
	movl	20(%rax), %eax
	subl	-300(%rbp), %eax
	subl	-304(%rbp), %eax
	movslq	%eax, %rdx
	movq	-296(%rbp), %rax
	movl	(%rax), %eax
	cltq
	imulq	%rdx, %rax
	movq	%rax, %rdi
	movq	-296(%rbp), %rax
	movq	8(%rax), %rcx
	movl	-300(%rbp), %edx
	movl	-304(%rbp), %eax
	addl	%edx, %eax
	movslq	%eax, %rdx
	movq	-296(%rbp), %rax
	movl	(%rax), %eax
	cltq
	imulq	%rdx, %rax
	addq	%rax, %rcx
	movq	-296(%rbp), %rax
	movq	8(%rax), %rsi
	movl	-300(%rbp), %eax
	movslq	%eax, %rdx
	movq	-296(%rbp), %rax
	movl	(%rax), %eax
	cltq
	imulq	%rdx, %rax
	addq	%rsi, %rax
	movq	%rdi, %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	vmemmove
	movq	-296(%rbp), %rax
	movl	20(%rax), %eax
	subl	-304(%rbp), %eax
	movl	%eax, %edx
	movq	-296(%rbp), %rax
	movl	%edx, 20(%rax)
	jmp	.L657
.L662:
	movq	-296(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-296(%rbp), %rax
	movl	20(%rax), %eax
	subl	-304(%rbp), %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -28(%rbp)
	je	.L664
	movl	-28(%rbp), %eax
	jmp	.L665
.L664:
	movl	$1, %eax
.L665:
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	movslq	%eax, %rdx
	movq	-296(%rbp), %rax
	movl	(%rax), %eax
	cltq
	imulq	%rdx, %rax
	movq	%rax, %rdi
	call	vcalloc
	movq	-296(%rbp), %rdx
	movq	%rax, 8(%rdx)
	movl	-300(%rbp), %eax
	movslq	%eax, %rdx
	movq	-296(%rbp), %rax
	movl	(%rax), %eax
	cltq
	imulq	%rdx, %rax
	movq	%rax, %rdx
	movq	-296(%rbp), %rax
	movq	8(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	vmemcpy
	movq	-296(%rbp), %rax
	movl	20(%rax), %eax
	subl	-300(%rbp), %eax
	subl	-304(%rbp), %eax
	movslq	%eax, %rdx
	movq	-296(%rbp), %rax
	movl	(%rax), %eax
	cltq
	imulq	%rdx, %rax
	movq	%rax, %rdi
	movl	-300(%rbp), %edx
	movl	-304(%rbp), %eax
	addl	%edx, %eax
	movslq	%eax, %rdx
	movq	-296(%rbp), %rax
	movl	(%rax), %eax
	cltq
	imulq	%rax, %rdx
	movq	-24(%rbp), %rax
	leaq	(%rdx,%rax), %rcx
	movq	-296(%rbp), %rax
	movq	8(%rax), %rsi
	movl	-300(%rbp), %eax
	movslq	%eax, %rdx
	movq	-296(%rbp), %rax
	movl	(%rax), %eax
	cltq
	imulq	%rdx, %rax
	addq	%rsi, %rax
	movq	%rdi, %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	vmemcpy
	movq	-296(%rbp), %rax
	addq	$28, %rax
	movl	$1, %esi
	movq	%rax, %rdi
	call	ArrayFlags_has
	testb	%al, %al
	je	.L666
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	_v_free
.L666:
	movq	-296(%rbp), %rax
	movl	-28(%rbp), %edx
	movl	%edx, 20(%rax)
	movq	-296(%rbp), %rax
	movl	-32(%rbp), %edx
	movl	%edx, 24(%rax)
.L657:
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	array_trim
array_trim:
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	cmpl	%eax, -12(%rbp)
	jge	.L669
	movq	-8(%rbp), %rax
	movl	-12(%rbp), %edx
	movl	%edx, 20(%rax)
.L669:
	nop
	popq	%rbp
	ret
	.globl	array_get_unsafe
	.hidden	array_get_unsafe
array_get_unsafe:
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edi, -4(%rbp)
	movq	24(%rbp), %rcx
	movl	-4(%rbp), %eax
	movslq	%eax, %rdx
	movl	16(%rbp), %eax
	cltq
	imulq	%rdx, %rax
	addq	%rcx, %rax
	popq	%rbp
	ret
	.section	.rodata, "a"
.LC53:
	.string	"array.get: index out of range (i == "
	.text
	.globl	array_get
	.hidden	array_get
array_get:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$152, %rsp
	movl	%edi, -148(%rbp)
	cmpl	$0, -148(%rbp)
	js	.L673
	movl	36(%rbp), %eax
	cmpl	%eax, -148(%rbp)
	jl	.L674
.L673:
	leaq	-144(%rbp), %rdx
	movl	$0, %eax
	movl	$15, %ecx
	movq	%rdx, %rdi
	rep stosq
	leaq	.LC53(%rip), %rax
	movq	%rax, -144(%rbp)
	movl	$36, -136(%rbp)
	movl	$1, -132(%rbp)
	movl	$65031, -128(%rbp)
	movl	-148(%rbp), %eax
	movl	%eax, -120(%rbp)
	leaq	.LC49(%rip), %rax
	movq	%rax, -104(%rbp)
	movl	$11, -96(%rbp)
	movl	$1, -92(%rbp)
	movl	$65031, -88(%rbp)
	movl	36(%rbp), %eax
	movl	%eax, -80(%rbp)
	leaq	.LC50(%rip), %rax
	movq	%rax, -64(%rbp)
	movl	$1, -56(%rbp)
	movl	$1, -52(%rbp)
	leaq	-144(%rbp), %rax
	movq	%rax, %rsi
	movl	$3, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	_v_panic
.L674:
	movq	24(%rbp), %rcx
	movl	-148(%rbp), %eax
	movslq	%eax, %rdx
	movl	16(%rbp), %eax
	cltq
	imulq	%rdx, %rax
	addq	%rcx, %rax
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	array_get_with_check
	.hidden	array_get_with_check
array_get_with_check:
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edi, -4(%rbp)
	cmpl	$0, -4(%rbp)
	js	.L677
	movl	36(%rbp), %eax
	cmpl	%eax, -4(%rbp)
	jl	.L678
.L677:
	movl	$0, %eax
	jmp	.L679
.L678:
	movq	24(%rbp), %rcx
	movl	-4(%rbp), %eax
	movslq	%eax, %rdx
	movl	16(%rbp), %eax
	cltq
	imulq	%rdx, %rax
	addq	%rcx, %rax
.L679:
	popq	%rbp
	ret
	.section	.rodata, "a"
.LC54:
	.string	"array.first: array is empty"
	.text
	.globl	array_first
array_first:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$8, %rsp
	movl	36(%rbp), %ecx
	testl	%ecx, %ecx
	jne	.L681
	leaq	.LC54(%rip), %rax
	movq	%rdx, %rsi
	movabsq	$-4294967296, %rcx
	andq	%rsi, %rcx
	orq	$27, %rcx
	movq	%rcx, %rdx
	movq	%rdx, %rcx
	movl	%ecx, %esi
	movabsq	$4294967296, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	_v_panic
.L681:
	movq	24(%rbp), %rax
	movq	-8(%rbp), %rbx
	leave
	ret
	.section	.rodata, "a"
.LC55:
	.string	"array.last: array is empty"
	.text
	.globl	array_last
array_last:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$8, %rsp
	movl	36(%rbp), %ecx
	testl	%ecx, %ecx
	jne	.L684
	leaq	.LC55(%rip), %rax
	movq	%rdx, %rsi
	movabsq	$-4294967296, %rcx
	andq	%rsi, %rcx
	orq	$26, %rcx
	movq	%rcx, %rdx
	movq	%rdx, %rcx
	movl	%ecx, %esi
	movabsq	$4294967296, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	_v_panic
.L684:
	movq	24(%rbp), %rcx
	movl	36(%rbp), %eax
	subl	$1, %eax
	movslq	%eax, %rdx
	movl	16(%rbp), %eax
	cltq
	imulq	%rdx, %rax
	addq	%rcx, %rax
	movq	-8(%rbp), %rbx
	leave
	ret
	.section	.rodata, "a"
.LC56:
	.string	"array.pop: array is empty"
	.text
	.globl	array_pop
array_pop:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$40, %rsp
	movq	%rdi, -40(%rbp)
	movq	-40(%rbp), %rcx
	movl	20(%rcx), %ecx
	testl	%ecx, %ecx
	jne	.L687
	leaq	.LC56(%rip), %rax
	movq	%rdx, %rsi
	movabsq	$-4294967296, %rcx
	andq	%rsi, %rcx
	orq	$25, %rcx
	movq	%rcx, %rdx
	movq	%rdx, %rcx
	movl	%ecx, %esi
	movabsq	$4294967296, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	_v_panic
.L687:
	movq	-40(%rbp), %rax
	movl	20(%rax), %eax
	subl	$1, %eax
	movl	%eax, -20(%rbp)
	movq	-40(%rbp), %rax
	movq	8(%rax), %rcx
	movl	-20(%rbp), %eax
	movslq	%eax, %rdx
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	cltq
	imulq	%rdx, %rax
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-40(%rbp), %rax
	movl	-20(%rbp), %edx
	movl	%edx, 20(%rax)
	movq	-32(%rbp), %rax
	movq	-8(%rbp), %rbx
	leave
	ret
	.section	.rodata, "a"
.LC57:
	.string	"array.slice: invalid slice index ("
.LC58:
	.string	" > "
.LC59:
	.string	"array.slice: slice bounds out of range ("
.LC60:
	.string	" >= "
.LC61:
	.string	" < 0)"
	.text
	.globl	array_slice
	.hidden	array_slice
array_slice:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$248, %rsp
	movq	%rdi, -248(%rbp)
	movl	%esi, -252(%rbp)
	movl	%edx, -256(%rbp)
	movl	-256(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-252(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jle	.L690
	leaq	-240(%rbp), %rdx
	movl	$0, %eax
	movl	$15, %ecx
	movq	%rdx, %rdi
	rep stosq
	leaq	.LC57(%rip), %rax
	movq	%rax, -240(%rbp)
	movl	$34, -232(%rbp)
	movl	$1, -228(%rbp)
	movl	$65031, -224(%rbp)
	movl	-252(%rbp), %eax
	movl	%eax, -216(%rbp)
	leaq	.LC58(%rip), %rax
	movq	%rax, -200(%rbp)
	movl	$3, -192(%rbp)
	movl	$1, -188(%rbp)
	movl	$65031, -184(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, -176(%rbp)
	leaq	.LC50(%rip), %rax
	movq	%rax, -160(%rbp)
	movl	$1, -152(%rbp)
	movl	$1, -148(%rbp)
	leaq	-240(%rbp), %rax
	movq	%rax, %rsi
	movl	$3, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	_v_panic
.L690:
	movl	36(%rbp), %eax
	cmpl	%eax, -20(%rbp)
	jle	.L691
	leaq	-240(%rbp), %rdx
	movl	$0, %eax
	movl	$15, %ecx
	movq	%rdx, %rdi
	rep stosq
	leaq	.LC59(%rip), %rax
	movq	%rax, -240(%rbp)
	movl	$40, -232(%rbp)
	movl	$1, -228(%rbp)
	movl	$65031, -224(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, -216(%rbp)
	leaq	.LC60(%rip), %rax
	movq	%rax, -200(%rbp)
	movl	$4, -192(%rbp)
	movl	$1, -188(%rbp)
	movl	$65031, -184(%rbp)
	movl	36(%rbp), %eax
	movl	%eax, -176(%rbp)
	leaq	.LC50(%rip), %rax
	movq	%rax, -160(%rbp)
	movl	$1, -152(%rbp)
	movl	$1, -148(%rbp)
	leaq	-240(%rbp), %rax
	movq	%rax, %rsi
	movl	$3, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	_v_panic
.L691:
	cmpl	$0, -252(%rbp)
	jns	.L692
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -240(%rbp)
	movaps	%xmm0, -224(%rbp)
	movaps	%xmm0, -208(%rbp)
	movaps	%xmm0, -192(%rbp)
	movaps	%xmm0, -176(%rbp)
	leaq	.LC59(%rip), %rax
	movq	%rax, -240(%rbp)
	movl	$40, -232(%rbp)
	movl	$1, -228(%rbp)
	movl	$65031, -224(%rbp)
	movl	-252(%rbp), %eax
	movl	%eax, -216(%rbp)
	leaq	.LC61(%rip), %rax
	movq	%rax, -200(%rbp)
	movl	$5, -192(%rbp)
	movl	$1, -188(%rbp)
	leaq	-240(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	_v_panic
.L692:
	movl	-252(%rbp), %eax
	movslq	%eax, %rdx
	movl	16(%rbp), %eax
	cltq
	imulq	%rdx, %rax
	movq	%rax, -32(%rbp)
	movq	24(%rbp), %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -40(%rbp)
	movl	-20(%rbp), %eax
	subl	-252(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	16(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, -72(%rbp)
	movl	32(%rbp), %eax
	movq	-32(%rbp), %rdx
	addl	%edx, %eax
	movl	%eax, -64(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -52(%rbp)
	movq	-248(%rbp), %rcx
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movq	-248(%rbp), %rax
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	array_slice_ni
	.hidden	array_slice_ni
array_slice_ni:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$24, %rsp
	movq	%rdi, -136(%rbp)
	movl	%esi, -140(%rbp)
	movl	%edx, -144(%rbp)
	movl	-144(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-140(%rbp), %eax
	movl	%eax, -8(%rbp)
	cmpl	$0, -8(%rbp)
	jns	.L695
	movl	36(%rbp), %eax
	addl	%eax, -8(%rbp)
	cmpl	$0, -8(%rbp)
	jns	.L695
	movl	$0, -8(%rbp)
.L695:
	cmpl	$0, -4(%rbp)
	jns	.L696
	movl	36(%rbp), %eax
	addl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	jns	.L696
	movl	$0, -4(%rbp)
.L696:
	movl	36(%rbp), %eax
	cmpl	%eax, -4(%rbp)
	jl	.L697
	movl	36(%rbp), %eax
	movl	%eax, -4(%rbp)
.L697:
	movl	36(%rbp), %eax
	cmpl	%eax, -8(%rbp)
	jge	.L698
	movl	-8(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jle	.L699
.L698:
	movl	16(%rbp), %eax
	movl	%eax, -128(%rbp)
	movq	24(%rbp), %rax
	movq	%rax, -120(%rbp)
	movl	$0, -112(%rbp)
	movl	$0, -108(%rbp)
	movl	$0, -104(%rbp)
	movl	$0, -100(%rbp)
	movq	-136(%rbp), %rcx
	movq	-128(%rbp), %rax
	movq	-120(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-112(%rbp), %rax
	movq	-104(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	jmp	.L694
.L699:
	movl	-8(%rbp), %eax
	movslq	%eax, %rdx
	movl	16(%rbp), %eax
	cltq
	imulq	%rdx, %rax
	movq	%rax, -16(%rbp)
	movq	24(%rbp), %rdx
	movq	-16(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -24(%rbp)
	movl	-4(%rbp), %eax
	subl	-8(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	16(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, -56(%rbp)
	movl	32(%rbp), %eax
	movq	-16(%rbp), %rdx
	addl	%edx, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	$0, -36(%rbp)
	movq	-136(%rbp), %rcx
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
.L694:
	movq	-136(%rbp), %rax
	leave
	ret
	.globl	array_slice2
	.hidden	array_slice2
array_slice2:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -32(%rbp)
	movl	%ecx, %eax
	movb	%al, -36(%rbp)
	cmpb	$0, -36(%rbp)
	je	.L703
	movl	36(%rbp), %eax
	jmp	.L704
.L703:
	movl	-32(%rbp), %eax
.L704:
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %r8d
	movl	-28(%rbp), %esi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	16(%rbp), %rax
	movq	24(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	32(%rbp), %rax
	movq	40(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	%r8d, %edx
	call	array_slice
	addq	$32, %rsp
	movq	-24(%rbp), %rax
	leave
	ret
	.globl	array_clone_static_to_depth
	.hidden	array_clone_static_to_depth
array_clone_static_to_depth:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rax
	movl	-12(%rbp), %edx
	leaq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	array_clone_to_depth
	movq	-8(%rbp), %rax
	leave
	ret
	.globl	array_clone
array_clone:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	$0, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	array_clone_to_depth
	movq	-8(%rbp), %rax
	leave
	ret
	.globl	array_clone_to_depth
array_clone_to_depth:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$208, %rsp
	movq	%rdi, -184(%rbp)
	movq	%rsi, -192(%rbp)
	movl	%edx, -196(%rbp)
	movq	-192(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -48(%rbp)
	movq	-192(%rbp), %rax
	movl	24(%rax), %eax
	movslq	%eax, %rdx
	movq	-192(%rbp), %rax
	movl	(%rax), %eax
	cltq
	imulq	%rdx, %rax
	movq	%rax, %rdi
	call	vcalloc
	movq	%rax, -40(%rbp)
	movl	$0, -32(%rbp)
	movq	-192(%rbp), %rax
	movl	20(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-192(%rbp), %rax
	movl	24(%rax), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -20(%rbp)
	cmpl	$0, -196(%rbp)
	jle	.L711
	movq	-192(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, %esi
	movl	$32, %edi
	call	_us32_eq
	testb	%al, %al
	je	.L711
	movq	-192(%rbp), %rax
	movl	20(%rax), %eax
	testl	%eax, %eax
	js	.L711
	movq	-192(%rbp), %rax
	movl	24(%rax), %edx
	movq	-192(%rbp), %rax
	movl	20(%rax), %eax
	cmpl	%eax, %edx
	jl	.L711
	movl	$0, -4(%rbp)
	jmp	.L712
.L713:
	movl	$0, -176(%rbp)
	movq	$0, -168(%rbp)
	movl	$0, -160(%rbp)
	movl	$0, -156(%rbp)
	movl	$0, -152(%rbp)
	movl	$0, -148(%rbp)
	movl	-4(%rbp), %edi
	movq	-192(%rbp), %rcx
	subq	$32, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	24(%rcx), %rdx
	movq	%rax, 16(%rsi)
	movq	%rdx, 24(%rsi)
	call	array_get_unsafe
	addq	$32, %rsp
	movq	%rax, %rcx
	leaq	-176(%rbp), %rax
	movl	$32, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	vmemcpy
	movl	-196(%rbp), %eax
	leal	-1(%rax), %edx
	leaq	-144(%rbp), %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	array_clone_to_depth
	leaq	-144(%rbp), %rdx
	movl	-4(%rbp), %ecx
	leaq	-48(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	array_set_unsafe
	addl	$1, -4(%rbp)
.L712:
	movq	-192(%rbp), %rax
	movl	20(%rax), %eax
	cmpl	%eax, -4(%rbp)
	jl	.L713
	movq	-184(%rbp), %rcx
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	jmp	.L716
.L711:
	movq	-192(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L715
	movq	-192(%rbp), %rax
	movl	24(%rax), %eax
	movslq	%eax, %rdx
	movq	-192(%rbp), %rax
	movl	(%rax), %eax
	cltq
	imulq	%rdx, %rax
	movq	%rax, %rdx
	movq	-192(%rbp), %rax
	movq	8(%rax), %rcx
	movq	-40(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	vmemcpy
.L715:
	movq	-184(%rbp), %rcx
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
.L716:
	movq	-184(%rbp), %rax
	leave
	ret
	.globl	array_set_unsafe
	.hidden	array_set_unsafe
array_set_unsafe:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movslq	%eax, %rdx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rsi
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movslq	%eax, %rcx
	movl	-12(%rbp), %eax
	cltq
	imulq	%rcx, %rax
	leaq	(%rsi,%rax), %rcx
	movq	-24(%rbp), %rax
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	vmemcpy
	nop
	leave
	ret
	.section	.rodata, "a"
.LC62:
	.string	"array.set: index out of range (i == "
	.text
	.globl	array_set
	.hidden	array_set
array_set:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$168, %rsp
	movq	%rdi, -152(%rbp)
	movl	%esi, -156(%rbp)
	movq	%rdx, -168(%rbp)
	cmpl	$0, -156(%rbp)
	js	.L719
	movq	-152(%rbp), %rax
	movl	20(%rax), %eax
	cmpl	%eax, -156(%rbp)
	jl	.L720
.L719:
	leaq	-144(%rbp), %rdx
	movl	$0, %eax
	movl	$15, %ecx
	movq	%rdx, %rdi
	rep stosq
	leaq	.LC62(%rip), %rax
	movq	%rax, -144(%rbp)
	movl	$36, -136(%rbp)
	movl	$1, -132(%rbp)
	movl	$65031, -128(%rbp)
	movl	-156(%rbp), %eax
	movl	%eax, -120(%rbp)
	leaq	.LC49(%rip), %rax
	movq	%rax, -104(%rbp)
	movl	$11, -96(%rbp)
	movl	$1, -92(%rbp)
	movl	$65031, -88(%rbp)
	movq	-152(%rbp), %rax
	movl	20(%rax), %eax
	movl	%eax, -80(%rbp)
	leaq	.LC50(%rip), %rax
	movq	%rax, -64(%rbp)
	movl	$1, -56(%rbp)
	movl	$1, -52(%rbp)
	leaq	-144(%rbp), %rax
	movq	%rax, %rsi
	movl	$3, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	_v_panic
.L720:
	movq	-152(%rbp), %rax
	movl	(%rax), %eax
	movslq	%eax, %rdx
	movq	-152(%rbp), %rax
	movq	8(%rax), %rsi
	movq	-152(%rbp), %rax
	movl	(%rax), %eax
	movslq	%eax, %rcx
	movl	-156(%rbp), %eax
	cltq
	imulq	%rcx, %rax
	leaq	(%rsi,%rax), %rcx
	movq	-168(%rbp), %rax
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	vmemcpy
	nop
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	array_push
	.hidden	array_push
array_push:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rax
	movl	20(%rax), %edx
	movq	-8(%rbp), %rax
	movl	24(%rax), %eax
	cmpl	%eax, %edx
	jl	.L722
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	leal	1(%rax), %edx
	movq	-8(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	array_ensure_cap
.L722:
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movslq	%eax, %rdx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rsi
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movslq	%eax, %rcx
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	cltq
	imulq	%rcx, %rax
	leaq	(%rsi,%rax), %rcx
	movq	-16(%rbp), %rax
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	vmemcpy
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	leal	1(%rax), %edx
	movq	-8(%rbp), %rax
	movl	%edx, 20(%rax)
	nop
	leave
	ret
	.globl	array_push_many
array_push_many:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$64, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	%edx, -52(%rbp)
	cmpl	$0, -52(%rbp)
	jle	.L729
	cmpq	$0, -48(%rbp)
	je	.L729
	movq	-40(%rbp), %rax
	movl	20(%rax), %edx
	movl	-52(%rbp), %eax
	addl	%eax, %edx
	movq	-40(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	array_ensure_cap
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	%rax, -48(%rbp)
	jne	.L727
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L727
	leaq	-32(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	array_clone
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movslq	%eax, %rdx
	movl	-52(%rbp), %eax
	cltq
	imulq	%rdx, %rax
	movq	%rax, %rdi
	movq	-24(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	8(%rdx), %rsi
	movq	-40(%rbp), %rdx
	movl	(%rdx), %edx
	movslq	%edx, %rcx
	movq	-40(%rbp), %rdx
	movl	20(%rdx), %edx
	movslq	%edx, %rdx
	imulq	%rcx, %rdx
	leaq	(%rsi,%rdx), %rcx
	movq	%rdi, %rdx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	vmemcpy
	jmp	.L728
.L727:
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L728
	cmpq	$0, -48(%rbp)
	je	.L728
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movslq	%eax, %rdx
	movl	-52(%rbp), %eax
	cltq
	imulq	%rdx, %rax
	movq	%rax, %rsi
	movq	-40(%rbp), %rax
	movq	8(%rax), %rcx
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movslq	%eax, %rdx
	movq	-40(%rbp), %rax
	movl	20(%rax), %eax
	cltq
	imulq	%rdx, %rax
	addq	%rax, %rcx
	movq	-48(%rbp), %rax
	movq	%rsi, %rdx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	vmemcpy
.L728:
	movq	-40(%rbp), %rax
	movl	20(%rax), %edx
	movl	-52(%rbp), %eax
	addl	%eax, %edx
	movq	-40(%rbp), %rax
	movl	%edx, 20(%rax)
	jmp	.L723
.L729:
	nop
.L723:
	leave
	ret
	.globl	array_reverse
array_reverse:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$96, %rsp
	movq	%rdi, -88(%rbp)
	movl	36(%rbp), %eax
	cmpl	$1, %eax
	jg	.L731
	movq	-88(%rbp), %rcx
	movq	16(%rbp), %rax
	movq	24(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	32(%rbp), %rax
	movq	40(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	jmp	.L735
.L731:
	movl	16(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	40(%rbp), %eax
	movslq	%eax, %rdx
	movl	16(%rbp), %eax
	cltq
	imulq	%rdx, %rax
	movq	%rax, %rdi
	call	vcalloc
	movq	%rax, -40(%rbp)
	movl	$0, -32(%rbp)
	movl	36(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	40(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	jmp	.L733
.L734:
	movl	36(%rbp), %eax
	subl	$1, %eax
	subl	-4(%rbp), %eax
	movl	%eax, %esi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	16(%rbp), %rax
	movq	24(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	32(%rbp), %rax
	movq	40(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	%esi, %edi
	call	array_get_unsafe
	addq	$32, %rsp
	movq	%rax, %rdx
	movl	-4(%rbp), %ecx
	leaq	-48(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	array_set_unsafe
	addl	$1, -4(%rbp)
.L733:
	movl	36(%rbp), %eax
	cmpl	%eax, -4(%rbp)
	jl	.L734
	movq	-88(%rbp), %rcx
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
.L735:
	movq	-88(%rbp), %rax
	leave
	ret
	.globl	array_free
array_free:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	addq	$28, %rax
	movl	$8, %esi
	movq	%rax, %rdi
	call	ArrayFlags_has
	testb	%al, %al
	jne	.L739
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	cltq
	subq	%rax, %rdx
	movq	%rdx, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	_v_free
	movq	-24(%rbp), %rax
	movq	$0, 8(%rax)
	jmp	.L736
.L739:
	nop
.L736:
	leave
	ret
	.globl	Array_string_free
Array_string_free:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	$0, -4(%rbp)
	jmp	.L741
.L742:
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, %rdi
	call	string_free
	addl	$1, -4(%rbp)
.L741:
	movq	-24(%rbp), %rax
	movl	20(%rax), %eax
	cmpl	%eax, -4(%rbp)
	jl	.L742
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	array_free
	nop
	leave
	ret
	.section	.rodata, "a"
.LC63:
	.string	", "
	.text
	.globl	Array_string_str
Array_string_str:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$88, %rsp
	movl	$4, -36(%rbp)
	movl	36(%rbp), %eax
	testl	%eax, %eax
	jle	.L744
	movq	24(%rbp), %rax
	movl	8(%rax), %eax
	addl	%eax, -36(%rbp)
	movl	36(%rbp), %eax
	movl	-36(%rbp), %edx
	imull	%edx, %eax
	movl	%eax, -36(%rbp)
.L744:
	addl	$2, -36(%rbp)
	leaq	-80(%rbp), %rax
	movl	-36(%rbp), %edx
	movl	%edx, %esi
	movq	%rax, %rdi
	call	strings__new_builder
	leaq	-80(%rbp), %rax
	movl	$91, %esi
	movq	%rax, %rdi
	call	strings__Builder_write_u8
	movl	$0, -40(%rbp)
	jmp	.L745
.L747:
	movq	24(%rbp), %rax
	movl	-40(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	movq	8(%rax), %rdx
	movq	(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	%rdx, -104(%rbp)
	leaq	-80(%rbp), %rax
	movl	$39, %esi
	movq	%rax, %rdi
	call	strings__Builder_write_u8
	movq	-112(%rbp), %rcx
	movq	-104(%rbp), %rdx
	leaq	-80(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	strings__Builder_write_string
	leaq	-80(%rbp), %rax
	movl	$39, %esi
	movq	%rax, %rdi
	call	strings__Builder_write_u8
	movl	36(%rbp), %eax
	subl	$1, %eax
	cmpl	%eax, -40(%rbp)
	jge	.L746
	leaq	.LC63(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	%r12, %rcx
	movq	%r13, %rbx
	movq	%r12, %rax
	movq	%r13, %rdx
	leaq	-80(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	strings__Builder_write_string
.L746:
	addl	$1, -40(%rbp)
.L745:
	movl	36(%rbp), %eax
	cmpl	%eax, -40(%rbp)
	jl	.L747
	leaq	-80(%rbp), %rax
	movl	$93, %esi
	movq	%rax, %rdi
	call	strings__Builder_write_u8
	leaq	-80(%rbp), %rax
	movq	%rax, %rdi
	call	strings__Builder_str
	movq	%rax, -96(%rbp)
	movq	%rdx, -88(%rbp)
	leaq	-80(%rbp), %rax
	movq	%rax, %rdi
	call	strings__Builder_free
	movq	-96(%rbp), %rax
	movq	-88(%rbp), %rdx
	addq	$88, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%rbp
	ret
	.globl	array_pointers
array_pointers:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$80, %rsp
	movq	%rdi, -72(%rbp)
	leaq	-48(%rbp), %rax
	movl	$0, %r8d
	movl	$8, %ecx
	movl	$0, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array_with_default
	movl	$0, -4(%rbp)
	jmp	.L750
.L751:
	movl	-4(%rbp), %esi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	16(%rbp), %rax
	movq	24(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	32(%rbp), %rax
	movq	40(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	%esi, %edi
	call	array_get_unsafe
	addq	$32, %rsp
	movq	%rax, -56(%rbp)
	leaq	-56(%rbp), %rdx
	leaq	-48(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	array_push
	addl	$1, -4(%rbp)
.L750:
	movl	36(%rbp), %eax
	cmpl	%eax, -4(%rbp)
	jl	.L751
	movq	-72(%rbp), %rcx
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movq	-72(%rbp), %rax
	leave
	ret
	.globl	vhalt
	.hidden	vhalt
vhalt:
	pushq	%rbp
	movq	%rsp, %rbp
.L754:
	jmp	.L754
	.section	.rodata, "a"
.LC64:
	.string	"signal %d: segmentation fault\n"
	.text
	.globl	v_segmentation_fault_handler
	.hidden	v_segmentation_fault_handler
v_segmentation_fault_handler:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	movq	stderr(%rip), %rax
	movl	-4(%rbp), %edx
	leaq	.LC64(%rip), %rcx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	movl	$0, %eax
	call	fprintf
	call	print_backtrace
	movl	-4(%rbp), %eax
	subl	$-128, %eax
	movl	%eax, %edi
	call	_v_exit
	.globl	_v_exit
_v_exit:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %eax
	movl	%eax, %edi
	call	exit
	.section	.rodata, "a"
.LC65:
	.string	"049d685"
	.text
	.globl	vcommithash
	.hidden	vcommithash
vcommithash:
	pushq	%rbp
	movq	%rsp, %rbp
	leaq	.LC65(%rip), %rax
	movq	%rax, %rdi
	call	tos5
	popq	%rbp
	ret
	.section	.rodata, "a"
.LC66:
	.string	"option not set ("
	.text
	.globl	panic_option_not_set
panic_option_not_set:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$104, %rsp
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movq	%rcx, %rdx
	movq	%rax, -112(%rbp)
	movq	%rdx, -104(%rbp)
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -96(%rbp)
	movaps	%xmm0, -80(%rbp)
	movaps	%xmm0, -64(%rbp)
	movaps	%xmm0, -48(%rbp)
	movaps	%xmm0, -32(%rbp)
	leaq	.LC66(%rip), %rax
	movq	%rax, -96(%rbp)
	movl	$16, -88(%rbp)
	movl	$1, -84(%rbp)
	movl	$65040, -80(%rbp)
	movq	-112(%rbp), %rax
	movq	-104(%rbp), %rdx
	movq	%rax, -72(%rbp)
	movq	%rdx, -64(%rbp)
	leaq	.LC50(%rip), %rax
	movq	%rax, -56(%rbp)
	movl	$1, -48(%rbp)
	movl	$1, -44(%rbp)
	leaq	-96(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	_v_panic
	.section	.rodata, "a"
.LC67:
	.string	"result not set ("
	.text
	.globl	panic_result_not_set
panic_result_not_set:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$104, %rsp
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movq	%rcx, %rdx
	movq	%rax, -112(%rbp)
	movq	%rdx, -104(%rbp)
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -96(%rbp)
	movaps	%xmm0, -80(%rbp)
	movaps	%xmm0, -64(%rbp)
	movaps	%xmm0, -48(%rbp)
	movaps	%xmm0, -32(%rbp)
	leaq	.LC67(%rip), %rax
	movq	%rax, -96(%rbp)
	movl	$16, -88(%rbp)
	movl	$1, -84(%rbp)
	movl	$65040, -80(%rbp)
	movq	-112(%rbp), %rax
	movq	-104(%rbp), %rdx
	movq	%rax, -72(%rbp)
	movq	%rdx, -64(%rbp)
	leaq	.LC50(%rip), %rax
	movq	%rax, -56(%rbp)
	movl	$1, -48(%rbp)
	movl	$1, -44(%rbp)
	leaq	-96(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	_v_panic
	.section	.rodata, "a"
.LC68:
	.string	"V panic: "
.LC69:
	.string	"v hash: "
	.text
	.globl	_v_panic
_v_panic:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$104, %rsp
	movq	%rdi, %rcx
	movq	%rsi, %rbx
	movq	%rcx, -112(%rbp)
	movq	%rbx, -104(%rbp)
	leaq	.LC68(%rip), %rax
	movq	%rdx, %rsi
	movabsq	$-4294967296, %rcx
	andq	%rsi, %rcx
	orq	$9, %rcx
	movq	%rcx, %rdx
	movq	%rdx, %rcx
	movl	%ecx, %esi
	movabsq	$4294967296, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	eprint
	movq	-112(%rbp), %rdx
	movq	-104(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	eprintln
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -96(%rbp)
	movaps	%xmm0, -80(%rbp)
	movaps	%xmm0, -64(%rbp)
	movaps	%xmm0, -48(%rbp)
	movaps	%xmm0, -32(%rbp)
	leaq	.LC69(%rip), %rax
	movq	%rax, -96(%rbp)
	movl	$8, -88(%rbp)
	movl	$1, -84(%rbp)
	movl	$65040, -80(%rbp)
	call	vcommithash
	movq	%rax, -72(%rbp)
	movq	%rdx, -64(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -56(%rbp)
	movl	$1, -44(%rbp)
	leaq	-96(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	eprintln
	movl	$1, %edi
	call	print_backtrace_skipping_top_frames
	movl	$1, %edi
	call	exit
	.section	.rodata, "a"
.LC70:
	.string	"eprintln(NIL)"
	.text
	.globl	eprintln
eprintln:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$24, %rsp
	movq	%rdi, %rcx
	movq	%rsi, %rbx
	movq	%rcx, -32(%rbp)
	movq	%rbx, -24(%rbp)
	movq	-32(%rbp), %rcx
	testq	%rcx, %rcx
	jne	.L763
	leaq	.LC70(%rip), %rax
	movq	%rdx, %rsi
	movabsq	$-4294967296, %rcx
	andq	%rsi, %rcx
	orq	$13, %rcx
	movq	%rcx, %rdx
	movq	%rdx, %rcx
	movl	%ecx, %esi
	movabsq	$4294967296, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	eprintln
	jmp	.L762
.L763:
	movq	stdout(%rip), %rax
	movq	%rax, %rdi
	call	fflush
	movq	stderr(%rip), %rax
	movq	%rax, %rdi
	call	fflush
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdx
	movl	$2, %edi
	call	_writeln_to_fd
	movq	stderr(%rip), %rax
	movq	%rax, %rdi
	call	fflush
.L762:
	movq	-8(%rbp), %rbx
	leave
	ret
	.section	.rodata, "a"
.LC71:
	.string	"eprint(NIL)"
	.text
	.globl	eprint
eprint:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$24, %rsp
	movq	%rdi, %rcx
	movq	%rsi, %rbx
	movq	%rcx, -32(%rbp)
	movq	%rbx, -24(%rbp)
	movq	-32(%rbp), %rcx
	testq	%rcx, %rcx
	jne	.L766
	leaq	.LC71(%rip), %rax
	movq	%rdx, %rsi
	movabsq	$-4294967296, %rcx
	andq	%rsi, %rcx
	orq	$11, %rcx
	movq	%rcx, %rdx
	movq	%rdx, %rcx
	movl	%ecx, %esi
	movabsq	$4294967296, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	eprint
	jmp	.L765
.L766:
	movq	stdout(%rip), %rax
	movq	%rax, %rdi
	call	fflush
	movq	stderr(%rip), %rax
	movq	%rax, %rdi
	call	fflush
	movl	-24(%rbp), %edx
	movq	-32(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	_write_buf_to_fd
	movq	stderr(%rip), %rax
	movq	%rax, %rdi
	call	fflush
.L765:
	movq	-8(%rbp), %rbx
	leave
	ret
	.section	.rodata, "a"
.LC72:
	.string	"println(NIL)"
	.text
	.globl	println
println:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$24, %rsp
	movq	%rdi, %rcx
	movq	%rsi, %rbx
	movq	%rcx, -32(%rbp)
	movq	%rbx, -24(%rbp)
	movq	-32(%rbp), %rcx
	testq	%rcx, %rcx
	jne	.L769
	leaq	.LC72(%rip), %rax
	movq	%rdx, %rsi
	movabsq	$-4294967296, %rcx
	andq	%rsi, %rcx
	orq	$12, %rcx
	movq	%rcx, %rdx
	movq	%rdx, %rcx
	movl	%ecx, %esi
	movabsq	$4294967296, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	println
	jmp	.L768
.L769:
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdx
	movl	$1, %edi
	call	_writeln_to_fd
.L768:
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	_writeln_to_fd
	.hidden	_writeln_to_fd
_writeln_to_fd:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$48, %rsp
	movl	%edi, -20(%rbp)
	movq	%rdx, %rcx
	movq	%rsi, %rax
	movq	%rdi, %rdx
	movq	%rcx, %rdx
	movq	%rax, -48(%rbp)
	movq	%rdx, -40(%rbp)
	movb	$0, -1(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	cltq
	movq	%rax, %rdi
	call	_v_malloc
	movq	%rax, -16(%rbp)
	movb	$1, -1(%rbp)
	movl	-40(%rbp), %eax
	movslq	%eax, %rdx
	movq	-48(%rbp), %rcx
	movq	-16(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy
	movl	-40(%rbp), %eax
	movslq	%eax, %rdx
	movq	-16(%rbp), %rax
	addq	%rdx, %rax
	movb	$10, (%rax)
	movl	-8(%rbp), %edx
	movq	-16(%rbp), %rcx
	movl	-20(%rbp), %eax
	movq	%rcx, %rsi
	movl	%eax, %edi
	call	_write_buf_to_fd
	cmpb	$0, -1(%rbp)
	je	.L773
	movq	-16(%rbp), %rax
	movq	%rax, %rdi
	call	_v_free
.L773:
	nop
	leave
	ret
	.globl	_write_buf_to_fd
	.hidden	_write_buf_to_fd
_write_buf_to_fd:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$48, %rsp
	movl	%edi, -36(%rbp)
	movq	%rsi, -48(%rbp)
	movl	%edx, -40(%rbp)
	cmpl	$0, -40(%rbp)
	jle	.L780
	movq	-48(%rbp), %rax
	movq	%rax, -8(%rbp)
	movl	-40(%rbp), %eax
	cltq
	movq	%rax, -16(%rbp)
	movq	$0, -32(%rbp)
	movq	stdout(%rip), %rax
	movq	%rax, -24(%rbp)
	cmpl	$2, -36(%rbp)
	jne	.L779
	movq	stderr(%rip), %rax
	movq	%rax, -24(%rbp)
.L779:
	cmpq	$0, -16(%rbp)
	jle	.L781
	movq	-16(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movq	-8(%rbp), %rax
	movl	$1, %esi
	movq	%rax, %rdi
	call	fwrite
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	addq	%rax, -8(%rbp)
	movq	-32(%rbp), %rax
	subq	%rax, -16(%rbp)
	jmp	.L779
.L780:
	nop
	jmp	.L774
.L781:
	nop
.L774:
	leave
	ret
	.section	.rodata, "a"
.LC73:
	.string	"malloc("
.LC74:
	.string	" <= 0)"
.LC75:
	.string	") failed"
	.text
	.globl	_v_malloc
_v_malloc:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$120, %rsp
	movq	%rdi, -120(%rbp)
	cmpq	$0, -120(%rbp)
	jg	.L783
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -112(%rbp)
	movaps	%xmm0, -96(%rbp)
	movaps	%xmm0, -80(%rbp)
	movaps	%xmm0, -64(%rbp)
	movaps	%xmm0, -48(%rbp)
	leaq	.LC73(%rip), %rax
	movq	%rax, -112(%rbp)
	movl	$7, -104(%rbp)
	movl	$1, -100(%rbp)
	movl	$65033, -96(%rbp)
	movq	-120(%rbp), %rax
	movq	%rax, -88(%rbp)
	leaq	.LC74(%rip), %rax
	movq	%rax, -72(%rbp)
	movl	$6, -64(%rbp)
	movl	$1, -60(%rbp)
	leaq	-112(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	_v_panic
.L783:
	movq	$0, -24(%rbp)
	movq	-120(%rbp), %rax
	movq	%rax, %rdi
	call	malloc
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.L784
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -112(%rbp)
	movaps	%xmm0, -96(%rbp)
	movaps	%xmm0, -80(%rbp)
	movaps	%xmm0, -64(%rbp)
	movaps	%xmm0, -48(%rbp)
	leaq	.LC73(%rip), %rax
	movq	%rax, -112(%rbp)
	movl	$7, -104(%rbp)
	movl	$1, -100(%rbp)
	movl	$65033, -96(%rbp)
	movq	-120(%rbp), %rax
	movq	%rax, -88(%rbp)
	leaq	.LC75(%rip), %rax
	movq	%rax, -72(%rbp)
	movl	$8, -64(%rbp)
	movl	$1, -60(%rbp)
	leaq	-112(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	_v_panic
.L784:
	movq	-24(%rbp), %rax
	movq	-8(%rbp), %rbx
	leave
	ret
	.section	.rodata, "a"
.LC76:
	.string	"malloc_noscan("
	.text
	.globl	malloc_noscan
malloc_noscan:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$120, %rsp
	movq	%rdi, -120(%rbp)
	cmpq	$0, -120(%rbp)
	jg	.L787
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -112(%rbp)
	movaps	%xmm0, -96(%rbp)
	movaps	%xmm0, -80(%rbp)
	movaps	%xmm0, -64(%rbp)
	movaps	%xmm0, -48(%rbp)
	leaq	.LC76(%rip), %rax
	movq	%rax, -112(%rbp)
	movl	$14, -104(%rbp)
	movl	$1, -100(%rbp)
	movl	$65033, -96(%rbp)
	movq	-120(%rbp), %rax
	movq	%rax, -88(%rbp)
	leaq	.LC74(%rip), %rax
	movq	%rax, -72(%rbp)
	movl	$6, -64(%rbp)
	movl	$1, -60(%rbp)
	leaq	-112(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	_v_panic
.L787:
	movq	$0, -24(%rbp)
	movq	-120(%rbp), %rax
	movq	%rax, %rdi
	call	malloc
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.L788
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -112(%rbp)
	movaps	%xmm0, -96(%rbp)
	movaps	%xmm0, -80(%rbp)
	movaps	%xmm0, -64(%rbp)
	movaps	%xmm0, -48(%rbp)
	leaq	.LC76(%rip), %rax
	movq	%rax, -112(%rbp)
	movl	$14, -104(%rbp)
	movl	$1, -100(%rbp)
	movl	$65033, -96(%rbp)
	movq	-120(%rbp), %rax
	movq	%rax, -88(%rbp)
	leaq	.LC75(%rip), %rax
	movq	%rax, -72(%rbp)
	movl	$8, -64(%rbp)
	movl	$1, -60(%rbp)
	leaq	-112(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	_v_panic
.L788:
	movq	-24(%rbp), %rax
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	__at_least_one
	.hidden	__at_least_one
__at_least_one:
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.L791
	movl	$1, %eax
	jmp	.L792
.L791:
	movq	-8(%rbp), %rax
.L792:
	popq	%rbp
	ret
	.section	.rodata, "a"
.LC77:
	.string	"malloc_uncollectable("
	.text
	.globl	malloc_uncollectable
malloc_uncollectable:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$120, %rsp
	movq	%rdi, -120(%rbp)
	cmpq	$0, -120(%rbp)
	jg	.L794
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -112(%rbp)
	movaps	%xmm0, -96(%rbp)
	movaps	%xmm0, -80(%rbp)
	movaps	%xmm0, -64(%rbp)
	movaps	%xmm0, -48(%rbp)
	leaq	.LC77(%rip), %rax
	movq	%rax, -112(%rbp)
	movl	$21, -104(%rbp)
	movl	$1, -100(%rbp)
	movl	$65033, -96(%rbp)
	movq	-120(%rbp), %rax
	movq	%rax, -88(%rbp)
	leaq	.LC74(%rip), %rax
	movq	%rax, -72(%rbp)
	movl	$6, -64(%rbp)
	movl	$1, -60(%rbp)
	leaq	-112(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	_v_panic
.L794:
	movq	$0, -24(%rbp)
	movq	-120(%rbp), %rax
	movq	%rax, %rdi
	call	malloc
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.L795
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -112(%rbp)
	movaps	%xmm0, -96(%rbp)
	movaps	%xmm0, -80(%rbp)
	movaps	%xmm0, -64(%rbp)
	movaps	%xmm0, -48(%rbp)
	leaq	.LC77(%rip), %rax
	movq	%rax, -112(%rbp)
	movl	$21, -104(%rbp)
	movl	$1, -100(%rbp)
	movl	$65033, -96(%rbp)
	movq	-120(%rbp), %rax
	movq	%rax, -88(%rbp)
	leaq	.LC75(%rip), %rax
	movq	%rax, -72(%rbp)
	movl	$8, -64(%rbp)
	movl	$1, -60(%rbp)
	leaq	-112(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	_v_panic
.L795:
	movq	-24(%rbp), %rax
	movq	-8(%rbp), %rbx
	leave
	ret
	.section	.rodata, "a"
.LC78:
	.string	"realloc("
	.text
	.globl	v_realloc
v_realloc:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$120, %rsp
	movq	%rdi, -120(%rbp)
	movq	%rsi, -128(%rbp)
	movq	$0, -24(%rbp)
	movq	-128(%rbp), %rdx
	movq	-120(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	realloc
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.L798
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -112(%rbp)
	movaps	%xmm0, -96(%rbp)
	movaps	%xmm0, -80(%rbp)
	movaps	%xmm0, -64(%rbp)
	movaps	%xmm0, -48(%rbp)
	leaq	.LC78(%rip), %rax
	movq	%rax, -112(%rbp)
	movl	$8, -104(%rbp)
	movl	$1, -100(%rbp)
	movl	$65033, -96(%rbp)
	movq	-128(%rbp), %rax
	movq	%rax, -88(%rbp)
	leaq	.LC75(%rip), %rax
	movq	%rax, -72(%rbp)
	movl	$8, -64(%rbp)
	movl	$1, -60(%rbp)
	leaq	-112(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	_v_panic
.L798:
	movq	-24(%rbp), %rax
	movq	-8(%rbp), %rbx
	leave
	ret
	.section	.rodata, "a"
.LC79:
	.string	"realloc_data("
	.text
	.globl	realloc_data
realloc_data:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$200, %rsp
	movq	%rdi, -200(%rbp)
	movl	%esi, -204(%rbp)
	movl	%edx, -208(%rbp)
	movq	$0, -24(%rbp)
	movl	-208(%rbp), %eax
	movslq	%eax, %rdx
	movq	-200(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	realloc
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.L801
	leaq	-192(%rbp), %rdx
	movl	$0, %eax
	movl	$20, %ecx
	movq	%rdx, %rdi
	rep stosq
	leaq	.LC79(%rip), %rax
	movq	%rax, -192(%rbp)
	movl	$13, -184(%rbp)
	movl	$1, -180(%rbp)
	movl	$65041, -176(%rbp)
	movq	-200(%rbp), %rax
	movq	%rax, -168(%rbp)
	leaq	.LC63(%rip), %rax
	movq	%rax, -152(%rbp)
	movl	$2, -144(%rbp)
	movl	$1, -140(%rbp)
	movl	$65031, -136(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -128(%rbp)
	leaq	.LC63(%rip), %rax
	movq	%rax, -112(%rbp)
	movl	$2, -104(%rbp)
	movl	$1, -100(%rbp)
	movl	$65031, -96(%rbp)
	movl	-208(%rbp), %eax
	movl	%eax, -88(%rbp)
	leaq	.LC75(%rip), %rax
	movq	%rax, -72(%rbp)
	movl	$8, -64(%rbp)
	movl	$1, -60(%rbp)
	leaq	-192(%rbp), %rax
	movq	%rax, %rsi
	movl	$4, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	_v_panic
.L801:
	movq	-24(%rbp), %rax
	movq	-8(%rbp), %rbx
	leave
	ret
	.section	.rodata, "a"
.LC80:
	.string	"calloc("
	.text
	.globl	vcalloc
vcalloc:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$104, %rsp
	movq	%rdi, -104(%rbp)
	cmpq	$0, -104(%rbp)
	jns	.L804
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -96(%rbp)
	movaps	%xmm0, -80(%rbp)
	movaps	%xmm0, -64(%rbp)
	movaps	%xmm0, -48(%rbp)
	movaps	%xmm0, -32(%rbp)
	leaq	.LC80(%rip), %rax
	movq	%rax, -96(%rbp)
	movl	$7, -88(%rbp)
	movl	$1, -84(%rbp)
	movl	$65033, -80(%rbp)
	movq	-104(%rbp), %rax
	movq	%rax, -72(%rbp)
	leaq	.LC61(%rip), %rax
	movq	%rax, -56(%rbp)
	movl	$5, -48(%rbp)
	movl	$1, -44(%rbp)
	leaq	-96(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	_v_panic
.L804:
	cmpq	$0, -104(%rbp)
	jne	.L805
	movl	$0, %eax
	jmp	.L806
.L805:
	movq	-104(%rbp), %rax
	movq	%rax, %rsi
	movl	$1, %edi
	call	calloc
.L806:
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	vcalloc_noscan
vcalloc_noscan:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	vcalloc
	leave
	ret
	.globl	_v_free
_v_free:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	free
	nop
	leave
	ret
	.globl	memdup
memdup:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.L811
	movl	$1, %edi
	call	vcalloc
	jmp	.L812
.L811:
	movl	-28(%rbp), %eax
	cltq
	movq	%rax, %rdi
	call	_v_malloc
	movq	%rax, -8(%rbp)
	movl	-28(%rbp), %eax
	movslq	%eax, %rdx
	movq	-24(%rbp), %rcx
	movq	-8(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy
.L812:
	leave
	ret
	.globl	memdup_noscan
memdup_noscan:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.L814
	movl	$1, %edi
	call	vcalloc_noscan
	jmp	.L815
.L814:
	movl	-28(%rbp), %eax
	cltq
	movq	%rax, %rdi
	call	malloc_noscan
	movq	%rax, -8(%rbp)
	movl	-28(%rbp), %eax
	movslq	%eax, %rdx
	movq	-24(%rbp), %rcx
	movq	-8(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy
.L815:
	leave
	ret
	.globl	memdup_uncollectable
memdup_uncollectable:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.L817
	movl	$1, %edi
	call	vcalloc
	jmp	.L818
.L817:
	movl	-28(%rbp), %eax
	cltq
	movq	%rax, %rdi
	call	malloc_uncollectable
	movq	%rax, -8(%rbp)
	movl	-28(%rbp), %eax
	movslq	%eax, %rdx
	movq	-24(%rbp), %rcx
	movq	-8(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy
.L818:
	leave
	ret
	.section	.rodata, "a"
.LC81:
	.string	"fixed array index out of range (index: "
.LC82:
	.string	", len: "
	.text
	.globl	v_fixed_index
	.hidden	v_fixed_index
v_fixed_index:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$160, %rsp
	movl	%edi, -148(%rbp)
	movl	%esi, -152(%rbp)
	cmpl	$0, -148(%rbp)
	js	.L820
	movl	-148(%rbp), %eax
	cmpl	-152(%rbp), %eax
	jl	.L821
.L820:
	leaq	-144(%rbp), %rdx
	movl	$0, %eax
	movl	$15, %ecx
	movq	%rdx, %rdi
	rep stosq
	leaq	.LC81(%rip), %rax
	movq	%rax, -144(%rbp)
	movl	$39, -136(%rbp)
	movl	$1, -132(%rbp)
	movl	$65031, -128(%rbp)
	movl	-148(%rbp), %eax
	movl	%eax, -120(%rbp)
	leaq	.LC82(%rip), %rax
	movq	%rax, -104(%rbp)
	movl	$7, -96(%rbp)
	movl	$1, -92(%rbp)
	movl	$65031, -88(%rbp)
	movl	-152(%rbp), %eax
	movl	%eax, -80(%rbp)
	leaq	.LC50(%rip), %rax
	movq	%rax, -64(%rbp)
	movl	$1, -56(%rbp)
	movl	$1, -52(%rbp)
	leaq	-144(%rbp), %rax
	movq	%rax, %rsi
	movl	$3, %edi
	call	str_intp
	movq	%rax, -16(%rbp)
	movq	%rdx, -8(%rbp)
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	_v_panic
.L821:
	movl	-148(%rbp), %eax
	leave
	ret
	.globl	print_backtrace
print_backtrace:
	pushq	%rbp
	movq	%rsp, %rbp
	nop
	popq	%rbp
	ret
	.globl	isnil
isnil:
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	sete	%al
	popq	%rbp
	ret
	.section	.rodata, "a"
.LC83:
	.string	"as cast: cannot cast `"
.LC84:
	.string	"` to `"
.LC85:
	.string	"`"
	.text
	.globl	__as_cast
	.hidden	__as_cast
__as_cast:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$232, %rsp
	movq	%rdi, -232(%rbp)
	movl	%esi, -236(%rbp)
	movl	%edx, -240(%rbp)
	movl	-236(%rbp), %eax
	cmpl	-240(%rbp), %eax
	je	.L827
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	as_cast_type_indexes(%rip), %rax
	movq	8+as_cast_type_indexes(%rip), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	16+as_cast_type_indexes(%rip), %rax
	movq	24+as_cast_type_indexes(%rip), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$0, %edi
	call	array_get
	addq	$32, %rsp
	movq	8(%rax), %rdx
	movq	16(%rax), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	string_clone
	movq	%rax, -48(%rbp)
	movq	%rdx, -40(%rbp)
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	as_cast_type_indexes(%rip), %rax
	movq	8+as_cast_type_indexes(%rip), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	16+as_cast_type_indexes(%rip), %rax
	movq	24+as_cast_type_indexes(%rip), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$0, %edi
	call	array_get
	addq	$32, %rsp
	movq	8(%rax), %rdx
	movq	16(%rax), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	string_clone
	movq	%rax, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movl	$0, -20(%rbp)
	jmp	.L828
.L831:
	movq	8+as_cast_type_indexes(%rip), %rcx
	movl	-20(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	addq	%rax, %rcx
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, -96(%rbp)
	movq	%rdx, -88(%rbp)
	movq	16(%rcx), %rax
	movq	%rax, -80(%rbp)
	movl	-96(%rbp), %eax
	cmpl	%eax, -236(%rbp)
	jne	.L829
	movq	-88(%rbp), %rdx
	movq	-80(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	string_clone
	movq	%rax, -48(%rbp)
	movq	%rdx, -40(%rbp)
.L829:
	movl	-96(%rbp), %eax
	cmpl	%eax, -240(%rbp)
	jne	.L830
	movq	-88(%rbp), %rdx
	movq	-80(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	string_clone
	movq	%rax, -64(%rbp)
	movq	%rdx, -56(%rbp)
.L830:
	addl	$1, -20(%rbp)
.L828:
	movl	20+as_cast_type_indexes(%rip), %eax
	cmpl	%eax, -20(%rbp)
	jl	.L831
	leaq	-224(%rbp), %rdx
	movl	$0, %eax
	movl	$15, %ecx
	movq	%rdx, %rdi
	rep stosq
	leaq	.LC83(%rip), %rax
	movq	%rax, -224(%rbp)
	movl	$22, -216(%rbp)
	movl	$1, -212(%rbp)
	movl	$65040, -208(%rbp)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, -200(%rbp)
	movq	%rdx, -192(%rbp)
	leaq	.LC84(%rip), %rax
	movq	%rax, -184(%rbp)
	movl	$6, -176(%rbp)
	movl	$1, -172(%rbp)
	movl	$65040, -168(%rbp)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, -160(%rbp)
	movq	%rdx, -152(%rbp)
	leaq	.LC85(%rip), %rax
	movq	%rax, -144(%rbp)
	movl	$1, -136(%rbp)
	movl	$1, -132(%rbp)
	leaq	-224(%rbp), %rax
	movq	%rax, %rsi
	movl	$3, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	_v_panic
.L827:
	movq	-232(%rbp), %rax
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	VAssertMetaInfo_free
VAssertMetaInfo_free:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	string_free
	movq	-8(%rbp), %rax
	addq	$24, %rax
	movq	%rax, %rdi
	call	string_free
	movq	-8(%rbp), %rax
	addq	$40, %rax
	movq	%rax, %rdi
	call	string_free
	movq	-8(%rbp), %rax
	addq	$56, %rax
	movq	%rax, %rdi
	call	string_free
	movq	-8(%rbp), %rax
	addq	$72, %rax
	movq	%rax, %rdi
	call	string_free
	movq	-8(%rbp), %rax
	addq	$88, %rax
	movq	%rax, %rdi
	call	string_free
	movq	-8(%rbp), %rax
	addq	$104, %rax
	movq	%rax, %rdi
	call	string_free
	movq	-8(%rbp), %rax
	addq	$120, %rax
	movq	%rax, %rdi
	call	string_free
	movq	-8(%rbp), %rax
	addq	$136, %rax
	movq	%rax, %rdi
	call	string_free
	nop
	leave
	ret
	.globl	builtin_init
	.hidden	builtin_init
builtin_init:
	pushq	%rbp
	movq	%rsp, %rbp
	nop
	popq	%rbp
	ret
	.globl	print_backtrace_skipping_top_frames
	.hidden	print_backtrace_skipping_top_frames
print_backtrace_skipping_top_frames:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$32, %rsp
	movl	%edi, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	movl	%eax, %edi
	call	print_backtrace_skipping_top_frames_linux
	leave
	ret
	.globl	print_backtrace_skipping_top_frames_linux
	.hidden	print_backtrace_skipping_top_frames_linux
print_backtrace_skipping_top_frames_linux:
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edi, -4(%rbp)
	movl	$1, %eax
	popq	%rbp
	ret
	.globl	vstrlen
vstrlen:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	strlen
	leave
	ret
	.globl	vstrlen_char
vstrlen_char:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	strlen
	leave
	ret
	.globl	vmemcpy
vmemcpy:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rcx
	movq	-8(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy
	leave
	ret
	.globl	vmemmove
vmemmove:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rcx
	movq	-8(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memmove
	leave
	ret
	.globl	vmemcmp
vmemcmp:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rcx
	movq	-8(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcmp
	leave
	ret
	.globl	vmemset
vmemset:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-24(%rbp), %rdx
	movl	-12(%rbp), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	memset
	leave
	ret
	.globl	isize_str
isize_str:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	i64_str
	leave
	ret
	.globl	usize_str
usize_str:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	u64_str
	leave
	ret
	.globl	char_str
char_str:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	u64_hex
	leave
	ret
	.globl	int_str_l
	.hidden	int_str_l
int_str_l:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$72, %rsp
	movl	%edi, -68(%rbp)
	movl	%esi, -72(%rbp)
	movl	-68(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	%rcx, -24(%rbp)
	movl	$0, -28(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.L858
	leaq	.LC39(%rip), %rax
	movq	%rdx, %rsi
	movabsq	$-4294967296, %rcx
	andq	%rsi, %rcx
	orq	$1, %rcx
	movq	%rcx, %rdx
	movq	%rdx, %rcx
	movl	%ecx, %esi
	movabsq	$4294967296, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	jmp	.L859
.L858:
	movb	$0, -29(%rbp)
	cmpq	$0, -24(%rbp)
	jns	.L860
	negq	-24(%rbp)
	movb	$1, -29(%rbp)
.L860:
	movl	-72(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	cltq
	movq	%rax, %rdi
	call	malloc_noscan
	movq	%rax, -48(%rbp)
	movl	-36(%rbp), %eax
	movslq	%eax, %rdx
	movq	-48(%rbp), %rax
	addq	%rdx, %rax
	movb	$0, (%rax)
	subl	$1, -36(%rbp)
.L863:
	cmpq	$0, -24(%rbp)
	jle	.L868
	movq	-24(%rbp), %rcx
	movabsq	$-6640827866535438581, %rdx
	movq	%rcx, %rax
	imulq	%rdx
	leaq	(%rdx,%rcx), %rax
	sarq	$6, %rax
	sarq	$63, %rcx
	movq	%rcx, %rdx
	subq	%rdx, %rax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	movl	%eax, %edx
	movl	-52(%rbp), %eax
	imull	$-100, %eax, %eax
	addl	%edx, %eax
	addl	%eax, %eax
	movl	%eax, -28(%rbp)
	movl	-52(%rbp), %eax
	cltq
	movq	%rax, -24(%rbp)
	movq	_const_digit_pairs(%rip), %rdx
	movl	-28(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movl	-36(%rbp), %edx
	movslq	%edx, %rcx
	movq	-48(%rbp), %rdx
	addq	%rcx, %rdx
	movzbl	(%rax), %eax
	movb	%al, (%rdx)
	subl	$1, -36(%rbp)
	addl	$1, -28(%rbp)
	movq	_const_digit_pairs(%rip), %rdx
	movl	-28(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movl	-36(%rbp), %edx
	movslq	%edx, %rcx
	movq	-48(%rbp), %rdx
	addq	%rcx, %rdx
	movzbl	(%rax), %eax
	movb	%al, (%rdx)
	subl	$1, -36(%rbp)
	jmp	.L863
.L868:
	nop
	addl	$1, -36(%rbp)
	cmpl	$19, -28(%rbp)
	jg	.L864
	addl	$1, -36(%rbp)
.L864:
	cmpb	$0, -29(%rbp)
	je	.L865
	subl	$1, -36(%rbp)
	movl	-36(%rbp), %eax
	movslq	%eax, %rdx
	movq	-48(%rbp), %rax
	addq	%rdx, %rax
	movb	$45, (%rax)
.L865:
	movl	-72(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	movl	-36(%rbp), %eax
	movslq	%eax, %rcx
	movq	-48(%rbp), %rax
	addq	%rax, %rcx
	movq	-48(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	vmemmove
	movl	-56(%rbp), %edx
	movq	-48(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	tos
.L859:
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	i8_str
i8_str:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movl	%edi, %eax
	movb	%al, -4(%rbp)
	movsbl	-4(%rbp), %eax
	movl	$5, %esi
	movl	%eax, %edi
	call	int_str_l
	leave
	ret
	.globl	i16_str
i16_str:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movl	%edi, %eax
	movw	%ax, -4(%rbp)
	movswl	-4(%rbp), %eax
	movl	$7, %esi
	movl	%eax, %edi
	call	int_str_l
	leave
	ret
	.globl	u16_str
u16_str:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movl	%edi, %eax
	movw	%ax, -4(%rbp)
	movzwl	-4(%rbp), %eax
	movl	$7, %esi
	movl	%eax, %edi
	call	int_str_l
	leave
	ret
	.globl	int_str
int_str:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %eax
	movl	$12, %esi
	movl	%eax, %edi
	call	int_str_l
	leave
	ret
	.globl	u32_str
u32_str:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$56, %rsp
	movl	%edi, -52(%rbp)
	movl	-52(%rbp), %ecx
	movl	%ecx, -20(%rbp)
	movl	$0, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.L878
	leaq	.LC39(%rip), %rax
	movq	%rdx, %rsi
	movabsq	$-4294967296, %rcx
	andq	%rsi, %rcx
	orq	$1, %rcx
	movq	%rcx, %rdx
	movq	%rdx, %rcx
	movl	%ecx, %esi
	movabsq	$4294967296, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	jmp	.L879
.L878:
	movl	$12, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$1, %eax
	cltq
	movq	%rax, %rdi
	call	malloc_noscan
	movq	%rax, -40(%rbp)
	movl	-32(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	movslq	%eax, %rdx
	movq	-40(%rbp), %rax
	addq	%rdx, %rax
	movb	$0, (%rax)
	subl	$1, -28(%rbp)
.L882:
	cmpl	$0, -20(%rbp)
	je	.L886
	movl	-20(%rbp), %eax
	movl	%eax, %eax
	imulq	$1374389535, %rax, %rax
	shrq	$32, %rax
	shrl	$5, %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	imull	$100, %eax, %eax
	movl	-20(%rbp), %edx
	subl	%eax, %edx
	leal	(%rdx,%rdx), %eax
	movl	%eax, -24(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	_const_digit_pairs(%rip), %rdx
	movl	-24(%rbp), %eax
	addq	%rdx, %rax
	movl	-28(%rbp), %edx
	movslq	%edx, %rcx
	movq	-40(%rbp), %rdx
	addq	%rcx, %rdx
	movzbl	(%rax), %eax
	movb	%al, (%rdx)
	subl	$1, -28(%rbp)
	addl	$1, -24(%rbp)
	movq	_const_digit_pairs(%rip), %rdx
	movl	-24(%rbp), %eax
	addq	%rdx, %rax
	movl	-28(%rbp), %edx
	movslq	%edx, %rcx
	movq	-40(%rbp), %rdx
	addq	%rcx, %rdx
	movzbl	(%rax), %eax
	movb	%al, (%rdx)
	subl	$1, -28(%rbp)
	jmp	.L882
.L886:
	nop
	addl	$1, -28(%rbp)
	cmpl	$19, -24(%rbp)
	ja	.L883
	addl	$1, -28(%rbp)
.L883:
	movl	-32(%rbp), %eax
	subl	-28(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	movl	-28(%rbp), %eax
	movslq	%eax, %rcx
	movq	-40(%rbp), %rax
	addq	%rax, %rcx
	movq	-40(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	vmemmove
	movl	-48(%rbp), %edx
	movq	-40(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	tos
.L879:
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	int_literal_str
int_literal_str:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	i64_str
	leave
	ret
	.section	.rodata, "a"
.LC86:
	.string	"-9223372036854775808"
	.text
	.globl	i64_str
i64_str:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$88, %rsp
	movq	%rdi, -88(%rbp)
	movq	-88(%rbp), %rcx
	movq	%rcx, -24(%rbp)
	movq	$0, -32(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.L890
	leaq	.LC39(%rip), %rax
	movq	%rdx, %rsi
	movabsq	$-4294967296, %rcx
	andq	%rsi, %rcx
	orq	$1, %rcx
	movq	%rcx, %rdx
	movq	%rdx, %rcx
	movl	%ecx, %esi
	movabsq	$4294967296, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	jmp	.L891
.L890:
	movabsq	$-9223372036854775808, %rcx
	cmpq	%rcx, -24(%rbp)
	jne	.L892
	leaq	.LC86(%rip), %rax
	movq	%rdx, %rsi
	movabsq	$-4294967296, %rcx
	andq	%rsi, %rcx
	orq	$20, %rcx
	movq	%rcx, %rdx
	movq	%rdx, %rcx
	movl	%ecx, %esi
	movabsq	$4294967296, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	jmp	.L891
.L892:
	movl	$20, -44(%rbp)
	movl	-44(%rbp), %eax
	addl	$1, %eax
	cltq
	movq	%rax, %rdi
	call	malloc_noscan
	movq	%rax, -56(%rbp)
	movb	$0, -33(%rbp)
	cmpq	$0, -24(%rbp)
	jns	.L893
	negq	-24(%rbp)
	movb	$1, -33(%rbp)
.L893:
	movl	-44(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movslq	%eax, %rdx
	movq	-56(%rbp), %rax
	addq	%rdx, %rax
	movb	$0, (%rax)
	subl	$1, -40(%rbp)
.L896:
	cmpq	$0, -24(%rbp)
	jle	.L901
	movq	-24(%rbp), %rcx
	movabsq	$-6640827866535438581, %rdx
	movq	%rcx, %rax
	imulq	%rdx
	leaq	(%rdx,%rcx), %rax
	sarq	$6, %rax
	movq	%rcx, %rdx
	sarq	$63, %rdx
	subq	%rdx, %rax
	movq	%rax, -64(%rbp)
	movq	-24(%rbp), %rax
	movl	%eax, %edx
	movq	-64(%rbp), %rax
	imull	$100, %eax, %eax
	subl	%eax, %edx
	leal	(%rdx,%rdx), %eax
	movl	%eax, %eax
	movq	%rax, -32(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	_const_digit_pairs(%rip), %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	movl	-40(%rbp), %edx
	movslq	%edx, %rcx
	movq	-56(%rbp), %rdx
	addq	%rcx, %rdx
	movzbl	(%rax), %eax
	movb	%al, (%rdx)
	subl	$1, -40(%rbp)
	addq	$1, -32(%rbp)
	movq	_const_digit_pairs(%rip), %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	movl	-40(%rbp), %edx
	movslq	%edx, %rcx
	movq	-56(%rbp), %rdx
	addq	%rcx, %rdx
	movzbl	(%rax), %eax
	movb	%al, (%rdx)
	subl	$1, -40(%rbp)
	jmp	.L896
.L901:
	nop
	addl	$1, -40(%rbp)
	cmpq	$19, -32(%rbp)
	jg	.L897
	addl	$1, -40(%rbp)
.L897:
	cmpb	$0, -33(%rbp)
	je	.L898
	subl	$1, -40(%rbp)
	movl	-40(%rbp), %eax
	movslq	%eax, %rdx
	movq	-56(%rbp), %rax
	addq	%rdx, %rax
	movb	$45, (%rax)
.L898:
	movl	-44(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	movl	-40(%rbp), %eax
	movslq	%eax, %rcx
	movq	-56(%rbp), %rax
	addq	%rax, %rcx
	movq	-56(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	vmemmove
	movl	-68(%rbp), %edx
	movq	-56(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	tos
.L891:
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	u64_str
u64_str:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$72, %rsp
	movq	%rdi, -72(%rbp)
	movq	-72(%rbp), %rcx
	movq	%rcx, -24(%rbp)
	movq	$0, -32(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.L903
	leaq	.LC39(%rip), %rax
	movq	%rdx, %rsi
	movabsq	$-4294967296, %rcx
	andq	%rsi, %rcx
	orq	$1, %rcx
	movq	%rcx, %rdx
	movq	%rdx, %rcx
	movl	%ecx, %esi
	movabsq	$4294967296, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	jmp	.L904
.L903:
	movl	$20, -40(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	cltq
	movq	%rax, %rdi
	call	malloc_noscan
	movq	%rax, -48(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movslq	%eax, %rdx
	movq	-48(%rbp), %rax
	addq	%rdx, %rax
	movb	$0, (%rax)
	subl	$1, -36(%rbp)
.L907:
	cmpq	$0, -24(%rbp)
	je	.L911
	movq	-24(%rbp), %rax
	shrq	$2, %rax
	movabsq	$2951479051793528259, %rdx
	mulq	%rdx
	movq	%rdx, %rax
	shrq	$2, %rax
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rdx
	movq	%rdx, %rax
	salq	$2, %rax
	addq	%rdx, %rax
	leaq	0(,%rax,4), %rdx
	addq	%rdx, %rax
	salq	$2, %rax
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	subq	%rdx, %rax
	addq	%rax, %rax
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	_const_digit_pairs(%rip), %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	movl	-36(%rbp), %edx
	movslq	%edx, %rcx
	movq	-48(%rbp), %rdx
	addq	%rcx, %rdx
	movzbl	(%rax), %eax
	movb	%al, (%rdx)
	subl	$1, -36(%rbp)
	addq	$1, -32(%rbp)
	movq	_const_digit_pairs(%rip), %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	movl	-36(%rbp), %edx
	movslq	%edx, %rcx
	movq	-48(%rbp), %rdx
	addq	%rcx, %rdx
	movzbl	(%rax), %eax
	movb	%al, (%rdx)
	subl	$1, -36(%rbp)
	jmp	.L907
.L911:
	nop
	addl	$1, -36(%rbp)
	cmpq	$19, -32(%rbp)
	ja	.L908
	addl	$1, -36(%rbp)
.L908:
	movl	-40(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	movl	-36(%rbp), %eax
	movslq	%eax, %rcx
	movq	-48(%rbp), %rax
	addq	%rax, %rcx
	movq	-48(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	vmemmove
	movl	-60(%rbp), %edx
	movq	-48(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	tos
.L904:
	movq	-8(%rbp), %rbx
	leave
	ret
	.section	.rodata, "a"
.LC87:
	.string	"true"
.LC88:
	.string	"false"
	.text
	.globl	bool_str
bool_str:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	movl	%edi, %ecx
	movb	%cl, -20(%rbp)
	cmpb	$0, -20(%rbp)
	je	.L913
	leaq	.LC87(%rip), %rax
	movq	%rdx, %rsi
	movabsq	$-4294967296, %rcx
	andq	%rsi, %rcx
	orq	$4, %rcx
	movq	%rcx, %rdx
	movq	%rdx, %rcx
	movl	%ecx, %esi
	movabsq	$4294967296, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	jmp	.L914
.L913:
	leaq	.LC88(%rip), %rax
	movq	%rdx, %rsi
	movabsq	$-4294967296, %rcx
	andq	%rsi, %rcx
	orq	$5, %rcx
	movq	%rcx, %rdx
	movq	%rdx, %rcx
	movl	%ecx, %esi
	movabsq	$4294967296, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %rdx
.L914:
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	u64_to_hex
	.hidden	u64_to_hex
u64_to_hex:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$56, %rsp
	movq	%rdi, -56(%rbp)
	movl	%esi, %eax
	movb	%al, -60(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	$0, -48(%rbp)
	movq	$0, -40(%rbp)
	movb	$0, -32(%rbp)
	movzbl	-60(%rbp), %eax
	cltq
	movb	$0, -48(%rbp,%rax)
	movl	$0, -28(%rbp)
	movzbl	-60(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.L917
.L920:
	movq	-24(%rbp), %rax
	andl	$15, %eax
	movb	%al, -29(%rbp)
	cmpb	$9, -29(%rbp)
	ja	.L918
	movzbl	-29(%rbp), %eax
	addl	$48, %eax
	jmp	.L919
.L918:
	movzbl	-29(%rbp), %eax
	addl	$87, %eax
.L919:
	movl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movb	%al, -48(%rbp,%rdx)
	shrq	$4, -24(%rbp)
	subl	$1, -28(%rbp)
.L917:
	cmpl	$0, -28(%rbp)
	jns	.L920
	movzbl	-60(%rbp), %ebx
	movzbl	-60(%rbp), %eax
	leal	1(%rax), %edx
	leaq	-48(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	memdup
	movl	%ebx, %esi
	movq	%rax, %rdi
	call	tos
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	u64_to_hex_no_leading_zeros
	.hidden	u64_to_hex_no_leading_zeros
u64_to_hex_no_leading_zeros:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$64, %rsp
	movq	%rdi, -56(%rbp)
	movl	%esi, %eax
	movb	%al, -60(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -8(%rbp)
	movq	$0, -48(%rbp)
	movq	$0, -40(%rbp)
	movb	$0, -32(%rbp)
	movzbl	-60(%rbp), %eax
	cltq
	movb	$0, -48(%rbp,%rax)
	movl	$0, -12(%rbp)
	movzbl	-60(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.L923
.L928:
	movq	-8(%rbp), %rax
	andl	$15, %eax
	movb	%al, -13(%rbp)
	cmpb	$9, -13(%rbp)
	ja	.L924
	movzbl	-13(%rbp), %eax
	addl	$48, %eax
	jmp	.L925
.L924:
	movzbl	-13(%rbp), %eax
	addl	$87, %eax
.L925:
	movl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movb	%al, -48(%rbp,%rdx)
	shrq	$4, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L930
	subl	$1, -12(%rbp)
.L923:
	cmpl	$0, -12(%rbp)
	jns	.L928
	jmp	.L927
.L930:
	nop
.L927:
	movzbl	-60(%rbp), %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	leal	1(%rax), %edx
	leaq	-48(%rbp), %rcx
	movl	-12(%rbp), %eax
	cltq
	addq	%rcx, %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	memdup
	movq	%rax, %rdx
	movl	-20(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	tos
	leave
	ret
	.section	.rodata, "a"
.LC89:
	.string	"00"
	.text
	.globl	u8_hex
u8_hex:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$24, %rsp
	movl	%edi, %ecx
	movb	%cl, -20(%rbp)
	cmpb	$0, -20(%rbp)
	jne	.L932
	leaq	.LC89(%rip), %rax
	movq	%rdx, %rsi
	movabsq	$-4294967296, %rcx
	andq	%rsi, %rcx
	orq	$2, %rcx
	movq	%rcx, %rdx
	movq	%rdx, %rcx
	movl	%ecx, %esi
	movabsq	$4294967296, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	jmp	.L933
.L932:
	movzbl	-20(%rbp), %eax
	movl	$2, %esi
	movq	%rax, %rdi
	call	u64_to_hex
.L933:
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	u64_hex
u64_hex:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$24, %rsp
	movq	%rdi, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.L935
	leaq	.LC39(%rip), %rax
	movq	%rdx, %rsi
	movabsq	$-4294967296, %rcx
	andq	%rsi, %rcx
	orq	$1, %rcx
	movq	%rcx, %rdx
	movq	%rdx, %rcx
	movl	%ecx, %esi
	movabsq	$4294967296, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	jmp	.L936
.L935:
	movq	-24(%rbp), %rax
	movl	$16, %esi
	movq	%rax, %rdi
	call	u64_to_hex_no_leading_zeros
.L936:
	movq	-8(%rbp), %rbx
	leave
	ret
	.section	.rodata, "a"
.LC90:
	.string	"0x"
	.text
	.globl	voidptr_str
voidptr_str:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	movq	%rdi, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	u64_hex
	leaq	.LC90(%rip), %r12
	movq	%r13, %rsi
	movabsq	$-4294967296, %rcx
	andq	%rsi, %rcx
	orq	$2, %rcx
	movq	%rcx, %r13
	movq	%r13, %rcx
	movl	%ecx, %esi
	movabsq	$4294967296, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %r13
	movq	%r12, %rsi
	movq	%r13, %rdi
	movq	%r12, %rcx
	movq	%r13, %rbx
	movq	%rsi, %rdi
	movq	%rbx, %rsi
	movq	%rdx, %rcx
	movq	%rax, %rdx
	call	string__plus
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%rbp
	ret
	.globl	byteptr_str
byteptr_str:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	movq	%rdi, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	u64_hex
	leaq	.LC90(%rip), %r12
	movq	%r13, %rsi
	movabsq	$-4294967296, %rcx
	andq	%rsi, %rcx
	orq	$2, %rcx
	movq	%rcx, %r13
	movq	%r13, %rcx
	movl	%ecx, %esi
	movabsq	$4294967296, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %r13
	movq	%r12, %rsi
	movq	%r13, %rdi
	movq	%r12, %rcx
	movq	%r13, %rbx
	movq	%rsi, %rdi
	movq	%rbx, %rsi
	movq	%rdx, %rcx
	movq	%rax, %rdx
	call	string__plus
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%rbp
	ret
	.globl	charptr_str
charptr_str:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	movq	%rdi, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	u64_hex
	leaq	.LC90(%rip), %r12
	movq	%r13, %rsi
	movabsq	$-4294967296, %rcx
	andq	%rsi, %rcx
	orq	$2, %rcx
	movq	%rcx, %r13
	movq	%r13, %rcx
	movl	%ecx, %esi
	movabsq	$4294967296, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %r13
	movq	%r12, %rsi
	movq	%r13, %rdi
	movq	%r12, %rcx
	movq	%r13, %rbx
	movq	%rsi, %rdi
	movq	%rbx, %rsi
	movq	%rdx, %rcx
	movq	%rax, %rdx
	call	string__plus
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%rbp
	ret
	.globl	u8_str
u8_str:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movl	%edi, %eax
	movb	%al, -4(%rbp)
	movzbl	-4(%rbp), %eax
	movl	$7, %esi
	movl	%eax, %edi
	call	int_str_l
	leave
	ret
	.globl	u8_ascii_str
u8_ascii_str:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$40, %rsp
	movl	%edi, %eax
	movb	%al, -36(%rbp)
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movl	$2, %edi
	call	malloc_noscan
	movq	%rax, -32(%rbp)
	movl	$1, -24(%rbp)
	movq	-32(%rbp), %rax
	movzbl	-36(%rbp), %edx
	movb	%dl, (%rax)
	movq	-32(%rbp), %rax
	addq	$1, %rax
	movb	$0, (%rax)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdx
	movq	-8(%rbp), %rbx
	leave
	ret
	.section	.rodata, "a"
.LC91:
	.string	"`\\0`"
.LC92:
	.string	"`\\a`"
.LC93:
	.string	"`\\b`"
.LC94:
	.string	"`\\t`"
.LC95:
	.string	"`\\n`"
.LC96:
	.string	"`\\v`"
.LC97:
	.string	"`\\f`"
.LC98:
	.string	"`\\r`"
.LC99:
	.string	"`\\e`"
	.text
	.globl	u8_str_escaped
u8_str_escaped:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$88, %rsp
	movl	%edi, %eax
	movb	%al, -100(%rbp)
	movq	$0, -48(%rbp)
	movq	$0, -40(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -48(%rbp)
	movl	$1, -36(%rbp)
	cmpb	$0, -100(%rbp)
	jne	.L948
	leaq	.LC91(%rip), %rax
	movq	%rax, -48(%rbp)
	movl	$4, -40(%rbp)
	movl	$1, -36(%rbp)
	jmp	.L949
.L948:
	cmpb	$7, -100(%rbp)
	jne	.L950
	leaq	.LC92(%rip), %rax
	movq	%rax, -48(%rbp)
	movl	$4, -40(%rbp)
	movl	$1, -36(%rbp)
	jmp	.L949
.L950:
	cmpb	$8, -100(%rbp)
	jne	.L951
	leaq	.LC93(%rip), %rax
	movq	%rax, -48(%rbp)
	movl	$4, -40(%rbp)
	movl	$1, -36(%rbp)
	jmp	.L949
.L951:
	cmpb	$9, -100(%rbp)
	jne	.L952
	leaq	.LC94(%rip), %rax
	movq	%rax, -48(%rbp)
	movl	$4, -40(%rbp)
	movl	$1, -36(%rbp)
	jmp	.L949
.L952:
	cmpb	$10, -100(%rbp)
	jne	.L953
	leaq	.LC95(%rip), %rax
	movq	%rax, -48(%rbp)
	movl	$4, -40(%rbp)
	movl	$1, -36(%rbp)
	jmp	.L949
.L953:
	cmpb	$11, -100(%rbp)
	jne	.L954
	leaq	.LC96(%rip), %rax
	movq	%rax, -48(%rbp)
	movl	$4, -40(%rbp)
	movl	$1, -36(%rbp)
	jmp	.L949
.L954:
	cmpb	$12, -100(%rbp)
	jne	.L955
	leaq	.LC97(%rip), %rax
	movq	%rax, -48(%rbp)
	movl	$4, -40(%rbp)
	movl	$1, -36(%rbp)
	jmp	.L949
.L955:
	cmpb	$13, -100(%rbp)
	jne	.L956
	leaq	.LC98(%rip), %rax
	movq	%rax, -48(%rbp)
	movl	$4, -40(%rbp)
	movl	$1, -36(%rbp)
	jmp	.L949
.L956:
	cmpb	$27, -100(%rbp)
	jne	.L957
	leaq	.LC99(%rip), %rax
	movq	%rax, -48(%rbp)
	movl	$4, -40(%rbp)
	movl	$1, -36(%rbp)
	jmp	.L949
.L957:
	cmpb	$31, -100(%rbp)
	jbe	.L958
	cmpb	$126, -100(%rbp)
	ja	.L958
	movzbl	-100(%rbp), %eax
	movl	%eax, %edi
	call	u8_ascii_str
	movq	%rax, -48(%rbp)
	movq	%rdx, -40(%rbp)
	jmp	.L949
.L958:
	movzbl	-100(%rbp), %eax
	movl	%eax, %edi
	call	u8_hex
	movq	%rax, -80(%rbp)
	movq	%rdx, -72(%rbp)
	leaq	.LC90(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%r12, %rsi
	movq	%r13, %rdi
	movq	%r12, %rcx
	movq	%r13, %rbx
	movq	%rsi, %rdi
	movq	%rbx, %rsi
	movq	%rdx, %rcx
	movq	%rax, %rdx
	call	string__plus
	movq	%rax, -96(%rbp)
	movq	%rdx, -88(%rbp)
	leaq	-80(%rbp), %rax
	movq	%rax, %rdi
	call	string_free
	movq	-96(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rax, -48(%rbp)
	movq	%rdx, -40(%rbp)
.L949:
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	addq	$88, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%rbp
	ret
	.globl	Array_u8_bytestr
Array_u8_bytestr:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$24, %rsp
	movl	36(%rbp), %eax
	addl	$1, %eax
	cltq
	movq	%rax, %rdi
	call	malloc_noscan
	movq	%rax, -24(%rbp)
	movl	36(%rbp), %eax
	movslq	%eax, %rdx
	movq	24(%rbp), %rcx
	movq	-24(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	vmemcpy
	movl	36(%rbp), %eax
	movslq	%eax, %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movb	$0, (%rax)
	movl	36(%rbp), %edx
	movq	-24(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	tos
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	fast_string_eq
	.hidden	fast_string_eq
fast_string_eq:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$32, %rsp
	movq	%rsi, %rax
	movq	%rdi, %r8
	movq	%r8, %rsi
	movq	%r9, %rdi
	movq	%rax, %rdi
	movq	%rsi, -16(%rbp)
	movq	%rdi, -8(%rbp)
	movq	%rdx, -32(%rbp)
	movq	%rcx, -24(%rbp)
	movl	-8(%rbp), %edx
	movl	-24(%rbp), %eax
	cmpl	%eax, %edx
	je	.L963
	movl	$0, %eax
	jmp	.L964
.L963:
	movl	-24(%rbp), %eax
	movslq	%eax, %rdx
	movq	-32(%rbp), %rcx
	movq	-16(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcmp
	testl	%eax, %eax
	sete	%al
.L964:
	leave
	ret
	.globl	map_hash_string
	.hidden	map_hash_string
map_hash_string:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdx
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	%rdx, -8(%rbp)
	movl	-8(%rbp), %eax
	movslq	%eax, %rsi
	movq	-16(%rbp), %rax
	leaq	_wyp(%rip), %rdx
	movq	%rdx, %rcx
	movl	$0, %edx
	movq	%rax, %rdi
	call	wyhash
	leave
	ret
	.globl	map_hash_int_1
	.hidden	map_hash_int_1
map_hash_int_1:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	movl	$0, %esi
	movq	%rax, %rdi
	call	wyhash64
	leave
	ret
	.globl	map_hash_int_2
	.hidden	map_hash_int_2
map_hash_int_2:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movzwl	(%rax), %eax
	movzwl	%ax, %eax
	movl	$0, %esi
	movq	%rax, %rdi
	call	wyhash64
	leave
	ret
	.globl	map_hash_int_4
	.hidden	map_hash_int_4
map_hash_int_4:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, %eax
	movl	$0, %esi
	movq	%rax, %rdi
	call	wyhash64
	leave
	ret
	.globl	map_hash_int_8
	.hidden	map_hash_int_8
map_hash_int_8:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	wyhash64
	leave
	ret
	.globl	DenseArray_zeros_to_end
	.hidden	DenseArray_zeros_to_end
DenseArray_zeros_to_end:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r12
	pushq	%rbx
	subq	$48, %rsp
	movq	%rdi, -56(%rbp)
	movq	-56(%rbp), %rax
	movl	4(%rax), %eax
	cltq
	movq	%rax, %rdi
	call	_v_malloc
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	cltq
	movq	%rax, %rdi
	call	_v_malloc
	movq	%rax, -40(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -24(%rbp)
	jmp	.L976
.L979:
	movl	-24(%rbp), %edx
	movq	-56(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	DenseArray_has_index
	testb	%al, %al
	je	.L977
	movl	-20(%rbp), %eax
	cmpl	-24(%rbp), %eax
	je	.L978
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movslq	%eax, %rbx
	movl	-20(%rbp), %edx
	movq	-56(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	DenseArray_key
	movq	%rax, %rcx
	movq	-40(%rbp), %rax
	movq	%rbx, %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movslq	%eax, %rbx
	movl	-24(%rbp), %edx
	movq	-56(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	DenseArray_key
	movq	%rax, %r12
	movl	-20(%rbp), %edx
	movq	-56(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	DenseArray_key
	movq	%rbx, %rdx
	movq	%r12, %rsi
	movq	%rax, %rdi
	call	memcpy
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movslq	%eax, %rbx
	movl	-24(%rbp), %edx
	movq	-56(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	DenseArray_key
	movq	%rax, %rcx
	movq	-40(%rbp), %rax
	movq	%rbx, %rdx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	memcpy
	movq	-56(%rbp), %rax
	movl	4(%rax), %eax
	movslq	%eax, %rbx
	movl	-20(%rbp), %edx
	movq	-56(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	DenseArray_value
	movq	%rax, %rcx
	movq	-32(%rbp), %rax
	movq	%rbx, %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy
	movq	-56(%rbp), %rax
	movl	4(%rax), %eax
	movslq	%eax, %rbx
	movl	-24(%rbp), %edx
	movq	-56(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	DenseArray_value
	movq	%rax, %r12
	movl	-20(%rbp), %edx
	movq	-56(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	DenseArray_value
	movq	%rbx, %rdx
	movq	%r12, %rsi
	movq	%rax, %rdi
	call	memcpy
	movq	-56(%rbp), %rax
	movl	4(%rax), %eax
	movslq	%eax, %rbx
	movl	-24(%rbp), %edx
	movq	-56(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	DenseArray_value
	movq	%rax, %rcx
	movq	-32(%rbp), %rax
	movq	%rbx, %rdx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	memcpy
.L978:
	addl	$1, -20(%rbp)
.L977:
	addl	$1, -24(%rbp)
.L976:
	movq	-56(%rbp), %rax
	movl	12(%rax), %eax
	cmpl	%eax, -24(%rbp)
	jl	.L979
	movq	-32(%rbp), %rax
	movq	%rax, %rdi
	call	_v_free
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	_v_free
	movq	-56(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, %rdi
	call	_v_free
	movq	-56(%rbp), %rax
	movl	-20(%rbp), %edx
	movl	%edx, 12(%rax)
	movq	-56(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -44(%rbp)
	movl	-20(%rbp), %eax
	movl	$8, %edx
	cmpl	%edx, %eax
	cmovgel	%eax, %edx
	movq	-56(%rbp), %rax
	movl	%edx, 8(%rax)
	movq	-56(%rbp), %rax
	movl	4(%rax), %edx
	movq	-56(%rbp), %rax
	movl	8(%rax), %eax
	imull	%eax, %edx
	movq	-56(%rbp), %rax
	movl	4(%rax), %eax
	imull	-44(%rbp), %eax
	movl	%eax, %ecx
	movq	-56(%rbp), %rax
	movq	40(%rax), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	realloc_data
	movq	-56(%rbp), %rdx
	movq	%rax, 40(%rdx)
	movq	-56(%rbp), %rax
	movl	(%rax), %edx
	movq	-56(%rbp), %rax
	movl	8(%rax), %eax
	imull	%eax, %edx
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	imull	-44(%rbp), %eax
	movl	%eax, %ecx
	movq	-56(%rbp), %rax
	movq	32(%rax), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	realloc_data
	movq	-56(%rbp), %rdx
	movq	%rax, 32(%rdx)
	nop
	addq	$48, %rsp
	popq	%rbx
	popq	%r12
	popq	%rbp
	ret
	.globl	new_dense_array
	.hidden	new_dense_array
new_dense_array:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$88, %rsp
	movq	%rdi, -88(%rbp)
	movl	%esi, -92(%rbp)
	movl	%edx, -96(%rbp)
	movl	$8, -20(%rbp)
	movl	-20(%rbp), %eax
	movslq	%eax, %rdx
	movl	-92(%rbp), %eax
	cltq
	imulq	%rdx, %rax
	movq	%rax, %rdi
	call	__at_least_one
	movq	%rax, %rdi
	call	_v_malloc
	movq	%rax, %rbx
	movl	-20(%rbp), %eax
	movslq	%eax, %rdx
	movl	-96(%rbp), %eax
	cltq
	imulq	%rdx, %rax
	movq	%rax, %rdi
	call	__at_least_one
	movq	%rax, %rdi
	call	_v_malloc
	movq	-88(%rbp), %rdx
	movl	-92(%rbp), %ecx
	movl	%ecx, (%rdx)
	movq	-88(%rbp), %rdx
	movl	-96(%rbp), %ecx
	movl	%ecx, 4(%rdx)
	movq	-88(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movl	%ecx, 8(%rdx)
	movq	-88(%rbp), %rdx
	movl	$0, 12(%rdx)
	movq	-88(%rbp), %rdx
	movl	$0, 16(%rdx)
	movq	-88(%rbp), %rdx
	movq	$0, 24(%rdx)
	movq	-88(%rbp), %rdx
	movq	%rbx, 32(%rdx)
	movq	-88(%rbp), %rdx
	movq	%rax, 40(%rdx)
	movq	-88(%rbp), %rax
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	DenseArray_key
	.hidden	DenseArray_key
DenseArray_key:
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rax
	movq	32(%rax), %rdx
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	imull	-12(%rbp), %eax
	cltq
	addq	%rdx, %rax
	popq	%rbp
	ret
	.globl	DenseArray_value
	.hidden	DenseArray_value
DenseArray_value:
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rax
	movq	40(%rax), %rdx
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	imull	-12(%rbp), %eax
	cltq
	addq	%rdx, %rax
	popq	%rbp
	ret
	.globl	DenseArray_has_index
	.hidden	DenseArray_has_index
DenseArray_has_index:
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rax
	movl	16(%rax), %eax
	testl	%eax, %eax
	je	.L987
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdx
	movl	-12(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	testb	%al, %al
	jne	.L988
.L987:
	movl	$1, %eax
	jmp	.L989
.L988:
	movl	$0, %eax
.L989:
	popq	%rbp
	ret
	.globl	DenseArray_expand
	.hidden	DenseArray_expand
DenseArray_expand:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	movl	-4(%rbp), %edx
	imull	%edx, %eax
	movl	%eax, -8(%rbp)
	movq	-24(%rbp), %rax
	movl	4(%rax), %eax
	movl	-4(%rbp), %edx
	imull	%edx, %eax
	movl	%eax, -12(%rbp)
	movq	-24(%rbp), %rax
	movl	8(%rax), %edx
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	cmpl	%eax, %edx
	jne	.L992
	movq	-24(%rbp), %rax
	movl	8(%rax), %edx
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	sarl	$3, %eax
	addl	%eax, %edx
	movq	-24(%rbp), %rax
	movl	%edx, 8(%rax)
	movq	-24(%rbp), %rax
	movl	(%rax), %edx
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	imull	%eax, %edx
	movq	-24(%rbp), %rax
	movq	32(%rax), %rax
	movl	-8(%rbp), %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	realloc_data
	movq	-24(%rbp), %rdx
	movq	%rax, 32(%rdx)
	movq	-24(%rbp), %rax
	movl	4(%rax), %edx
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	imull	%eax, %edx
	movq	-24(%rbp), %rax
	movq	40(%rax), %rax
	movl	-12(%rbp), %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	realloc_data
	movq	-24(%rbp), %rdx
	movq	%rax, 40(%rdx)
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	testl	%eax, %eax
	je	.L992
	movq	-24(%rbp), %rax
	movl	8(%rax), %edx
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movl	-4(%rbp), %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	realloc_data
	movq	-24(%rbp), %rdx
	movq	%rax, 24(%rdx)
	movq	-24(%rbp), %rax
	movl	8(%rax), %edx
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	subl	%eax, %edx
	movslq	%edx, %rax
	movq	-24(%rbp), %rdx
	movq	24(%rdx), %rcx
	movq	-24(%rbp), %rdx
	movl	12(%rdx), %edx
	movslq	%edx, %rdx
	addq	%rdx, %rcx
	movq	%rax, %rdx
	movl	$0, %esi
	movq	%rcx, %rdi
	call	vmemset
.L992:
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	testl	%eax, %eax
	je	.L993
	movq	-24(%rbp), %rax
	movq	24(%rax), %rdx
	movl	-16(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movb	$0, (%rax)
.L993:
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	leal	1(%rax), %edx
	movq	-24(%rbp), %rax
	movl	%edx, 12(%rax)
	movl	-16(%rbp), %eax
	leave
	ret
	.globl	map_eq_string
	.hidden	map_eq_string
map_eq_string:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdx
	movq	(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	(%rcx), %rdi
	movq	8(%rcx), %rsi
	movq	%rdx, %rcx
	movq	%rax, %rdx
	call	fast_string_eq
	leave
	ret
	.globl	map_eq_int_1
	.hidden	map_eq_int_1
map_eq_int_1:
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rax
	movzbl	(%rax), %edx
	movq	-16(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	%al, %dl
	sete	%al
	popq	%rbp
	ret
	.globl	map_eq_int_2
	.hidden	map_eq_int_2
map_eq_int_2:
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rax
	movzwl	(%rax), %edx
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	cmpw	%ax, %dx
	sete	%al
	popq	%rbp
	ret
	.globl	map_eq_int_4
	.hidden	map_eq_int_4
map_eq_int_4:
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %edx
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	cmpl	%eax, %edx
	sete	%al
	popq	%rbp
	ret
	.globl	map_eq_int_8
	.hidden	map_eq_int_8
map_eq_int_8:
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rdx
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpq	%rax, %rdx
	sete	%al
	popq	%rbp
	ret
	.globl	map_clone_string
	.hidden	map_clone_string
map_clone_string:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	8(%rax), %rdx
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	%rdx, -8(%rbp)
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	string_clone
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	nop
	leave
	ret
	.globl	map_clone_int_1
	.hidden	map_clone_int_1
map_clone_int_1:
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rax
	movzbl	(%rax), %edx
	movq	-8(%rbp), %rax
	movb	%dl, (%rax)
	nop
	popq	%rbp
	ret
	.globl	map_clone_int_2
	.hidden	map_clone_int_2
map_clone_int_2:
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rax
	movzwl	(%rax), %edx
	movq	-8(%rbp), %rax
	movw	%dx, (%rax)
	nop
	popq	%rbp
	ret
	.globl	map_clone_int_4
	.hidden	map_clone_int_4
map_clone_int_4:
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	(%rax), %edx
	movq	-8(%rbp), %rax
	movl	%edx, (%rax)
	nop
	popq	%rbp
	ret
	.globl	map_clone_int_8
	.hidden	map_clone_int_8
map_clone_int_8:
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, (%rax)
	nop
	popq	%rbp
	ret
	.globl	map_free_string
	.hidden	map_free_string
map_free_string:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdx
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	%rdx, -8(%rbp)
	leaq	-16(%rbp), %rax
	movq	%rax, %rdi
	call	string_free
	nop
	leave
	ret
	.globl	map_free_nop
	.hidden	map_free_nop
map_free_nop:
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, -8(%rbp)
	nop
	popq	%rbp
	ret
	.globl	new_map
	.hidden	new_map
new_map:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$248, %rsp
	movq	%rdi, -216(%rbp)
	movl	%esi, -220(%rbp)
	movl	%edx, -224(%rbp)
	movq	%rcx, -232(%rbp)
	movq	%r8, -240(%rbp)
	movq	%r9, -248(%rbp)
	movl	$144, -20(%rbp)
	movl	-220(%rbp), %eax
	movl	%eax, %esi
	movl	$8, %edi
	call	_us32_lt
	movb	%al, -21(%rbp)
	leaq	-80(%rbp), %rax
	movl	-224(%rbp), %edx
	movl	-220(%rbp), %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	new_dense_array
	movl	-20(%rbp), %eax
	cltq
	movq	%rax, %rdi
	call	vcalloc_noscan
	movq	%rax, %rdx
	movq	-216(%rbp), %rax
	movl	-220(%rbp), %ecx
	movl	%ecx, (%rax)
	movq	-216(%rbp), %rax
	movl	-224(%rbp), %ecx
	movl	%ecx, 4(%rax)
	movq	-216(%rbp), %rax
	movl	$30, 8(%rax)
	movq	-216(%rbp), %rax
	movb	$16, 12(%rax)
	movq	-216(%rbp), %rax
	movb	$5, 13(%rax)
	movq	-216(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-64(%rbp), %rcx
	movq	-56(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	movq	-48(%rbp), %rcx
	movq	-40(%rbp), %rbx
	movq	%rcx, 48(%rax)
	movq	%rbx, 56(%rax)
	movq	-216(%rbp), %rax
	movq	%rdx, 64(%rax)
	movq	-216(%rbp), %rax
	movl	$4, 72(%rax)
	movq	-216(%rbp), %rax
	movzbl	-21(%rbp), %edx
	movb	%dl, 76(%rax)
	movq	-216(%rbp), %rax
	movq	-232(%rbp), %rdx
	movq	%rdx, 80(%rax)
	movq	-216(%rbp), %rax
	movq	-240(%rbp), %rdx
	movq	%rdx, 88(%rax)
	movq	-216(%rbp), %rax
	movq	-248(%rbp), %rdx
	movq	%rdx, 96(%rax)
	movq	-216(%rbp), %rax
	movq	16(%rbp), %rdx
	movq	%rdx, 104(%rax)
	movq	-216(%rbp), %rax
	movl	$0, 112(%rax)
	movq	-216(%rbp), %rax
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	new_map_init
	.hidden	new_map_init
new_map_init:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$200, %rsp
	movq	%rdi, -168(%rbp)
	movq	%rsi, -176(%rbp)
	movq	%rdx, -184(%rbp)
	movq	%rcx, -192(%rbp)
	movq	%r8, -200(%rbp)
	movl	%r9d, -204(%rbp)
	leaq	-160(%rbp), %rax
	movq	-192(%rbp), %r8
	movq	-184(%rbp), %rdi
	movq	-176(%rbp), %rcx
	movl	24(%rbp), %edx
	movl	16(%rbp), %esi
	subq	$8, %rsp
	pushq	-200(%rbp)
	movq	%r8, %r9
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	new_map
	addq	$16, %rsp
	movq	32(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	40(%rbp), %rax
	movq	%rax, -32(%rbp)
	movl	$0, -36(%rbp)
	jmp	.L1015
.L1016:
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rcx
	leaq	-160(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	map_set
	movl	16(%rbp), %eax
	cltq
	addq	%rax, -24(%rbp)
	movl	24(%rbp), %eax
	cltq
	addq	%rax, -32(%rbp)
	addl	$1, -36(%rbp)
.L1015:
	movl	-36(%rbp), %eax
	cmpl	-204(%rbp), %eax
	jl	.L1016
	movq	-168(%rbp), %rax
	movq	-160(%rbp), %rcx
	movq	-152(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-144(%rbp), %rcx
	movq	-136(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-128(%rbp), %rcx
	movq	-120(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	movq	-112(%rbp), %rcx
	movq	-104(%rbp), %rbx
	movq	%rcx, 48(%rax)
	movq	%rbx, 56(%rax)
	movq	-96(%rbp), %rcx
	movq	-88(%rbp), %rbx
	movq	%rcx, 64(%rax)
	movq	%rbx, 72(%rax)
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rbx
	movq	%rcx, 80(%rax)
	movq	%rbx, 88(%rax)
	movq	-64(%rbp), %rcx
	movq	-56(%rbp), %rbx
	movq	%rcx, 96(%rax)
	movq	%rbx, 104(%rax)
	movq	-48(%rbp), %rdx
	movq	%rdx, 112(%rax)
	movq	-168(%rbp), %rax
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	map_move
map_move:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$152, %rsp
	movq	%rdi, -152(%rbp)
	movq	%rsi, -160(%rbp)
	movq	-160(%rbp), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, -144(%rbp)
	movq	%rbx, -136(%rbp)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, -128(%rbp)
	movq	%rbx, -120(%rbp)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, -112(%rbp)
	movq	%rbx, -104(%rbp)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, -96(%rbp)
	movq	%rbx, -88(%rbp)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, -80(%rbp)
	movq	%rbx, -72(%rbp)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, -64(%rbp)
	movq	%rbx, -56(%rbp)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, -48(%rbp)
	movq	%rbx, -40(%rbp)
	movq	112(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	-160(%rbp), %rax
	movl	$120, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	vmemset
	movq	-152(%rbp), %rax
	movq	-144(%rbp), %rcx
	movq	-136(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-128(%rbp), %rcx
	movq	-120(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-112(%rbp), %rcx
	movq	-104(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	movq	-96(%rbp), %rcx
	movq	-88(%rbp), %rbx
	movq	%rcx, 48(%rax)
	movq	%rbx, 56(%rax)
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rbx
	movq	%rcx, 64(%rax)
	movq	%rbx, 72(%rax)
	movq	-64(%rbp), %rcx
	movq	-56(%rbp), %rbx
	movq	%rcx, 80(%rax)
	movq	%rbx, 88(%rax)
	movq	-48(%rbp), %rcx
	movq	-40(%rbp), %rbx
	movq	%rcx, 96(%rax)
	movq	%rbx, 104(%rax)
	movq	-32(%rbp), %rdx
	movq	%rdx, 112(%rax)
	movq	-152(%rbp), %rax
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	map_clear
map_clear:
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	$0, 112(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 28(%rax)
	nop
	popq	%rbp
	ret
	.globl	map_key_to_index
	.hidden	map_key_to_index
map_key_to_index:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$56, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	-56(%rbp), %rax
	movq	80(%rax), %rdx
	movq	-64(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	%rax, -24(%rbp)
	movq	-56(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, %eax
	andq	-24(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movzbl	13(%rax), %eax
	movzbl	%al, %eax
	movq	-24(%rbp), %rdx
	movl	%eax, %ecx
	shrq	%cl, %rdx
	movq	%rdx, %rax
	movl	$16777215, %edx
	movl	%edx, %edx
	andq	%rdx, %rax
	movl	$16777216, %edx
	movl	%edx, %edx
	orq	%rdx, %rax
	movq	%rax, -40(%rbp)
	movq	-32(%rbp), %rax
	movl	%eax, %edx
	movq	-40(%rbp), %rax
	movl	%eax, %ecx
	movl	%edx, %edx
	movabsq	$-4294967296, %rax
	andq	%rbx, %rax
	orq	%rdx, %rax
	movq	%rax, %rbx
	movl	%ecx, %eax
	salq	$32, %rax
	movl	%ebx, %edx
	orq	%rdx, %rax
	movq	%rax, %rbx
	movq	%rbx, %rax
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	map_meta_less
	.hidden	map_meta_less
map_meta_less:
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -32(%rbp)
	movl	-28(%rbp), %edx
	movl	%edx, -4(%rbp)
	movl	-32(%rbp), %edx
	movl	%edx, -8(%rbp)
.L1026:
	movq	-24(%rbp), %rdx
	movq	64(%rdx), %rdx
	movl	-4(%rbp), %ecx
	salq	$2, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %edx
	cmpl	%edx, -8(%rbp)
	jnb	.L1029
	addl	$2, -4(%rbp)
	movl	$16777216, %edx
	addl	%edx, -8(%rbp)
	jmp	.L1026
.L1029:
	nop
	movl	-4(%rbp), %edx
	movabsq	$-4294967296, %rcx
	andq	%rcx, %rax
	orq	%rdx, %rax
	movl	-8(%rbp), %edx
	salq	$32, %rdx
	movl	%eax, %eax
	orq	%rdx, %rax
	popq	%rbp
	ret
	.globl	map_meta_greater
	.hidden	map_meta_greater
map_meta_greater:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$64, %rsp
	movq	%rdi, -40(%rbp)
	movl	%esi, -44(%rbp)
	movl	%edx, -48(%rbp)
	movl	%ecx, -52(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	-52(%rbp), %eax
	movl	%eax, -12(%rbp)
.L1034:
	movq	-40(%rbp), %rax
	movq	64(%rax), %rax
	movl	-8(%rbp), %edx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	je	.L1036
	movq	-40(%rbp), %rax
	movq	64(%rax), %rax
	movl	-8(%rbp), %edx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	cmpl	-4(%rbp), %eax
	jnb	.L1033
	movq	-40(%rbp), %rax
	movq	64(%rax), %rax
	movl	-8(%rbp), %edx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-40(%rbp), %rax
	movq	64(%rax), %rax
	movl	-8(%rbp), %edx
	salq	$2, %rdx
	addq	%rax, %rdx
	movl	-4(%rbp), %eax
	movl	%eax, (%rdx)
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
	movq	-40(%rbp), %rax
	movq	64(%rax), %rax
	movl	-8(%rbp), %edx
	addl	$1, %edx
	movl	%edx, %edx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	-40(%rbp), %rax
	movq	64(%rax), %rax
	movl	-8(%rbp), %edx
	addl	$1, %edx
	movl	%edx, %edx
	salq	$2, %rdx
	addq	%rax, %rdx
	movl	-12(%rbp), %eax
	movl	%eax, (%rdx)
	movl	-20(%rbp), %eax
	movl	%eax, -12(%rbp)
.L1033:
	addl	$2, -8(%rbp)
	movl	$16777216, %eax
	addl	%eax, -4(%rbp)
	jmp	.L1034
.L1036:
	nop
	movq	-40(%rbp), %rax
	movq	64(%rax), %rax
	movl	-8(%rbp), %edx
	salq	$2, %rdx
	addq	%rax, %rdx
	movl	-4(%rbp), %eax
	movl	%eax, (%rdx)
	movq	-40(%rbp), %rax
	movq	64(%rax), %rax
	movl	-8(%rbp), %edx
	addl	$1, %edx
	movl	%edx, %edx
	salq	$2, %rdx
	addq	%rax, %rdx
	movl	-12(%rbp), %eax
	movl	%eax, (%rdx)
	movl	-4(%rbp), %eax
	shrl	$24, %eax
	subl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %edx
	movq	-40(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	map_ensure_extra_metas
	nop
	leave
	ret
	.section	.rodata, "a"
.LC100:
	.string	"Probe overflow"
	.text
	.globl	map_ensure_extra_metas
	.hidden	map_ensure_extra_metas
map_ensure_extra_metas:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$56, %rsp
	movq	%rdi, -72(%rbp)
	movl	%esi, -76(%rbp)
	movl	-76(%rbp), %eax
	leal	(%rax,%rax), %edx
	movq	-72(%rbp), %rax
	movl	72(%rax), %eax
	cmpl	%eax, %edx
	jne	.L1039
	movl	$4, -36(%rbp)
	movq	-72(%rbp), %rax
	movl	8(%rax), %edx
	movq	-72(%rbp), %rax
	movl	72(%rax), %eax
	addl	%edx, %eax
	addl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	-72(%rbp), %rax
	movl	72(%rax), %eax
	leal	4(%rax), %edx
	movq	-72(%rbp), %rax
	movl	%edx, 72(%rax)
	movq	-72(%rbp), %rax
	movl	8(%rax), %edx
	movq	-72(%rbp), %rax
	movl	72(%rax), %eax
	addl	%edx, %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	imull	-44(%rbp), %eax
	movl	%eax, %edx
	movl	-36(%rbp), %eax
	imull	-40(%rbp), %eax
	movl	%eax, %ecx
	movq	-72(%rbp), %rax
	movq	64(%rax), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	realloc_data
	movq	%rax, -56(%rbp)
	movq	-72(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rdx, 64(%rax)
	movq	-72(%rbp), %rax
	movq	64(%rax), %rax
	movl	-44(%rbp), %edx
	salq	$2, %rdx
	subq	$16, %rdx
	addq	%rdx, %rax
	movl	$16, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	vmemset
	cmpl	$252, -76(%rbp)
	jne	.L1039
	leaq	.LC100(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$14, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	%r12, %rcx
	movq	%r13, %rbx
	movq	%r12, %rax
	movq	%r13, %rdx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	_v_panic
.L1039:
	nop
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%rbp
	ret
	.globl	map_set
	.hidden	map_set
map_set:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$112, %rsp
	movq	%rdi, -88(%rbp)
	movq	%rsi, -96(%rbp)
	movq	%rdx, -104(%rbp)
	movq	-88(%rbp), %rax
	movl	112(%rax), %eax
	leal	(%rax,%rax), %ecx
	movq	-88(%rbp), %rax
	movl	8(%rax), %esi
	movl	%ecx, %eax
	movl	$0, %edx
	divl	%esi
	movl	%eax, -12(%rbp)
	movl	$0, %eax
	cmpl	-12(%rbp), %eax
	jnb	.L1041
	movq	-88(%rbp), %rax
	movq	%rax, %rdi
	call	map_expand
.L1041:
	movq	-96(%rbp), %rdx
	movq	-88(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	map_key_to_index
	movq	%rax, -64(%rbp)
	movl	-64(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-60(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %edx
	movl	-4(%rbp), %ecx
	movq	-88(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	map_meta_less
	movq	%rax, -72(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -8(%rbp)
.L1046:
	movq	-88(%rbp), %rax
	movq	64(%rax), %rax
	movl	-4(%rbp), %edx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	cmpl	%eax, -8(%rbp)
	jne	.L1048
	movq	-88(%rbp), %rax
	movq	64(%rax), %rax
	movl	-4(%rbp), %edx
	addl	$1, %edx
	movl	%edx, %edx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-88(%rbp), %rax
	leaq	16(%rax), %rdx
	movl	-16(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	DenseArray_key
	movq	%rax, -24(%rbp)
	movq	-88(%rbp), %rax
	movq	88(%rax), %rcx
	movq	-24(%rbp), %rdx
	movq	-96(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	*%rcx
	testb	%al, %al
	je	.L1044
	movq	-88(%rbp), %rax
	leaq	16(%rax), %rdx
	movl	-16(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	DenseArray_value
	movq	%rax, -32(%rbp)
	movq	-88(%rbp), %rax
	movl	4(%rax), %eax
	movslq	%eax, %rdx
	movq	-104(%rbp), %rcx
	movq	-32(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	vmemcpy
	jmp	.L1040
.L1044:
	addl	$2, -4(%rbp)
	movl	$16777216, %eax
	addl	%eax, -8(%rbp)
	jmp	.L1046
.L1048:
	nop
	movq	-88(%rbp), %rax
	addq	$16, %rax
	movq	%rax, %rdi
	call	DenseArray_expand
	movl	%eax, -36(%rbp)
	movq	-88(%rbp), %rax
	leaq	16(%rax), %rdx
	movl	-36(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	DenseArray_key
	movq	%rax, -48(%rbp)
	movq	-88(%rbp), %rax
	leaq	16(%rax), %rdx
	movl	-36(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	DenseArray_value
	movq	%rax, -56(%rbp)
	movq	-88(%rbp), %rax
	movq	96(%rax), %rcx
	movq	-96(%rbp), %rdx
	movq	-48(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	*%rcx
	movq	-88(%rbp), %rax
	movl	4(%rax), %eax
	movslq	%eax, %rdx
	movq	-104(%rbp), %rcx
	movq	-56(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	vmemcpy
	movl	-36(%rbp), %ecx
	movl	-8(%rbp), %edx
	movl	-4(%rbp), %esi
	movq	-88(%rbp), %rax
	movq	%rax, %rdi
	call	map_meta_greater
	movq	-88(%rbp), %rax
	movl	112(%rax), %eax
	leal	1(%rax), %edx
	movq	-88(%rbp), %rax
	movl	%edx, 112(%rax)
.L1040:
	leave
	ret
	.globl	map_expand
	.hidden	map_expand
map_expand:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	addl	$2, %eax
	addl	%eax, %eax
	leal	-2(%rax), %edx
	movq	-24(%rbp), %rax
	movl	%edx, 8(%rax)
	movq	-24(%rbp), %rax
	movzbl	12(%rax), %eax
	testb	%al, %al
	jne	.L1050
	movq	-24(%rbp), %rax
	movzbl	13(%rax), %eax
	leal	16(%rax), %edx
	movq	-24(%rbp), %rax
	movb	%dl, 13(%rax)
	movq	-24(%rbp), %rax
	movb	$16, 12(%rax)
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	map_rehash
	jmp	.L1052
.L1050:
	movl	-4(%rbp), %edx
	movq	-24(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	map_cached_rehash
	movq	-24(%rbp), %rax
	movzbl	12(%rax), %eax
	leal	-1(%rax), %edx
	movq	-24(%rbp), %rax
	movb	%dl, 12(%rax)
.L1052:
	nop
	leave
	ret
	.globl	map_rehash
	.hidden	map_rehash
map_rehash:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	8(%rax), %edx
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	addl	%edx, %eax
	addl	$2, %eax
	sall	$2, %eax
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %edx
	movq	-24(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	map_reserve
	nop
	leave
	ret
	.globl	map_reserve
map_reserve:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$64, %rsp
	movq	%rdi, -56(%rbp)
	movl	%esi, -60(%rbp)
	movl	-60(%rbp), %eax
	movslq	%eax, %rdx
	movq	-56(%rbp), %rax
	movq	64(%rax), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	v_realloc
	movq	%rax, -16(%rbp)
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rdx
	movq	%rdx, 64(%rax)
	movl	-60(%rbp), %eax
	movslq	%eax, %rdx
	movq	-56(%rbp), %rax
	movq	64(%rax), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	vmemset
	movl	$0, -4(%rbp)
	jmp	.L1055
.L1058:
	movq	-56(%rbp), %rax
	leaq	16(%rax), %rdx
	movl	-4(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	DenseArray_has_index
	testb	%al, %al
	je	.L1059
	movq	-56(%rbp), %rax
	leaq	16(%rax), %rdx
	movl	-4(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	DenseArray_key
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	map_key_to_index
	movq	%rax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-36(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %ecx
	movq	-56(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	map_meta_less
	movq	%rax, -48(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	-4(%rbp), %ecx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	map_meta_greater
	jmp	.L1057
.L1059:
	nop
.L1057:
	addl	$1, -4(%rbp)
.L1055:
	movq	-56(%rbp), %rax
	movl	28(%rax), %eax
	cmpl	%eax, -4(%rbp)
	jl	.L1058
	nop
	nop
	leave
	ret
	.globl	map_cached_rehash
	.hidden	map_cached_rehash
map_cached_rehash:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$80, %rsp
	movq	%rdi, -72(%rbp)
	movl	%esi, -76(%rbp)
	movq	-72(%rbp), %rax
	movq	64(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-72(%rbp), %rax
	movl	8(%rax), %edx
	movq	-72(%rbp), %rax
	movl	72(%rax), %eax
	addl	%edx, %eax
	addl	$2, %eax
	sall	$2, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	cltq
	movq	%rax, %rdi
	call	vcalloc
	movq	-72(%rbp), %rdx
	movq	%rax, 64(%rdx)
	movq	-72(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -4(%rbp)
	jmp	.L1061
.L1064:
	movl	-4(%rbp), %eax
	leaq	0(,%rax,4), %rdx
	movq	-16(%rbp), %rax
	addq	%rdx, %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	je	.L1065
	movl	-4(%rbp), %eax
	leaq	0(,%rax,4), %rdx
	movq	-16(%rbp), %rax
	addq	%rdx, %rax
	movl	(%rax), %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	shrl	$24, %eax
	subl	$1, %eax
	addl	%eax, %eax
	movl	%eax, -32(%rbp)
	movl	-4(%rbp), %eax
	subl	-32(%rbp), %eax
	movl	%eax, %edx
	movq	-72(%rbp), %rax
	movl	8(%rax), %eax
	shrl	%eax
	andl	%edx, %eax
	movl	%eax, -36(%rbp)
	movq	-72(%rbp), %rax
	movzbl	13(%rax), %eax
	movzbl	%al, %eax
	movl	-28(%rbp), %edx
	movl	%eax, %ecx
	sall	%cl, %edx
	movl	%edx, %eax
	orl	-36(%rbp), %eax
	movl	%eax, %edx
	movq	-72(%rbp), %rax
	movl	8(%rax), %eax
	andl	%edx, %eax
	movl	%eax, -40(%rbp)
	movl	$16777215, %eax
	andl	-28(%rbp), %eax
	movl	$16777216, %edx
	orl	%edx, %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edx
	movl	-40(%rbp), %ecx
	movq	-72(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	map_meta_less
	movq	%rax, -56(%rbp)
	movl	-56(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-52(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, %eax
	leaq	0(,%rax,4), %rdx
	movq	-16(%rbp), %rax
	addq	%rdx, %rax
	movl	(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %ecx
	movl	-44(%rbp), %edx
	movl	-40(%rbp), %esi
	movq	-72(%rbp), %rax
	movq	%rax, %rdi
	call	map_meta_greater
	jmp	.L1063
.L1065:
	nop
.L1063:
	addl	$2, -4(%rbp)
.L1061:
	movl	-76(%rbp), %edx
	movl	-24(%rbp), %eax
	addl	%edx, %eax
	cmpl	-4(%rbp), %eax
	jnb	.L1064
	movq	-16(%rbp), %rax
	movq	%rax, %rdi
	call	_v_free
	nop
	leave
	ret
	.globl	map_get_and_set
	.hidden	map_get_and_set
map_get_and_set:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$80, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -72(%rbp)
.L1072:
	movq	-64(%rbp), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	map_key_to_index
	movq	%rax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-36(%rbp), %eax
	movl	%eax, -8(%rbp)
.L1071:
	movq	-56(%rbp), %rax
	movq	64(%rax), %rax
	movl	-4(%rbp), %edx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	cmpl	%eax, -8(%rbp)
	jne	.L1067
	movq	-56(%rbp), %rax
	movq	64(%rax), %rax
	movl	-4(%rbp), %edx
	addl	$1, %edx
	movl	%edx, %edx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	-56(%rbp), %rax
	leaq	16(%rax), %rdx
	movl	-12(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	DenseArray_key
	movq	%rax, -24(%rbp)
	movq	-56(%rbp), %rax
	movq	88(%rax), %rcx
	movq	-24(%rbp), %rdx
	movq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	*%rcx
	testb	%al, %al
	je	.L1067
	movq	-56(%rbp), %rax
	leaq	16(%rax), %rdx
	movl	-12(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	DenseArray_value
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	jmp	.L1073
.L1067:
	addl	$2, -4(%rbp)
	movl	$16777216, %eax
	addl	%eax, -8(%rbp)
	movq	-56(%rbp), %rax
	movq	64(%rax), %rax
	movl	-4(%rbp), %edx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	cmpl	-8(%rbp), %eax
	jb	.L1075
	jmp	.L1071
.L1075:
	nop
	movq	-72(%rbp), %rdx
	movq	-64(%rbp), %rcx
	movq	-56(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	map_set
	jmp	.L1072
.L1073:
	leave
	ret
	.globl	map_get
	.hidden	map_get
map_get:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$80, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -72(%rbp)
	movq	-64(%rbp), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	map_key_to_index
	movq	%rax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-36(%rbp), %eax
	movl	%eax, -8(%rbp)
.L1081:
	movq	-56(%rbp), %rax
	movq	64(%rax), %rax
	movl	-4(%rbp), %edx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	cmpl	%eax, -8(%rbp)
	jne	.L1077
	movq	-56(%rbp), %rax
	movq	64(%rax), %rax
	movl	-4(%rbp), %edx
	addl	$1, %edx
	movl	%edx, %edx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	-56(%rbp), %rax
	leaq	16(%rax), %rdx
	movl	-12(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	DenseArray_key
	movq	%rax, -24(%rbp)
	movq	-56(%rbp), %rax
	movq	88(%rax), %rcx
	movq	-24(%rbp), %rdx
	movq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	*%rcx
	testb	%al, %al
	je	.L1077
	movq	-56(%rbp), %rax
	leaq	16(%rax), %rdx
	movl	-12(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	DenseArray_value
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	jmp	.L1082
.L1077:
	addl	$2, -4(%rbp)
	movl	$16777216, %eax
	addl	%eax, -8(%rbp)
	movq	-56(%rbp), %rax
	movq	64(%rax), %rax
	movl	-4(%rbp), %edx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	cmpl	-8(%rbp), %eax
	jb	.L1084
	jmp	.L1081
.L1084:
	nop
	movq	-72(%rbp), %rax
.L1082:
	leave
	ret
	.globl	map_get_check
	.hidden	map_get_check
map_get_check:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$64, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	-64(%rbp), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	map_key_to_index
	movq	%rax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-36(%rbp), %eax
	movl	%eax, -8(%rbp)
.L1090:
	movq	-56(%rbp), %rax
	movq	64(%rax), %rax
	movl	-4(%rbp), %edx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	cmpl	%eax, -8(%rbp)
	jne	.L1086
	movq	-56(%rbp), %rax
	movq	64(%rax), %rax
	movl	-4(%rbp), %edx
	addl	$1, %edx
	movl	%edx, %edx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	-56(%rbp), %rax
	leaq	16(%rax), %rdx
	movl	-12(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	DenseArray_key
	movq	%rax, -24(%rbp)
	movq	-56(%rbp), %rax
	movq	88(%rax), %rcx
	movq	-24(%rbp), %rdx
	movq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	*%rcx
	testb	%al, %al
	je	.L1086
	movq	-56(%rbp), %rax
	leaq	16(%rax), %rdx
	movl	-12(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	DenseArray_value
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	jmp	.L1091
.L1086:
	addl	$2, -4(%rbp)
	movl	$16777216, %eax
	addl	%eax, -8(%rbp)
	movq	-56(%rbp), %rax
	movq	64(%rax), %rax
	movl	-4(%rbp), %edx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	cmpl	-8(%rbp), %eax
	jb	.L1093
	jmp	.L1090
.L1093:
	nop
	movl	$0, %eax
.L1091:
	leave
	ret
	.globl	map_exists
	.hidden	map_exists
map_exists:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	map_key_to_index
	movq	%rax, -32(%rbp)
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.L1099:
	movq	-40(%rbp), %rax
	movq	64(%rax), %rax
	movl	-4(%rbp), %edx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	cmpl	%eax, -8(%rbp)
	jne	.L1095
	movq	-40(%rbp), %rax
	movq	64(%rax), %rax
	movl	-4(%rbp), %edx
	addl	$1, %edx
	movl	%edx, %edx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	-40(%rbp), %rax
	leaq	16(%rax), %rdx
	movl	-12(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	DenseArray_key
	movq	%rax, -24(%rbp)
	movq	-40(%rbp), %rax
	movq	88(%rax), %rcx
	movq	-24(%rbp), %rdx
	movq	-48(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	*%rcx
	testb	%al, %al
	je	.L1095
	movl	$1, %eax
	jmp	.L1100
.L1095:
	addl	$2, -4(%rbp)
	movl	$16777216, %eax
	addl	%eax, -8(%rbp)
	movq	-40(%rbp), %rax
	movq	64(%rax), %rax
	movl	-4(%rbp), %edx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	cmpl	-8(%rbp), %eax
	jb	.L1102
	jmp	.L1099
.L1102:
	nop
	movl	$0, %eax
.L1100:
	leave
	ret
	.globl	DenseArray_delete
	.hidden	DenseArray_delete
DenseArray_delete:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rax
	movl	16(%rax), %eax
	testl	%eax, %eax
	jne	.L1104
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	cltq
	movq	%rax, %rdi
	call	vcalloc
	movq	-8(%rbp), %rdx
	movq	%rax, 24(%rdx)
.L1104:
	movq	-8(%rbp), %rax
	movl	16(%rax), %eax
	leal	1(%rax), %edx
	movq	-8(%rbp), %rax
	movl	%edx, 16(%rax)
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdx
	movl	-12(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movb	$1, (%rax)
	nop
	leave
	ret
	.globl	map_delete
map_delete:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$64, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	-64(%rbp), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	map_key_to_index
	movq	%rax, -32(%rbp)
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %edx
	movl	-4(%rbp), %ecx
	movq	-56(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	map_meta_less
	movq	%rax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-36(%rbp), %eax
	movl	%eax, -8(%rbp)
.L1115:
	movq	-56(%rbp), %rax
	movq	64(%rax), %rax
	movl	-4(%rbp), %edx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	cmpl	%eax, -8(%rbp)
	jne	.L1118
	movq	-56(%rbp), %rax
	movq	64(%rax), %rax
	movl	-4(%rbp), %edx
	addl	$1, %edx
	movl	%edx, %edx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	-56(%rbp), %rax
	leaq	16(%rax), %rdx
	movl	-12(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	DenseArray_key
	movq	%rax, -24(%rbp)
	movq	-56(%rbp), %rax
	movq	88(%rax), %rcx
	movq	-24(%rbp), %rdx
	movq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	*%rcx
	testb	%al, %al
	je	.L1108
.L1111:
	movq	-56(%rbp), %rax
	movq	64(%rax), %rax
	movl	-4(%rbp), %edx
	addl	$2, %edx
	movl	%edx, %edx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	shrl	$24, %eax
	cmpl	$1, %eax
	jbe	.L1119
	movq	-56(%rbp), %rax
	movq	64(%rax), %rax
	movl	-4(%rbp), %edx
	addl	$2, %edx
	movl	%edx, %edx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %edx
	movl	$16777216, %esi
	movq	-56(%rbp), %rax
	movq	64(%rax), %rax
	movl	-4(%rbp), %ecx
	salq	$2, %rcx
	addq	%rcx, %rax
	subl	%esi, %edx
	movl	%edx, (%rax)
	movq	-56(%rbp), %rax
	movq	64(%rax), %rax
	movl	-4(%rbp), %edx
	addl	$3, %edx
	movl	%edx, %edx
	salq	$2, %rdx
	leaq	(%rax,%rdx), %rcx
	movq	-56(%rbp), %rax
	movq	64(%rax), %rax
	movl	-4(%rbp), %edx
	addl	$1, %edx
	movl	%edx, %edx
	salq	$2, %rdx
	addq	%rax, %rdx
	movl	(%rcx), %eax
	movl	%eax, (%rdx)
	addl	$2, -4(%rbp)
	jmp	.L1111
.L1119:
	nop
	movq	-56(%rbp), %rax
	movl	112(%rax), %eax
	leal	-1(%rax), %edx
	movq	-56(%rbp), %rax
	movl	%edx, 112(%rax)
	movq	-56(%rbp), %rax
	leaq	16(%rax), %rdx
	movl	-12(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	DenseArray_delete
	movq	-56(%rbp), %rax
	movq	64(%rax), %rax
	movl	-4(%rbp), %edx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movq	104(%rax), %rdx
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movslq	%eax, %rdx
	movq	-24(%rbp), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	vmemset
	movq	-56(%rbp), %rax
	movl	28(%rax), %eax
	cmpl	$32, %eax
	jle	.L1120
	movq	-56(%rbp), %rax
	movl	28(%rax), %eax
	sarl	%eax
	movl	%eax, %edx
	movq	-56(%rbp), %rax
	movl	32(%rax), %eax
	movl	%edx, %esi
	movl	%eax, %edi
	call	_us32_ge
	testb	%al, %al
	je	.L1121
	movq	-56(%rbp), %rax
	addq	$16, %rax
	movq	%rax, %rdi
	call	DenseArray_zeros_to_end
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	map_rehash
	jmp	.L1121
.L1108:
	addl	$2, -4(%rbp)
	movl	$16777216, %eax
	addl	%eax, -8(%rbp)
	jmp	.L1115
.L1118:
	nop
	jmp	.L1105
.L1120:
	nop
	jmp	.L1105
.L1121:
	nop
.L1105:
	leave
	ret
	.globl	map_keys
map_keys:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$80, %rsp
	movq	%rdi, -72(%rbp)
	movq	%rsi, -80(%rbp)
	movq	-80(%rbp), %rax
	movl	(%rax), %edx
	movq	-80(%rbp), %rax
	movl	112(%rax), %esi
	leaq	-64(%rbp), %rax
	movl	%edx, %ecx
	movl	$0, %edx
	movq	%rax, %rdi
	call	__new_array
	movq	-56(%rbp), %rax
	movq	%rax, -8(%rbp)
	movq	-80(%rbp), %rax
	movl	32(%rax), %eax
	testl	%eax, %eax
	jne	.L1123
	movl	$0, -12(%rbp)
	jmp	.L1124
.L1125:
	movq	-80(%rbp), %rax
	leaq	16(%rax), %rdx
	movl	-12(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	DenseArray_key
	movq	%rax, -32(%rbp)
	movq	-80(%rbp), %rax
	movq	96(%rax), %rcx
	movq	-32(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	*%rcx
	movq	-80(%rbp), %rax
	movl	(%rax), %eax
	cltq
	addq	%rax, -8(%rbp)
	addl	$1, -12(%rbp)
.L1124:
	movq	-80(%rbp), %rax
	movl	28(%rax), %eax
	cmpl	%eax, -12(%rbp)
	jl	.L1125
	movq	-72(%rbp), %rcx
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	jmp	.L1131
.L1123:
	movl	$0, -16(%rbp)
	jmp	.L1127
.L1130:
	movq	-80(%rbp), %rax
	leaq	16(%rax), %rdx
	movl	-16(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	DenseArray_has_index
	testb	%al, %al
	je	.L1132
	movq	-80(%rbp), %rax
	leaq	16(%rax), %rdx
	movl	-16(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	DenseArray_key
	movq	%rax, -24(%rbp)
	movq	-80(%rbp), %rax
	movq	96(%rax), %rcx
	movq	-24(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	*%rcx
	movq	-80(%rbp), %rax
	movl	(%rax), %eax
	cltq
	addq	%rax, -8(%rbp)
	jmp	.L1129
.L1132:
	nop
.L1129:
	addl	$1, -16(%rbp)
.L1127:
	movq	-80(%rbp), %rax
	movl	28(%rax), %eax
	cmpl	%eax, -16(%rbp)
	jl	.L1130
	movq	-72(%rbp), %rcx
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
.L1131:
	movq	-72(%rbp), %rax
	leave
	ret
	.globl	map_values
map_values:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$80, %rsp
	movq	%rdi, -72(%rbp)
	movq	%rsi, -80(%rbp)
	movq	-80(%rbp), %rax
	movl	4(%rax), %edx
	movq	-80(%rbp), %rax
	movl	112(%rax), %esi
	leaq	-64(%rbp), %rax
	movl	%edx, %ecx
	movl	$0, %edx
	movq	%rax, %rdi
	call	__new_array
	movq	-56(%rbp), %rax
	movq	%rax, -8(%rbp)
	movq	-80(%rbp), %rax
	movl	32(%rax), %eax
	testl	%eax, %eax
	jne	.L1134
	movq	-80(%rbp), %rax
	movl	4(%rax), %edx
	movq	-80(%rbp), %rax
	movl	28(%rax), %eax
	imull	%edx, %eax
	movslq	%eax, %rdx
	movq	-80(%rbp), %rax
	movq	56(%rax), %rcx
	movq	-8(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	vmemcpy
	movq	-72(%rbp), %rcx
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	jmp	.L1140
.L1134:
	movl	$0, -12(%rbp)
	jmp	.L1136
.L1139:
	movq	-80(%rbp), %rax
	leaq	16(%rax), %rdx
	movl	-12(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	DenseArray_has_index
	testb	%al, %al
	je	.L1141
	movq	-80(%rbp), %rax
	leaq	16(%rax), %rdx
	movl	-12(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	DenseArray_value
	movq	%rax, -24(%rbp)
	movq	-80(%rbp), %rax
	movl	4(%rax), %eax
	movslq	%eax, %rdx
	movq	-24(%rbp), %rcx
	movq	-8(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	vmemcpy
	movq	-80(%rbp), %rax
	movl	4(%rax), %eax
	cltq
	addq	%rax, -8(%rbp)
	jmp	.L1138
.L1141:
	nop
.L1138:
	addl	$1, -12(%rbp)
.L1136:
	movq	-80(%rbp), %rax
	movl	28(%rax), %eax
	cmpl	%eax, -12(%rbp)
	jl	.L1139
	movq	-72(%rbp), %rcx
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
.L1140:
	movq	-72(%rbp), %rax
	leave
	ret
	.globl	DenseArray_clone
	.hidden	DenseArray_clone
DenseArray_clone:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$120, %rsp
	movq	%rdi, -120(%rbp)
	movq	%rsi, -128(%rbp)
	movq	-128(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	-128(%rbp), %rax
	movl	4(%rax), %eax
	movl	%eax, -60(%rbp)
	movq	-128(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	-128(%rbp), %rax
	movl	16(%rax), %eax
	movl	%eax, -48(%rbp)
	movq	$0, -40(%rbp)
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movq	-128(%rbp), %rax
	movl	16(%rax), %eax
	testl	%eax, %eax
	je	.L1143
	movq	-128(%rbp), %rax
	movl	8(%rax), %edx
	movq	-128(%rbp), %rax
	movq	24(%rax), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	memdup
	movq	%rax, -40(%rbp)
.L1143:
	movq	-128(%rbp), %rax
	movl	8(%rax), %edx
	movq	-128(%rbp), %rax
	movl	(%rax), %eax
	imull	%eax, %edx
	movq	-128(%rbp), %rax
	movq	32(%rax), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	memdup
	movq	%rax, -32(%rbp)
	movq	-128(%rbp), %rax
	movl	8(%rax), %edx
	movq	-128(%rbp), %rax
	movl	4(%rax), %eax
	imull	%eax, %edx
	movq	-128(%rbp), %rax
	movq	40(%rax), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	memdup
	movq	%rax, -24(%rbp)
	movq	-120(%rbp), %rax
	movq	-64(%rbp), %rcx
	movq	-56(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-48(%rbp), %rcx
	movq	-40(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	movq	-120(%rbp), %rax
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	map_clone
map_clone:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r12
	pushq	%rbx
	subq	$272, %rsp
	movq	%rdi, -280(%rbp)
	movq	%rsi, -288(%rbp)
	movq	-288(%rbp), %rax
	movl	8(%rax), %edx
	movq	-288(%rbp), %rax
	movl	72(%rax), %eax
	addl	%edx, %eax
	addl	$2, %eax
	sall	$2, %eax
	movl	%eax, -24(%rbp)
	movq	-288(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -144(%rbp)
	movq	-288(%rbp), %rax
	movl	4(%rax), %eax
	movl	%eax, -140(%rbp)
	movq	-288(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -136(%rbp)
	movq	-288(%rbp), %rax
	movzbl	12(%rax), %eax
	movb	%al, -132(%rbp)
	movq	-288(%rbp), %rax
	movzbl	13(%rax), %eax
	movb	%al, -131(%rbp)
	movq	-288(%rbp), %rax
	leaq	16(%rax), %rdx
	leaq	-128(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	DenseArray_clone
	movl	-24(%rbp), %eax
	cltq
	movq	%rax, %rdi
	call	malloc_noscan
	movq	%rax, -80(%rbp)
	movq	-288(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -72(%rbp)
	movq	-288(%rbp), %rax
	movzbl	76(%rax), %eax
	movb	%al, -68(%rbp)
	movq	-288(%rbp), %rax
	movq	80(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-288(%rbp), %rax
	movq	88(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-288(%rbp), %rax
	movq	96(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-288(%rbp), %rax
	movq	104(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-288(%rbp), %rax
	movl	112(%rax), %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	movslq	%eax, %rdx
	movq	-288(%rbp), %rax
	movq	64(%rax), %rcx
	movq	-80(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	vmemcpy
	movq	-288(%rbp), %rax
	movzbl	76(%rax), %eax
	testb	%al, %al
	jne	.L1146
	movq	-280(%rbp), %rax
	movq	-144(%rbp), %rcx
	movq	-136(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-128(%rbp), %rcx
	movq	-120(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-112(%rbp), %rcx
	movq	-104(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	movq	-96(%rbp), %rcx
	movq	-88(%rbp), %rbx
	movq	%rcx, 48(%rax)
	movq	%rbx, 56(%rax)
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rbx
	movq	%rcx, 64(%rax)
	movq	%rbx, 72(%rax)
	movq	-64(%rbp), %rcx
	movq	-56(%rbp), %rbx
	movq	%rcx, 80(%rax)
	movq	%rbx, 88(%rax)
	movq	-48(%rbp), %rcx
	movq	-40(%rbp), %rbx
	movq	%rcx, 96(%rax)
	movq	%rbx, 104(%rax)
	movq	-32(%rbp), %rdx
	movq	%rdx, 112(%rax)
	jmp	.L1152
.L1146:
	movl	$0, -20(%rbp)
	jmp	.L1148
.L1151:
	movq	-288(%rbp), %rax
	leaq	16(%rax), %rdx
	movl	-20(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	DenseArray_has_index
	testb	%al, %al
	je	.L1153
	movq	-288(%rbp), %rax
	movq	96(%rax), %rbx
	movq	-288(%rbp), %rax
	leaq	16(%rax), %rdx
	movl	-20(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	DenseArray_key
	movq	%rax, %r12
	movl	-20(%rbp), %eax
	leaq	-144(%rbp), %rdx
	addq	$16, %rdx
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	DenseArray_key
	movq	%r12, %rsi
	movq	%rax, %rdi
	call	*%rbx
	jmp	.L1150
.L1153:
	nop
.L1150:
	addl	$1, -20(%rbp)
.L1148:
	movq	-288(%rbp), %rax
	movl	28(%rax), %eax
	cmpl	%eax, -20(%rbp)
	jl	.L1151
	movq	-280(%rbp), %rax
	movq	-144(%rbp), %rcx
	movq	-136(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-128(%rbp), %rcx
	movq	-120(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-112(%rbp), %rcx
	movq	-104(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	movq	-96(%rbp), %rcx
	movq	-88(%rbp), %rbx
	movq	%rcx, 48(%rax)
	movq	%rbx, 56(%rax)
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rbx
	movq	%rcx, 64(%rax)
	movq	%rbx, 72(%rax)
	movq	-64(%rbp), %rcx
	movq	-56(%rbp), %rbx
	movq	%rcx, 80(%rax)
	movq	%rbx, 88(%rax)
	movq	-48(%rbp), %rcx
	movq	-40(%rbp), %rbx
	movq	%rcx, 96(%rax)
	movq	%rbx, 104(%rax)
	movq	-32(%rbp), %rdx
	movq	%rdx, 112(%rax)
.L1152:
	movq	-280(%rbp), %rax
	addq	$272, %rsp
	popq	%rbx
	popq	%r12
	popq	%rbp
	ret
	.globl	map_free
map_free:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	64(%rax), %rax
	movq	%rax, %rdi
	call	_v_free
	movq	-40(%rbp), %rax
	movq	$0, 64(%rax)
	movq	-40(%rbp), %rax
	movl	32(%rax), %eax
	testl	%eax, %eax
	jne	.L1155
	movl	$0, -4(%rbp)
	jmp	.L1156
.L1157:
	movq	-40(%rbp), %rax
	leaq	16(%rax), %rdx
	movl	-4(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	DenseArray_key
	movq	%rax, -24(%rbp)
	movq	-40(%rbp), %rax
	movq	104(%rax), %rdx
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movslq	%eax, %rdx
	movq	-24(%rbp), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	vmemset
	addl	$1, -4(%rbp)
.L1156:
	movq	-40(%rbp), %rax
	movl	28(%rax), %eax
	cmpl	%eax, -4(%rbp)
	jl	.L1157
	jmp	.L1158
.L1155:
	movl	$0, -8(%rbp)
	jmp	.L1159
.L1162:
	movq	-40(%rbp), %rax
	leaq	16(%rax), %rdx
	movl	-8(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	DenseArray_has_index
	testb	%al, %al
	je	.L1166
	movq	-40(%rbp), %rax
	leaq	16(%rax), %rdx
	movl	-8(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	DenseArray_key
	movq	%rax, -16(%rbp)
	movq	-40(%rbp), %rax
	movq	104(%rax), %rdx
	movq	-16(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movslq	%eax, %rdx
	movq	-16(%rbp), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	vmemset
	jmp	.L1161
.L1166:
	nop
.L1161:
	addl	$1, -8(%rbp)
.L1159:
	movq	-40(%rbp), %rax
	movl	28(%rax), %eax
	cmpl	%eax, -8(%rbp)
	jl	.L1162
.L1158:
	movq	-40(%rbp), %rax
	movq	40(%rax), %rax
	testq	%rax, %rax
	je	.L1163
	movq	-40(%rbp), %rax
	movq	40(%rax), %rax
	movq	%rax, %rdi
	call	_v_free
	movq	-40(%rbp), %rax
	movq	$0, 40(%rax)
.L1163:
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	testq	%rax, %rax
	je	.L1164
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, %rdi
	call	_v_free
	movq	-40(%rbp), %rax
	movq	$0, 48(%rax)
.L1164:
	movq	-40(%rbp), %rax
	movq	56(%rax), %rax
	testq	%rax, %rax
	je	.L1165
	movq	-40(%rbp), %rax
	movq	56(%rax), %rax
	movq	%rax, %rdi
	call	_v_free
	movq	-40(%rbp), %rax
	movq	$0, 56(%rax)
.L1165:
	movq	-40(%rbp), %rax
	movq	$0, 80(%rax)
	movq	-40(%rbp), %rax
	movq	$0, 88(%rax)
	movq	-40(%rbp), %rax
	movq	$0, 96(%rax)
	movq	-40(%rbp), %rax
	movq	$0, 104(%rax)
	nop
	leave
	ret
	.globl	IError_free
IError_free:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	_v_free
	nop
	leave
	ret
	.section	.rodata, "a"
.LC101:
	.string	"none"
.LC102:
	.string	": "
	.text
	.globl	IError_str
IError_str:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$136, %rsp
	movl	24(%rbp), %ecx
	movl	$0, %esi
	cmpl	%esi, %ecx
	jne	.L1169
	leaq	.LC101(%rip), %rax
	movq	%rdx, %rsi
	movabsq	$-4294967296, %rcx
	andq	%rsi, %rcx
	orq	$4, %rcx
	movq	%rcx, %rdx
	movq	%rdx, %rcx
	movl	%ecx, %esi
	movabsq	$4294967296, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	jmp	.L1175
.L1169:
	movl	24(%rbp), %eax
	movl	$2, %edx
	cmpl	%edx, %eax
	jne	.L1171
	call	Error_msg
	jmp	.L1175
.L1171:
	movl	24(%rbp), %eax
	movl	$3, %edx
	cmpl	%edx, %eax
	jne	.L1172
	movq	16(%rbp), %rcx
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	call	MessageError_msg
	addq	$32, %rsp
	jmp	.L1175
.L1172:
	leaq	-144(%rbp), %rdx
	movl	$0, %eax
	movl	$15, %ecx
	movq	%rdx, %rdi
	rep stosq
	leaq	.LC30(%rip), %rax
	movq	%rax, -144(%rbp)
	movl	$1, -132(%rbp)
	movl	$65040, -128(%rbp)
	movl	24(%rbp), %eax
	movl	%eax, %edi
	call	v_typeof_interface_IError
	movq	%rax, %rdi
	call	charptr_vstring_literal
	movq	%rax, -120(%rbp)
	movq	%rdx, -112(%rbp)
	leaq	.LC102(%rip), %rax
	movq	%rax, -104(%rbp)
	movl	$2, -96(%rbp)
	movl	$1, -92(%rbp)
	movl	$65040, -88(%rbp)
	movl	24(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	leaq	IError_name_table(%rip), %rax
	movq	(%rdx,%rax), %rdx
	movq	16(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	%rax, -80(%rbp)
	movq	%rdx, -72(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -64(%rbp)
	movl	$1, -52(%rbp)
	leaq	-144(%rbp), %rax
	movq	%rax, %rsi
	movl	$3, %edi
	call	str_intp
.L1175:
	nop
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	Error_msg
Error_msg:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	leaq	.LC30(%rip), %rax
	movq	%rdx, %rsi
	movabsq	$-4294967296, %rcx
	andq	%rsi, %rcx
	movq	%rcx, %rdx
	movq	%rdx, %rcx
	movl	%ecx, %esi
	movabsq	$4294967296, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	Error_code
Error_code:
	pushq	%rbp
	movq	%rsp, %rbp
	movl	$0, %eax
	popq	%rbp
	ret
	.section	.rodata, "a"
.LC103:
	.string	"; code: "
	.text
	.globl	MessageError_msg
MessageError_msg:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$136, %rsp
	movl	32(%rbp), %eax
	testl	%eax, %eax
	jle	.L1181
	leaq	-144(%rbp), %rdx
	movl	$0, %eax
	movl	$15, %ecx
	movq	%rdx, %rdi
	rep stosq
	leaq	.LC30(%rip), %rax
	movq	%rax, -144(%rbp)
	movl	$1, -132(%rbp)
	movl	$65040, -128(%rbp)
	movq	16(%rbp), %rax
	movq	24(%rbp), %rdx
	movq	%rax, -120(%rbp)
	movq	%rdx, -112(%rbp)
	leaq	.LC103(%rip), %rax
	movq	%rax, -104(%rbp)
	movl	$8, -96(%rbp)
	movl	$1, -92(%rbp)
	movl	$65031, -88(%rbp)
	movl	32(%rbp), %eax
	movl	%eax, -80(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -64(%rbp)
	movl	$1, -52(%rbp)
	leaq	-144(%rbp), %rax
	movq	%rax, %rsi
	movl	$3, %edi
	call	str_intp
	jmp	.L1182
.L1181:
	movq	16(%rbp), %rax
	movq	24(%rbp), %rdx
.L1182:
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	MessageError_code
MessageError_code:
	pushq	%rbp
	movq	%rsp, %rbp
	movl	32(%rbp), %eax
	popq	%rbp
	ret
	.globl	MessageError_free
MessageError_free:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	string_free
	nop
	leave
	ret
	.globl	None___str
	.hidden	None___str
None___str:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	leaq	.LC101(%rip), %rax
	movq	%rdx, %rsi
	movabsq	$-4294967296, %rcx
	andq	%rsi, %rcx
	orq	$4, %rcx
	movq	%rcx, %rdx
	movq	%rdx, %rcx
	movl	%ecx, %esi
	movabsq	$4294967296, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	_v_error
_v_error:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$64, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rdx, %rcx
	movq	%rsi, %rax
	movq	%rdi, %rdx
	movq	%rcx, %rdx
	movq	%rax, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, -32(%rbp)
	movq	%rdx, -24(%rbp)
	movl	$0, -16(%rbp)
	leaq	-32(%rbp), %rax
	movl	$24, %esi
	movq	%rax, %rdi
	call	memdup
	movq	%rax, %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	I_MessageError_to_Interface_IError
	movq	-40(%rbp), %rax
	leave
	ret
	.globl	error_with_code
error_with_code:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$64, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, %rax
	movq	%rdx, %rsi
	movq	%rsi, %rdx
	movq	%rax, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -44(%rbp)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, -32(%rbp)
	movq	%rdx, -24(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -16(%rbp)
	leaq	-32(%rbp), %rax
	movl	$24, %esi
	movq	%rax, %rdi
	call	memdup
	movq	%rax, %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	I_MessageError_to_Interface_IError
	movq	-40(%rbp), %rax
	leave
	ret
	.globl	_option_ok
	.hidden	_option_ok
_option_ok:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$80, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movl	%edx, -68(%rbp)
	movq	-64(%rbp), %rax
	movb	$0, (%rax)
	movq	-64(%rbp), %rcx
	movq	_const_none__(%rip), %rax
	movq	8+_const_none__(%rip), %rdx
	movq	%rax, 8(%rcx)
	movq	%rdx, 16(%rcx)
	movq	16+_const_none__(%rip), %rax
	movq	24+_const_none__(%rip), %rdx
	movq	%rax, 24(%rcx)
	movq	%rdx, 32(%rcx)
	movl	-68(%rbp), %eax
	movslq	%eax, %rdx
	movq	-64(%rbp), %rax
	addq	$8, %rax
	leaq	32(%rax), %rcx
	movq	-56(%rbp), %rax
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	vmemcpy
	nop
	leave
	ret
	.globl	_result_ok
	.hidden	_result_ok
_result_ok:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$80, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movl	%edx, -68(%rbp)
	movq	-64(%rbp), %rax
	movb	$0, (%rax)
	movq	-64(%rbp), %rcx
	movq	_const_none__(%rip), %rax
	movq	8+_const_none__(%rip), %rdx
	movq	%rax, 8(%rcx)
	movq	%rdx, 16(%rcx)
	movq	16+_const_none__(%rip), %rax
	movq	24+_const_none__(%rip), %rdx
	movq	%rax, 24(%rcx)
	movq	%rdx, 32(%rcx)
	movl	-68(%rbp), %eax
	movslq	%eax, %rdx
	movq	-64(%rbp), %rax
	addq	$8, %rax
	leaq	32(%rax), %rcx
	movq	-56(%rbp), %rax
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	vmemcpy
	nop
	leave
	ret
	.globl	none_str
none_str:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	leaq	.LC101(%rip), %rax
	movq	%rdx, %rsi
	movabsq	$-4294967296, %rcx
	andq	%rsi, %rcx
	orq	$4, %rcx
	movq	%rcx, %rdx
	movq	%rdx, %rcx
	movl	%ecx, %esi
	movabsq	$4294967296, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	rune_str
rune_str:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %eax
	movl	%eax, %edi
	call	utf32_to_str
	leave
	ret
	.section	.rodata, "a"
.LC104:
	.string	"TODO"
	.text
	.globl	mapnode_free
	.hidden	mapnode_free
mapnode_free:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$24, %rsp
	movq	%rdi, -24(%rbp)
	leaq	.LC104(%rip), %rax
	movq	%rdx, %rsi
	movabsq	$-4294967296, %rcx
	andq	%rsi, %rcx
	orq	$4, %rcx
	movq	%rcx, %rdx
	movq	%rdx, %rcx
	movl	%ecx, %esi
	movabsq	$4294967296, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	println
	nop
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	SortedMap_free
SortedMap_free:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L1202
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	call	mapnode_free
	jmp	.L1199
.L1202:
	nop
.L1199:
	leave
	ret
	.globl	tos_clone
tos_clone:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$24, %rsp
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	tos2
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	string_clone
	movq	-8(%rbp), %rbx
	leave
	ret
	.section	.rodata, "a"
.LC105:
	.string	"tos(): nil string"
	.text
	.globl	tos
tos:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$24, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.L1206
	leaq	.LC105(%rip), %rax
	movq	%rdx, %rsi
	movabsq	$-4294967296, %rcx
	andq	%rsi, %rcx
	orq	$17, %rcx
	movq	%rcx, %rdx
	movq	%rdx, %rcx
	movl	%ecx, %esi
	movabsq	$4294967296, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	_v_panic
.L1206:
	movl	$0, %eax
	movl	$0, %edx
	movq	-24(%rbp), %rax
	movl	-28(%rbp), %ecx
	movq	%rdx, %rdi
	movabsq	$-4294967296, %rsi
	andq	%rdi, %rsi
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	movq	-8(%rbp), %rbx
	leave
	ret
	.section	.rodata, "a"
.LC106:
	.string	"tos2: nil string"
	.text
	.globl	tos2
tos2:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$24, %rsp
	movq	%rdi, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.L1209
	leaq	.LC106(%rip), %rax
	movq	%rdx, %rsi
	movabsq	$-4294967296, %rcx
	andq	%rsi, %rcx
	orq	$16, %rcx
	movq	%rcx, %rdx
	movq	%rdx, %rcx
	movl	%ecx, %esi
	movabsq	$4294967296, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	_v_panic
.L1209:
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	vstrlen
	movl	%eax, %ecx
	movl	$0, %eax
	movl	$0, %edx
	movq	-24(%rbp), %rax
	movl	%ecx, %esi
	movq	%rdx, %rdi
	movabsq	$-4294967296, %rcx
	andq	%rdi, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	movq	-8(%rbp), %rbx
	leave
	ret
	.section	.rodata, "a"
.LC107:
	.string	"tos3: nil string"
	.text
	.globl	tos3
tos3:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$24, %rsp
	movq	%rdi, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.L1212
	leaq	.LC107(%rip), %rax
	movq	%rdx, %rsi
	movabsq	$-4294967296, %rcx
	andq	%rsi, %rcx
	orq	$16, %rcx
	movq	%rcx, %rdx
	movq	%rdx, %rcx
	movl	%ecx, %esi
	movabsq	$4294967296, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	_v_panic
.L1212:
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	vstrlen_char
	movl	%eax, %ecx
	movl	$0, %eax
	movl	$0, %edx
	movq	-24(%rbp), %rax
	movl	%ecx, %esi
	movq	%rdx, %rdi
	movabsq	$-4294967296, %rcx
	andq	%rdi, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	tos5
tos5:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$24, %rsp
	movq	%rdi, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.L1215
	leaq	.LC30(%rip), %rax
	movq	%rdx, %rsi
	movabsq	$-4294967296, %rcx
	andq	%rsi, %rcx
	movq	%rcx, %rdx
	movq	%rdx, %rcx
	movl	%ecx, %esi
	movabsq	$4294967296, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	jmp	.L1216
.L1215:
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	vstrlen_char
	movl	%eax, %ecx
	movl	$0, %eax
	movl	$0, %edx
	movq	-24(%rbp), %rax
	movl	%ecx, %esi
	movq	%rdx, %rdi
	movabsq	$-4294967296, %rcx
	andq	%rdi, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %rdx
.L1216:
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	u8_vstring
u8_vstring:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$24, %rsp
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	vstrlen
	movl	%eax, %ecx
	movl	$0, %eax
	movl	$0, %edx
	movq	-24(%rbp), %rax
	movl	%ecx, %esi
	movq	%rdx, %rdi
	movabsq	$-4294967296, %rcx
	andq	%rdi, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	u8_vstring_with_len
u8_vstring_with_len:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	-28(%rbp), %ecx
	movq	%rdx, %rdi
	movabsq	$-4294967296, %rsi
	andq	%rdi, %rsi
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	movq	%rdx, %rcx
	movl	%ecx, %ecx
	movq	%rcx, %rdx
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	string_clone_static
	.hidden	string_clone_static
string_clone_static:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movq	%rcx, %rdx
	movq	%rax, -16(%rbp)
	movq	%rdx, -8(%rbp)
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	string_clone
	leave
	ret
	.globl	string_clone
string_clone:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$40, %rsp
	movq	%rdi, %rcx
	movq	%rsi, %rbx
	movq	%rcx, -48(%rbp)
	movq	%rbx, -40(%rbp)
	movl	-40(%rbp), %ecx
	testl	%ecx, %ecx
	jne	.L1225
	leaq	.LC30(%rip), %rax
	movq	%rdx, %rsi
	movabsq	$-4294967296, %rcx
	andq	%rsi, %rcx
	movq	%rcx, %rdx
	movq	%rdx, %rcx
	movl	%ecx, %esi
	movabsq	$4294967296, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	jmp	.L1226
.L1225:
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	cltq
	movq	%rax, %rdi
	call	malloc_noscan
	movq	%rax, -32(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-40(%rbp), %eax
	movslq	%eax, %rdx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	vmemcpy
	movq	-32(%rbp), %rdx
	movl	-40(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movb	$0, (%rax)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdx
.L1226:
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	string_replace
string_replace:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$232, %rsp
	movq	%rsi, %rax
	movq	%rdi, %r10
	movq	%r10, %rsi
	movq	%r11, %rdi
	movq	%rax, %rdi
	movq	%rsi, -176(%rbp)
	movq	%rdi, -168(%rbp)
	movq	%rdx, -192(%rbp)
	movq	%rcx, -184(%rbp)
	movq	%r8, -208(%rbp)
	movq	%r9, -200(%rbp)
	movb	$0, -45(%rbp)
	movl	-168(%rbp), %eax
	testl	%eax, %eax
	je	.L1229
	movl	-184(%rbp), %eax
	testl	%eax, %eax
	je	.L1229
	movl	-184(%rbp), %edx
	movl	-168(%rbp), %eax
	cmpl	%eax, %edx
	jle	.L1230
.L1229:
	movq	-176(%rbp), %rdx
	movq	-168(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	string_clone
	jmp	.L1231
.L1230:
	movq	-192(%rbp), %rax
	movq	-184(%rbp), %rdx
	movq	-176(%rbp), %rdi
	movq	-168(%rbp), %rsi
	movq	%rdx, %rcx
	movq	%rax, %rdx
	call	string_contains
	testb	%al, %al
	jne	.L1232
	movq	-176(%rbp), %rdx
	movq	-168(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	string_clone
	jmp	.L1231
.L1232:
	movl	-168(%rbp), %eax
	movl	-184(%rbp), %ebx
	cltd
	idivl	%ebx
	movl	%eax, %edx
	leaq	-240(%rbp), %rax
	movl	$0, %r8d
	movl	$4, %ecx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array_with_default
	movq	-240(%rbp), %rax
	movq	-232(%rbp), %rdx
	movq	%rax, -112(%rbp)
	movq	%rdx, -104(%rbp)
	movq	-224(%rbp), %rax
	movq	-216(%rbp), %rdx
	movq	%rax, -96(%rbp)
	movq	%rdx, -88(%rbp)
	movb	$1, -45(%rbp)
	movl	$0, -20(%rbp)
.L1236:
	movl	-20(%rbp), %ecx
	movq	-192(%rbp), %rax
	movq	-184(%rbp), %rdx
	movq	-176(%rbp), %rdi
	movq	-168(%rbp), %rsi
	movl	%ecx, %r8d
	movq	%rdx, %rcx
	movq	%rax, %rdx
	call	string_index_after
	movl	%eax, -20(%rbp)
	cmpl	$-1, -20(%rbp)
	jne	.L1233
	movl	-92(%rbp), %eax
	testl	%eax, %eax
	je	.L1234
	jmp	.L1249
.L1233:
	movl	-20(%rbp), %eax
	movl	%eax, -116(%rbp)
	leaq	-116(%rbp), %rdx
	leaq	-112(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	array_push
	movl	-184(%rbp), %eax
	addl	%eax, -20(%rbp)
	jmp	.L1236
.L1234:
	movq	-176(%rbp), %rdx
	movq	-168(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	string_clone
	movq	%rax, -144(%rbp)
	movq	%rdx, -136(%rbp)
	cmpb	$0, -45(%rbp)
	je	.L1237
	leaq	-112(%rbp), %rax
	movq	%rax, %rdi
	call	array_free
.L1237:
	movq	-144(%rbp), %rax
	movq	-136(%rbp), %rdx
	jmp	.L1231
.L1249:
	movl	-168(%rbp), %ecx
	movl	-92(%rbp), %eax
	movl	-200(%rbp), %esi
	movl	-184(%rbp), %edx
	subl	%edx, %esi
	imull	%esi, %eax
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	addl	$1, %eax
	cltq
	movq	%rax, %rdi
	call	malloc_noscan
	movq	%rax, -64(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -32(%rbp)
	jmp	.L1238
.L1243:
	movq	-104(%rbp), %rax
	movl	-32(%rbp), %edx
	movslq	%edx, %rdx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	movl	%eax, -68(%rbp)
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.L1239
.L1240:
	movq	-176(%rbp), %rdx
	movl	-36(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movl	-24(%rbp), %edx
	movslq	%edx, %rcx
	movq	-64(%rbp), %rdx
	addq	%rcx, %rdx
	movzbl	(%rax), %eax
	movb	%al, (%rdx)
	addl	$1, -24(%rbp)
	addl	$1, -36(%rbp)
.L1239:
	movl	-36(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jl	.L1240
	movl	-184(%rbp), %edx
	movl	-68(%rbp), %eax
	addl	%edx, %eax
	movl	%eax, -28(%rbp)
	movl	$0, -40(%rbp)
	jmp	.L1241
.L1242:
	movq	-208(%rbp), %rdx
	movl	-40(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movl	-24(%rbp), %edx
	movslq	%edx, %rcx
	movq	-64(%rbp), %rdx
	addq	%rcx, %rdx
	movzbl	(%rax), %eax
	movb	%al, (%rdx)
	addl	$1, -24(%rbp)
	addl	$1, -40(%rbp)
.L1241:
	movl	-200(%rbp), %eax
	cmpl	%eax, -40(%rbp)
	jl	.L1242
	addl	$1, -32(%rbp)
.L1238:
	movl	-92(%rbp), %eax
	cmpl	%eax, -32(%rbp)
	jl	.L1243
	movl	-168(%rbp), %eax
	cmpl	%eax, -28(%rbp)
	jge	.L1244
	movl	-28(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.L1245
.L1246:
	movq	-176(%rbp), %rdx
	movl	-44(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movl	-24(%rbp), %edx
	movslq	%edx, %rcx
	movq	-64(%rbp), %rdx
	addq	%rcx, %rdx
	movzbl	(%rax), %eax
	movb	%al, (%rdx)
	addl	$1, -24(%rbp)
	addl	$1, -44(%rbp)
.L1245:
	movl	-168(%rbp), %eax
	cmpl	%eax, -44(%rbp)
	jl	.L1246
.L1244:
	movl	-52(%rbp), %eax
	movslq	%eax, %rdx
	movq	-64(%rbp), %rax
	addq	%rdx, %rax
	movb	$0, (%rax)
	movl	-52(%rbp), %edx
	movq	-64(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	tos
	movq	%rax, -160(%rbp)
	movq	%rdx, -152(%rbp)
	cmpb	$0, -45(%rbp)
	je	.L1247
	leaq	-112(%rbp), %rax
	movq	%rax, %rdi
	call	array_free
.L1247:
	movq	-160(%rbp), %rax
	movq	-152(%rbp), %rdx
.L1231:
	movq	-8(%rbp), %rbx
	leave
	ret
	.section	.rodata, "a"
.LC108:
	.string	"string.eq(): nil string"
	.text
	.globl	string__eq
	.hidden	string__eq
string__eq:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$56, %rsp
	movq	%rsi, %rax
	movq	%rdi, %r10
	movq	%r10, %rsi
	movq	%r11, %rdi
	movq	%rax, %rdi
	movq	%rsi, -48(%rbp)
	movq	%rdi, -40(%rbp)
	movq	%rdx, -64(%rbp)
	movq	%rcx, -56(%rbp)
	movq	-48(%rbp), %rax
	testq	%rax, %rax
	jne	.L1251
	leaq	.LC108(%rip), %r8
	movq	%r9, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$23, %rax
	movq	%rax, %r9
	movq	%r9, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r9
	movq	%r8, %rcx
	movq	%r9, %rbx
	movq	%r8, %rax
	movq	%r9, %rdx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	_v_panic
.L1251:
	movl	-40(%rbp), %edx
	movl	-56(%rbp), %eax
	cmpl	%eax, %edx
	je	.L1252
	movl	$0, %eax
	jmp	.L1253
.L1252:
	movl	-40(%rbp), %eax
	testl	%eax, %eax
	jle	.L1254
	movl	-40(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -20(%rbp)
	movq	-48(%rbp), %rdx
	movl	-20(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %edx
	movq	-64(%rbp), %rcx
	movl	-20(%rbp), %eax
	cltq
	addq	%rcx, %rax
	movzbl	(%rax), %eax
	cmpb	%al, %dl
	je	.L1254
	movl	$0, %eax
	jmp	.L1253
.L1254:
	movl	-56(%rbp), %eax
	movslq	%eax, %rdx
	movq	-64(%rbp), %rcx
	movq	-48(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	vmemcmp
	testl	%eax, %eax
	sete	%al
.L1253:
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	string__lt
	.hidden	string__lt
string__lt:
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rsi, %rax
	movq	%rdi, %r8
	movq	%r8, %rsi
	movq	%r9, %rdi
	movq	%rax, %rdi
	movq	%rsi, -32(%rbp)
	movq	%rdi, -24(%rbp)
	movq	%rdx, -48(%rbp)
	movq	%rcx, -40(%rbp)
	movl	$0, -4(%rbp)
	jmp	.L1256
.L1261:
	movl	-40(%rbp), %eax
	cmpl	%eax, -4(%rbp)
	jge	.L1257
	movq	-32(%rbp), %rdx
	movl	-4(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-4(%rbp), %edx
	movslq	%edx, %rdx
	addq	%rcx, %rdx
	movzbl	(%rdx), %edx
	cmpb	%al, %dl
	jnb	.L1258
.L1257:
	movl	$0, %eax
	jmp	.L1259
.L1258:
	movq	-32(%rbp), %rdx
	movl	-4(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %edx
	movq	-48(%rbp), %rcx
	movl	-4(%rbp), %eax
	cltq
	addq	%rcx, %rax
	movzbl	(%rax), %eax
	cmpb	%al, %dl
	jnb	.L1260
	movl	$1, %eax
	jmp	.L1259
.L1260:
	addl	$1, -4(%rbp)
.L1256:
	movl	-24(%rbp), %eax
	cmpl	%eax, -4(%rbp)
	jl	.L1261
	movl	-24(%rbp), %edx
	movl	-40(%rbp), %eax
	cmpl	%eax, %edx
	jge	.L1262
	movl	$1, %eax
	jmp	.L1259
.L1262:
	movl	$0, %eax
.L1259:
	popq	%rbp
	ret
	.globl	string__plus
	.hidden	string__plus
string__plus:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$72, %rsp
	movq	%rsi, %rax
	movq	%rdi, %r8
	movq	%r8, %rsi
	movq	%r9, %rdi
	movq	%rax, %rdi
	movq	%rsi, -64(%rbp)
	movq	%rdi, -56(%rbp)
	movq	%rdx, -80(%rbp)
	movq	%rcx, -72(%rbp)
	movl	-72(%rbp), %edx
	movl	-56(%rbp), %eax
	addl	%edx, %eax
	movl	%eax, -20(%rbp)
	movq	$0, -48(%rbp)
	movq	$0, -40(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	cltq
	movq	%rax, %rdi
	call	malloc_noscan
	movq	%rax, -48(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-56(%rbp), %eax
	movslq	%eax, %rdx
	movq	-64(%rbp), %rcx
	movq	-48(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	vmemcpy
	movl	-72(%rbp), %eax
	movslq	%eax, %rdx
	movq	-80(%rbp), %rax
	movq	-48(%rbp), %rsi
	movl	-56(%rbp), %ecx
	movslq	%ecx, %rcx
	addq	%rsi, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	vmemcpy
	movq	-48(%rbp), %rdx
	movl	-20(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movb	$0, (%rax)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	-8(%rbp), %rbx
	leave
	ret
	.section	.rodata, "a"
.LC109:
	.string	"substr("
.LC110:
	.string	") out of bounds (len="
	.text
	.globl	string_substr
string_substr:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$232, %rsp
	movq	%rsi, %rax
	movq	%rdi, %r8
	movq	%r8, %rsi
	movq	%r9, %rdi
	movq	%rax, %rdi
	movq	%rsi, -224(%rbp)
	movq	%rdi, -216(%rbp)
	movl	%edx, -228(%rbp)
	movl	%ecx, -232(%rbp)
	movl	-228(%rbp), %eax
	cmpl	-232(%rbp), %eax
	jg	.L1266
	movl	-216(%rbp), %eax
	cmpl	%eax, -228(%rbp)
	jg	.L1266
	movl	-216(%rbp), %eax
	cmpl	%eax, -232(%rbp)
	jg	.L1266
	cmpl	$0, -228(%rbp)
	js	.L1266
	cmpl	$0, -232(%rbp)
	jns	.L1267
.L1266:
	leaq	-208(%rbp), %rdx
	movl	$0, %eax
	movl	$20, %ecx
	movq	%rdx, %rdi
	rep stosq
	leaq	.LC109(%rip), %rax
	movq	%rax, -208(%rbp)
	movl	$7, -200(%rbp)
	movl	$1, -196(%rbp)
	movl	$65031, -192(%rbp)
	movl	-228(%rbp), %eax
	movl	%eax, -184(%rbp)
	leaq	.LC63(%rip), %rax
	movq	%rax, -168(%rbp)
	movl	$2, -160(%rbp)
	movl	$1, -156(%rbp)
	movl	$65031, -152(%rbp)
	movl	-232(%rbp), %eax
	movl	%eax, -144(%rbp)
	leaq	.LC110(%rip), %rax
	movq	%rax, -128(%rbp)
	movl	$21, -120(%rbp)
	movl	$1, -116(%rbp)
	movl	$65031, -112(%rbp)
	movl	-216(%rbp), %eax
	movl	%eax, -104(%rbp)
	leaq	.LC50(%rip), %rax
	movq	%rax, -88(%rbp)
	movl	$1, -80(%rbp)
	movl	$1, -76(%rbp)
	leaq	-208(%rbp), %rax
	movq	%rax, %rsi
	movl	$4, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	_v_panic
.L1267:
	movl	-232(%rbp), %eax
	subl	-228(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-216(%rbp), %eax
	cmpl	%eax, -20(%rbp)
	jne	.L1268
	movq	-224(%rbp), %rdx
	movq	-216(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	string_clone
	jmp	.L1269
.L1268:
	movq	$0, -48(%rbp)
	movq	$0, -40(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	cltq
	movq	%rax, %rdi
	call	malloc_noscan
	movq	%rax, -48(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %eax
	movslq	%eax, %rdx
	movq	-224(%rbp), %rcx
	movl	-228(%rbp), %eax
	cltq
	addq	%rax, %rcx
	movq	-48(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	vmemcpy
	movq	-48(%rbp), %rdx
	movl	-20(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movb	$0, (%rax)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
.L1269:
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	string_substr_ni
string_substr_ni:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$64, %rsp
	movq	%rsi, %rax
	movq	%rdi, %r10
	movq	%r10, %rsi
	movq	%r11, %rdi
	movq	%rax, %rdi
	movq	%rsi, -48(%rbp)
	movq	%rdi, -40(%rbp)
	movl	%edx, -52(%rbp)
	movl	%ecx, -56(%rbp)
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-56(%rbp), %eax
	movl	%eax, -8(%rbp)
	cmpl	$0, -4(%rbp)
	jns	.L1272
	movl	-40(%rbp), %eax
	addl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	jns	.L1272
	movl	$0, -4(%rbp)
.L1272:
	cmpl	$0, -8(%rbp)
	jns	.L1273
	movl	-40(%rbp), %eax
	addl	%eax, -8(%rbp)
	cmpl	$0, -8(%rbp)
	jns	.L1273
	movl	$0, -8(%rbp)
.L1273:
	movl	-40(%rbp), %eax
	cmpl	%eax, -8(%rbp)
	jl	.L1274
	movl	-40(%rbp), %eax
	movl	%eax, -8(%rbp)
.L1274:
	movl	-40(%rbp), %eax
	cmpl	%eax, -4(%rbp)
	jg	.L1275
	movl	-8(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jge	.L1276
.L1275:
	leaq	.LC30(%rip), %r8
	movq	%r9, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, %r9
	movq	%r9, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r9
	jmp	.L1277
.L1276:
	movl	-8(%rbp), %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	cltq
	movq	%rax, %rdi
	call	malloc_noscan
	movq	%rax, -32(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-12(%rbp), %eax
	movslq	%eax, %rdx
	movq	-48(%rbp), %rcx
	movl	-4(%rbp), %eax
	cltq
	addq	%rax, %rcx
	movq	-32(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	vmemcpy
	movq	-32(%rbp), %rdx
	movl	-12(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movb	$0, (%rax)
	movq	-32(%rbp), %r8
	movq	-24(%rbp), %r9
.L1277:
	movq	%r8, %rax
	movq	%r9, %rdx
	leave
	ret
	.globl	string_index_
	.hidden	string_index_
string_index_:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$48, %rsp
	movq	%rsi, %rax
	movq	%rdi, %r8
	movq	%r8, %rsi
	movq	%r9, %rdi
	movq	%rax, %rdi
	movq	%rsi, -32(%rbp)
	movq	%rdi, -24(%rbp)
	movq	%rdx, -48(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-40(%rbp), %edx
	movl	-24(%rbp), %eax
	cmpl	%eax, %edx
	jg	.L1280
	movl	-40(%rbp), %eax
	testl	%eax, %eax
	jne	.L1281
.L1280:
	movl	$-1, %eax
	jmp	.L1282
.L1281:
	movl	-40(%rbp), %eax
	cmpl	$2, %eax
	jle	.L1283
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	-32(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	%rdx, %rcx
	movq	%rax, %rdx
	call	string_index_kmp
	jmp	.L1282
.L1283:
	movl	$0, -4(%rbp)
.L1289:
	movl	-24(%rbp), %eax
	cmpl	%eax, -4(%rbp)
	jge	.L1291
	movl	$0, -8(%rbp)
.L1287:
	movl	-40(%rbp), %eax
	cmpl	%eax, -8(%rbp)
	jge	.L1286
	movq	-32(%rbp), %rdx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %eax
	addl	%ecx, %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %edx
	movq	-48(%rbp), %rcx
	movl	-8(%rbp), %eax
	cltq
	addq	%rcx, %rax
	movzbl	(%rax), %eax
	cmpb	%al, %dl
	jne	.L1286
	addl	$1, -8(%rbp)
	jmp	.L1287
.L1286:
	movl	-40(%rbp), %eax
	cmpl	%eax, -8(%rbp)
	jne	.L1288
	movl	-4(%rbp), %eax
	jmp	.L1282
.L1288:
	addl	$1, -4(%rbp)
	jmp	.L1289
.L1291:
	nop
	movl	$-1, %eax
.L1282:
	leave
	ret
	.globl	string_index_kmp
	.hidden	string_index_kmp
string_index_kmp:
	pushq	%rbp
	movq	%rsp, %rbp
	addq	$-128, %rsp
	movq	%rsi, %rax
	movq	%rdi, %r9
	movq	%r9, %rsi
	movq	%r10, %rdi
	movq	%rax, %rdi
	movq	%rsi, -80(%rbp)
	movq	%rdi, -72(%rbp)
	movq	%rdx, -96(%rbp)
	movq	%rcx, -88(%rbp)
	movb	$0, -13(%rbp)
	movl	-88(%rbp), %edx
	movl	-72(%rbp), %eax
	cmpl	%eax, %edx
	jle	.L1293
	movl	$-1, %eax
	jmp	.L1306
.L1293:
	movl	-88(%rbp), %esi
	leaq	-128(%rbp), %rax
	movl	$0, %r8d
	movl	$4, %ecx
	movl	$0, %edx
	movq	%rax, %rdi
	call	__new_array_with_default
	movq	-128(%rbp), %rax
	movq	-120(%rbp), %rdx
	movq	%rax, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-112(%rbp), %rax
	movq	-104(%rbp), %rdx
	movq	%rax, -48(%rbp)
	movq	%rdx, -40(%rbp)
	movb	$1, -13(%rbp)
	movl	$0, -4(%rbp)
	movl	$1, -8(%rbp)
	jmp	.L1295
.L1297:
	movq	-96(%rbp), %rdx
	movl	-4(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %edx
	movq	-96(%rbp), %rcx
	movl	-8(%rbp), %eax
	cltq
	addq	%rcx, %rax
	movzbl	(%rax), %eax
	cmpb	%al, %dl
	je	.L1296
	cmpl	$0, -4(%rbp)
	jle	.L1296
	movq	-56(%rbp), %rax
	movl	-4(%rbp), %edx
	movslq	%edx, %rdx
	salq	$2, %rdx
	subq	$4, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
	jmp	.L1297
.L1296:
	movq	-96(%rbp), %rdx
	movl	-4(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %edx
	movq	-96(%rbp), %rcx
	movl	-8(%rbp), %eax
	cltq
	addq	%rcx, %rax
	movzbl	(%rax), %eax
	cmpb	%al, %dl
	jne	.L1298
	addl	$1, -4(%rbp)
.L1298:
	movq	-56(%rbp), %rax
	movl	-8(%rbp), %edx
	movslq	%edx, %rdx
	salq	$2, %rdx
	addq	%rax, %rdx
	movl	-4(%rbp), %eax
	movl	%eax, (%rdx)
	addl	$1, -8(%rbp)
.L1295:
	movl	-88(%rbp), %eax
	cmpl	%eax, -8(%rbp)
	jl	.L1297
	movl	$0, -4(%rbp)
	movl	$0, -12(%rbp)
	jmp	.L1299
.L1301:
	movq	-96(%rbp), %rdx
	movl	-4(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %edx
	movq	-80(%rbp), %rcx
	movl	-12(%rbp), %eax
	cltq
	addq	%rcx, %rax
	movzbl	(%rax), %eax
	cmpb	%al, %dl
	je	.L1300
	cmpl	$0, -4(%rbp)
	jle	.L1300
	movq	-56(%rbp), %rax
	movl	-4(%rbp), %edx
	movslq	%edx, %rdx
	salq	$2, %rdx
	subq	$4, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
	jmp	.L1301
.L1300:
	movq	-96(%rbp), %rdx
	movl	-4(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %edx
	movq	-80(%rbp), %rcx
	movl	-12(%rbp), %eax
	cltq
	addq	%rcx, %rax
	movzbl	(%rax), %eax
	cmpb	%al, %dl
	jne	.L1302
	addl	$1, -4(%rbp)
.L1302:
	movl	-88(%rbp), %eax
	cmpl	%eax, -4(%rbp)
	jne	.L1303
	movl	-88(%rbp), %eax
	movl	-12(%rbp), %edx
	subl	%eax, %edx
	leal	1(%rdx), %eax
	movl	%eax, -24(%rbp)
	cmpb	$0, -13(%rbp)
	je	.L1304
	leaq	-64(%rbp), %rax
	movq	%rax, %rdi
	call	array_free
.L1304:
	movl	-24(%rbp), %eax
	jmp	.L1306
.L1303:
	addl	$1, -12(%rbp)
.L1299:
	movl	-72(%rbp), %eax
	cmpl	%eax, -12(%rbp)
	jl	.L1301
	movl	$-1, -20(%rbp)
	cmpb	$0, -13(%rbp)
	je	.L1305
	leaq	-64(%rbp), %rax
	movq	%rax, %rdi
	call	array_free
.L1305:
	movl	-20(%rbp), %eax
.L1306:
	leave
	ret
	.globl	string_last_index_
	.hidden	string_last_index_
string_last_index_:
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rsi, %rax
	movq	%rdi, %r8
	movq	%r8, %rsi
	movq	%r9, %rdi
	movq	%rax, %rdi
	movq	%rsi, -32(%rbp)
	movq	%rdi, -24(%rbp)
	movq	%rdx, -48(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-40(%rbp), %edx
	movl	-24(%rbp), %eax
	cmpl	%eax, %edx
	jg	.L1308
	movl	-40(%rbp), %eax
	testl	%eax, %eax
	jne	.L1309
.L1308:
	movl	$-1, %eax
	jmp	.L1310
.L1309:
	movl	-24(%rbp), %edx
	movl	-40(%rbp), %eax
	subl	%eax, %edx
	movl	%edx, -4(%rbp)
.L1316:
	cmpl	$0, -4(%rbp)
	js	.L1318
	movl	$0, -8(%rbp)
.L1314:
	movl	-40(%rbp), %eax
	cmpl	%eax, -8(%rbp)
	jge	.L1313
	movq	-32(%rbp), %rdx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %eax
	addl	%ecx, %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %edx
	movq	-48(%rbp), %rcx
	movl	-8(%rbp), %eax
	cltq
	addq	%rcx, %rax
	movzbl	(%rax), %eax
	cmpb	%al, %dl
	jne	.L1313
	addl	$1, -8(%rbp)
	jmp	.L1314
.L1313:
	movl	-40(%rbp), %eax
	cmpl	%eax, -8(%rbp)
	jne	.L1315
	movl	-4(%rbp), %eax
	jmp	.L1310
.L1315:
	subl	$1, -4(%rbp)
	jmp	.L1316
.L1318:
	nop
	movl	$-1, %eax
.L1310:
	popq	%rbp
	ret
	.globl	string_last_index
string_last_index:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$184, %rsp
	movq	%rdi, -152(%rbp)
	movq	%rsi, %rax
	movq	%rdx, %rsi
	movq	%rsi, %rdx
	movq	%rax, -176(%rbp)
	movq	%rdx, -168(%rbp)
	movq	%rcx, %rax
	movq	%r8, %rcx
	movq	%rcx, %rdx
	movq	%rax, -192(%rbp)
	movq	%rdx, -184(%rbp)
	movq	-192(%rbp), %rax
	movq	-184(%rbp), %rdx
	movq	-176(%rbp), %rdi
	movq	-168(%rbp), %rsi
	movq	%rdx, %rcx
	movq	%rax, %rdx
	call	string_last_index_
	movl	%eax, -20(%rbp)
	cmpl	$-1, -20(%rbp)
	jne	.L1320
	movq	-152(%rbp), %rax
	pxor	%xmm0, %xmm0
	movups	%xmm0, (%rax)
	movups	%xmm0, 16(%rax)
	movups	%xmm0, 32(%rax)
	movq	-152(%rbp), %rax
	movb	$2, (%rax)
	movq	-152(%rbp), %rcx
	movq	_const_none__(%rip), %rax
	movq	8+_const_none__(%rip), %rdx
	movq	%rax, 8(%rcx)
	movq	%rdx, 16(%rcx)
	movq	16+_const_none__(%rip), %rax
	movq	24+_const_none__(%rip), %rdx
	movq	%rax, 24(%rcx)
	movq	%rdx, 32(%rcx)
	jmp	.L1319
.L1320:
	movl	-20(%rbp), %eax
	movl	%eax, -84(%rbp)
	leaq	-80(%rbp), %rcx
	leaq	-84(%rbp), %rax
	movl	$4, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_option_ok
	movq	-152(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-64(%rbp), %rcx
	movq	-56(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-48(%rbp), %rcx
	movq	-40(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
.L1319:
	movq	-152(%rbp), %rax
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	string_index_after
string_index_after:
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rsi, %rax
	movq	%rdi, %r9
	movq	%r9, %rsi
	movq	%r10, %rdi
	movq	%rax, %rdi
	movq	%rsi, -32(%rbp)
	movq	%rdi, -24(%rbp)
	movq	%rdx, -48(%rbp)
	movq	%rcx, -40(%rbp)
	movl	%r8d, -52(%rbp)
	movl	-40(%rbp), %edx
	movl	-24(%rbp), %eax
	cmpl	%eax, %edx
	jle	.L1324
	movl	$-1, %eax
	jmp	.L1325
.L1324:
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
	cmpl	$0, -52(%rbp)
	jns	.L1326
	movl	$0, -4(%rbp)
.L1326:
	movl	-24(%rbp), %eax
	cmpl	%eax, -52(%rbp)
	jl	.L1327
	movl	$-1, %eax
	jmp	.L1325
.L1327:
	movl	-4(%rbp), %eax
	movl	%eax, -8(%rbp)
.L1333:
	movl	-24(%rbp), %eax
	cmpl	%eax, -8(%rbp)
	jge	.L1335
	movl	$0, -12(%rbp)
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
.L1331:
	movl	-40(%rbp), %eax
	cmpl	%eax, -12(%rbp)
	jge	.L1330
	movq	-32(%rbp), %rdx
	movl	-16(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %edx
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %eax
	cltq
	addq	%rcx, %rax
	movzbl	(%rax), %eax
	cmpb	%al, %dl
	jne	.L1330
	addl	$1, -12(%rbp)
	addl	$1, -16(%rbp)
	jmp	.L1331
.L1330:
	movl	-40(%rbp), %eax
	cmpl	%eax, -12(%rbp)
	jne	.L1332
	movl	-8(%rbp), %eax
	jmp	.L1325
.L1332:
	addl	$1, -8(%rbp)
	jmp	.L1333
.L1335:
	nop
	movl	$-1, %eax
.L1325:
	popq	%rbp
	ret
	.globl	string_index_u8
string_index_u8:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	movq	%rdi, %rcx
	movq	%rsi, %rax
	movq	%rax, %rbx
	movq	%rcx, -48(%rbp)
	movq	%rbx, -40(%rbp)
	movl	%edx, %eax
	movb	%al, -52(%rbp)
	movl	$0, -20(%rbp)
	jmp	.L1337
.L1340:
	movq	-48(%rbp), %rdx
	movl	-20(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	movb	%al, -21(%rbp)
	movzbl	-21(%rbp), %eax
	cmpb	-52(%rbp), %al
	jne	.L1338
	movl	-20(%rbp), %eax
	jmp	.L1339
.L1338:
	addl	$1, -20(%rbp)
.L1337:
	movl	-40(%rbp), %eax
	cmpl	%eax, -20(%rbp)
	jl	.L1340
	movl	$-1, %eax
.L1339:
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	string_contains_u8
string_contains_u8:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	movq	%rdi, %rcx
	movq	%rsi, %rax
	movq	%rax, %rbx
	movq	%rcx, -48(%rbp)
	movq	%rbx, -40(%rbp)
	movl	%edx, %eax
	movb	%al, -52(%rbp)
	movl	$0, -20(%rbp)
	jmp	.L1342
.L1345:
	movq	-48(%rbp), %rdx
	movl	-20(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	movb	%al, -21(%rbp)
	movzbl	-52(%rbp), %eax
	cmpb	-21(%rbp), %al
	jne	.L1343
	movl	$1, %eax
	jmp	.L1344
.L1343:
	addl	$1, -20(%rbp)
.L1342:
	movl	-40(%rbp), %eax
	cmpl	%eax, -20(%rbp)
	jl	.L1345
	movl	$0, %eax
.L1344:
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	string_contains
string_contains:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$32, %rsp
	movq	%rsi, %rax
	movq	%rdi, %r8
	movq	%r8, %rsi
	movq	%r9, %rdi
	movq	%rax, %rdi
	movq	%rsi, -16(%rbp)
	movq	%rdi, -8(%rbp)
	movq	%rdx, -32(%rbp)
	movq	%rcx, -24(%rbp)
	movl	-24(%rbp), %eax
	testl	%eax, %eax
	jne	.L1347
	movl	$1, %eax
	jmp	.L1348
.L1347:
	movl	-24(%rbp), %eax
	cmpl	$1, %eax
	jne	.L1349
	movq	-32(%rbp), %rax
	movzbl	(%rax), %eax
	movzbl	%al, %edx
	movq	-16(%rbp), %rcx
	movq	-8(%rbp), %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	string_contains_u8
	jmp	.L1348
.L1349:
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rsi
	movq	%rdx, %rcx
	movq	%rax, %rdx
	call	string_index_
	cmpl	$-1, %eax
	setne	%al
.L1348:
	leave
	ret
	.globl	string_starts_with
string_starts_with:
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rsi, %rax
	movq	%rdi, %r8
	movq	%r8, %rsi
	movq	%r9, %rdi
	movq	%rax, %rdi
	movq	%rsi, -32(%rbp)
	movq	%rdi, -24(%rbp)
	movq	%rdx, -48(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-40(%rbp), %edx
	movl	-24(%rbp), %eax
	cmpl	%eax, %edx
	jle	.L1351
	movl	$0, %eax
	jmp	.L1352
.L1351:
	movl	$0, -4(%rbp)
	jmp	.L1353
.L1355:
	movq	-32(%rbp), %rdx
	movl	-4(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %edx
	movq	-48(%rbp), %rcx
	movl	-4(%rbp), %eax
	cltq
	addq	%rcx, %rax
	movzbl	(%rax), %eax
	cmpb	%al, %dl
	je	.L1354
	movl	$0, %eax
	jmp	.L1352
.L1354:
	addl	$1, -4(%rbp)
.L1353:
	movl	-40(%rbp), %eax
	cmpl	%eax, -4(%rbp)
	jl	.L1355
	movl	$1, %eax
.L1352:
	popq	%rbp
	ret
	.globl	string_to_lower
string_to_lower:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$40, %rsp
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movq	%rcx, %rdx
	movq	%rax, -48(%rbp)
	movq	%rdx, -40(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	cltq
	movq	%rax, %rdi
	call	malloc_noscan
	movq	%rax, -32(%rbp)
	movl	$0, -20(%rbp)
	jmp	.L1357
.L1360:
	movq	-48(%rbp), %rdx
	movl	-20(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	cmpb	$64, %al
	jbe	.L1358
	movq	-48(%rbp), %rdx
	movl	-20(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	cmpb	$90, %al
	ja	.L1358
	movq	-48(%rbp), %rdx
	movl	-20(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %edx
	movl	-20(%rbp), %eax
	movslq	%eax, %rcx
	movq	-32(%rbp), %rax
	addq	%rcx, %rax
	addl	$32, %edx
	movb	%dl, (%rax)
	jmp	.L1359
.L1358:
	movq	-48(%rbp), %rdx
	movl	-20(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movl	-20(%rbp), %edx
	movslq	%edx, %rcx
	movq	-32(%rbp), %rdx
	addq	%rcx, %rdx
	movzbl	(%rax), %eax
	movb	%al, (%rdx)
.L1359:
	addl	$1, -20(%rbp)
.L1357:
	movl	-40(%rbp), %eax
	cmpl	%eax, -20(%rbp)
	jl	.L1360
	movl	-40(%rbp), %eax
	movslq	%eax, %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	movb	$0, (%rax)
	movl	-40(%rbp), %edx
	movq	-32(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	tos
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	string_to_upper
string_to_upper:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$40, %rsp
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movq	%rcx, %rdx
	movq	%rax, -48(%rbp)
	movq	%rdx, -40(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	cltq
	movq	%rax, %rdi
	call	malloc_noscan
	movq	%rax, -32(%rbp)
	movl	$0, -20(%rbp)
	jmp	.L1363
.L1366:
	movq	-48(%rbp), %rdx
	movl	-20(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	cmpb	$96, %al
	jbe	.L1364
	movq	-48(%rbp), %rdx
	movl	-20(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	cmpb	$122, %al
	ja	.L1364
	movq	-48(%rbp), %rdx
	movl	-20(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %edx
	movl	-20(%rbp), %eax
	movslq	%eax, %rcx
	movq	-32(%rbp), %rax
	addq	%rcx, %rax
	subl	$32, %edx
	movb	%dl, (%rax)
	jmp	.L1365
.L1364:
	movq	-48(%rbp), %rdx
	movl	-20(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movl	-20(%rbp), %edx
	movslq	%edx, %rcx
	movq	-32(%rbp), %rdx
	addq	%rcx, %rdx
	movzbl	(%rax), %eax
	movb	%al, (%rdx)
.L1365:
	addl	$1, -20(%rbp)
.L1363:
	movl	-40(%rbp), %eax
	cmpl	%eax, -20(%rbp)
	jl	.L1366
	movl	-40(%rbp), %eax
	movslq	%eax, %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	movb	$0, (%rax)
	movl	-40(%rbp), %edx
	movq	-32(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	tos
	movq	-8(%rbp), %rbx
	leave
	ret
	.section	.rodata, "a"
.LC111:
	.string	" \n\t\013\f\r"
	.text
	.globl	string_trim_space
string_trim_space:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$24, %rsp
	movq	%rdi, %rcx
	movq	%rsi, %rbx
	movq	%rcx, -32(%rbp)
	movq	%rbx, -24(%rbp)
	leaq	.LC111(%rip), %rax
	movq	%rdx, %rsi
	movabsq	$-4294967296, %rcx
	andq	%rsi, %rcx
	orq	$6, %rcx
	movq	%rcx, %rdx
	movq	%rdx, %rcx
	movl	%ecx, %esi
	movabsq	$4294967296, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	movq	-32(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	%rdx, %rcx
	movq	%rax, %rdx
	call	string_trim
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %rax
	movq	%rbx, %rdx
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	string_trim
string_trim:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$48, %rsp
	movq	%rsi, %rax
	movq	%rdi, %r8
	movq	%r8, %rsi
	movq	%r9, %rdi
	movq	%rax, %rdi
	movq	%rsi, -32(%rbp)
	movq	%rdi, -24(%rbp)
	movq	%rdx, -48(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-24(%rbp), %eax
	testl	%eax, %eax
	jle	.L1371
	movl	-40(%rbp), %eax
	testl	%eax, %eax
	jg	.L1372
.L1371:
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	string_clone
	jmp	.L1374
.L1372:
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	-32(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	%rdx, %rcx
	movq	%rax, %rdx
	call	string_trim_indexes
	movq	%rax, -16(%rbp)
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %edx
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rax
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string_substr
.L1374:
	leave
	ret
	.globl	string_trim_indexes
string_trim_indexes:
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rsi, %r8
	movq	%rdi, %r9
	movq	%r9, %rsi
	movq	%r10, %rdi
	movq	%r8, %rdi
	movq	%rsi, -48(%rbp)
	movq	%rdi, -40(%rbp)
	movq	%rdx, -64(%rbp)
	movq	%rcx, -56(%rbp)
	movl	$0, -4(%rbp)
	movl	-40(%rbp), %edx
	subl	$1, %edx
	movl	%edx, -8(%rbp)
	movb	$1, -9(%rbp)
.L1387:
	movl	-40(%rbp), %edx
	cmpl	%edx, -4(%rbp)
	jg	.L1376
	cmpl	$-1, -8(%rbp)
	jl	.L1376
	cmpb	$0, -9(%rbp)
	je	.L1376
	movb	$0, -9(%rbp)
	movl	$0, -16(%rbp)
	jmp	.L1377
.L1380:
	movq	-64(%rbp), %rcx
	movl	-16(%rbp), %edx
	movslq	%edx, %rdx
	addq	%rcx, %rdx
	movzbl	(%rdx), %edx
	movb	%dl, -21(%rbp)
	movq	-48(%rbp), %rcx
	movl	-4(%rbp), %edx
	movslq	%edx, %rdx
	addq	%rcx, %rdx
	movzbl	(%rdx), %edx
	cmpb	%dl, -21(%rbp)
	jne	.L1378
	addl	$1, -4(%rbp)
	movb	$1, -9(%rbp)
	jmp	.L1379
.L1378:
	addl	$1, -16(%rbp)
.L1377:
	movl	-56(%rbp), %edx
	cmpl	%edx, -16(%rbp)
	jl	.L1380
.L1379:
	movl	$0, -20(%rbp)
	jmp	.L1381
.L1384:
	movq	-64(%rbp), %rcx
	movl	-20(%rbp), %edx
	movslq	%edx, %rdx
	addq	%rcx, %rdx
	movzbl	(%rdx), %edx
	movb	%dl, -22(%rbp)
	movq	-48(%rbp), %rcx
	movl	-8(%rbp), %edx
	movslq	%edx, %rdx
	addq	%rcx, %rdx
	movzbl	(%rdx), %edx
	cmpb	%dl, -22(%rbp)
	jne	.L1382
	subl	$1, -8(%rbp)
	movb	$1, -9(%rbp)
	jmp	.L1383
.L1382:
	addl	$1, -20(%rbp)
.L1381:
	movl	-56(%rbp), %edx
	cmpl	%edx, -20(%rbp)
	jl	.L1384
.L1383:
	movl	-4(%rbp), %edx
	cmpl	-8(%rbp), %edx
	jle	.L1387
	movabsq	$-4294967296, %rdx
	andq	%rdx, %rax
	movl	%eax, %eax
	jmp	.L1388
.L1376:
	movl	-8(%rbp), %edx
	leal	1(%rdx), %ecx
	movl	-4(%rbp), %edx
	movabsq	$-4294967296, %rsi
	andq	%rsi, %rax
	orq	%rdx, %rax
	movl	%ecx, %edx
	salq	$32, %rdx
	movl	%eax, %eax
	orq	%rdx, %rax
.L1388:
	popq	%rbp
	ret
	.globl	compare_strings
compare_strings:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdx
	movq	(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	(%rcx), %rdi
	movq	8(%rcx), %rsi
	movq	%rdx, %rcx
	movq	%rax, %rdx
	call	string__lt
	testb	%al, %al
	je	.L1390
	movl	$-1, %eax
	jmp	.L1391
.L1390:
	movq	-8(%rbp), %rax
	movq	8(%rax), %rdx
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rdi
	movq	8(%rcx), %rsi
	movq	%rdx, %rcx
	movq	%rax, %rdx
	call	string__lt
	testb	%al, %al
	je	.L1392
	movl	$1, %eax
	jmp	.L1391
.L1392:
	movl	$0, %eax
.L1391:
	leave
	ret
	.globl	string_str
string_str:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movq	%rcx, %rdx
	movq	%rax, -16(%rbp)
	movq	%rdx, -8(%rbp)
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	string_clone
	leave
	ret
	.section	.rodata, "a"
.LC112:
	.string	"string index out of range: "
.LC113:
	.string	" / "
	.text
	.globl	string_at
	.hidden	string_at
string_at:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$168, %rsp
	movq	%rdi, %rcx
	movq	%rsi, %rax
	movq	%rax, %rbx
	movq	%rcx, -160(%rbp)
	movq	%rbx, -152(%rbp)
	movl	%edx, -164(%rbp)
	cmpl	$0, -164(%rbp)
	js	.L1396
	movl	-152(%rbp), %eax
	cmpl	%eax, -164(%rbp)
	jl	.L1397
.L1396:
	leaq	-144(%rbp), %rdx
	movl	$0, %eax
	movl	$15, %ecx
	movq	%rdx, %rdi
	rep stosq
	leaq	.LC112(%rip), %rax
	movq	%rax, -144(%rbp)
	movl	$27, -136(%rbp)
	movl	$1, -132(%rbp)
	movl	$65031, -128(%rbp)
	movl	-164(%rbp), %eax
	movl	%eax, -120(%rbp)
	leaq	.LC113(%rip), %rax
	movq	%rax, -104(%rbp)
	movl	$3, -96(%rbp)
	movl	$1, -92(%rbp)
	movl	$65031, -88(%rbp)
	movl	-152(%rbp), %eax
	movl	%eax, -80(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -64(%rbp)
	movl	$1, -52(%rbp)
	leaq	-144(%rbp), %rax
	movq	%rax, %rsi
	movl	$3, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	_v_panic
.L1397:
	movq	-160(%rbp), %rdx
	movl	-164(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	string_at_with_check
	.hidden	string_at_with_check
string_at_with_check:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$152, %rsp
	movq	%rdi, -136(%rbp)
	movq	%rsi, %rax
	movq	%rdx, %rsi
	movq	%rsi, %rdx
	movq	%rax, -160(%rbp)
	movq	%rdx, -152(%rbp)
	movl	%ecx, -140(%rbp)
	cmpl	$0, -140(%rbp)
	js	.L1400
	movl	-152(%rbp), %eax
	cmpl	%eax, -140(%rbp)
	jl	.L1401
.L1400:
	movq	-136(%rbp), %rax
	pxor	%xmm0, %xmm0
	movups	%xmm0, (%rax)
	movups	%xmm0, 16(%rax)
	movups	%xmm0, 32(%rax)
	movq	-136(%rbp), %rax
	movb	$2, (%rax)
	movq	-136(%rbp), %rcx
	movq	_const_none__(%rip), %rax
	movq	8+_const_none__(%rip), %rdx
	movq	%rax, 8(%rcx)
	movq	%rdx, 16(%rcx)
	movq	16+_const_none__(%rip), %rax
	movq	24+_const_none__(%rip), %rdx
	movq	%rax, 24(%rcx)
	movq	%rdx, 32(%rcx)
	jmp	.L1399
.L1401:
	movq	-160(%rbp), %rdx
	movl	-140(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	movb	%al, -65(%rbp)
	leaq	-128(%rbp), %rcx
	leaq	-65(%rbp), %rax
	movl	$1, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_option_ok
	movq	-136(%rbp), %rax
	movq	-128(%rbp), %rcx
	movq	-120(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-112(%rbp), %rcx
	movq	-104(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-96(%rbp), %rcx
	movq	-88(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
.L1399:
	movq	-136(%rbp), %rax
	movq	-8(%rbp), %rbx
	leave
	ret
	.section	.rodata, "a"
.LC114:
	.string	"double string.free() detected\n"
	.text
	.globl	string_free
string_free:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	cmpl	$-98761234, %eax
	jne	.L1405
	leaq	.LC114(%rip), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	vstrlen
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %edx
	movq	-8(%rbp), %rax
	movq	%rax, %rsi
	movl	$1, %edi
	call	_write_buf_to_fd
	jmp	.L1404
.L1405:
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	cmpl	$1, %eax
	je	.L1409
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.L1409
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	_v_free
	movq	-24(%rbp), %rax
	movq	$0, (%rax)
	movq	-24(%rbp), %rax
	movl	$-98761234, 12(%rax)
	jmp	.L1404
.L1409:
	nop
.L1404:
	leave
	ret
	.globl	string_all_after_last
string_all_after_last:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$48, %rsp
	movq	%rsi, %rax
	movq	%rdi, %r8
	movq	%r8, %rsi
	movq	%r9, %rdi
	movq	%rax, %rdi
	movq	%rsi, -32(%rbp)
	movq	%rdi, -24(%rbp)
	movq	%rdx, -48(%rbp)
	movq	%rcx, -40(%rbp)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	-32(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	%rdx, %rcx
	movq	%rax, %rdx
	call	string_last_index_
	movl	%eax, -4(%rbp)
	cmpl	$-1, -4(%rbp)
	jne	.L1411
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	string_clone
	jmp	.L1412
.L1411:
	movl	-24(%rbp), %edx
	movl	-40(%rbp), %ecx
	movl	-4(%rbp), %eax
	leal	(%rcx,%rax), %edi
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rax
	movl	%edx, %ecx
	movl	%edi, %edx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string_substr
.L1412:
	leave
	ret
	.globl	Array_string_join
Array_string_join:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$88, %rsp
	movq	%rdi, %rcx
	movq	%rsi, %rbx
	movq	%rcx, -96(%rbp)
	movq	%rbx, -88(%rbp)
	movl	36(%rbp), %ecx
	testl	%ecx, %ecx
	jne	.L1414
	leaq	.LC30(%rip), %rax
	movq	%rdx, %rsi
	movabsq	$-4294967296, %rcx
	andq	%rsi, %rcx
	movq	%rcx, %rdx
	movq	%rdx, %rcx
	movl	%ecx, %esi
	movabsq	$4294967296, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	jmp	.L1415
.L1414:
	movl	$0, -20(%rbp)
	movl	$0, -24(%rbp)
	jmp	.L1416
.L1417:
	movq	24(%rbp), %rax
	movl	-24(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	movq	8(%rax), %rdx
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movl	-56(%rbp), %edx
	movl	-88(%rbp), %eax
	addl	%edx, %eax
	addl	%eax, -20(%rbp)
	addl	$1, -24(%rbp)
.L1416:
	movl	36(%rbp), %eax
	cmpl	%eax, -24(%rbp)
	jl	.L1417
	movl	-88(%rbp), %eax
	subl	%eax, -20(%rbp)
	movq	$0, -48(%rbp)
	movq	$0, -40(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	cltq
	movq	%rax, %rdi
	call	malloc_noscan
	movq	%rax, -48(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -32(%rbp)
	jmp	.L1418
.L1420:
	movq	24(%rbp), %rax
	movl	-32(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	movq	8(%rax), %rdx
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	%rdx, -72(%rbp)
	movl	-72(%rbp), %eax
	movslq	%eax, %rdx
	movq	-80(%rbp), %rax
	movq	-48(%rbp), %rsi
	movl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	addq	%rsi, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	vmemcpy
	movl	-72(%rbp), %eax
	addl	%eax, -28(%rbp)
	movl	36(%rbp), %eax
	subl	$1, %eax
	cmpl	%eax, -32(%rbp)
	je	.L1419
	movl	-88(%rbp), %eax
	movslq	%eax, %rdx
	movq	-96(%rbp), %rax
	movq	-48(%rbp), %rsi
	movl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	addq	%rsi, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	vmemcpy
	movl	-88(%rbp), %eax
	addl	%eax, -28(%rbp)
.L1419:
	addl	$1, -32(%rbp)
.L1418:
	movl	36(%rbp), %eax
	cmpl	%eax, -32(%rbp)
	jl	.L1420
	movq	-48(%rbp), %rdx
	movl	-40(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movb	$0, (%rax)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
.L1415:
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	string_bytes
string_bytes:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$64, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rdx, %rcx
	movq	%rsi, %rax
	movq	%rdi, %rdx
	movq	%rcx, %rdx
	movq	%rax, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movl	-56(%rbp), %eax
	testl	%eax, %eax
	jne	.L1423
	movq	-40(%rbp), %rax
	movl	$0, %r8d
	movl	$1, %ecx
	movl	$0, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array_with_default
	jmp	.L1425
.L1423:
	movl	-56(%rbp), %esi
	leaq	-32(%rbp), %rax
	movl	$0, %r8d
	movl	$1, %ecx
	movl	$0, %edx
	movq	%rax, %rdi
	call	__new_array_with_default
	movl	-56(%rbp), %eax
	movslq	%eax, %rdx
	movq	-64(%rbp), %rcx
	movq	-24(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	vmemcpy
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
.L1425:
	movq	-40(%rbp), %rax
	leave
	ret
	.section	.rodata, "a"
.LC115:
	.string	"string.repeat: count is negative: "
	.text
	.globl	string_repeat
string_repeat:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$152, %rsp
	movq	%rsi, %rax
	movq	%rdi, %r8
	movq	%r8, %rsi
	movq	%r9, %rdi
	movq	%rax, %rdi
	movq	%rsi, -144(%rbp)
	movq	%rdi, -136(%rbp)
	movl	%edx, -148(%rbp)
	cmpl	$0, -148(%rbp)
	jns	.L1427
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -128(%rbp)
	movaps	%xmm0, -112(%rbp)
	movaps	%xmm0, -96(%rbp)
	movaps	%xmm0, -80(%rbp)
	movaps	%xmm0, -64(%rbp)
	leaq	.LC115(%rip), %rax
	movq	%rax, -128(%rbp)
	movl	$34, -120(%rbp)
	movl	$1, -116(%rbp)
	movl	$65031, -112(%rbp)
	movl	-148(%rbp), %eax
	movl	%eax, -104(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -88(%rbp)
	movl	$1, -76(%rbp)
	leaq	-128(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	_v_panic
.L1427:
	cmpl	$0, -148(%rbp)
	jne	.L1428
	leaq	.LC30(%rip), %rcx
	movq	%rbx, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, %rbx
	movq	%rbx, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %rbx
	jmp	.L1429
.L1428:
	cmpl	$1, -148(%rbp)
	jne	.L1430
	movq	-144(%rbp), %rdx
	movq	-136(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	string_clone
	movq	%rax, %rcx
	movq	%rdx, %rbx
	jmp	.L1429
.L1430:
	movl	-136(%rbp), %eax
	imull	-148(%rbp), %eax
	addl	$1, %eax
	cltq
	movq	%rax, %rdi
	call	malloc_noscan
	movq	%rax, -32(%rbp)
	movl	$0, -20(%rbp)
	jmp	.L1431
.L1432:
	movl	-136(%rbp), %eax
	movslq	%eax, %rdx
	movq	-144(%rbp), %rax
	movl	-136(%rbp), %ecx
	imull	-20(%rbp), %ecx
	movslq	%ecx, %rsi
	movq	-32(%rbp), %rcx
	addq	%rsi, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	vmemcpy
	addl	$1, -20(%rbp)
.L1431:
	movl	-20(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jl	.L1432
	movl	-136(%rbp), %eax
	movl	-148(%rbp), %edx
	imull	%edx, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movslq	%eax, %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	movb	$0, (%rax)
	movl	-36(%rbp), %edx
	movq	-32(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	u8_vstring_with_len
	movq	%rax, %rcx
	movq	%rdx, %rbx
.L1429:
	movq	%rcx, %rax
	movq	%rbx, %rdx
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	byteptr_vstring
byteptr_vstring:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$24, %rsp
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	vstrlen
	movl	%eax, %ecx
	movl	$0, %eax
	movl	$0, %edx
	movq	-24(%rbp), %rax
	movl	%ecx, %esi
	movq	%rdx, %rdi
	movabsq	$-4294967296, %rcx
	andq	%rdi, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	byteptr_vstring_with_len
byteptr_vstring_with_len:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	-28(%rbp), %ecx
	movq	%rdx, %rdi
	movabsq	$-4294967296, %rsi
	andq	%rdi, %rsi
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	movq	%rdx, %rcx
	movl	%ecx, %ecx
	movq	%rcx, %rdx
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	charptr_vstring
charptr_vstring:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r13
	pushq	%r12
	subq	$16, %rsp
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	vstrlen_char
	movq	-24(%rbp), %r12
	movl	%eax, %edx
	movq	%r13, %rcx
	movabsq	$-4294967296, %rax
	andq	%rcx, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %eax
	movq	%rax, %r13
	movq	%r12, %rax
	movq	%r13, %rdx
	addq	$16, %rsp
	popq	%r12
	popq	%r13
	popq	%rbp
	ret
	.globl	charptr_vstring_with_len
charptr_vstring_with_len:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	-28(%rbp), %ecx
	movq	%rdx, %rdi
	movabsq	$-4294967296, %rsi
	andq	%rdi, %rsi
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	movq	%rdx, %rcx
	movl	%ecx, %ecx
	movq	%rcx, %rdx
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	byteptr_vstring_literal
byteptr_vstring_literal:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r13
	pushq	%r12
	subq	$16, %rsp
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	vstrlen
	movq	-24(%rbp), %r12
	movl	%eax, %edx
	movq	%r13, %rcx
	movabsq	$-4294967296, %rax
	andq	%rcx, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	%r12, %rax
	movq	%r13, %rdx
	addq	$16, %rsp
	popq	%r12
	popq	%r13
	popq	%rbp
	ret
	.globl	charptr_vstring_literal
charptr_vstring_literal:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r13
	pushq	%r12
	subq	$16, %rsp
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	vstrlen_char
	movq	-24(%rbp), %r12
	movl	%eax, %edx
	movq	%r13, %rcx
	movabsq	$-4294967296, %rax
	andq	%rcx, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	%r12, %rax
	movq	%r13, %rdx
	addq	$16, %rsp
	popq	%r12
	popq	%r13
	popq	%rbp
	ret
	.section	.rodata, "a"
.LC116:
	.string	"no_str"
.LC117:
	.string	"c"
.LC118:
	.string	"u8"
.LC119:
	.string	"i8"
.LC120:
	.string	"u16"
.LC121:
	.string	"i16"
.LC122:
	.string	"u32"
.LC123:
	.string	"i32"
.LC124:
	.string	"u64"
.LC125:
	.string	"i64"
.LC126:
	.string	"f32"
.LC127:
	.string	"f64"
.LC128:
	.string	"s"
.LC129:
	.string	"p"
.LC130:
	.string	"vp"
	.text
	.globl	StrIntpType_str
StrIntpType_str:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	movl	%edi, -36(%rbp)
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -32(%rbp)
	movl	$1, -20(%rbp)
	cmpl	$18, -36(%rbp)
	ja	.L1446
	movl	-36(%rbp), %eax
	leaq	0(,%rax,4), %rdx
	leaq	.L1448(%rip), %rax
	movl	(%rdx,%rax), %eax
	cltq
	leaq	.L1448(%rip), %rdx
	addq	%rdx, %rax
	jmp	*%rax
	.section	.rodata, "a"
.L1448:
	.text
.L1466:
	leaq	.LC116(%rip), %rax
	movq	%rax, -32(%rbp)
	movl	$6, -24(%rbp)
	movl	$1, -20(%rbp)
	nop
	jmp	.L1446
.L1465:
	leaq	.LC117(%rip), %rax
	movq	%rax, -32(%rbp)
	movl	$1, -24(%rbp)
	movl	$1, -20(%rbp)
	nop
	jmp	.L1446
.L1464:
	leaq	.LC118(%rip), %rax
	movq	%rax, -32(%rbp)
	movl	$2, -24(%rbp)
	movl	$1, -20(%rbp)
	nop
	jmp	.L1446
.L1463:
	leaq	.LC119(%rip), %rax
	movq	%rax, -32(%rbp)
	movl	$2, -24(%rbp)
	movl	$1, -20(%rbp)
	nop
	jmp	.L1446
.L1462:
	leaq	.LC120(%rip), %rax
	movq	%rax, -32(%rbp)
	movl	$3, -24(%rbp)
	movl	$1, -20(%rbp)
	nop
	jmp	.L1446
.L1461:
	leaq	.LC121(%rip), %rax
	movq	%rax, -32(%rbp)
	movl	$3, -24(%rbp)
	movl	$1, -20(%rbp)
	nop
	jmp	.L1446
.L1460:
	leaq	.LC122(%rip), %rax
	movq	%rax, -32(%rbp)
	movl	$3, -24(%rbp)
	movl	$1, -20(%rbp)
	nop
	jmp	.L1446
.L1459:
	leaq	.LC123(%rip), %rax
	movq	%rax, -32(%rbp)
	movl	$3, -24(%rbp)
	movl	$1, -20(%rbp)
	nop
	jmp	.L1446
.L1458:
	leaq	.LC124(%rip), %rax
	movq	%rax, -32(%rbp)
	movl	$3, -24(%rbp)
	movl	$1, -20(%rbp)
	nop
	jmp	.L1446
.L1457:
	leaq	.LC125(%rip), %rax
	movq	%rax, -32(%rbp)
	movl	$3, -24(%rbp)
	movl	$1, -20(%rbp)
	nop
	jmp	.L1446
.L1454:
	leaq	.LC126(%rip), %rax
	movq	%rax, -32(%rbp)
	movl	$3, -24(%rbp)
	movl	$1, -20(%rbp)
	nop
	jmp	.L1446
.L1453:
	leaq	.LC127(%rip), %rax
	movq	%rax, -32(%rbp)
	movl	$3, -24(%rbp)
	movl	$1, -20(%rbp)
	nop
	jmp	.L1446
.L1452:
	leaq	.LC126(%rip), %rax
	movq	%rax, -32(%rbp)
	movl	$3, -24(%rbp)
	movl	$1, -20(%rbp)
	nop
	jmp	.L1446
.L1451:
	leaq	.LC127(%rip), %rax
	movq	%rax, -32(%rbp)
	movl	$3, -24(%rbp)
	movl	$1, -20(%rbp)
	nop
	jmp	.L1446
.L1456:
	leaq	.LC126(%rip), %rax
	movq	%rax, -32(%rbp)
	movl	$3, -24(%rbp)
	movl	$1, -20(%rbp)
	nop
	jmp	.L1446
.L1455:
	leaq	.LC127(%rip), %rax
	movq	%rax, -32(%rbp)
	movl	$3, -24(%rbp)
	movl	$1, -20(%rbp)
	nop
	jmp	.L1446
.L1450:
	leaq	.LC128(%rip), %rax
	movq	%rax, -32(%rbp)
	movl	$1, -24(%rbp)
	movl	$1, -20(%rbp)
	nop
	jmp	.L1446
.L1449:
	leaq	.LC129(%rip), %rax
	movq	%rax, -32(%rbp)
	movl	$1, -24(%rbp)
	movl	$1, -20(%rbp)
	nop
	jmp	.L1446
.L1447:
	leaq	.LC130(%rip), %rax
	movq	%rax, -32(%rbp)
	movl	$2, -24(%rbp)
	movl	$1, -20(%rbp)
	nop
.L1446:
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdx
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	fabs32
	.hidden	fabs32
fabs32:
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %eax
	popq	%rbp
	ret
	.globl	fabs64
	.hidden	fabs64
fabs64:
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	popq	%rbp
	ret
	.globl	abs64
	.hidden	abs64
abs64:
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, %rdx
	negq	%rdx
	cmovnsq	%rdx, %rax
	popq	%rbp
	ret
	.section	.rodata, "a"
.LC131:
	.string	"-0"
.LC132:
	.string	"+INF"
.LC133:
	.string	"-INF"
.LC134:
	.string	"***ERROR!***"
	.text
	.globl	StrIntpData_process_str_intp_data
	.hidden	StrIntpData_process_str_intp_data
StrIntpData_process_str_intp_data:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$648, %rsp
	movq	%rdi, -648(%rbp)
	movq	%rsi, -656(%rbp)
	movq	-648(%rbp), %rcx
	movl	16(%rcx), %ecx
	movl	%ecx, -64(%rbp)
	movl	-64(%rbp), %ecx
	andl	$31, %ecx
	movl	%ecx, -68(%rbp)
	movl	-64(%rbp), %ecx
	shrl	$5, %ecx
	andl	$1, %ecx
	movl	%ecx, -72(%rbp)
	movl	-64(%rbp), %ecx
	andl	$128, %ecx
	testl	%ecx, %ecx
	setne	%cl
	movb	%cl, -73(%rbp)
	movl	-64(%rbp), %ecx
	shrl	$8, %ecx
	andl	$1, %ecx
	movl	%ecx, -80(%rbp)
	movl	-64(%rbp), %ecx
	shrl	$9, %ecx
	andl	$127, %ecx
	movl	%ecx, -84(%rbp)
	movl	-64(%rbp), %ecx
	andl	$65536, %ecx
	testl	%ecx, %ecx
	setne	%cl
	movb	%cl, -85(%rbp)
	movl	-64(%rbp), %ecx
	shrl	$17, %ecx
	movswl	%cx, %ecx
	andl	$1023, %ecx
	movl	%ecx, -92(%rbp)
	movl	-64(%rbp), %ecx
	shrl	$27, %ecx
	andl	$15, %ecx
	movl	%ecx, -20(%rbp)
	movl	-64(%rbp), %ecx
	shrl	$31, %ecx
	movb	%cl, -93(%rbp)
	cmpl	$0, -68(%rbp)
	je	.L1565
	cmpl	$0, -20(%rbp)
	jle	.L1477
	addl	$2, -20(%rbp)
.L1477:
	movb	$32, -21(%rbp)
	cmpb	$0, -93(%rbp)
	je	.L1478
	movb	$48, -21(%rbp)
.L1478:
	cmpl	$0, -92(%rbp)
	jle	.L1479
	movl	-92(%rbp), %ecx
	jmp	.L1480
.L1479:
	movl	$-1, %ecx
.L1480:
	movl	%ecx, -100(%rbp)
	cmpl	$127, -84(%rbp)
	je	.L1481
	movl	-84(%rbp), %ecx
	jmp	.L1482
.L1481:
	movl	$-1, %ecx
.L1482:
	movl	%ecx, -104(%rbp)
	cmpl	$1, -80(%rbp)
	sete	%cl
	movb	%cl, -105(%rbp)
	movzbl	-21(%rbp), %ecx
	movb	%cl, -160(%rbp)
	movl	-100(%rbp), %ecx
	movl	%ecx, -156(%rbp)
	movl	-104(%rbp), %ecx
	movl	%ecx, -152(%rbp)
	movb	$1, -148(%rbp)
	movzbl	-105(%rbp), %ecx
	movb	%cl, -147(%rbp)
	movl	$1, -144(%rbp)
	movzbl	-85(%rbp), %ecx
	movb	%cl, -140(%rbp)
	cmpb	$0, -93(%rbp)
	jne	.L1483
	cmpl	$0, -72(%rbp)
	je	.L1484
	cmpl	$1, -72(%rbp)
	je	.L1485
	jmp	.L1564
.L1484:
	movl	$1, -144(%rbp)
	jmp	.L1488
.L1485:
	movl	$0, -144(%rbp)
	jmp	.L1488
.L1564:
	movl	$1, -144(%rbp)
	jmp	.L1488
.L1483:
	movl	$0, -144(%rbp)
.L1488:
	cmpl	$16, -68(%rbp)
	jne	.L1489
	leaq	.LC30(%rip), %rax
	movq	%rax, -208(%rbp)
	movl	$0, -200(%rbp)
	movl	$1, -196(%rbp)
	cmpb	$0, -73(%rbp)
	je	.L1490
	movq	-648(%rbp), %rax
	movq	24(%rax), %rdx
	movq	32(%rax), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	string_to_upper
	movq	%rax, -208(%rbp)
	movq	%rdx, -200(%rbp)
	jmp	.L1491
.L1490:
	movq	-648(%rbp), %rax
	movq	24(%rax), %rdx
	movq	32(%rax), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	string_clone
	movq	%rax, -208(%rbp)
	movq	%rdx, -200(%rbp)
.L1491:
	cmpl	$0, -92(%rbp)
	jne	.L1492
	movq	-208(%rbp), %rcx
	movq	-200(%rbp), %rdx
	movq	-656(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	strings__Builder_write_string
	jmp	.L1493
.L1492:
	movq	-656(%rbp), %r8
	movq	-208(%rbp), %rdi
	movq	-200(%rbp), %rsi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rcx
	movq	-160(%rbp), %rax
	movq	-152(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-144(%rbp), %rax
	movq	%rax, 16(%rcx)
	movq	%r8, %rdx
	call	strconv__format_str_sb
	addq	$32, %rsp
.L1493:
	leaq	-208(%rbp), %rax
	movq	%rax, %rdi
	call	string_free
	jmp	.L1474
.L1489:
	cmpl	$3, -68(%rbp)
	je	.L1494
	cmpl	$5, -68(%rbp)
	je	.L1494
	cmpl	$7, -68(%rbp)
	je	.L1494
	cmpl	$9, -68(%rbp)
	jne	.L1495
.L1494:
	movq	-648(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -32(%rbp)
	cmpl	$3, -68(%rbp)
	jne	.L1496
	movq	-648(%rbp), %rax
	movzbl	24(%rax), %eax
	movsbq	%al, %rax
	movq	%rax, -32(%rbp)
	jmp	.L1497
.L1496:
	cmpl	$5, -68(%rbp)
	jne	.L1498
	movq	-648(%rbp), %rax
	movzwl	24(%rax), %eax
	movswq	%ax, %rax
	movq	%rax, -32(%rbp)
	jmp	.L1497
.L1498:
	cmpl	$7, -68(%rbp)
	jne	.L1497
	movq	-648(%rbp), %rax
	movl	24(%rax), %eax
	cltq
	movq	%rax, -32(%rbp)
.L1497:
	cmpl	$0, -20(%rbp)
	jne	.L1499
	cmpl	$0, -92(%rbp)
	jne	.L1500
	movq	-32(%rbp), %rax
	movq	%rax, %rdi
	call	i64_str
	movq	%rax, -224(%rbp)
	movq	%rdx, -216(%rbp)
	movq	-224(%rbp), %rcx
	movq	-216(%rbp), %rdx
	movq	-656(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	strings__Builder_write_string
	leaq	-224(%rbp), %rax
	movq	%rax, %rdi
	call	string_free
	jmp	.L1474
.L1500:
	cmpq	$0, -32(%rbp)
	jns	.L1501
	movb	$0, -148(%rbp)
.L1501:
	movq	-32(%rbp), %rax
	movq	%rax, %rdi
	call	abs64
	movq	%rax, %rdi
	movq	-656(%rbp), %rsi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rcx
	movq	-160(%rbp), %rax
	movq	-152(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-144(%rbp), %rax
	movq	%rax, 16(%rcx)
	call	strconv__format_dec_sb
	addq	$32, %rsp
	jmp	.L1474
.L1499:
	cmpl	$3, -20(%rbp)
	jne	.L1503
	movl	$2, -20(%rbp)
.L1503:
	movq	-32(%rbp), %rax
	movq	%rax, -40(%rbp)
	movb	$0, -41(%rbp)
	cmpq	$0, -32(%rbp)
	jns	.L1504
	cmpb	$32, -21(%rbp)
	je	.L1504
	movq	-32(%rbp), %rax
	negq	%rax
	movq	%rax, -40(%rbp)
	movb	$1, -41(%rbp)
.L1504:
	movl	-20(%rbp), %edx
	movq	-40(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	strconv__format_int
	movq	%rax, -240(%rbp)
	movq	%rdx, -232(%rbp)
	cmpb	$0, -73(%rbp)
	je	.L1505
	movq	-240(%rbp), %rax
	movq	-232(%rbp), %rdx
	movq	%rax, -256(%rbp)
	movq	%rdx, -248(%rbp)
	movq	-240(%rbp), %rdx
	movq	-232(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	string_to_upper
	movq	%rax, -240(%rbp)
	movq	%rdx, -232(%rbp)
	leaq	-256(%rbp), %rax
	movq	%rax, %rdi
	call	string_free
.L1505:
	cmpb	$0, -41(%rbp)
	je	.L1506
	movq	-656(%rbp), %rax
	movl	$45, %esi
	movq	%rax, %rdi
	call	strings__Builder_write_u8
	movl	-156(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -156(%rbp)
.L1506:
	cmpl	$0, -92(%rbp)
	jne	.L1507
	movq	-240(%rbp), %rcx
	movq	-232(%rbp), %rdx
	movq	-656(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	strings__Builder_write_string
	jmp	.L1508
.L1507:
	movq	-656(%rbp), %r8
	movq	-240(%rbp), %rdi
	movq	-232(%rbp), %rsi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rcx
	movq	-160(%rbp), %rax
	movq	-152(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-144(%rbp), %rax
	movq	%rax, 16(%rcx)
	movq	%r8, %rdx
	call	strconv__format_str_sb
	addq	$32, %rsp
.L1508:
	leaq	-240(%rbp), %rax
	movq	%rax, %rdi
	call	string_free
	jmp	.L1474
.L1495:
	cmpl	$2, -68(%rbp)
	je	.L1509
	cmpl	$4, -68(%rbp)
	je	.L1509
	cmpl	$6, -68(%rbp)
	je	.L1509
	cmpl	$8, -68(%rbp)
	jne	.L1510
.L1509:
	movq	-648(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -56(%rbp)
	cmpl	$2, -68(%rbp)
	jne	.L1511
	movq	-648(%rbp), %rax
	movzbl	24(%rax), %eax
	movzbl	%al, %eax
	movq	%rax, -56(%rbp)
	jmp	.L1512
.L1511:
	cmpl	$4, -68(%rbp)
	jne	.L1513
	movq	-648(%rbp), %rax
	movzwl	24(%rax), %eax
	movzwl	%ax, %eax
	movq	%rax, -56(%rbp)
	jmp	.L1512
.L1513:
	cmpl	$6, -68(%rbp)
	jne	.L1512
	movq	-648(%rbp), %rax
	movl	24(%rax), %eax
	movl	%eax, %eax
	movq	%rax, -56(%rbp)
.L1512:
	cmpl	$0, -20(%rbp)
	jne	.L1514
	cmpl	$0, -92(%rbp)
	jne	.L1515
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	u64_str
	movq	%rax, -272(%rbp)
	movq	%rdx, -264(%rbp)
	movq	-272(%rbp), %rcx
	movq	-264(%rbp), %rdx
	movq	-656(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	strings__Builder_write_string
	leaq	-272(%rbp), %rax
	movq	%rax, %rdi
	call	string_free
	jmp	.L1474
.L1515:
	movq	-656(%rbp), %rsi
	movq	-56(%rbp), %rdi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rcx
	movq	-160(%rbp), %rax
	movq	-152(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-144(%rbp), %rax
	movq	%rax, 16(%rcx)
	call	strconv__format_dec_sb
	addq	$32, %rsp
	jmp	.L1474
.L1514:
	cmpl	$3, -20(%rbp)
	jne	.L1517
	movl	$2, -20(%rbp)
.L1517:
	movl	-20(%rbp), %edx
	movq	-56(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	strconv__format_uint
	movq	%rax, -288(%rbp)
	movq	%rdx, -280(%rbp)
	cmpb	$0, -73(%rbp)
	je	.L1518
	movq	-288(%rbp), %rax
	movq	-280(%rbp), %rdx
	movq	%rax, -304(%rbp)
	movq	%rdx, -296(%rbp)
	movq	-288(%rbp), %rdx
	movq	-280(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	string_to_upper
	movq	%rax, -288(%rbp)
	movq	%rdx, -280(%rbp)
	leaq	-304(%rbp), %rax
	movq	%rax, %rdi
	call	string_free
.L1518:
	cmpl	$0, -92(%rbp)
	jne	.L1519
	movq	-288(%rbp), %rcx
	movq	-280(%rbp), %rdx
	movq	-656(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	strings__Builder_write_string
	jmp	.L1520
.L1519:
	movq	-656(%rbp), %r8
	movq	-288(%rbp), %rdi
	movq	-280(%rbp), %rsi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rcx
	movq	-160(%rbp), %rax
	movq	-152(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-144(%rbp), %rax
	movq	%rax, 16(%rcx)
	movq	%r8, %rdx
	call	strconv__format_str_sb
	addq	$32, %rsp
.L1520:
	leaq	-288(%rbp), %rax
	movq	%rax, %rdi
	call	string_free
	jmp	.L1474
.L1510:
	cmpl	$17, -68(%rbp)
	jne	.L1521
	movq	-648(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -136(%rbp)
	movl	$16, -20(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.L1522
	cmpl	$0, -92(%rbp)
	jne	.L1523
	movq	-136(%rbp), %rax
	movq	%rax, %rdi
	call	u64_str
	movq	%rax, -320(%rbp)
	movq	%rdx, -312(%rbp)
	movq	-320(%rbp), %rcx
	movq	-312(%rbp), %rdx
	movq	-656(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	strings__Builder_write_string
	leaq	-320(%rbp), %rax
	movq	%rax, %rdi
	call	string_free
	jmp	.L1474
.L1523:
	movq	-656(%rbp), %rsi
	movq	-136(%rbp), %rdi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rcx
	movq	-160(%rbp), %rax
	movq	-152(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-144(%rbp), %rax
	movq	%rax, 16(%rcx)
	call	strconv__format_dec_sb
	addq	$32, %rsp
	jmp	.L1474
.L1522:
	movl	-20(%rbp), %edx
	movq	-136(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	strconv__format_uint
	movq	%rax, -336(%rbp)
	movq	%rdx, -328(%rbp)
	cmpb	$0, -73(%rbp)
	je	.L1525
	movq	-336(%rbp), %rax
	movq	-328(%rbp), %rdx
	movq	%rax, -352(%rbp)
	movq	%rdx, -344(%rbp)
	movq	-336(%rbp), %rdx
	movq	-328(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	string_to_upper
	movq	%rax, -336(%rbp)
	movq	%rdx, -328(%rbp)
	leaq	-352(%rbp), %rax
	movq	%rax, %rdi
	call	string_free
.L1525:
	cmpl	$0, -92(%rbp)
	jne	.L1526
	movq	-336(%rbp), %rcx
	movq	-328(%rbp), %rdx
	movq	-656(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	strings__Builder_write_string
	jmp	.L1527
.L1526:
	movq	-656(%rbp), %r8
	movq	-336(%rbp), %rdi
	movq	-328(%rbp), %rsi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rcx
	movq	-160(%rbp), %rax
	movq	-152(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-144(%rbp), %rax
	movq	%rax, 16(%rcx)
	movq	%r8, %rdx
	call	strconv__format_str_sb
	addq	$32, %rsp
.L1527:
	leaq	-336(%rbp), %rax
	movq	%rax, %rdi
	call	string_free
	jmp	.L1474
.L1521:
	movb	$0, -57(%rbp)
	cmpl	$0, -92(%rbp)
	jne	.L1528
	cmpl	$127, -84(%rbp)
	jne	.L1528
	movl	$3, -152(%rbp)
	movb	$1, -57(%rbp)
.L1528:
	movl	-152(%rbp), %ecx
	testl	%ecx, %ecx
	jns	.L1529
	movl	$3, -152(%rbp)
.L1529:
	cmpl	$18, -68(%rbp)
	ja	.L1530
	movl	-68(%rbp), %ecx
	leaq	0(,%rcx,4), %rsi
	leaq	.L1532(%rip), %rcx
	movl	(%rsi,%rcx), %ecx
	movslq	%ecx, %rcx
	leaq	.L1532(%rip), %rsi
	addq	%rsi, %rcx
	jmp	*%rcx
	.section	.rodata, "a"
.L1532:
	.text
.L1534:
	cmpb	$0, -57(%rbp)
	jne	.L1567
	movq	-648(%rbp), %rax
	movl	24(%rax), %eax
	movl	$0, %edx
	cmpl	%edx, %eax
	jne	.L1542
	leaq	.LC39(%rip), %rax
	movq	%rax, -384(%rbp)
	movl	$1, -376(%rbp)
	movl	$1, -372(%rbp)
	movq	-656(%rbp), %r8
	movq	-384(%rbp), %rdi
	movq	-376(%rbp), %rsi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rcx
	movq	-160(%rbp), %rax
	movq	-152(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-144(%rbp), %rax
	movq	%rax, 16(%rcx)
	movq	%r8, %rdx
	call	strconv__format_str_sb
	addq	$32, %rsp
	leaq	-384(%rbp), %rax
	movq	%rax, %rdi
	call	string_free
	jmp	.L1474
.L1542:
	movq	-648(%rbp), %rax
	movl	24(%rax), %eax
	movl	$-2147483648, %edx
	cmpl	%edx, %eax
	jne	.L1544
	leaq	.LC131(%rip), %rax
	movq	%rax, -400(%rbp)
	movl	$2, -392(%rbp)
	movl	$1, -388(%rbp)
	movq	-656(%rbp), %r8
	movq	-400(%rbp), %rdi
	movq	-392(%rbp), %rsi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rcx
	movq	-160(%rbp), %rax
	movq	-152(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-144(%rbp), %rax
	movq	%rax, 16(%rcx)
	movq	%r8, %rdx
	call	strconv__format_str_sb
	addq	$32, %rsp
	leaq	-400(%rbp), %rax
	movq	%rax, %rdi
	call	string_free
	jmp	.L1474
.L1544:
	movq	-648(%rbp), %rax
	movl	24(%rax), %eax
	movl	$2139095040, %edx
	cmpl	%edx, %eax
	jne	.L1545
	leaq	.LC43(%rip), %rax
	movq	%rax, -416(%rbp)
	movl	$4, -408(%rbp)
	movl	$1, -404(%rbp)
	cmpb	$0, -73(%rbp)
	je	.L1546
	leaq	.LC132(%rip), %rax
	movq	%rax, -416(%rbp)
	movl	$4, -408(%rbp)
	movl	$1, -404(%rbp)
.L1546:
	movq	-656(%rbp), %r8
	movq	-416(%rbp), %rdi
	movq	-408(%rbp), %rsi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rcx
	movq	-160(%rbp), %rax
	movq	-152(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-144(%rbp), %rax
	movq	%rax, 16(%rcx)
	movq	%r8, %rdx
	call	strconv__format_str_sb
	addq	$32, %rsp
	leaq	-416(%rbp), %rax
	movq	%rax, %rdi
	call	string_free
.L1545:
	movq	-648(%rbp), %rax
	movl	24(%rax), %eax
	movl	$-8388608, %edx
	cmpl	%edx, %eax
	jne	.L1547
	leaq	.LC42(%rip), %rax
	movq	%rax, -432(%rbp)
	movl	$4, -424(%rbp)
	movl	$1, -420(%rbp)
	cmpb	$0, -73(%rbp)
	je	.L1548
	leaq	.LC133(%rip), %rax
	movq	%rax, -432(%rbp)
	movl	$4, -424(%rbp)
	movl	$1, -420(%rbp)
.L1548:
	movq	-656(%rbp), %r8
	movq	-432(%rbp), %rdi
	movq	-424(%rbp), %rsi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rcx
	movq	-160(%rbp), %rax
	movq	-152(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-144(%rbp), %rax
	movq	%rax, 16(%rcx)
	movq	%r8, %rdx
	call	strconv__format_str_sb
	addq	$32, %rsp
	leaq	-432(%rbp), %rax
	movq	%rax, %rdi
	call	string_free
.L1547:
	movq	-648(%rbp), %rax
	movl	24(%rax), %eax
	movl	%eax, %edi
	call	fabs32
	movl	%eax, -124(%rbp)
	cmpl	$999998, -124(%rbp)
	ja	.L1549
	movq	-648(%rbp), %rax
	movl	24(%rax), %eax
	movl	%eax, %esi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rcx
	movq	-160(%rbp), %rax
	movq	-152(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-144(%rbp), %rax
	movq	%rax, 16(%rcx)
	movq	%rsi, %rdi
	call	strconv__format_fl
	addq	$32, %rsp
	movq	%rax, -448(%rbp)
	movq	%rdx, -440(%rbp)
	cmpb	$0, -73(%rbp)
	je	.L1550
	movq	-448(%rbp), %rax
	movq	-440(%rbp), %rdx
	movq	%rax, -464(%rbp)
	movq	%rdx, -456(%rbp)
	movq	-448(%rbp), %rdx
	movq	-440(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	string_to_upper
	movq	%rax, -448(%rbp)
	movq	%rdx, -440(%rbp)
	leaq	-464(%rbp), %rax
	movq	%rax, %rdi
	call	string_free
.L1550:
	movq	-448(%rbp), %rcx
	movq	-440(%rbp), %rdx
	movq	-656(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	strings__Builder_write_string
	leaq	-448(%rbp), %rax
	movq	%rax, %rdi
	call	string_free
	jmp	.L1474
.L1549:
	movq	-648(%rbp), %rax
	movl	24(%rax), %eax
	movl	%eax, %esi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rcx
	movq	-160(%rbp), %rax
	movq	-152(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-144(%rbp), %rax
	movq	%rax, 16(%rcx)
	movq	%rsi, %rdi
	call	strconv__format_es
	addq	$32, %rsp
	movq	%rax, -368(%rbp)
	movq	%rdx, -360(%rbp)
	cmpb	$0, -73(%rbp)
	je	.L1551
	movq	-368(%rbp), %rax
	movq	-360(%rbp), %rdx
	movq	%rax, -480(%rbp)
	movq	%rdx, -472(%rbp)
	movq	-368(%rbp), %rdx
	movq	-360(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	string_to_upper
	movq	%rax, -368(%rbp)
	movq	%rdx, -360(%rbp)
	leaq	-480(%rbp), %rax
	movq	%rax, %rdi
	call	string_free
.L1551:
	movq	-368(%rbp), %rcx
	movq	-360(%rbp), %rdx
	movq	-656(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	strings__Builder_write_string
	leaq	-368(%rbp), %rax
	movq	%rax, %rdi
	call	string_free
	jmp	.L1567
.L1533:
	cmpb	$0, -57(%rbp)
	jne	.L1568
	movq	-648(%rbp), %rax
	movq	24(%rax), %rax
	movl	$0, %edx
	cmpq	%rdx, %rax
	jne	.L1553
	leaq	.LC39(%rip), %rax
	movq	%rax, -512(%rbp)
	movl	$1, -504(%rbp)
	movl	$1, -500(%rbp)
	movq	-656(%rbp), %r8
	movq	-512(%rbp), %rdi
	movq	-504(%rbp), %rsi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rcx
	movq	-160(%rbp), %rax
	movq	-152(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-144(%rbp), %rax
	movq	%rax, 16(%rcx)
	movq	%r8, %rdx
	call	strconv__format_str_sb
	addq	$32, %rsp
	leaq	-512(%rbp), %rax
	movq	%rax, %rdi
	call	string_free
	jmp	.L1474
.L1553:
	movq	-648(%rbp), %rax
	movq	24(%rax), %rdx
	movabsq	$-9223372036854775808, %rax
	cmpq	%rax, %rdx
	jne	.L1555
	leaq	.LC131(%rip), %rax
	movq	%rax, -528(%rbp)
	movl	$2, -520(%rbp)
	movl	$1, -516(%rbp)
	movq	-656(%rbp), %r8
	movq	-528(%rbp), %rdi
	movq	-520(%rbp), %rsi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rcx
	movq	-160(%rbp), %rax
	movq	-152(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-144(%rbp), %rax
	movq	%rax, 16(%rcx)
	movq	%r8, %rdx
	call	strconv__format_str_sb
	addq	$32, %rsp
	leaq	-528(%rbp), %rax
	movq	%rax, %rdi
	call	string_free
	jmp	.L1474
.L1555:
	movq	-648(%rbp), %rax
	movq	24(%rax), %rdx
	movabsq	$9218868437227405312, %rax
	cmpq	%rax, %rdx
	jne	.L1556
	leaq	.LC43(%rip), %rax
	movq	%rax, -544(%rbp)
	movl	$4, -536(%rbp)
	movl	$1, -532(%rbp)
	cmpb	$0, -73(%rbp)
	je	.L1557
	leaq	.LC132(%rip), %rax
	movq	%rax, -544(%rbp)
	movl	$4, -536(%rbp)
	movl	$1, -532(%rbp)
.L1557:
	movq	-656(%rbp), %r8
	movq	-544(%rbp), %rdi
	movq	-536(%rbp), %rsi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rcx
	movq	-160(%rbp), %rax
	movq	-152(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-144(%rbp), %rax
	movq	%rax, 16(%rcx)
	movq	%r8, %rdx
	call	strconv__format_str_sb
	addq	$32, %rsp
	leaq	-544(%rbp), %rax
	movq	%rax, %rdi
	call	string_free
.L1556:
	movq	-648(%rbp), %rax
	movq	24(%rax), %rdx
	movabsq	$-4503599627370496, %rax
	cmpq	%rax, %rdx
	jne	.L1558
	leaq	.LC42(%rip), %rax
	movq	%rax, -560(%rbp)
	movl	$4, -552(%rbp)
	movl	$1, -548(%rbp)
	cmpb	$0, -73(%rbp)
	je	.L1559
	leaq	.LC133(%rip), %rax
	movq	%rax, -560(%rbp)
	movl	$4, -552(%rbp)
	movl	$1, -548(%rbp)
.L1559:
	movq	-656(%rbp), %r8
	movq	-560(%rbp), %rdi
	movq	-552(%rbp), %rsi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rcx
	movq	-160(%rbp), %rax
	movq	-152(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-144(%rbp), %rax
	movq	%rax, 16(%rcx)
	movq	%r8, %rdx
	call	strconv__format_str_sb
	addq	$32, %rsp
	leaq	-560(%rbp), %rax
	movq	%rax, %rdi
	call	string_free
.L1558:
	movq	-648(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, %rdi
	call	fabs64
	movq	%rax, -120(%rbp)
	cmpq	$999998, -120(%rbp)
	ja	.L1560
	movq	-648(%rbp), %rax
	movq	24(%rax), %rsi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rcx
	movq	-160(%rbp), %rax
	movq	-152(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-144(%rbp), %rax
	movq	%rax, 16(%rcx)
	movq	%rsi, %rdi
	call	strconv__format_fl
	addq	$32, %rsp
	movq	%rax, -576(%rbp)
	movq	%rdx, -568(%rbp)
	cmpb	$0, -73(%rbp)
	je	.L1561
	movq	-576(%rbp), %rax
	movq	-568(%rbp), %rdx
	movq	%rax, -592(%rbp)
	movq	%rdx, -584(%rbp)
	movq	-576(%rbp), %rdx
	movq	-568(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	string_to_upper
	movq	%rax, -576(%rbp)
	movq	%rdx, -568(%rbp)
	leaq	-592(%rbp), %rax
	movq	%rax, %rdi
	call	string_free
.L1561:
	movq	-576(%rbp), %rcx
	movq	-568(%rbp), %rdx
	movq	-656(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	strings__Builder_write_string
	leaq	-576(%rbp), %rax
	movq	%rax, %rdi
	call	string_free
	jmp	.L1474
.L1560:
	movq	-648(%rbp), %rax
	movq	24(%rax), %rsi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rcx
	movq	-160(%rbp), %rax
	movq	-152(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-144(%rbp), %rax
	movq	%rax, 16(%rcx)
	movq	%rsi, %rdi
	call	strconv__format_es
	addq	$32, %rsp
	movq	%rax, -496(%rbp)
	movq	%rdx, -488(%rbp)
	cmpb	$0, -73(%rbp)
	je	.L1562
	movq	-496(%rbp), %rax
	movq	-488(%rbp), %rdx
	movq	%rax, -608(%rbp)
	movq	%rdx, -600(%rbp)
	movq	-496(%rbp), %rdx
	movq	-488(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	string_to_upper
	movq	%rax, -496(%rbp)
	movq	%rdx, -488(%rbp)
	leaq	-608(%rbp), %rax
	movq	%rax, %rdi
	call	string_free
.L1562:
	movq	-496(%rbp), %rcx
	movq	-488(%rbp), %rdx
	movq	-656(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	strings__Builder_write_string
	leaq	-496(%rbp), %rax
	movq	%rax, %rdi
	call	string_free
	jmp	.L1568
.L1539:
	movq	-648(%rbp), %rax
	movl	24(%rax), %eax
	movl	%eax, %edi
	call	utf32_to_str
	movq	%rax, -624(%rbp)
	movq	%rdx, -616(%rbp)
	movq	-624(%rbp), %rcx
	movq	-616(%rbp), %rdx
	movq	-656(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	strings__Builder_write_string
	leaq	-624(%rbp), %rax
	movq	%rax, %rdi
	call	string_free
	jmp	.L1474
.L1531:
	movq	-648(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, %rdi
	call	u64_hex
	movq	%rax, -640(%rbp)
	movq	%rdx, -632(%rbp)
	movq	-640(%rbp), %rcx
	movq	-632(%rbp), %rdx
	movq	-656(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	strings__Builder_write_string
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	string_free
	jmp	.L1474
.L1530:
	leaq	.LC134(%rip), %rax
	movq	%rdx, %rsi
	movabsq	$-4294967296, %rcx
	andq	%rsi, %rcx
	orq	$12, %rcx
	movq	%rcx, %rdx
	movq	%rdx, %rcx
	movl	%ecx, %esi
	movabsq	$4294967296, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	-656(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	strings__Builder_write_string
	nop
	jmp	.L1474
.L1565:
	nop
	jmp	.L1474
.L1566:
	nop
	jmp	.L1474
.L1567:
	nop
	jmp	.L1474
.L1568:
	nop
.L1474:
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	str_intp
str_intp:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$80, %rsp
	movl	%edi, -68(%rbp)
	movq	%rsi, -80(%rbp)
	leaq	-48(%rbp), %rax
	movl	$256, %esi
	movq	%rax, %rdi
	call	strings__new_builder
	movl	$0, -4(%rbp)
	jmp	.L1570
.L1573:
	movl	-4(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	salq	$2, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-80(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	testl	%eax, %eax
	je	.L1571
	movq	-16(%rbp), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rdx
	leaq	-48(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	strings__Builder_write_string
.L1571:
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	testl	%eax, %eax
	je	.L1572
	leaq	-48(%rbp), %rdx
	movq	-16(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	StrIntpData_process_str_intp_data
.L1572:
	addl	$1, -4(%rbp)
.L1570:
	movl	-4(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jl	.L1573
	leaq	-48(%rbp), %rax
	movq	%rax, %rdi
	call	strings__Builder_str
	movq	%rax, -64(%rbp)
	movq	%rdx, -56(%rbp)
	leaq	-48(%rbp), %rax
	movq	%rax, %rdi
	call	strings__Builder_free
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	leave
	ret
	.globl	utf32_to_str
utf32_to_str:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$56, %rsp
	movl	%edi, -52(%rbp)
	movl	$5, %edi
	call	malloc_noscan
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rdx
	movl	-52(%rbp), %eax
	movq	%rdx, %rsi
	movl	%eax, %edi
	call	utf32_to_str_no_malloc
	movq	%rax, -48(%rbp)
	movq	%rdx, -40(%rbp)
	movl	-40(%rbp), %eax
	testl	%eax, %eax
	jne	.L1576
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	_v_free
.L1576:
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	utf32_to_str_no_malloc
utf32_to_str_no_malloc:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r13
	pushq	%r12
	subq	$32, %rsp
	movl	%edi, -36(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rdx
	movl	-36(%rbp), %eax
	movq	%rdx, %rsi
	movl	%eax, %edi
	call	utf32_decode_to_buffer
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.L1579
	leaq	.LC30(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	jmp	.L1580
.L1579:
	movl	-20(%rbp), %eax
	movslq	%eax, %rdx
	movq	-48(%rbp), %rax
	addq	%rdx, %rax
	movb	$0, (%rax)
	movl	-20(%rbp), %edx
	movq	-48(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	tos
	movq	%rax, %r12
	movq	%rdx, %r13
.L1580:
	movq	%r12, %rax
	movq	%r13, %rdx
	addq	$32, %rsp
	popq	%r12
	popq	%r13
	popq	%rbp
	ret
	.globl	utf32_decode_to_buffer
utf32_decode_to_buffer:
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edi, -20(%rbp)
	movq	%rsi, -32(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, -16(%rbp)
	cmpl	$127, -4(%rbp)
	jg	.L1583
	movl	-4(%rbp), %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rax
	movb	%dl, (%rax)
	movl	$1, %eax
	jmp	.L1584
.L1583:
	cmpl	$2047, -4(%rbp)
	jg	.L1585
	movl	-4(%rbp), %eax
	sarl	$6, %eax
	orl	$-64, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rax
	movb	%dl, (%rax)
	movl	-4(%rbp), %eax
	andl	$63, %eax
	orl	$-128, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movb	%dl, (%rax)
	movl	$2, %eax
	jmp	.L1584
.L1585:
	cmpl	$65535, -4(%rbp)
	jg	.L1586
	movl	-4(%rbp), %eax
	sarl	$12, %eax
	orl	$-32, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rax
	movb	%dl, (%rax)
	movl	-4(%rbp), %eax
	sarl	$6, %eax
	andl	$63, %eax
	orl	$-128, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movb	%dl, (%rax)
	movl	-4(%rbp), %eax
	andl	$63, %eax
	orl	$-128, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rax
	addq	$2, %rax
	movb	%dl, (%rax)
	movl	$3, %eax
	jmp	.L1584
.L1586:
	cmpl	$1114111, -4(%rbp)
	jg	.L1587
	movl	-4(%rbp), %eax
	sarl	$18, %eax
	orl	$-16, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rax
	movb	%dl, (%rax)
	movl	-4(%rbp), %eax
	sarl	$12, %eax
	andl	$63, %eax
	orl	$-128, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movb	%dl, (%rax)
	movl	-4(%rbp), %eax
	sarl	$6, %eax
	andl	$63, %eax
	orl	$-128, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rax
	addq	$2, %rax
	movb	%dl, (%rax)
	movl	-4(%rbp), %eax
	andl	$63, %eax
	orl	$-128, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rax
	addq	$3, %rax
	movb	%dl, (%rax)
	movl	$4, %eax
	jmp	.L1584
.L1587:
	movl	$0, %eax
.L1584:
	popq	%rbp
	ret
	.globl	utf8_str_visible_length
utf8_str_visible_length:
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movq	%rcx, %rdx
	movq	%rax, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movl	$0, -4(%rbp)
	movl	$1, -12(%rbp)
	movl	$0, -8(%rbp)
	jmp	.L1589
.L1614:
	movq	-64(%rbp), %rdx
	movl	-8(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	movb	%al, -13(%rbp)
	movq	-64(%rbp), %rdx
	movl	-8(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	shrb	$3, %al
	movzbl	%al, %eax
	andl	$30, %eax
	movl	$-452984832, %edx
	movl	%eax, %ecx
	shrl	%cl, %edx
	movl	%edx, %eax
	andl	$3, %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-8(%rbp), %edx
	movl	-12(%rbp), %eax
	addl	%eax, %edx
	movl	-56(%rbp), %eax
	cmpl	%eax, %edx
	jle	.L1590
	movl	-4(%rbp), %eax
	jmp	.L1591
.L1590:
	addl	$1, -4(%rbp)
	cmpl	$1, -12(%rbp)
	je	.L1615
	cmpl	$2, -12(%rbp)
	jne	.L1594
	movzbl	-13(%rbp), %eax
	sall	$8, %eax
	movl	%eax, %ecx
	movq	-64(%rbp), %rax
	movl	-8(%rbp), %edx
	movslq	%edx, %rdx
	addq	$1, %rdx
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	orl	%ecx, %eax
	cltq
	movq	%rax, -40(%rbp)
	cmpq	$52351, -40(%rbp)
	jbe	.L1593
	cmpq	$52655, -40(%rbp)
	ja	.L1593
	subl	$1, -4(%rbp)
	jmp	.L1593
.L1594:
	cmpl	$3, -12(%rbp)
	jne	.L1595
	movzbl	-13(%rbp), %eax
	sall	$16, %eax
	movl	%eax, %ecx
	movq	-64(%rbp), %rax
	movl	-8(%rbp), %edx
	movslq	%edx, %rdx
	addq	$1, %rdx
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	sall	$8, %eax
	movl	%eax, %esi
	movq	-64(%rbp), %rax
	movl	-8(%rbp), %edx
	movslq	%edx, %rdx
	addq	$2, %rdx
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	orl	%esi, %eax
	orl	%ecx, %eax
	movl	%eax, %eax
	movq	%rax, -32(%rbp)
	cmpq	$14789295, -32(%rbp)
	jbe	.L1596
	cmpq	$14789759, -32(%rbp)
	jbe	.L1597
.L1596:
	cmpq	$14792575, -32(%rbp)
	jbe	.L1598
	cmpq	$14792831, -32(%rbp)
	jbe	.L1597
.L1598:
	cmpq	$14844815, -32(%rbp)
	jbe	.L1599
	cmpq	$14845055, -32(%rbp)
	jbe	.L1597
.L1599:
	cmpq	$15710367, -32(%rbp)
	jbe	.L1600
	cmpq	$15710383, -32(%rbp)
	ja	.L1600
.L1597:
	subl	$1, -4(%rbp)
	jmp	.L1593
.L1600:
	cmpq	$14779519, -32(%rbp)
	jbe	.L1602
	cmpq	$14779807, -32(%rbp)
	jbe	.L1603
.L1602:
	cmpq	$14858879, -32(%rbp)
	jbe	.L1604
	cmpq	$14860181, -32(%rbp)
	jbe	.L1603
.L1604:
	cmpq	$14909567, -32(%rbp)
	jbe	.L1605
	cmpq	$14989183, -32(%rbp)
	jbe	.L1603
.L1605:
	cmpq	$14989439, -32(%rbp)
	jbe	.L1606
	cmpq	$15368319, -32(%rbp)
	jbe	.L1603
.L1606:
	cmpq	$15377823, -32(%rbp)
	jbe	.L1607
	cmpq	$15378335, -32(%rbp)
	jbe	.L1603
.L1607:
	cmpq	$15380607, -32(%rbp)
	jbe	.L1608
	cmpq	$15572655, -32(%rbp)
	jbe	.L1603
.L1608:
	cmpq	$15705215, -32(%rbp)
	jbe	.L1609
	cmpq	$15707263, -32(%rbp)
	jbe	.L1603
.L1609:
	cmpq	$15710391, -32(%rbp)
	jbe	.L1593
	cmpq	$15710639, -32(%rbp)
	ja	.L1593
.L1603:
	addl	$1, -4(%rbp)
	jmp	.L1593
.L1595:
	cmpl	$4, -12(%rbp)
	jne	.L1593
	movzbl	-13(%rbp), %eax
	sall	$24, %eax
	movl	%eax, %ecx
	movq	-64(%rbp), %rax
	movl	-8(%rbp), %edx
	movslq	%edx, %rdx
	addq	$1, %rdx
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	sall	$16, %eax
	movl	%eax, %esi
	movq	-64(%rbp), %rax
	movl	-8(%rbp), %edx
	movslq	%edx, %rdx
	addq	$2, %rdx
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	sall	$8, %eax
	orl	%eax, %esi
	movq	-64(%rbp), %rax
	movl	-8(%rbp), %edx
	movslq	%edx, %rdx
	addq	$3, %rdx
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	orl	%esi, %eax
	orl	%ecx, %eax
	movl	%eax, %eax
	movq	%rax, -24(%rbp)
	cmpq	$262113407, -24(%rbp)
	jbe	.L1610
	movl	$4036987535, %eax
	cmpq	-24(%rbp), %rax
	jnb	.L1611
.L1610:
	movl	$4036988031, %eax
	cmpq	-24(%rbp), %rax
	jnb	.L1612
	movl	$4036992144, %eax
	cmpq	-24(%rbp), %rax
	jnb	.L1611
.L1612:
	movl	$4036994191, %eax
	cmpq	-24(%rbp), %rax
	jnb	.L1613
	movl	$4036994991, %eax
	cmpq	-24(%rbp), %rax
	jnb	.L1611
.L1613:
	movl	$4037050495, %eax
	cmpq	-24(%rbp), %rax
	jnb	.L1593
	movl	$4051730559, %eax
	cmpq	-24(%rbp), %rax
	jb	.L1593
.L1611:
	addl	$1, -4(%rbp)
	jmp	.L1593
.L1615:
	nop
.L1593:
	movl	-12(%rbp), %eax
	addl	%eax, -8(%rbp)
.L1589:
	movl	-56(%rbp), %eax
	cmpl	%eax, -8(%rbp)
	jl	.L1614
	movl	-4(%rbp), %eax
.L1591:
	popq	%rbp
	ret
	.globl	ArrayFlags_has
ArrayFlags_has:
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, %edx
	movl	-12(%rbp), %eax
	andl	%edx, %eax
	testl	%eax, %eax
	setne	%al
	popq	%rbp
	ret
	.globl	ArrayFlags_all
ArrayFlags_all:
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, %edx
	movl	-12(%rbp), %eax
	andl	%eax, %edx
	movl	-12(%rbp), %eax
	cmpl	%eax, %edx
	sete	%al
	popq	%rbp
	ret
	.globl	ArrayFlags_set
ArrayFlags_set:
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, %edx
	movl	-12(%rbp), %eax
	orl	%edx, %eax
	movl	%eax, %edx
	movq	-8(%rbp), %rax
	movl	%edx, (%rax)
	nop
	popq	%rbp
	ret
	.globl	ArrayFlags_clear
ArrayFlags_clear:
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, %edx
	movl	-12(%rbp), %eax
	notl	%eax
	andl	%edx, %eax
	movl	%eax, %edx
	movq	-8(%rbp), %rax
	movl	%edx, (%rax)
	nop
	popq	%rbp
	ret
	.section	.rodata, "a"
.LC135:
	.string	"Unknown flag `"
	.text
	.globl	flag__UnknownFlagError_msg
	.hidden	flag__UnknownFlagError_msg
flag__UnknownFlagError_msg:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$120, %rsp
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movq	%rcx, %rdx
	movq	%rax, -128(%rbp)
	movq	%rdx, -120(%rbp)
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -112(%rbp)
	movaps	%xmm0, -96(%rbp)
	movaps	%xmm0, -80(%rbp)
	movaps	%xmm0, -64(%rbp)
	movaps	%xmm0, -48(%rbp)
	leaq	.LC135(%rip), %rax
	movq	%rax, -112(%rbp)
	movl	$14, -104(%rbp)
	movl	$1, -100(%rbp)
	movl	$65040, -96(%rbp)
	movq	-128(%rbp), %rax
	movq	-120(%rbp), %rdx
	movq	%rax, -88(%rbp)
	movq	%rdx, -80(%rbp)
	leaq	.LC85(%rip), %rax
	movq	%rax, -72(%rbp)
	movl	$1, -64(%rbp)
	movl	$1, -60(%rbp)
	leaq	-112(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	movq	%rax, -32(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdx
	movq	-8(%rbp), %rbx
	leave
	ret
	.section	.rodata, "a"
.LC136:
	.string	"Expected no arguments, but got "
.LC137:
	.string	"Expected at most "
.LC138:
	.string	" arguments, but got "
.LC139:
	.string	"Expected at least "
	.text
	.globl	flag__ArgsCountError_msg
	.hidden	flag__ArgsCountError_msg
flag__ArgsCountError_msg:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$200, %rsp
	movq	%rdi, -200(%rbp)
	movl	-196(%rbp), %eax
	testl	%eax, %eax
	jne	.L1625
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -192(%rbp)
	movaps	%xmm0, -176(%rbp)
	movaps	%xmm0, -160(%rbp)
	movaps	%xmm0, -144(%rbp)
	movaps	%xmm0, -128(%rbp)
	leaq	.LC136(%rip), %rax
	movq	%rax, -192(%rbp)
	movl	$31, -184(%rbp)
	movl	$1, -180(%rbp)
	movl	$65031, -176(%rbp)
	movl	-200(%rbp), %eax
	movl	%eax, -168(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -152(%rbp)
	movl	$1, -140(%rbp)
	leaq	-192(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	movq	%rax, -32(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdx
	jmp	.L1626
.L1625:
	movl	-200(%rbp), %edx
	movl	-196(%rbp), %eax
	cmpl	%eax, %edx
	jle	.L1627
	leaq	-192(%rbp), %rdx
	movl	$0, %eax
	movl	$15, %ecx
	movq	%rdx, %rdi
	rep stosq
	leaq	.LC137(%rip), %rax
	movq	%rax, -192(%rbp)
	movl	$17, -184(%rbp)
	movl	$1, -180(%rbp)
	movl	$65031, -176(%rbp)
	movl	-196(%rbp), %eax
	movl	%eax, -168(%rbp)
	leaq	.LC138(%rip), %rax
	movq	%rax, -152(%rbp)
	movl	$20, -144(%rbp)
	movl	$1, -140(%rbp)
	movl	$65031, -136(%rbp)
	movl	-200(%rbp), %eax
	movl	%eax, -128(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -112(%rbp)
	movl	$1, -100(%rbp)
	leaq	-192(%rbp), %rax
	movq	%rax, %rsi
	movl	$3, %edi
	call	str_intp
	movq	%rax, -48(%rbp)
	movq	%rdx, -40(%rbp)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	jmp	.L1626
.L1627:
	leaq	-192(%rbp), %rdx
	movl	$0, %eax
	movl	$15, %ecx
	movq	%rdx, %rdi
	rep stosq
	leaq	.LC139(%rip), %rax
	movq	%rax, -192(%rbp)
	movl	$18, -184(%rbp)
	movl	$1, -180(%rbp)
	movl	$65031, -176(%rbp)
	movl	-196(%rbp), %eax
	movl	%eax, -168(%rbp)
	leaq	.LC138(%rip), %rax
	movq	%rax, -152(%rbp)
	movl	$20, -144(%rbp)
	movl	$1, -140(%rbp)
	movl	$65031, -136(%rbp)
	movl	-200(%rbp), %eax
	movl	%eax, -128(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -112(%rbp)
	movl	$1, -100(%rbp)
	leaq	-192(%rbp), %rax
	movq	%rax, %rsi
	movl	$3, %edi
	call	str_intp
	movq	%rax, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
.L1626:
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	flag__Flag_free
	.hidden	flag__Flag_free
flag__Flag_free:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	string_free
	movq	-8(%rbp), %rax
	addq	$24, %rax
	movq	%rax, %rdi
	call	string_free
	movq	-8(%rbp), %rax
	addq	$40, %rax
	movq	%rax, %rdi
	call	string_free
	nop
	leave
	ret
	.section	.rodata, "a"
.LC140:
	.string	"            desc: "
.LC141:
	.string	"            usag: "
.LC142:
	.string	"\n"
.LC143:
	.string	"            abbr: `"
.LC144:
	.string	"`\n"
.LC145:
	.string	"            name: "
.LC146:
	.string	"    flag:\n"
	.text
	.globl	flag__Flag_str
flag__Flag_str:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$376, %rsp
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -384(%rbp)
	movaps	%xmm0, -368(%rbp)
	movaps	%xmm0, -352(%rbp)
	movaps	%xmm0, -336(%rbp)
	movaps	%xmm0, -320(%rbp)
	leaq	.LC140(%rip), %rax
	movq	%rax, -384(%rbp)
	movl	$18, -376(%rbp)
	movl	$1, -372(%rbp)
	movl	$65040, -368(%rbp)
	movq	56(%rbp), %rax
	movq	64(%rbp), %rdx
	movq	%rax, -360(%rbp)
	movq	%rdx, -352(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -344(%rbp)
	movl	$1, -332(%rbp)
	leaq	-384(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	movq	%rax, %r14
	movq	%rdx, %r15
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -304(%rbp)
	movaps	%xmm0, -288(%rbp)
	movaps	%xmm0, -272(%rbp)
	movaps	%xmm0, -256(%rbp)
	movaps	%xmm0, -240(%rbp)
	leaq	.LC141(%rip), %rax
	movq	%rax, -304(%rbp)
	movl	$18, -296(%rbp)
	movl	$1, -292(%rbp)
	movl	$65040, -288(%rbp)
	movq	40(%rbp), %rax
	movq	48(%rbp), %rdx
	movq	%rax, -280(%rbp)
	movq	%rdx, -272(%rbp)
	leaq	.LC142(%rip), %rax
	movq	%rax, -264(%rbp)
	movl	$1, -256(%rbp)
	movl	$1, -252(%rbp)
	leaq	-304(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	movq	%rax, -416(%rbp)
	movq	%rdx, -408(%rbp)
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -224(%rbp)
	movaps	%xmm0, -208(%rbp)
	movaps	%xmm0, -192(%rbp)
	movaps	%xmm0, -176(%rbp)
	movaps	%xmm0, -160(%rbp)
	leaq	.LC143(%rip), %rax
	movq	%rax, -224(%rbp)
	movl	$19, -216(%rbp)
	movl	$1, -212(%rbp)
	movl	$65040, -208(%rbp)
	movzbl	32(%rbp), %eax
	movzbl	%al, %eax
	movl	%eax, %edi
	call	u8_ascii_str
	movq	%rax, -200(%rbp)
	movq	%rdx, -192(%rbp)
	leaq	.LC144(%rip), %rax
	movq	%rax, -184(%rbp)
	movl	$2, -176(%rbp)
	movl	$1, -172(%rbp)
	leaq	-224(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	movq	%rax, -400(%rbp)
	movq	%rdx, -392(%rbp)
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -144(%rbp)
	movaps	%xmm0, -128(%rbp)
	movaps	%xmm0, -112(%rbp)
	movaps	%xmm0, -96(%rbp)
	movaps	%xmm0, -80(%rbp)
	leaq	.LC145(%rip), %rax
	movq	%rax, -144(%rbp)
	movl	$18, -136(%rbp)
	movl	$1, -132(%rbp)
	movl	$65040, -128(%rbp)
	movq	16(%rbp), %rax
	movq	24(%rbp), %rdx
	movq	%rax, -120(%rbp)
	movq	%rdx, -112(%rbp)
	leaq	.LC142(%rip), %rax
	movq	%rax, -104(%rbp)
	movl	$1, -96(%rbp)
	movl	$1, -92(%rbp)
	leaq	-144(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	leaq	.LC146(%rip), %r12
	movq	%r13, %rsi
	movabsq	$-4294967296, %rcx
	andq	%rsi, %rcx
	orq	$10, %rcx
	movq	%rcx, %r13
	movq	%r13, %rcx
	movl	%ecx, %esi
	movabsq	$4294967296, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %r13
	movq	%r12, %rsi
	movq	%r13, %rdi
	movq	%r12, %rcx
	movq	%r13, %rbx
	movq	%rsi, %rdi
	movq	%rbx, %rsi
	movq	%rdx, %rcx
	movq	%rax, %rdx
	call	string__plus
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %rsi
	movq	%rdx, %rax
	movq	-400(%rbp), %rdx
	movq	-392(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__plus
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %rsi
	movq	%rdx, %rax
	movq	-416(%rbp), %rdx
	movq	-408(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__plus
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %rsi
	movq	%rdx, %rax
	movq	%r14, %rdx
	movq	%r15, %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__plus
	movq	%rax, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	addq	$376, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
	.section	.rodata, "a"
.LC147:
	.string	"\n  []Flag = ["
.LC148:
	.string	"  ]"
	.text
	.globl	Array_flag__Flag_str
Array_flag__Flag_str:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$200, %rsp
	leaq	-96(%rbp), %rax
	movl	$0, %r8d
	movl	$16, %ecx
	movl	$0, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array_with_default
	leaq	.LC147(%rip), %rax
	movq	%rax, -240(%rbp)
	movq	-232(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$13, %rax
	movq	%rax, -232(%rbp)
	movq	-232(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -232(%rbp)
	movq	-240(%rbp), %rax
	movq	-232(%rbp), %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	string_clone
	movq	%rax, -112(%rbp)
	movq	%rdx, -104(%rbp)
	leaq	-112(%rbp), %rdx
	leaq	-96(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	array_push
	movl	$0, -52(%rbp)
	jmp	.L1633
.L1634:
	movq	24(%rbp), %rcx
	movl	-52(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	salq	$3, %rax
	subq	%rdx, %rax
	salq	$3, %rax
	addq	%rcx, %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, -224(%rbp)
	movq	%rbx, -216(%rbp)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, -208(%rbp)
	movq	%rbx, -200(%rbp)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, -192(%rbp)
	movq	%rbx, -184(%rbp)
	movq	48(%rax), %rax
	movq	%rax, -176(%rbp)
	subq	$8, %rsp
	subq	$56, %rsp
	movq	%rsp, %rax
	movq	-224(%rbp), %rcx
	movq	-216(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-208(%rbp), %rcx
	movq	-200(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-192(%rbp), %rcx
	movq	-184(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	movq	-176(%rbp), %rdx
	movq	%rdx, 48(%rax)
	call	flag__Flag_str
	addq	$64, %rsp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	string_clone
	movq	%rax, -160(%rbp)
	movq	%rdx, -152(%rbp)
	leaq	-160(%rbp), %rdx
	leaq	-96(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	array_push
	addl	$1, -52(%rbp)
.L1633:
	movl	36(%rbp), %eax
	cmpl	%eax, -52(%rbp)
	jl	.L1634
	leaq	.LC148(%rip), %r14
	movq	%r15, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, %r15
	movq	%r15, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r15
	movq	%r14, %rcx
	movq	%r15, %rbx
	movq	%r14, %rax
	movq	%r15, %rdx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	string_clone
	movq	%rax, -128(%rbp)
	movq	%rdx, -120(%rbp)
	leaq	-128(%rbp), %rdx
	leaq	-96(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	array_push
	leaq	.LC142(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$1, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	%r12, %rcx
	movq	%r13, %rbx
	movq	%r12, %rax
	movq	%r13, %rdx
	movq	%rcx, %rdi
	movq	%rdx, %rsi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-96(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	call	Array_string_join
	addq	$32, %rsp
	movq	%rax, -144(%rbp)
	movq	%rdx, -136(%rbp)
	movq	-144(%rbp), %rax
	movq	-136(%rbp), %rdx
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
	.globl	flag__FlagParser_free
	.hidden	flag__FlagParser_free
flag__FlagParser_free:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$120, %rsp
	movq	%rdi, -120(%rbp)
	movl	$0, -20(%rbp)
	jmp	.L1637
.L1638:
	movq	-120(%rbp), %rax
	movq	144(%rax), %rax
	movl	-20(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	movq	8(%rax), %rdx
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	%rdx, -40(%rbp)
	leaq	-48(%rbp), %rax
	movq	%rax, %rdi
	call	string_free
	addl	$1, -20(%rbp)
.L1637:
	movq	-120(%rbp), %rax
	movl	156(%rax), %eax
	cmpl	%eax, -20(%rbp)
	jl	.L1638
	movq	-120(%rbp), %rax
	addq	$136, %rax
	movq	%rax, %rdi
	call	array_free
	movl	$0, -24(%rbp)
	jmp	.L1639
.L1640:
	movq	-120(%rbp), %rax
	movq	184(%rax), %rcx
	movl	-24(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	salq	$3, %rax
	subq	%rdx, %rax
	salq	$3, %rax
	addq	%rcx, %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, -112(%rbp)
	movq	%rbx, -104(%rbp)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, -96(%rbp)
	movq	%rbx, -88(%rbp)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, -80(%rbp)
	movq	%rbx, -72(%rbp)
	movq	48(%rax), %rax
	movq	%rax, -64(%rbp)
	leaq	-112(%rbp), %rax
	movq	%rax, %rdi
	call	flag__Flag_free
	addl	$1, -24(%rbp)
.L1639:
	movq	-120(%rbp), %rax
	movl	196(%rax), %eax
	cmpl	%eax, -24(%rbp)
	jl	.L1640
	movq	-120(%rbp), %rax
	addq	$176, %rax
	movq	%rax, %rdi
	call	array_free
	movq	-120(%rbp), %rax
	addq	$208, %rax
	movq	%rax, %rdi
	call	string_free
	movq	-120(%rbp), %rax
	addq	$224, %rax
	movq	%rax, %rdi
	call	string_free
	movq	-120(%rbp), %rax
	addq	$240, %rax
	movq	%rax, %rdi
	call	string_free
	movq	-120(%rbp), %rax
	addq	$264, %rax
	movq	%rax, %rdi
	call	string_free
	nop
	movq	-8(%rbp), %rbx
	leave
	ret
	.section	.rodata, "a"
.LC149:
	.string	"--"
.LC150:
	.string	"display this help and exit"
.LC151:
	.string	"output version information and exit"
	.text
	.globl	flag__new_flag_parser
flag__new_flag_parser:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$504, %rsp
	leaq	-80(%rbp), %rax
	movl	$0, %edx
	leaq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	array_clone_to_depth
	leaq	.LC149(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	%r12, %rcx
	movq	%r13, %rbx
	movq	%r12, %rax
	movq	%r13, %rdx
	movq	%rcx, %rdi
	movq	%rdx, %rsi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	16(%rbp), %rax
	movq	24(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	32(%rbp), %rax
	movq	40(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	call	Array_string_index
	addq	$32, %rsp
	movl	%eax, -36(%rbp)
	leaq	-112(%rbp), %rax
	movl	$0, %edx
	leaq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	array_clone_to_depth
	leaq	-144(%rbp), %rax
	movl	$0, %r8d
	movl	$16, %ecx
	movl	$0, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array_with_default
	cmpl	$0, -36(%rbp)
	js	.L1642
	movl	-36(%rbp), %edx
	leaq	-112(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	array_trim
	movl	-60(%rbp), %eax
	cmpl	%eax, -36(%rbp)
	jge	.L1642
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, -496(%rbp)
	movq	%rdx, -488(%rbp)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, -480(%rbp)
	movq	%rdx, -472(%rbp)
	movl	-476(%rbp), %esi
	movl	-36(%rbp), %eax
	leal	1(%rax), %r8d
	leaq	-528(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-496(%rbp), %rax
	movq	-488(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-480(%rbp), %rax
	movq	-472(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	%esi, %edx
	movl	%r8d, %esi
	call	array_slice
	addq	$32, %rsp
	movq	-528(%rbp), %rax
	movq	-520(%rbp), %rdx
	movq	%rax, -144(%rbp)
	movq	%rdx, -136(%rbp)
	movq	-512(%rbp), %rax
	movq	-504(%rbp), %rdx
	movq	%rax, -128(%rbp)
	movq	%rdx, -120(%rbp)
.L1642:
	leaq	-464(%rbp), %rdx
	movl	$0, %eax
	movl	$40, %ecx
	movq	%rdx, %rdi
	rep stosq
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, -464(%rbp)
	movq	%rdx, -456(%rbp)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, -448(%rbp)
	movq	%rdx, -440(%rbp)
	movl	-36(%rbp), %eax
	movl	%eax, -432(%rbp)
	movq	-144(%rbp), %rax
	movq	-136(%rbp), %rdx
	movq	%rax, -424(%rbp)
	movq	%rdx, -416(%rbp)
	movq	-128(%rbp), %rax
	movq	-120(%rbp), %rdx
	movq	%rax, -408(%rbp)
	movq	%rdx, -400(%rbp)
	leaq	-392(%rbp), %rax
	movl	$16, %ecx
	movl	$0, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array
	leaq	.LC150(%rip), %rax
	movq	%rax, -360(%rbp)
	movl	$26, -352(%rbp)
	movl	$1, -348(%rbp)
	leaq	.LC151(%rip), %rax
	movq	%rax, -344(%rbp)
	movl	$35, -336(%rbp)
	movl	$1, -332(%rbp)
	movq	-112(%rbp), %rax
	movq	-104(%rbp), %rdx
	movq	%rax, -328(%rbp)
	movq	%rdx, -320(%rbp)
	movq	-96(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rax, -312(%rbp)
	movq	%rdx, -304(%rbp)
	movl	$4048, -296(%rbp)
	leaq	-288(%rbp), %rax
	movl	$56, %ecx
	movl	$0, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array
	leaq	.LC30(%rip), %rax
	movq	%rax, -256(%rbp)
	movl	$1, -244(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -240(%rbp)
	movl	$1, -228(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -224(%rbp)
	movl	$1, -212(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -200(%rbp)
	movl	$1, -188(%rbp)
	leaq	-176(%rbp), %rax
	movl	$16, %ecx
	movl	$0, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array
	leaq	-464(%rbp), %rax
	movl	$320, %esi
	movq	%rax, %rdi
	call	memdup
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	leaq	-24(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%rbp
	ret
	.globl	flag__FlagParser_application
flag__FlagParser_application:
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, -8(%rbp)
	movq	%rdx, %rcx
	movq	%rsi, %rax
	movq	%rdi, %rdx
	movq	%rcx, %rdx
	movq	%rax, -32(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rcx
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdx
	movq	%rax, 208(%rcx)
	movq	%rdx, 216(%rcx)
	nop
	popq	%rbp
	ret
	.globl	flag__FlagParser_version
flag__FlagParser_version:
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, -8(%rbp)
	movq	%rdx, %rcx
	movq	%rsi, %rax
	movq	%rdi, %rdx
	movq	%rcx, %rdx
	movq	%rax, -32(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rcx
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdx
	movq	%rax, 224(%rcx)
	movq	%rdx, 232(%rcx)
	nop
	popq	%rbp
	ret
	.globl	flag__FlagParser_skip_executable
flag__FlagParser_skip_executable:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	addq	$136, %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	array_delete
	nop
	leave
	ret
	.globl	flag__FlagParser_allow_unknown_args
flag__FlagParser_allow_unknown_args:
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movb	$1, 280(%rax)
	nop
	popq	%rbp
	ret
	.globl	flag__FlagParser_add_flag
	.hidden	flag__FlagParser_add_flag
flag__FlagParser_add_flag:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$176, %rsp
	movq	%rdi, -136(%rbp)
	movq	%rsi, %rax
	movq	%rdx, %rsi
	movq	%rsi, %rdx
	movq	%rax, -160(%rbp)
	movq	%rdx, -152(%rbp)
	movl	%ecx, %eax
	movq	%r8, -176(%rbp)
	movq	%r9, -168(%rbp)
	movb	%al, -140(%rbp)
	movq	-160(%rbp), %rax
	movq	-152(%rbp), %rdx
	movq	%rax, -128(%rbp)
	movq	%rdx, -120(%rbp)
	movzbl	-140(%rbp), %eax
	movb	%al, -112(%rbp)
	movq	-176(%rbp), %rax
	movq	-168(%rbp), %rdx
	movq	%rax, -104(%rbp)
	movq	%rdx, -96(%rbp)
	movq	16(%rbp), %rax
	movq	24(%rbp), %rdx
	movq	%rax, -88(%rbp)
	movq	%rdx, -80(%rbp)
	movq	-136(%rbp), %rax
	leaq	176(%rax), %rdx
	leaq	-128(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	nop
	leave
	ret
	.section	.rodata, "a"
.LC152:
	.string	"="
	.text
	.globl	flag__FlagParser_parse_value
	.hidden	flag__FlagParser_parse_value
flag__FlagParser_parse_value:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$504, %rsp
	movq	%rdi, -472(%rbp)
	movq	%rsi, -480(%rbp)
	movq	%rdx, -496(%rbp)
	movq	%rcx, -488(%rbp)
	movl	%r8d, %eax
	movb	%al, -500(%rbp)
	movb	$0, -61(%rbp)
	movb	$0, -62(%rbp)
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -208(%rbp)
	movaps	%xmm0, -192(%rbp)
	movaps	%xmm0, -176(%rbp)
	movaps	%xmm0, -160(%rbp)
	movaps	%xmm0, -144(%rbp)
	leaq	.LC149(%rip), %rax
	movq	%rax, -208(%rbp)
	movl	$2, -200(%rbp)
	movl	$1, -196(%rbp)
	movl	$65040, -192(%rbp)
	movq	-496(%rbp), %rax
	movq	-488(%rbp), %rdx
	movq	%rax, -184(%rbp)
	movq	%rdx, -176(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -168(%rbp)
	movl	$1, -156(%rbp)
	leaq	-208(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	movq	%rax, -96(%rbp)
	movq	%rdx, -88(%rbp)
	movb	$1, -61(%rbp)
	leaq	-240(%rbp), %rax
	movl	$0, %r8d
	movl	$16, %ecx
	movl	$0, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array_with_default
	leaq	-544(%rbp), %rax
	movl	$0, %r8d
	movl	$4, %ecx
	movl	$0, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array_with_default
	movq	-544(%rbp), %rax
	movq	-536(%rbp), %rdx
	movq	%rax, -128(%rbp)
	movq	%rdx, -120(%rbp)
	movq	-528(%rbp), %rax
	movq	-520(%rbp), %rdx
	movq	%rax, -112(%rbp)
	movq	%rdx, -104(%rbp)
	movb	$1, -62(%rbp)
	movb	$0, -49(%rbp)
	movl	$0, -56(%rbp)
	jmp	.L1650
.L1669:
	movq	-480(%rbp), %rax
	movq	144(%rax), %rax
	movl	-56(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	movq	8(%rax), %rdx
	movq	(%rax), %rax
	movq	%rax, -288(%rbp)
	movq	%rdx, -280(%rbp)
	cmpb	$0, -49(%rbp)
	je	.L1651
	movb	$0, -49(%rbp)
	jmp	.L1668
.L1651:
	movl	-280(%rbp), %eax
	testl	%eax, %eax
	je	.L1675
	movq	-288(%rbp), %rcx
	movq	-280(%rbp), %rax
	movl	$0, %edx
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	string_at
	cmpb	$45, %al
	jne	.L1675
	movl	-280(%rbp), %eax
	cmpl	$2, %eax
	jne	.L1655
	movq	-288(%rbp), %rcx
	movq	-280(%rbp), %rax
	movl	$0, %edx
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	string_at
	cmpb	$45, %al
	jne	.L1655
	movq	-288(%rbp), %rcx
	movq	-280(%rbp), %rax
	movl	$1, %edx
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	string_at
	cmpb	%al, -500(%rbp)
	je	.L1656
.L1655:
	movq	-96(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	-288(%rbp), %rdi
	movq	-280(%rbp), %rsi
	movq	%rdx, %rcx
	movq	%rax, %rdx
	call	string__eq
	testb	%al, %al
	je	.L1657
.L1656:
	movl	-56(%rbp), %eax
	leal	1(%rax), %edx
	movq	-480(%rbp), %rax
	movl	156(%rax), %eax
	cmpl	%eax, %edx
	jl	.L1658
	leaq	-464(%rbp), %rax
	movl	$0, %r8d
	movl	$16, %ecx
	movl	$0, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array_with_default
	cmpb	$0, -62(%rbp)
	je	.L1659
	leaq	-128(%rbp), %rax
	movq	%rax, %rdi
	call	array_free
.L1659:
	cmpb	$0, -61(%rbp)
	je	.L1660
	leaq	-96(%rbp), %rax
	movq	%rax, %rdi
	call	string_free
.L1660:
	movq	-472(%rbp), %rcx
	movq	-464(%rbp), %rax
	movq	-456(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-448(%rbp), %rax
	movq	-440(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	jmp	.L1666
.L1658:
	movl	-56(%rbp), %eax
	leal	1(%rax), %edi
	movq	-480(%rbp), %rcx
	subq	$32, %rsp
	movq	%rsp, %rsi
	movq	136(%rcx), %rax
	movq	144(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	152(%rcx), %rax
	movq	160(%rcx), %rdx
	movq	%rax, 16(%rsi)
	movq	%rdx, 24(%rsi)
	call	array_get
	addq	$32, %rsp
	movq	8(%rax), %rdx
	movq	(%rax), %rax
	movq	%rax, -304(%rbp)
	movq	%rdx, -296(%rbp)
	movl	-296(%rbp), %eax
	cmpl	$2, %eax
	jle	.L1662
	movq	-304(%rbp), %rsi
	movq	-296(%rbp), %rax
	movl	$2, %ecx
	movl	$0, %edx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string_substr
	movq	%rax, -352(%rbp)
	movq	%rdx, -344(%rbp)
	leaq	.LC149(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	-352(%rbp), %rsi
	movq	-344(%rbp), %rax
	movq	%r12, %rdx
	movq	%r13, %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L1663
	leaq	-352(%rbp), %rax
	movq	%rax, %rdi
	call	string_free
	leaq	-464(%rbp), %rax
	movl	$0, %r8d
	movl	$16, %ecx
	movl	$0, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array_with_default
	cmpb	$0, -62(%rbp)
	je	.L1664
	leaq	-128(%rbp), %rax
	movq	%rax, %rdi
	call	array_free
.L1664:
	cmpb	$0, -61(%rbp)
	je	.L1665
	leaq	-96(%rbp), %rax
	movq	%rax, %rdi
	call	string_free
.L1665:
	movq	-472(%rbp), %rcx
	movq	-464(%rbp), %rax
	movq	-456(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-448(%rbp), %rax
	movq	-440(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	jmp	.L1666
.L1663:
	leaq	-352(%rbp), %rax
	movq	%rax, %rdi
	call	string_free
.L1662:
	movl	-56(%rbp), %eax
	leal	1(%rax), %edi
	movq	-480(%rbp), %rcx
	subq	$32, %rsp
	movq	%rsp, %rsi
	movq	136(%rcx), %rax
	movq	144(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	152(%rcx), %rax
	movq	160(%rcx), %rdx
	movq	%rax, 16(%rsi)
	movq	%rdx, 24(%rsi)
	call	array_get
	addq	$32, %rsp
	movq	(%rax), %rdx
	movq	8(%rax), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	string_clone
	movq	%rax, -320(%rbp)
	movq	%rdx, -312(%rbp)
	leaq	-320(%rbp), %rdx
	leaq	-240(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	array_push
	movl	-56(%rbp), %eax
	movl	%eax, -324(%rbp)
	leaq	-324(%rbp), %rdx
	leaq	-128(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	array_push
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -328(%rbp)
	leaq	-328(%rbp), %rdx
	leaq	-128(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	array_push
	movb	$1, -49(%rbp)
	jmp	.L1668
.L1657:
	movl	-280(%rbp), %edx
	movl	-88(%rbp), %eax
	addl	$1, %eax
	cmpl	%eax, %edx
	jle	.L1668
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -464(%rbp)
	movaps	%xmm0, -448(%rbp)
	movaps	%xmm0, -432(%rbp)
	movaps	%xmm0, -416(%rbp)
	movaps	%xmm0, -400(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -464(%rbp)
	movl	$1, -452(%rbp)
	movl	$65040, -448(%rbp)
	movq	-96(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rax, -440(%rbp)
	movq	%rdx, -432(%rbp)
	leaq	.LC152(%rip), %rax
	movq	%rax, -424(%rbp)
	movl	$1, -416(%rbp)
	movl	$1, -412(%rbp)
	leaq	-464(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	movq	%rax, %r14
	movq	%rdx, %r15
	movl	-88(%rbp), %eax
	leal	1(%rax), %edx
	movq	-288(%rbp), %rsi
	movq	-280(%rbp), %rax
	movl	%edx, %ecx
	movl	$0, %edx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string_substr
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %rsi
	movq	%rdx, %rax
	movq	%r14, %rdx
	movq	%r15, %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L1668
	movl	-280(%rbp), %edx
	movl	-88(%rbp), %eax
	leal	1(%rax), %edi
	movq	-288(%rbp), %rsi
	movq	-280(%rbp), %rax
	movl	%edx, %ecx
	movl	%edi, %edx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string_substr
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	string_clone
	movq	%rax, -368(%rbp)
	movq	%rdx, -360(%rbp)
	leaq	-368(%rbp), %rdx
	leaq	-240(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	array_push
	movl	-56(%rbp), %eax
	movl	%eax, -372(%rbp)
	leaq	-372(%rbp), %rdx
	leaq	-128(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	array_push
	nop
	jmp	.L1668
.L1675:
	nop
.L1668:
	addl	$1, -56(%rbp)
.L1650:
	movq	-480(%rbp), %rax
	movl	156(%rax), %eax
	cmpl	%eax, -56(%rbp)
	jl	.L1669
	movl	$0, -60(%rbp)
	jmp	.L1670
.L1671:
	movq	-120(%rbp), %rax
	movl	-60(%rbp), %edx
	movslq	%edx, %rdx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	-480(%rbp), %rdx
	addq	$136, %rdx
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	array_delete
	addl	$1, -60(%rbp)
.L1670:
	movl	-108(%rbp), %eax
	cmpl	%eax, -60(%rbp)
	jl	.L1671
	movq	-240(%rbp), %rax
	movq	-232(%rbp), %rdx
	movq	%rax, -272(%rbp)
	movq	%rdx, -264(%rbp)
	movq	-224(%rbp), %rax
	movq	-216(%rbp), %rdx
	movq	%rax, -256(%rbp)
	movq	%rdx, -248(%rbp)
	cmpb	$0, -62(%rbp)
	je	.L1672
	leaq	-128(%rbp), %rax
	movq	%rax, %rdi
	call	array_free
.L1672:
	cmpb	$0, -61(%rbp)
	je	.L1673
	leaq	-96(%rbp), %rax
	movq	%rax, %rdi
	call	string_free
.L1673:
	movq	-472(%rbp), %rcx
	movq	-272(%rbp), %rax
	movq	-264(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-256(%rbp), %rax
	movq	-248(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
.L1666:
	movq	-472(%rbp), %rax
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
	.section	.rodata, "a"
.LC153:
	.string	"parameter '"
.LC154:
	.string	"' not found"
	.text
	.globl	flag__FlagParser_parse_bool_value
	.hidden	flag__FlagParser_parse_bool_value
flag__FlagParser_parse_bool_value:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$648, %rsp
	movq	%rdi, -616(%rbp)
	movq	%rsi, -624(%rbp)
	movq	%rdx, -640(%rbp)
	movq	%rcx, -632(%rbp)
	movl	%r8d, %eax
	movb	%al, -644(%rbp)
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -544(%rbp)
	movaps	%xmm0, -528(%rbp)
	movaps	%xmm0, -512(%rbp)
	movaps	%xmm0, -496(%rbp)
	movaps	%xmm0, -480(%rbp)
	leaq	.LC149(%rip), %rax
	movq	%rax, -544(%rbp)
	movl	$2, -536(%rbp)
	movl	$1, -532(%rbp)
	movl	$65040, -528(%rbp)
	movq	-640(%rbp), %rax
	movq	-632(%rbp), %rdx
	movq	%rax, -520(%rbp)
	movq	%rdx, -512(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -504(%rbp)
	movl	$1, -492(%rbp)
	leaq	-544(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	movq	%rax, -256(%rbp)
	movq	%rdx, -248(%rbp)
	movl	$0, -52(%rbp)
	jmp	.L1677
.L1692:
	movq	-624(%rbp), %rax
	movq	144(%rax), %rax
	movl	-52(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	movq	8(%rax), %rdx
	movq	(%rax), %rax
	movq	%rax, -272(%rbp)
	movq	%rdx, -264(%rbp)
	movl	-264(%rbp), %eax
	testl	%eax, %eax
	je	.L1694
	movq	-272(%rbp), %rcx
	movq	-264(%rbp), %rax
	movl	$0, %edx
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	string_at
	cmpb	$45, %al
	jne	.L1695
	movl	-264(%rbp), %eax
	cmpl	$2, %eax
	jne	.L1681
	movq	-272(%rbp), %rcx
	movq	-264(%rbp), %rax
	movl	$0, %edx
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	string_at
	cmpb	$45, %al
	jne	.L1681
	movq	-272(%rbp), %rcx
	movq	-264(%rbp), %rax
	movl	$1, %edx
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	string_at
	cmpb	%al, -644(%rbp)
	je	.L1682
.L1681:
	movq	-256(%rbp), %rax
	movq	-248(%rbp), %rdx
	movq	-272(%rbp), %rdi
	movq	-264(%rbp), %rsi
	movq	%rdx, %rcx
	movq	%rax, %rdx
	call	string__eq
	testb	%al, %al
	je	.L1683
.L1682:
	movq	-624(%rbp), %rax
	movl	156(%rax), %edx
	movl	-52(%rbp), %eax
	addl	$1, %eax
	cmpl	%eax, %edx
	jle	.L1684
	leaq	.LC87(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movl	-52(%rbp), %eax
	leal	1(%rax), %edi
	movq	-624(%rbp), %rcx
	subq	$32, %rsp
	movq	%rsp, %rsi
	movq	136(%rcx), %rax
	movq	144(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	152(%rcx), %rax
	movq	160(%rcx), %rdx
	movq	%rax, 16(%rsi)
	movq	%rdx, 24(%rsi)
	call	array_get
	addq	$32, %rsp
	movq	(%rax), %rsi
	movq	8(%rax), %rax
	movq	%r12, %rdx
	movq	%r13, %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L1685
	leaq	.LC88(%rip), %r14
	movq	%r15, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$5, %rax
	movq	%rax, %r15
	movq	%r15, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r15
	movl	-52(%rbp), %eax
	leal	1(%rax), %edi
	movq	-624(%rbp), %rcx
	subq	$32, %rsp
	movq	%rsp, %rsi
	movq	136(%rcx), %rax
	movq	144(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	152(%rcx), %rax
	movq	160(%rcx), %rdx
	movq	%rax, 16(%rsi)
	movq	%rdx, 24(%rsi)
	call	array_get
	addq	$32, %rsp
	movq	(%rax), %rsi
	movq	8(%rax), %rax
	movq	%r14, %rdx
	movq	%r15, %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L1684
.L1685:
	movl	-52(%rbp), %eax
	leal	1(%rax), %edi
	movq	-624(%rbp), %rcx
	subq	$32, %rsp
	movq	%rsp, %rsi
	movq	136(%rcx), %rax
	movq	144(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	152(%rcx), %rax
	movq	160(%rcx), %rdx
	movq	%rax, 16(%rsi)
	movq	%rdx, 24(%rsi)
	call	array_get
	addq	$32, %rsp
	movq	8(%rax), %rdx
	movq	(%rax), %rax
	movq	%rax, -288(%rbp)
	movq	%rdx, -280(%rbp)
	movl	-52(%rbp), %eax
	leal	1(%rax), %edx
	movq	-624(%rbp), %rax
	addq	$136, %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	array_delete
	movq	-624(%rbp), %rax
	leaq	136(%rax), %rdx
	movl	-52(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	array_delete
	movq	-288(%rbp), %rax
	movq	-280(%rbp), %rdx
	movq	%rax, -304(%rbp)
	movq	%rdx, -296(%rbp)
	leaq	-464(%rbp), %rcx
	leaq	-304(%rbp), %rax
	movl	$16, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_result_ok
	movq	-616(%rbp), %rax
	movq	-464(%rbp), %rcx
	movq	-456(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-448(%rbp), %rcx
	movq	-440(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-432(%rbp), %rcx
	movq	-424(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	movq	-416(%rbp), %rdx
	movq	%rdx, 48(%rax)
	jmp	.L1691
.L1684:
	movq	-624(%rbp), %rax
	leaq	136(%rax), %rdx
	movl	-52(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	array_delete
	leaq	.LC87(%rip), %rax
	movq	%rax, -320(%rbp)
	movl	$4, -312(%rbp)
	movl	$1, -308(%rbp)
	leaq	-464(%rbp), %rcx
	leaq	-320(%rbp), %rax
	movl	$16, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_result_ok
	movq	-616(%rbp), %rax
	movq	-464(%rbp), %rcx
	movq	-456(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-448(%rbp), %rcx
	movq	-440(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-432(%rbp), %rcx
	movq	-424(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	movq	-416(%rbp), %rdx
	movq	%rdx, 48(%rax)
	jmp	.L1691
.L1683:
	movl	-264(%rbp), %edx
	movl	-248(%rbp), %eax
	addl	$1, %eax
	cmpl	%eax, %edx
	jle	.L1688
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -464(%rbp)
	movaps	%xmm0, -448(%rbp)
	movaps	%xmm0, -432(%rbp)
	movaps	%xmm0, -416(%rbp)
	movaps	%xmm0, -400(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -464(%rbp)
	movl	$1, -452(%rbp)
	movl	$65040, -448(%rbp)
	movq	-256(%rbp), %rax
	movq	-248(%rbp), %rdx
	movq	%rax, -440(%rbp)
	movq	%rdx, -432(%rbp)
	leaq	.LC152(%rip), %rax
	movq	%rax, -424(%rbp)
	movl	$1, -416(%rbp)
	movl	$1, -412(%rbp)
	leaq	-464(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	movq	%rax, -688(%rbp)
	movq	%rdx, -680(%rbp)
	movl	-248(%rbp), %eax
	leal	1(%rax), %edx
	movq	-272(%rbp), %rsi
	movq	-264(%rbp), %rax
	movl	%edx, %ecx
	movl	$0, %edx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string_substr
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %rsi
	movq	%rdx, %rax
	movq	-688(%rbp), %rdx
	movq	-680(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L1688
	movl	-264(%rbp), %edx
	movl	-248(%rbp), %eax
	leal	1(%rax), %edi
	movq	-272(%rbp), %rsi
	movq	-264(%rbp), %rax
	movl	%edx, %ecx
	movl	%edi, %edx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string_substr
	movq	%rax, -336(%rbp)
	movq	%rdx, -328(%rbp)
	movq	-624(%rbp), %rax
	leaq	136(%rax), %rdx
	movl	-52(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	array_delete
	movq	-336(%rbp), %rax
	movq	-328(%rbp), %rdx
	movq	%rax, -352(%rbp)
	movq	%rdx, -344(%rbp)
	leaq	-608(%rbp), %rcx
	leaq	-352(%rbp), %rax
	movl	$16, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_result_ok
	movq	-616(%rbp), %rax
	movq	-608(%rbp), %rcx
	movq	-600(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-592(%rbp), %rcx
	movq	-584(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-576(%rbp), %rcx
	movq	-568(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	movq	-560(%rbp), %rdx
	movq	%rdx, 48(%rax)
	jmp	.L1691
.L1688:
	movl	-264(%rbp), %eax
	cmpl	$1, %eax
	jle	.L1690
	movq	-272(%rbp), %rcx
	movq	-264(%rbp), %rax
	movl	$0, %edx
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	string_at
	cmpb	$45, %al
	jne	.L1690
	movq	-272(%rbp), %rcx
	movq	-264(%rbp), %rax
	movl	$1, %edx
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	string_at
	cmpb	$45, %al
	je	.L1690
	movzbl	-644(%rbp), %edx
	movq	-272(%rbp), %rcx
	movq	-264(%rbp), %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	string_index_u8
	cmpl	$-1, %eax
	je	.L1690
	leaq	.LC30(%rip), %rax
	movq	%rax, -672(%rbp)
	movq	-664(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, -664(%rbp)
	movq	-664(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -664(%rbp)
	movzbl	-644(%rbp), %eax
	movl	%eax, %edi
	call	u8_ascii_str
	movq	-272(%rbp), %rdi
	movq	-264(%rbp), %rsi
	movq	-672(%rbp), %r8
	movq	-664(%rbp), %r9
	movq	%rdx, %rcx
	movq	%rax, %rdx
	call	string_replace
	movq	%rax, -368(%rbp)
	movq	%rdx, -360(%rbp)
	movq	-624(%rbp), %rax
	leaq	136(%rax), %rcx
	leaq	-368(%rbp), %rdx
	movl	-52(%rbp), %eax
	movl	%eax, %esi
	movq	%rcx, %rdi
	call	array_set
	leaq	.LC87(%rip), %rax
	movq	%rax, -384(%rbp)
	movl	$4, -376(%rbp)
	movl	$1, -372(%rbp)
	leaq	-464(%rbp), %rcx
	leaq	-384(%rbp), %rax
	movl	$16, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_result_ok
	movq	-616(%rbp), %rax
	movq	-464(%rbp), %rcx
	movq	-456(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-448(%rbp), %rcx
	movq	-440(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-432(%rbp), %rcx
	movq	-424(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	movq	-416(%rbp), %rdx
	movq	%rdx, 48(%rax)
	jmp	.L1691
.L1694:
	nop
	jmp	.L1690
.L1695:
	nop
.L1690:
	addl	$1, -52(%rbp)
.L1677:
	movq	-624(%rbp), %rax
	movl	156(%rax), %eax
	cmpl	%eax, -52(%rbp)
	jl	.L1692
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -176(%rbp)
	movaps	%xmm0, -160(%rbp)
	movaps	%xmm0, -144(%rbp)
	movaps	%xmm0, -128(%rbp)
	movaps	%xmm0, -112(%rbp)
	leaq	.LC153(%rip), %rax
	movq	%rax, -176(%rbp)
	movl	$11, -168(%rbp)
	movl	$1, -164(%rbp)
	movl	$65040, -160(%rbp)
	movq	-640(%rbp), %rax
	movq	-632(%rbp), %rdx
	movq	%rax, -152(%rbp)
	movq	%rdx, -144(%rbp)
	leaq	.LC154(%rip), %rax
	movq	%rax, -136(%rbp)
	movl	$11, -128(%rbp)
	movl	$1, -124(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	leaq	-96(%rbp), %rcx
	movq	%rax, %rsi
	movq	%rdx, %rdi
	movq	%rdx, %rax
	movq	%rax, %rdx
	movq	%rcx, %rdi
	call	_v_error
	movq	-616(%rbp), %rax
	pxor	%xmm0, %xmm0
	movups	%xmm0, (%rax)
	movups	%xmm0, 16(%rax)
	movups	%xmm0, 32(%rax)
	movq	%xmm0, 48(%rax)
	movq	-616(%rbp), %rax
	movb	$1, (%rax)
	movq	-616(%rbp), %rcx
	movq	-96(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rax, 8(%rcx)
	movq	%rdx, 16(%rcx)
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, 24(%rcx)
	movq	%rdx, 32(%rcx)
.L1691:
	movq	-616(%rbp), %rax
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
	.section	.rodata, "a"
.LC155:
	.string	"<bool>"
.LC156:
	.string	"' not provided"
	.text
	.globl	flag__FlagParser_bool_opt
flag__FlagParser_bool_opt:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$360, %rsp
	movq	%rdi, -344(%rbp)
	movq	%rsi, -352(%rbp)
	movq	%rdx, -368(%rbp)
	movq	%rcx, -360(%rbp)
	movl	%r8d, %eax
	movb	%al, -372(%rbp)
	movb	$0, -33(%rbp)
	leaq	.LC155(%rip), %r10
	movq	%r11, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$6, %rax
	movq	%rax, %r11
	movq	%r11, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r11
	movzbl	-372(%rbp), %ecx
	movq	16(%rbp), %rax
	movq	24(%rbp), %rdx
	movq	-368(%rbp), %rsi
	movq	-360(%rbp), %rbx
	movq	-352(%rbp), %rdi
	pushq	%r11
	pushq	%r10
	movq	%rax, %r8
	movq	%rdx, %r9
	movq	%rbx, %rdx
	call	flag__FlagParser_add_flag
	addq	$16, %rsp
	movzbl	-372(%rbp), %ecx
	leaq	-304(%rbp), %rdi
	movq	-368(%rbp), %rax
	movq	-360(%rbp), %rdx
	movq	-352(%rbp), %rsi
	movl	%ecx, %r8d
	movq	%rdx, %rcx
	movq	%rax, %rdx
	call	flag__FlagParser_parse_bool_value
	movzbl	-304(%rbp), %eax
	testb	%al, %al
	je	.L1697
	movq	-296(%rbp), %rax
	movq	-288(%rbp), %rdx
	movq	%rax, -336(%rbp)
	movq	%rdx, -328(%rbp)
	movq	-280(%rbp), %rax
	movq	-272(%rbp), %rdx
	movq	%rax, -320(%rbp)
	movq	%rdx, -312(%rbp)
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -240(%rbp)
	movaps	%xmm0, -224(%rbp)
	movaps	%xmm0, -208(%rbp)
	movaps	%xmm0, -192(%rbp)
	movaps	%xmm0, -176(%rbp)
	leaq	.LC153(%rip), %rax
	movq	%rax, -240(%rbp)
	movl	$11, -232(%rbp)
	movl	$1, -228(%rbp)
	movl	$65040, -224(%rbp)
	movq	-368(%rbp), %rax
	movq	-360(%rbp), %rdx
	movq	%rax, -216(%rbp)
	movq	%rdx, -208(%rbp)
	leaq	.LC156(%rip), %rax
	movq	%rax, -200(%rbp)
	movl	$14, -192(%rbp)
	movl	$1, -188(%rbp)
	leaq	-240(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	leaq	-80(%rbp), %rcx
	movq	%rax, %rsi
	movq	%rdx, %rdi
	movq	%rdx, %rax
	movq	%rax, %rdx
	movq	%rcx, %rdi
	call	_v_error
	movq	-344(%rbp), %rax
	pxor	%xmm0, %xmm0
	movups	%xmm0, (%rax)
	movups	%xmm0, 16(%rax)
	movups	%xmm0, 32(%rax)
	movq	-344(%rbp), %rax
	movb	$1, (%rax)
	movq	-344(%rbp), %rcx
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, 8(%rcx)
	movq	%rdx, 16(%rcx)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 24(%rcx)
	movq	%rdx, 32(%rcx)
	jmp	.L1696
.L1697:
	leaq	-304(%rbp), %rax
	addq	$40, %rax
	movq	8(%rax), %rdx
	movq	(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	%rdx, -152(%rbp)
	leaq	.LC87(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	-160(%rbp), %rsi
	movq	-152(%rbp), %rax
	movq	%r12, %rdx
	movq	%r13, %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	movb	%al, -33(%rbp)
	movzbl	-33(%rbp), %eax
	movb	%al, -129(%rbp)
	leaq	-128(%rbp), %rcx
	leaq	-129(%rbp), %rax
	movl	$1, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_result_ok
	movq	-344(%rbp), %rax
	movq	-128(%rbp), %rcx
	movq	-120(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-112(%rbp), %rcx
	movq	-104(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-96(%rbp), %rcx
	movq	-88(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
.L1696:
	movq	-344(%rbp), %rax
	leaq	-24(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%rbp
	ret
	.globl	flag__FlagParser_bool
flag__FlagParser_bool:
	pushq	%rbp
	movq	%rsp, %rbp
	addq	$-128, %rsp
	movq	%rdi, -104(%rbp)
	movq	%rsi, %rax
	movq	%rdx, %rsi
	movq	%rsi, %rdx
	movq	%rax, -128(%rbp)
	movq	%rdx, -120(%rbp)
	movl	%ecx, %eax
	movl	%r8d, %edx
	movb	%al, -108(%rbp)
	movl	%edx, %eax
	movb	%al, -112(%rbp)
	movzbl	-108(%rbp), %ecx
	leaq	-64(%rbp), %rdi
	movq	-128(%rbp), %rax
	movq	-120(%rbp), %rdx
	movq	-104(%rbp), %rsi
	pushq	24(%rbp)
	pushq	16(%rbp)
	movl	%ecx, %r8d
	movq	%rdx, %rcx
	movq	%rax, %rdx
	call	flag__FlagParser_bool_opt
	addq	$16, %rsp
	movzbl	-64(%rbp), %eax
	testb	%al, %al
	je	.L1701
	movq	-56(%rbp), %rax
	movq	-48(%rbp), %rdx
	movq	%rax, -96(%rbp)
	movq	%rdx, -88(%rbp)
	movq	-40(%rbp), %rax
	movq	-32(%rbp), %rdx
	movq	%rax, -80(%rbp)
	movq	%rdx, -72(%rbp)
	movzbl	-112(%rbp), %eax
	jmp	.L1703
.L1701:
	movzbl	-24(%rbp), %eax
	movb	%al, -1(%rbp)
	movzbl	-1(%rbp), %eax
.L1703:
	leave
	ret
	.section	.rodata, "a"
.LC157:
	.string	"<string>"
	.text
	.globl	flag__FlagParser_string_opt
flag__FlagParser_string_opt:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$296, %rsp
	movq	%rdi, -264(%rbp)
	movq	%rsi, -272(%rbp)
	movq	%rdx, -288(%rbp)
	movq	%rcx, -280(%rbp)
	movl	%r8d, %eax
	movb	%al, -292(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -56(%rbp)
	movl	$1, -52(%rbp)
	leaq	.LC157(%rip), %r10
	movq	%r11, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$8, %rax
	movq	%rax, %r11
	movq	%r11, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r11
	movzbl	-292(%rbp), %ecx
	movq	16(%rbp), %rax
	movq	24(%rbp), %rdx
	movq	-288(%rbp), %rsi
	movq	-280(%rbp), %rbx
	movq	-272(%rbp), %rdi
	pushq	%r11
	pushq	%r10
	movq	%rax, %r8
	movq	%rdx, %r9
	movq	%rbx, %rdx
	call	flag__FlagParser_add_flag
	addq	$16, %rsp
	movzbl	-292(%rbp), %ecx
	leaq	-256(%rbp), %rdi
	movq	-288(%rbp), %rax
	movq	-280(%rbp), %rdx
	movq	-272(%rbp), %rsi
	movl	%ecx, %r8d
	movq	%rdx, %rcx
	movq	%rax, %rdx
	call	flag__FlagParser_parse_value
	movl	-236(%rbp), %eax
	testl	%eax, %eax
	jne	.L1705
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -224(%rbp)
	movaps	%xmm0, -208(%rbp)
	movaps	%xmm0, -192(%rbp)
	movaps	%xmm0, -176(%rbp)
	movaps	%xmm0, -160(%rbp)
	leaq	.LC153(%rip), %rax
	movq	%rax, -224(%rbp)
	movl	$11, -216(%rbp)
	movl	$1, -212(%rbp)
	movl	$65040, -208(%rbp)
	movq	-288(%rbp), %rax
	movq	-280(%rbp), %rdx
	movq	%rax, -200(%rbp)
	movq	%rdx, -192(%rbp)
	leaq	.LC156(%rip), %rax
	movq	%rax, -184(%rbp)
	movl	$14, -176(%rbp)
	movl	$1, -172(%rbp)
	leaq	-224(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	leaq	-48(%rbp), %rcx
	movq	%rax, %rsi
	movq	%rdx, %rdi
	movq	%rdx, %rax
	movq	%rax, %rdx
	movq	%rcx, %rdi
	call	_v_error
	movq	-264(%rbp), %rax
	pxor	%xmm0, %xmm0
	movups	%xmm0, (%rax)
	movups	%xmm0, 16(%rax)
	movups	%xmm0, 32(%rax)
	movq	%xmm0, 48(%rax)
	movq	-264(%rbp), %rax
	movb	$1, (%rax)
	movq	-264(%rbp), %rcx
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 8(%rcx)
	movq	%rdx, 16(%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdx
	movq	%rax, 24(%rcx)
	movq	%rdx, 32(%rcx)
	jmp	.L1706
.L1705:
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-256(%rbp), %rax
	movq	-248(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-240(%rbp), %rax
	movq	-232(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$0, %edi
	call	array_get
	addq	$32, %rsp
	movq	8(%rax), %rdx
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, -144(%rbp)
	movq	%rdx, -136(%rbp)
	leaq	-128(%rbp), %rcx
	leaq	-144(%rbp), %rax
	movl	$16, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_result_ok
	movq	-264(%rbp), %rax
	movq	-128(%rbp), %rcx
	movq	-120(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-112(%rbp), %rcx
	movq	-104(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-96(%rbp), %rcx
	movq	-88(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	movq	-80(%rbp), %rdx
	movq	%rdx, 48(%rax)
.L1706:
	movq	-264(%rbp), %rax
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	flag__FlagParser_string
flag__FlagParser_string:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$160, %rsp
	movq	%rdi, -120(%rbp)
	movq	%rsi, %rax
	movq	%rdx, %rsi
	movq	%rsi, %rdx
	movq	%rax, -144(%rbp)
	movq	%rdx, -136(%rbp)
	movl	%ecx, %eax
	movq	%r8, -160(%rbp)
	movq	%r9, -152(%rbp)
	movb	%al, -124(%rbp)
	movzbl	-124(%rbp), %ecx
	leaq	-64(%rbp), %rdi
	movq	-144(%rbp), %rax
	movq	-136(%rbp), %rdx
	movq	-120(%rbp), %rsi
	pushq	24(%rbp)
	pushq	16(%rbp)
	movl	%ecx, %r8d
	movq	%rdx, %rcx
	movq	%rax, %rdx
	call	flag__FlagParser_string_opt
	addq	$16, %rsp
	movzbl	-64(%rbp), %eax
	testb	%al, %al
	je	.L1709
	movq	-56(%rbp), %rax
	movq	-48(%rbp), %rdx
	movq	%rax, -112(%rbp)
	movq	%rdx, -104(%rbp)
	movq	-40(%rbp), %rax
	movq	-32(%rbp), %rdx
	movq	%rax, -96(%rbp)
	movq	%rdx, -88(%rbp)
	movq	-160(%rbp), %rax
	movq	-152(%rbp), %rdx
	jmp	.L1711
.L1709:
	leaq	-64(%rbp), %rax
	addq	$40, %rax
	movq	8(%rax), %rdx
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	%rdx, -72(%rbp)
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
.L1711:
	leave
	ret
	.section	.rodata, "a"
.LC158:
	.string	"[ARGS]"
.LC159:
	.string	" "
.LC160:
	.string	"Usage: "
.LC161:
	.string	" [options] "
.LC162:
	.string	"   or: "
.LC163:
	.string	"Description: "
.LC164:
	.string	"This application does not expect any arguments"
.LC165:
	.string	"at least "
.LC166:
	.string	"at most "
.LC167:
	.string	"exactly "
.LC168:
	.string	" and "
.LC169:
	.string	"The arguments should be "
.LC170:
	.string	" in number."
.LC171:
	.string	"Options:"
.LC172:
	.string	"  "
.LC173:
	.string	"   "
.LC174:
	.string	"- ,"
	.text
	.globl	flag__FlagParser_usage
flag__FlagParser_usage:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$1016, %rsp
	movq	%rdi, -840(%rbp)
	movq	-840(%rbp), %rax
	movl	256(%rax), %eax
	testl	%eax, %eax
	setg	%al
	movb	%al, -61(%rbp)
	movq	-840(%rbp), %rax
	movl	168(%rax), %eax
	testl	%eax, %eax
	jle	.L1713
	movq	-840(%rbp), %rax
	movl	168(%rax), %eax
	cmpl	$4048, %eax
	je	.L1713
	movl	$1, %eax
	jmp	.L1714
.L1713:
	movl	$0, %eax
.L1714:
	movb	%al, -62(%rbp)
	movq	-840(%rbp), %rax
	movl	256(%rax), %eax
	testl	%eax, %eax
	jne	.L1715
	movq	-840(%rbp), %rax
	movl	168(%rax), %eax
	testl	%eax, %eax
	jne	.L1715
	movl	$1, %eax
	jmp	.L1716
.L1715:
	movl	$0, %eax
.L1716:
	movb	%al, -63(%rbp)
	movq	-840(%rbp), %rax
	movl	272(%rax), %eax
	testl	%eax, %eax
	jle	.L1717
	movq	-840(%rbp), %rax
	movq	272(%rax), %rdx
	movq	264(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	%rdx, -72(%rbp)
	jmp	.L1718
.L1717:
	leaq	.LC158(%rip), %rax
	movq	%rax, -80(%rbp)
	movl	$6, -72(%rbp)
	movl	$1, -68(%rbp)
.L1718:
	cmpb	$0, -63(%rbp)
	je	.L1719
	leaq	.LC30(%rip), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -72(%rbp)
	movl	$1, -68(%rbp)
.L1719:
	leaq	-112(%rbp), %rax
	movl	$0, %r8d
	movl	$16, %ecx
	movl	$0, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array_with_default
	movq	-840(%rbp), %rax
	movl	232(%rax), %eax
	testl	%eax, %eax
	je	.L1720
	leaq	-720(%rbp), %rsi
	movl	$0, %eax
	movl	$15, %edx
	movq	%rsi, %rdi
	movq	%rdx, %rcx
	rep stosq
	leaq	.LC30(%rip), %rax
	movq	%rax, -720(%rbp)
	movl	$1, -708(%rbp)
	movl	$65040, -704(%rbp)
	movq	-840(%rbp), %rax
	movq	216(%rax), %rdx
	movq	208(%rax), %rax
	movq	%rax, -696(%rbp)
	movq	%rdx, -688(%rbp)
	leaq	.LC159(%rip), %rax
	movq	%rax, -680(%rbp)
	movl	$1, -672(%rbp)
	movl	$1, -668(%rbp)
	movl	$65040, -664(%rbp)
	movq	-840(%rbp), %rax
	movq	232(%rax), %rdx
	movq	224(%rax), %rax
	movq	%rax, -656(%rbp)
	movq	%rdx, -648(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -640(%rbp)
	movl	$1, -628(%rbp)
	leaq	-720(%rbp), %rax
	movq	%rax, %rsi
	movl	$3, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	string_clone
	movq	%rax, -160(%rbp)
	movq	%rdx, -152(%rbp)
	leaq	-160(%rbp), %rdx
	leaq	-112(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	array_push
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -800(%rbp)
	movaps	%xmm0, -784(%rbp)
	movaps	%xmm0, -768(%rbp)
	movaps	%xmm0, -752(%rbp)
	movaps	%xmm0, -736(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -800(%rbp)
	movl	$1, -788(%rbp)
	movl	$65040, -784(%rbp)
	movq	_const_flag__underline(%rip), %rax
	movq	8+_const_flag__underline(%rip), %rdx
	movq	%rax, -776(%rbp)
	movq	%rdx, -768(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -760(%rbp)
	movl	$1, -748(%rbp)
	leaq	-800(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	string_clone
	movq	%rax, -176(%rbp)
	movq	%rdx, -168(%rbp)
	leaq	-176(%rbp), %rdx
	leaq	-112(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	array_push
.L1720:
	movq	-840(%rbp), %rax
	movl	92(%rax), %eax
	testl	%eax, %eax
	jne	.L1721
	leaq	-720(%rbp), %rsi
	movl	$0, %eax
	movl	$15, %edx
	movq	%rsi, %rdi
	movq	%rdx, %rcx
	rep stosq
	leaq	.LC160(%rip), %rax
	movq	%rax, -720(%rbp)
	movl	$7, -712(%rbp)
	movl	$1, -708(%rbp)
	movl	$65040, -704(%rbp)
	movq	-840(%rbp), %rax
	movq	216(%rax), %rdx
	movq	208(%rax), %rax
	movq	%rax, -696(%rbp)
	movq	%rdx, -688(%rbp)
	leaq	.LC161(%rip), %rax
	movq	%rax, -680(%rbp)
	movl	$11, -672(%rbp)
	movl	$1, -668(%rbp)
	movl	$65040, -664(%rbp)
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, -656(%rbp)
	movq	%rdx, -648(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -640(%rbp)
	movl	$1, -628(%rbp)
	leaq	-720(%rbp), %rax
	movq	%rax, %rsi
	movl	$3, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	string_clone
	movq	%rax, -192(%rbp)
	movq	%rdx, -184(%rbp)
	leaq	-192(%rbp), %rdx
	leaq	-112(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	array_push
	jmp	.L1722
.L1721:
	movl	$0, -52(%rbp)
	jmp	.L1723
.L1726:
	movq	-840(%rbp), %rax
	movq	80(%rax), %rdx
	movl	-52(%rbp), %eax
	cltq
	salq	$4, %rax
	addq	%rdx, %rax
	movq	8(%rax), %rdx
	movq	(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	%rdx, -200(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.L1724
	leaq	-720(%rbp), %rsi
	movl	$0, %eax
	movl	$15, %edx
	movq	%rsi, %rdi
	movq	%rdx, %rcx
	rep stosq
	leaq	.LC160(%rip), %rax
	movq	%rax, -720(%rbp)
	movl	$7, -712(%rbp)
	movl	$1, -708(%rbp)
	movl	$65040, -704(%rbp)
	movq	-840(%rbp), %rax
	movq	216(%rax), %rdx
	movq	208(%rax), %rax
	movq	%rax, -696(%rbp)
	movq	%rdx, -688(%rbp)
	leaq	.LC159(%rip), %rax
	movq	%rax, -680(%rbp)
	movl	$1, -672(%rbp)
	movl	$1, -668(%rbp)
	movl	$65040, -664(%rbp)
	movq	-208(%rbp), %rax
	movq	-200(%rbp), %rdx
	movq	%rax, -656(%rbp)
	movq	%rdx, -648(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -640(%rbp)
	movl	$1, -628(%rbp)
	leaq	-720(%rbp), %rax
	movq	%rax, %rsi
	movl	$3, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	string_clone
	movq	%rax, -224(%rbp)
	movq	%rdx, -216(%rbp)
	leaq	-224(%rbp), %rdx
	leaq	-112(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	array_push
	jmp	.L1725
.L1724:
	leaq	-720(%rbp), %rsi
	movl	$0, %eax
	movl	$15, %edx
	movq	%rsi, %rdi
	movq	%rdx, %rcx
	rep stosq
	leaq	.LC162(%rip), %rax
	movq	%rax, -720(%rbp)
	movl	$7, -712(%rbp)
	movl	$1, -708(%rbp)
	movl	$65040, -704(%rbp)
	movq	-840(%rbp), %rax
	movq	216(%rax), %rdx
	movq	208(%rax), %rax
	movq	%rax, -696(%rbp)
	movq	%rdx, -688(%rbp)
	leaq	.LC159(%rip), %rax
	movq	%rax, -680(%rbp)
	movl	$1, -672(%rbp)
	movl	$1, -668(%rbp)
	movl	$65040, -664(%rbp)
	movq	-208(%rbp), %rax
	movq	-200(%rbp), %rdx
	movq	%rax, -656(%rbp)
	movq	%rdx, -648(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -640(%rbp)
	movl	$1, -628(%rbp)
	leaq	-720(%rbp), %rax
	movq	%rax, %rsi
	movl	$3, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	string_clone
	movq	%rax, -240(%rbp)
	movq	%rdx, -232(%rbp)
	leaq	-240(%rbp), %rdx
	leaq	-112(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	array_push
.L1725:
	addl	$1, -52(%rbp)
.L1723:
	movq	-840(%rbp), %rax
	movl	92(%rax), %eax
	cmpl	%eax, -52(%rbp)
	jl	.L1726
.L1722:
	leaq	.LC30(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	%r12, %rcx
	movq	%r13, %rbx
	movq	%r12, %rax
	movq	%r13, %rdx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	string_clone
	movq	%rax, -128(%rbp)
	movq	%rdx, -120(%rbp)
	leaq	-128(%rbp), %rdx
	leaq	-112(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	array_push
	movq	-840(%rbp), %rax
	movl	248(%rax), %eax
	testl	%eax, %eax
	je	.L1727
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -720(%rbp)
	movaps	%xmm0, -704(%rbp)
	movaps	%xmm0, -688(%rbp)
	movaps	%xmm0, -672(%rbp)
	movaps	%xmm0, -656(%rbp)
	leaq	.LC163(%rip), %rax
	movq	%rax, -720(%rbp)
	movl	$13, -712(%rbp)
	movl	$1, -708(%rbp)
	movl	$65040, -704(%rbp)
	movq	-840(%rbp), %rax
	movq	248(%rax), %rdx
	movq	240(%rax), %rax
	movq	%rax, -696(%rbp)
	movq	%rdx, -688(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -680(%rbp)
	movl	$1, -668(%rbp)
	leaq	-720(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	string_clone
	movq	%rax, -256(%rbp)
	movq	%rdx, -248(%rbp)
	leaq	-256(%rbp), %rdx
	leaq	-112(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	array_push
	leaq	.LC30(%rip), %r14
	movq	%r15, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, %r15
	movq	%r15, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r15
	movq	%r14, %rcx
	movq	%r15, %rbx
	movq	%r14, %rax
	movq	%r15, %rdx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	string_clone
	movq	%rax, -272(%rbp)
	movq	%rdx, -264(%rbp)
	leaq	-272(%rbp), %rdx
	leaq	-112(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	array_push
.L1727:
	cmpb	$0, -61(%rbp)
	jne	.L1728
	cmpb	$0, -62(%rbp)
	jne	.L1728
	cmpb	$0, -63(%rbp)
	je	.L1729
.L1728:
	cmpb	$0, -63(%rbp)
	je	.L1730
	leaq	.LC164(%rip), %rax
	movq	%rax, -944(%rbp)
	movq	-936(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$46, %rax
	movq	%rax, -936(%rbp)
	movq	-936(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -936(%rbp)
	movq	-944(%rbp), %rax
	movq	-936(%rbp), %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	string_clone
	movq	%rax, -288(%rbp)
	movq	%rdx, -280(%rbp)
	leaq	-288(%rbp), %rdx
	leaq	-112(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	array_push
	leaq	.LC30(%rip), %rax
	movq	%rax, -960(%rbp)
	movq	-952(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, -952(%rbp)
	movq	-952(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -952(%rbp)
	movq	-960(%rbp), %rax
	movq	-952(%rbp), %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	string_clone
	movq	%rax, -304(%rbp)
	movq	%rdx, -296(%rbp)
	leaq	-304(%rbp), %rdx
	leaq	-112(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	array_push
	jmp	.L1729
.L1730:
	leaq	-800(%rbp), %rax
	movl	$0, %r8d
	movl	$16, %ecx
	movl	$0, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array_with_default
	cmpb	$0, -61(%rbp)
	je	.L1731
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -720(%rbp)
	movaps	%xmm0, -704(%rbp)
	movaps	%xmm0, -688(%rbp)
	movaps	%xmm0, -672(%rbp)
	movaps	%xmm0, -656(%rbp)
	leaq	.LC165(%rip), %rax
	movq	%rax, -720(%rbp)
	movl	$9, -712(%rbp)
	movl	$1, -708(%rbp)
	movl	$65031, -704(%rbp)
	movq	-840(%rbp), %rax
	movl	256(%rax), %eax
	movl	%eax, -696(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -680(%rbp)
	movl	$1, -668(%rbp)
	leaq	-720(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	string_clone
	movq	%rax, -368(%rbp)
	movq	%rdx, -360(%rbp)
	leaq	-368(%rbp), %rdx
	leaq	-800(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	array_push
.L1731:
	cmpb	$0, -62(%rbp)
	je	.L1732
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -720(%rbp)
	movaps	%xmm0, -704(%rbp)
	movaps	%xmm0, -688(%rbp)
	movaps	%xmm0, -672(%rbp)
	movaps	%xmm0, -656(%rbp)
	leaq	.LC166(%rip), %rax
	movq	%rax, -720(%rbp)
	movl	$8, -712(%rbp)
	movl	$1, -708(%rbp)
	movl	$65031, -704(%rbp)
	movq	-840(%rbp), %rax
	movl	168(%rax), %eax
	movl	%eax, -696(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -680(%rbp)
	movl	$1, -668(%rbp)
	leaq	-720(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	string_clone
	movq	%rax, -384(%rbp)
	movq	%rdx, -376(%rbp)
	leaq	-384(%rbp), %rdx
	leaq	-800(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	array_push
.L1732:
	cmpb	$0, -61(%rbp)
	je	.L1733
	cmpb	$0, -62(%rbp)
	je	.L1733
	movq	-840(%rbp), %rax
	movl	256(%rax), %edx
	movq	-840(%rbp), %rax
	movl	168(%rax), %eax
	cmpl	%eax, %edx
	jne	.L1733
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -720(%rbp)
	movaps	%xmm0, -704(%rbp)
	movaps	%xmm0, -688(%rbp)
	movaps	%xmm0, -672(%rbp)
	movaps	%xmm0, -656(%rbp)
	leaq	.LC167(%rip), %rax
	movq	%rax, -720(%rbp)
	movl	$8, -712(%rbp)
	movl	$1, -708(%rbp)
	movl	$65031, -704(%rbp)
	movq	-840(%rbp), %rax
	movl	256(%rax), %eax
	movl	%eax, -696(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -680(%rbp)
	movl	$1, -668(%rbp)
	leaq	-720(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	movq	%rax, -400(%rbp)
	movq	%rdx, -392(%rbp)
	leaq	-880(%rbp), %rdi
	leaq	-400(%rbp), %rax
	movq	%rax, %r8
	movl	$16, %ecx
	movl	$1, %edx
	movl	$1, %esi
	call	new_array_from_c_array
	movq	-880(%rbp), %rax
	movq	-872(%rbp), %rdx
	movq	%rax, -800(%rbp)
	movq	%rdx, -792(%rbp)
	movq	-864(%rbp), %rax
	movq	-856(%rbp), %rdx
	movq	%rax, -784(%rbp)
	movq	%rdx, -776(%rbp)
.L1733:
	leaq	.LC168(%rip), %rax
	movq	%rax, -976(%rbp)
	movq	-968(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$5, %rax
	movq	%rax, -968(%rbp)
	movq	-968(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -968(%rbp)
	movq	-976(%rbp), %rax
	movq	-968(%rbp), %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %rdi
	movq	%rdx, %rsi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-800(%rbp), %rax
	movq	-792(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-784(%rbp), %rax
	movq	-776(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	call	Array_string_join
	addq	$32, %rsp
	movq	%rax, -320(%rbp)
	movq	%rdx, -312(%rbp)
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -720(%rbp)
	movaps	%xmm0, -704(%rbp)
	movaps	%xmm0, -688(%rbp)
	movaps	%xmm0, -672(%rbp)
	movaps	%xmm0, -656(%rbp)
	leaq	.LC169(%rip), %rax
	movq	%rax, -720(%rbp)
	movl	$24, -712(%rbp)
	movl	$1, -708(%rbp)
	movl	$65040, -704(%rbp)
	movq	-320(%rbp), %rax
	movq	-312(%rbp), %rdx
	movq	%rax, -696(%rbp)
	movq	%rdx, -688(%rbp)
	leaq	.LC170(%rip), %rax
	movq	%rax, -680(%rbp)
	movl	$11, -672(%rbp)
	movl	$1, -668(%rbp)
	leaq	-720(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	string_clone
	movq	%rax, -336(%rbp)
	movq	%rdx, -328(%rbp)
	leaq	-336(%rbp), %rdx
	leaq	-112(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	array_push
	leaq	.LC30(%rip), %rax
	movq	%rax, -992(%rbp)
	movq	-984(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, -984(%rbp)
	movq	-984(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -984(%rbp)
	movq	-992(%rbp), %rax
	movq	-984(%rbp), %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	string_clone
	movq	%rax, -352(%rbp)
	movq	%rdx, -344(%rbp)
	leaq	-352(%rbp), %rdx
	leaq	-112(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	array_push
.L1729:
	movq	-840(%rbp), %rax
	movl	196(%rax), %eax
	testl	%eax, %eax
	jle	.L1734
	leaq	.LC171(%rip), %rax
	movq	%rax, -1008(%rbp)
	movq	-1000(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$8, %rax
	movq	%rax, -1000(%rbp)
	movq	-1000(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -1000(%rbp)
	movq	-1008(%rbp), %rax
	movq	-1000(%rbp), %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	string_clone
	movq	%rax, -416(%rbp)
	movq	%rdx, -408(%rbp)
	leaq	-416(%rbp), %rdx
	leaq	-112(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	array_push
	movl	$0, -56(%rbp)
	jmp	.L1735
.L1742:
	movq	-840(%rbp), %rax
	movq	184(%rax), %rcx
	movl	-56(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	salq	$3, %rax
	subq	%rdx, %rax
	salq	$3, %rax
	addq	%rax, %rcx
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, -800(%rbp)
	movq	%rdx, -792(%rbp)
	movq	16(%rcx), %rax
	movq	24(%rcx), %rdx
	movq	%rax, -784(%rbp)
	movq	%rdx, -776(%rbp)
	movq	32(%rcx), %rax
	movq	40(%rcx), %rdx
	movq	%rax, -768(%rbp)
	movq	%rdx, -760(%rbp)
	movq	48(%rcx), %rax
	movq	%rax, -752(%rbp)
	leaq	-832(%rbp), %rax
	movl	$0, %r8d
	movl	$16, %ecx
	movl	$0, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array_with_default
	movzbl	-784(%rbp), %eax
	testb	%al, %al
	je	.L1736
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -720(%rbp)
	movaps	%xmm0, -704(%rbp)
	movaps	%xmm0, -688(%rbp)
	movaps	%xmm0, -672(%rbp)
	movaps	%xmm0, -656(%rbp)
	leaq	.LC40(%rip), %rax
	movq	%rax, -720(%rbp)
	movl	$1, -712(%rbp)
	movl	$1, -708(%rbp)
	movl	$65040, -704(%rbp)
	movzbl	-784(%rbp), %eax
	movzbl	%al, %eax
	movl	%eax, %edi
	call	u8_ascii_str
	movq	%rax, -696(%rbp)
	movq	%rdx, -688(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -680(%rbp)
	movl	$1, -668(%rbp)
	leaq	-720(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	string_clone
	movq	%rax, -496(%rbp)
	movq	%rdx, -488(%rbp)
	leaq	-496(%rbp), %rdx
	leaq	-832(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	array_push
.L1736:
	movl	-792(%rbp), %eax
	testl	%eax, %eax
	je	.L1737
	leaq	.LC155(%rip), %rax
	movq	%rax, -1056(%rbp)
	movq	-1048(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$6, %rax
	movq	%rax, -1048(%rbp)
	movq	-1048(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -1048(%rbp)
	movq	-760(%rbp), %rsi
	movq	-752(%rbp), %rax
	movq	-1056(%rbp), %rdx
	movq	-1048(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string_contains
	testb	%al, %al
	jne	.L1738
	leaq	-720(%rbp), %rdx
	movl	$0, %eax
	movl	$15, %ecx
	movq	%rdx, %rdi
	rep stosq
	leaq	.LC149(%rip), %rax
	movq	%rax, -720(%rbp)
	movl	$2, -712(%rbp)
	movl	$1, -708(%rbp)
	movl	$65040, -704(%rbp)
	movq	-800(%rbp), %rax
	movq	-792(%rbp), %rdx
	movq	%rax, -696(%rbp)
	movq	%rdx, -688(%rbp)
	leaq	.LC159(%rip), %rax
	movq	%rax, -680(%rbp)
	movl	$1, -672(%rbp)
	movl	$1, -668(%rbp)
	movl	$65040, -664(%rbp)
	movq	-760(%rbp), %rax
	movq	-752(%rbp), %rdx
	movq	%rax, -656(%rbp)
	movq	%rdx, -648(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -640(%rbp)
	movl	$1, -628(%rbp)
	leaq	-720(%rbp), %rax
	movq	%rax, %rsi
	movl	$3, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	string_clone
	movq	%rax, -512(%rbp)
	movq	%rdx, -504(%rbp)
	leaq	-512(%rbp), %rdx
	leaq	-832(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	array_push
	jmp	.L1737
.L1738:
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -720(%rbp)
	movaps	%xmm0, -704(%rbp)
	movaps	%xmm0, -688(%rbp)
	movaps	%xmm0, -672(%rbp)
	movaps	%xmm0, -656(%rbp)
	leaq	.LC149(%rip), %rax
	movq	%rax, -720(%rbp)
	movl	$2, -712(%rbp)
	movl	$1, -708(%rbp)
	movl	$65040, -704(%rbp)
	movq	-800(%rbp), %rax
	movq	-792(%rbp), %rdx
	movq	%rax, -696(%rbp)
	movq	%rdx, -688(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -680(%rbp)
	movl	$1, -668(%rbp)
	leaq	-720(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	string_clone
	movq	%rax, -528(%rbp)
	movq	%rdx, -520(%rbp)
	leaq	-528(%rbp), %rdx
	leaq	-832(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	array_push
.L1737:
	leaq	.LC63(%rip), %rax
	movq	%rax, -1040(%rbp)
	movq	-1032(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, -1032(%rbp)
	movq	-1032(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -1032(%rbp)
	movq	-1040(%rbp), %rax
	movq	-1032(%rbp), %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %rdi
	movq	%rdx, %rsi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-832(%rbp), %rax
	movq	-824(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-816(%rbp), %rax
	movq	-808(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	call	Array_string_join
	addq	$32, %rsp
	leaq	.LC172(%rip), %rbx
	movq	%rbx, -1024(%rbp)
	movq	-1016(%rbp), %rsi
	movabsq	$-4294967296, %rcx
	andq	%rsi, %rcx
	orq	$2, %rcx
	movq	%rcx, -1016(%rbp)
	movq	-1016(%rbp), %rcx
	movl	%ecx, %esi
	movabsq	$4294967296, %rcx
	orq	%rsi, %rcx
	movq	%rcx, -1016(%rbp)
	movq	-1024(%rbp), %rcx
	movq	-1016(%rbp), %rbx
	movq	%rcx, %rsi
	movq	%rbx, %rdi
	movq	%rsi, %rdi
	movq	%rbx, %rsi
	movq	%rdx, %rcx
	movq	%rax, %rdx
	call	string__plus
	movq	%rax, -432(%rbp)
	movq	%rdx, -424(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -448(%rbp)
	movl	$0, -440(%rbp)
	movl	$1, -436(%rbp)
	movl	8+_const_flag__space(%rip), %eax
	leal	-1(%rax), %edx
	movl	-424(%rbp), %eax
	cmpl	%eax, %edx
	jg	.L1740
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -720(%rbp)
	movaps	%xmm0, -704(%rbp)
	movaps	%xmm0, -688(%rbp)
	movaps	%xmm0, -672(%rbp)
	movaps	%xmm0, -656(%rbp)
	leaq	.LC142(%rip), %rax
	movq	%rax, -720(%rbp)
	movl	$1, -712(%rbp)
	movl	$1, -708(%rbp)
	movl	$65040, -704(%rbp)
	movq	_const_flag__space(%rip), %rax
	movq	8+_const_flag__space(%rip), %rdx
	movq	%rax, -696(%rbp)
	movq	%rdx, -688(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -680(%rbp)
	movl	$1, -668(%rbp)
	leaq	-720(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	movq	%rax, -448(%rbp)
	movq	%rdx, -440(%rbp)
	jmp	.L1741
.L1740:
	movl	8+_const_flag__space(%rip), %ecx
	movl	-424(%rbp), %edx
	movq	_const_flag__space(%rip), %rsi
	movq	8+_const_flag__space(%rip), %rax
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string_substr
	movq	%rax, -448(%rbp)
	movq	%rdx, -440(%rbp)
.L1741:
	leaq	-720(%rbp), %rdx
	movl	$0, %eax
	movl	$20, %ecx
	movq	%rdx, %rdi
	rep stosq
	leaq	.LC30(%rip), %rax
	movq	%rax, -720(%rbp)
	movl	$1, -708(%rbp)
	movl	$65040, -704(%rbp)
	movq	-432(%rbp), %rax
	movq	-424(%rbp), %rdx
	movq	%rax, -696(%rbp)
	movq	%rdx, -688(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -680(%rbp)
	movl	$1, -668(%rbp)
	movl	$65040, -664(%rbp)
	movq	-448(%rbp), %rax
	movq	-440(%rbp), %rdx
	movq	%rax, -656(%rbp)
	movq	%rdx, -648(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -640(%rbp)
	movl	$1, -628(%rbp)
	movl	$65040, -624(%rbp)
	movq	-776(%rbp), %rax
	movq	-768(%rbp), %rdx
	movq	%rax, -616(%rbp)
	movq	%rdx, -608(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -600(%rbp)
	movl	$1, -588(%rbp)
	leaq	-720(%rbp), %rax
	movq	%rax, %rsi
	movl	$4, %edi
	call	str_intp
	movq	%rax, -464(%rbp)
	movq	%rdx, -456(%rbp)
	movq	-464(%rbp), %rdx
	movq	-456(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	string_clone
	movq	%rax, -480(%rbp)
	movq	%rdx, -472(%rbp)
	leaq	-480(%rbp), %rdx
	leaq	-112(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	array_push
	addl	$1, -56(%rbp)
.L1735:
	movq	-840(%rbp), %rax
	movl	196(%rax), %eax
	cmpl	%eax, -56(%rbp)
	jl	.L1742
.L1734:
	movl	$0, -60(%rbp)
	jmp	.L1743
.L1744:
	movq	-840(%rbp), %rax
	movq	296(%rax), %rax
	movl	-60(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	movq	8(%rax), %rdx
	movq	(%rax), %rax
	movq	%rax, -544(%rbp)
	movq	%rdx, -536(%rbp)
	movq	-544(%rbp), %rdx
	movq	-536(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	string_clone
	movq	%rax, -560(%rbp)
	movq	%rdx, -552(%rbp)
	leaq	-560(%rbp), %rdx
	leaq	-112(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	array_push
	addl	$1, -60(%rbp)
.L1743:
	movq	-840(%rbp), %rax
	movl	308(%rax), %eax
	cmpl	%eax, -60(%rbp)
	jl	.L1744
	leaq	.LC173(%rip), %rax
	movq	%rax, -928(%rbp)
	movq	-920(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -920(%rbp)
	movq	-920(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -920(%rbp)
	leaq	.LC174(%rip), %rax
	movq	%rax, -912(%rbp)
	movq	-904(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -904(%rbp)
	movq	-904(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -904(%rbp)
	leaq	.LC142(%rip), %rax
	movq	%rax, -896(%rbp)
	movq	-888(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$1, %rax
	movq	%rax, -888(%rbp)
	movq	-888(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -888(%rbp)
	movq	-896(%rbp), %rax
	movq	-888(%rbp), %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %rdi
	movq	%rdx, %rsi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-112(%rbp), %rax
	movq	-104(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-96(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	call	Array_string_join
	addq	$32, %rsp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %rsi
	movq	%rdx, %rax
	movq	-928(%rbp), %r8
	movq	-920(%rbp), %r9
	movq	-912(%rbp), %rdx
	movq	-904(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string_replace
	movq	%rax, -144(%rbp)
	movq	%rdx, -136(%rbp)
	movq	-144(%rbp), %rax
	movq	-136(%rbp), %rdx
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
	.section	.rodata, "a"
.LC175:
	.string	"no such flag"
	.text
	.globl	flag__FlagParser_find_existing_flag
	.hidden	flag__FlagParser_find_existing_flag
flag__FlagParser_find_existing_flag:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$408, %rsp
	movq	%rdi, -408(%rbp)
	movq	%rsi, -416(%rbp)
	movq	%rdx, -432(%rbp)
	movq	%rcx, -424(%rbp)
	movl	$0, -36(%rbp)
	jmp	.L1747
.L1750:
	movq	-416(%rbp), %rax
	movq	184(%rax), %rcx
	movl	-36(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	salq	$3, %rax
	subq	%rdx, %rax
	salq	$3, %rax
	addq	%rcx, %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, -400(%rbp)
	movq	%rbx, -392(%rbp)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, -384(%rbp)
	movq	%rbx, -376(%rbp)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, -368(%rbp)
	movq	%rbx, -360(%rbp)
	movq	48(%rax), %rax
	movq	%rax, -352(%rbp)
	movq	-432(%rbp), %rax
	movq	-424(%rbp), %rdx
	movq	-400(%rbp), %rdi
	movq	-392(%rbp), %rsi
	movq	%rdx, %rcx
	movq	%rax, %rdx
	call	string__eq
	testb	%al, %al
	je	.L1748
	movq	-400(%rbp), %rax
	movq	-392(%rbp), %rdx
	movq	%rax, -336(%rbp)
	movq	%rdx, -328(%rbp)
	movq	-384(%rbp), %rax
	movq	-376(%rbp), %rdx
	movq	%rax, -320(%rbp)
	movq	%rdx, -312(%rbp)
	movq	-368(%rbp), %rax
	movq	-360(%rbp), %rdx
	movq	%rax, -304(%rbp)
	movq	%rdx, -296(%rbp)
	movq	-352(%rbp), %rax
	movq	%rax, -288(%rbp)
	leaq	-272(%rbp), %rcx
	leaq	-336(%rbp), %rax
	movl	$56, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_result_ok
	movq	-408(%rbp), %rax
	movq	-272(%rbp), %rcx
	movq	-264(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-256(%rbp), %rcx
	movq	-248(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-240(%rbp), %rcx
	movq	-232(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	movq	-224(%rbp), %rcx
	movq	-216(%rbp), %rbx
	movq	%rcx, 48(%rax)
	movq	%rbx, 56(%rax)
	movq	-208(%rbp), %rcx
	movq	-200(%rbp), %rbx
	movq	%rcx, 64(%rax)
	movq	%rbx, 72(%rax)
	movq	-192(%rbp), %rcx
	movq	-184(%rbp), %rbx
	movq	%rcx, 80(%rax)
	movq	%rbx, 88(%rax)
	jmp	.L1749
.L1748:
	addl	$1, -36(%rbp)
.L1747:
	movq	-416(%rbp), %rax
	movl	196(%rax), %eax
	cmpl	%eax, -36(%rbp)
	jl	.L1750
	leaq	.LC175(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$12, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	leaq	-80(%rbp), %rax
	movq	%r12, %rsi
	movq	%r13, %rdi
	movq	%r12, %rcx
	movq	%r13, %rbx
	movq	%rbx, %rdx
	movq	%rax, %rdi
	call	_v_error
	movq	-408(%rbp), %rax
	movq	%rax, %rsi
	movl	$0, %eax
	movl	$12, %edx
	movq	%rsi, %rdi
	movq	%rdx, %rcx
	rep stosq
	movq	-408(%rbp), %rax
	movb	$1, (%rax)
	movq	-408(%rbp), %rcx
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, 8(%rcx)
	movq	%rdx, 16(%rcx)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 24(%rcx)
	movq	%rdx, 32(%rcx)
.L1749:
	movq	-408(%rbp), %rax
	addq	$408, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%rbp
	ret
	.section	.rodata, "a"
.LC176:
	.string	"help"
.LC177:
	.string	"version"
	.text
	.globl	flag__FlagParser_handle_builtin_options
	.hidden	flag__FlagParser_handle_builtin_options
flag__FlagParser_handle_builtin_options:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$376, %rsp
	movq	%rdi, -392(%rbp)
	movb	$0, -49(%rbp)
	movb	$0, -50(%rbp)
	leaq	.LC176(%rip), %rax
	movq	%rdx, %rsi
	movabsq	$-4294967296, %rcx
	andq	%rsi, %rcx
	orq	$4, %rcx
	movq	%rcx, %rdx
	movq	%rdx, %rcx
	movl	%ecx, %esi
	movabsq	$4294967296, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	leaq	-160(%rbp), %rdi
	movq	-392(%rbp), %rsi
	movq	%rdx, %rcx
	movq	%rax, %rdx
	call	flag__FlagParser_find_existing_flag
	movzbl	-160(%rbp), %eax
	testb	%al, %al
	je	.L1753
	movq	-152(%rbp), %rax
	movq	-144(%rbp), %rdx
	movq	%rax, -384(%rbp)
	movq	%rdx, -376(%rbp)
	movq	-136(%rbp), %rax
	movq	-128(%rbp), %rdx
	movq	%rax, -368(%rbp)
	movq	%rdx, -360(%rbp)
	leaq	.LC176(%rip), %r14
	movq	%r15, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, %r15
	movq	%r15, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r15
	movq	%r14, %rcx
	movq	%r15, %rbx
	movq	%r14, %rax
	movq	%r15, %rdx
	movq	%rcx, %rsi
	movq	%rdx, %rdi
	movq	-392(%rbp), %rax
	movq	-392(%rbp), %rdx
	pushq	112(%rdx)
	pushq	104(%rdx)
	movl	$0, %r8d
	movl	$104, %ecx
	movq	%rdi, %rdx
	movq	%rax, %rdi
	call	flag__FlagParser_bool
	addq	$16, %rsp
	movb	%al, -50(%rbp)
.L1753:
	leaq	.LC177(%rip), %rax
	movq	%rax, -416(%rbp)
	movq	-408(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$7, %rax
	movq	%rax, -408(%rbp)
	movq	-408(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -408(%rbp)
	leaq	-256(%rbp), %rax
	movq	-392(%rbp), %rsi
	movq	-416(%rbp), %rdx
	movq	-408(%rbp), %rcx
	movq	%rax, %rdi
	call	flag__FlagParser_find_existing_flag
	movzbl	-256(%rbp), %eax
	testb	%al, %al
	je	.L1754
	movq	-248(%rbp), %rax
	movq	-240(%rbp), %rdx
	movq	%rax, -384(%rbp)
	movq	%rdx, -376(%rbp)
	movq	-232(%rbp), %rax
	movq	-224(%rbp), %rdx
	movq	%rax, -368(%rbp)
	movq	%rdx, -360(%rbp)
	leaq	.LC177(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$7, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	%r12, %rcx
	movq	%r13, %rbx
	movq	%r12, %rax
	movq	%r13, %rdx
	movq	%rcx, %rsi
	movq	%rdx, %rdi
	movq	-392(%rbp), %rax
	movq	-392(%rbp), %rdx
	pushq	128(%rdx)
	pushq	120(%rdx)
	movl	$0, %r8d
	movl	$0, %ecx
	movq	%rdi, %rdx
	movq	%rax, %rdi
	call	flag__FlagParser_bool
	addq	$16, %rsp
	movb	%al, -49(%rbp)
.L1754:
	cmpb	$0, -50(%rbp)
	je	.L1755
	movq	-392(%rbp), %rax
	movq	%rax, %rdi
	call	flag__FlagParser_usage
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	println
	movl	$0, %edi
	call	_v_exit
.L1755:
	cmpb	$0, -49(%rbp)
	je	.L1757
	leaq	-384(%rbp), %rdx
	movl	$0, %eax
	movl	$15, %ecx
	movq	%rdx, %rdi
	rep stosq
	leaq	.LC30(%rip), %rax
	movq	%rax, -384(%rbp)
	movl	$1, -372(%rbp)
	movl	$65040, -368(%rbp)
	movq	-392(%rbp), %rax
	movq	216(%rax), %rdx
	movq	208(%rax), %rax
	movq	%rax, -360(%rbp)
	movq	%rdx, -352(%rbp)
	leaq	.LC159(%rip), %rax
	movq	%rax, -344(%rbp)
	movl	$1, -336(%rbp)
	movl	$1, -332(%rbp)
	movl	$65040, -328(%rbp)
	movq	-392(%rbp), %rax
	movq	232(%rax), %rdx
	movq	224(%rax), %rax
	movq	%rax, -320(%rbp)
	movq	%rdx, -312(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -304(%rbp)
	movl	$1, -292(%rbp)
	leaq	-384(%rbp), %rax
	movq	%rax, %rsi
	movl	$3, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	println
	movl	$0, %edi
	call	_v_exit
.L1757:
	nop
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
	.globl	flag__FlagParser_finalize
flag__FlagParser_finalize:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$440, %rsp
	movq	%rdi, -456(%rbp)
	movq	%rsi, -464(%rbp)
	movq	-464(%rbp), %rax
	movq	%rax, %rdi
	call	flag__FlagParser_handle_builtin_options
	movq	-464(%rbp), %rax
	leaq	136(%rax), %rcx
	leaq	-208(%rbp), %rax
	movl	$0, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	array_clone_to_depth
	movq	-464(%rbp), %rax
	movzbl	280(%rax), %eax
	testb	%al, %al
	jne	.L1759
	movl	$0, -36(%rbp)
	jmp	.L1760
.L1765:
	movq	-200(%rbp), %rax
	movl	-36(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	movq	8(%rax), %rdx
	movq	(%rax), %rax
	movq	%rax, -336(%rbp)
	movq	%rdx, -328(%rbp)
	movl	-328(%rbp), %eax
	cmpl	$1, %eax
	jle	.L1761
	leaq	.LC149(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	-336(%rbp), %rsi
	movq	-328(%rbp), %rax
	movl	$2, %ecx
	movl	$0, %edx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string_substr
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %rsi
	movq	%rdx, %rax
	movq	%r12, %rdx
	movq	%r13, %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L1762
.L1761:
	movl	-328(%rbp), %eax
	cmpl	$2, %eax
	jne	.L1763
	movq	-336(%rbp), %rcx
	movq	-328(%rbp), %rax
	movl	$0, %edx
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	string_at
	cmpb	$45, %al
	jne	.L1763
.L1762:
	movq	-336(%rbp), %rax
	movq	-328(%rbp), %rdx
	movq	%rax, -352(%rbp)
	movq	%rdx, -344(%rbp)
	leaq	-352(%rbp), %rax
	movl	$16, %esi
	movq	%rax, %rdi
	call	memdup
	movq	%rax, %rdx
	leaq	-176(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	I_flag__UnknownFlagError_to_Interface_IError
	movq	-456(%rbp), %rax
	pxor	%xmm0, %xmm0
	movups	%xmm0, (%rax)
	movups	%xmm0, 16(%rax)
	movups	%xmm0, 32(%rax)
	movups	%xmm0, 48(%rax)
	movq	%xmm0, 64(%rax)
	movq	-456(%rbp), %rax
	movb	$1, (%rax)
	movq	-456(%rbp), %rcx
	movq	-176(%rbp), %rax
	movq	-168(%rbp), %rdx
	movq	%rax, 8(%rcx)
	movq	%rdx, 16(%rcx)
	movq	-160(%rbp), %rax
	movq	-152(%rbp), %rdx
	movq	%rax, 24(%rcx)
	movq	%rdx, 32(%rcx)
	jmp	.L1758
.L1763:
	addl	$1, -36(%rbp)
.L1760:
	movl	-188(%rbp), %eax
	cmpl	%eax, -36(%rbp)
	jl	.L1765
.L1759:
	movl	-188(%rbp), %edx
	movq	-464(%rbp), %rax
	movl	256(%rax), %eax
	cmpl	%eax, %edx
	jge	.L1766
	movq	-464(%rbp), %rax
	movl	256(%rax), %eax
	testl	%eax, %eax
	jle	.L1766
	movl	-188(%rbp), %eax
	movl	%eax, -360(%rbp)
	movq	-464(%rbp), %rax
	movl	256(%rax), %eax
	movl	%eax, -356(%rbp)
	leaq	-360(%rbp), %rax
	movl	$8, %esi
	movq	%rax, %rdi
	call	memdup
	movq	%rax, %rdx
	leaq	-144(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	I_flag__ArgsCountError_to_Interface_IError
	movq	-456(%rbp), %rax
	pxor	%xmm0, %xmm0
	movups	%xmm0, (%rax)
	movups	%xmm0, 16(%rax)
	movups	%xmm0, 32(%rax)
	movups	%xmm0, 48(%rax)
	movq	%xmm0, 64(%rax)
	movq	-456(%rbp), %rax
	movb	$1, (%rax)
	movq	-456(%rbp), %rcx
	movq	-144(%rbp), %rax
	movq	-136(%rbp), %rdx
	movq	%rax, 8(%rcx)
	movq	%rdx, 16(%rcx)
	movq	-128(%rbp), %rax
	movq	-120(%rbp), %rdx
	movq	%rax, 24(%rcx)
	movq	%rdx, 32(%rcx)
	jmp	.L1758
.L1766:
	movl	-188(%rbp), %edx
	movq	-464(%rbp), %rax
	movl	168(%rax), %eax
	cmpl	%eax, %edx
	jle	.L1767
	movq	-464(%rbp), %rax
	movl	168(%rax), %eax
	testl	%eax, %eax
	jle	.L1767
	movl	-188(%rbp), %eax
	movl	%eax, -368(%rbp)
	movq	-464(%rbp), %rax
	movl	168(%rax), %eax
	movl	%eax, -364(%rbp)
	leaq	-368(%rbp), %rax
	movl	$8, %esi
	movq	%rax, %rdi
	call	memdup
	movq	%rax, %rdx
	leaq	-112(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	I_flag__ArgsCountError_to_Interface_IError
	movq	-456(%rbp), %rax
	pxor	%xmm0, %xmm0
	movups	%xmm0, (%rax)
	movups	%xmm0, 16(%rax)
	movups	%xmm0, 32(%rax)
	movups	%xmm0, 48(%rax)
	movq	%xmm0, 64(%rax)
	movq	-456(%rbp), %rax
	movb	$1, (%rax)
	movq	-456(%rbp), %rcx
	movq	-112(%rbp), %rax
	movq	-104(%rbp), %rdx
	movq	%rax, 8(%rcx)
	movq	%rdx, 16(%rcx)
	movq	-96(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rax, 24(%rcx)
	movq	%rdx, 32(%rcx)
	jmp	.L1758
.L1767:
	movl	-188(%rbp), %eax
	testl	%eax, %eax
	jle	.L1768
	movq	-464(%rbp), %rax
	movl	168(%rax), %eax
	testl	%eax, %eax
	jne	.L1768
	movq	-464(%rbp), %rax
	movl	256(%rax), %eax
	testl	%eax, %eax
	jne	.L1768
	movl	-188(%rbp), %eax
	movl	%eax, -376(%rbp)
	movl	$0, -372(%rbp)
	leaq	-376(%rbp), %rax
	movl	$8, %esi
	movq	%rax, %rdi
	call	memdup
	movq	%rax, %rdx
	leaq	-80(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	I_flag__ArgsCountError_to_Interface_IError
	movq	-456(%rbp), %rax
	pxor	%xmm0, %xmm0
	movups	%xmm0, (%rax)
	movups	%xmm0, 16(%rax)
	movups	%xmm0, 32(%rax)
	movups	%xmm0, 48(%rax)
	movq	%xmm0, 64(%rax)
	movq	-456(%rbp), %rax
	movb	$1, (%rax)
	movq	-456(%rbp), %rcx
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, 8(%rcx)
	movq	%rdx, 16(%rcx)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 24(%rcx)
	movq	%rdx, 32(%rcx)
	jmp	.L1758
.L1768:
	movq	-464(%rbp), %rcx
	movq	40(%rcx), %rax
	movq	48(%rcx), %rdx
	movq	%rax, -448(%rbp)
	movq	%rdx, -440(%rbp)
	movq	56(%rcx), %rax
	movq	64(%rcx), %rdx
	movq	%rax, -432(%rbp)
	movq	%rdx, -424(%rbp)
	movl	-428(%rbp), %edx
	movq	-440(%rbp), %rcx
	leaq	-208(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	array_push_many
	movq	-208(%rbp), %rax
	movq	-200(%rbp), %rdx
	movq	%rax, -320(%rbp)
	movq	%rdx, -312(%rbp)
	movq	-192(%rbp), %rax
	movq	-184(%rbp), %rdx
	movq	%rax, -304(%rbp)
	movq	%rdx, -296(%rbp)
	leaq	-288(%rbp), %rcx
	leaq	-320(%rbp), %rax
	movl	$32, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_result_ok
	movq	-456(%rbp), %rax
	movq	-288(%rbp), %rcx
	movq	-280(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-272(%rbp), %rcx
	movq	-264(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-256(%rbp), %rcx
	movq	-248(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	movq	-240(%rbp), %rcx
	movq	-232(%rbp), %rbx
	movq	%rcx, 48(%rax)
	movq	%rbx, 56(%rax)
	movq	-224(%rbp), %rdx
	movq	%rdx, 64(%rax)
.L1758:
	movq	-456(%rbp), %rax
	addq	$440, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%rbp
	ret
	.globl	strings__textscanner__TextScanner_free
strings__textscanner__TextScanner_free:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	string_free
	nop
	leave
	ret
	.globl	encoding__binary__little_endian_put_u16
encoding__binary__little_endian_put_u16:
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, -24(%rbp)
	movl	%esi, %eax
	movw	%ax, -28(%rbp)
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movzbl	1(%rax), %eax
	movb	%al, -1(%rbp)
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movzwl	-28(%rbp), %edx
	movb	%dl, (%rax)
	movzwl	-28(%rbp), %eax
	shrw	$8, %ax
	movl	%eax, %edx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	addq	$1, %rax
	movb	%dl, (%rax)
	nop
	popq	%rbp
	ret
	.globl	encoding__binary__little_endian_put_u32
encoding__binary__little_endian_put_u32:
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movzbl	3(%rax), %eax
	movb	%al, -1(%rbp)
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movl	-28(%rbp), %edx
	movb	%dl, (%rax)
	movl	-28(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, %edx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	addq	$1, %rax
	movb	%dl, (%rax)
	movl	-28(%rbp), %eax
	shrl	$16, %eax
	movl	%eax, %edx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	addq	$2, %rax
	movb	%dl, (%rax)
	movl	-28(%rbp), %eax
	shrl	$24, %eax
	movl	%eax, %edx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	addq	$3, %rax
	movb	%dl, (%rax)
	nop
	popq	%rbp
	ret
	.globl	encoding__binary__little_endian_put_u64
encoding__binary__little_endian_put_u64:
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movzbl	7(%rax), %eax
	movb	%al, -1(%rbp)
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	-32(%rbp), %rdx
	movb	%dl, (%rax)
	movq	-32(%rbp), %rax
	shrq	$8, %rax
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	addq	$1, %rax
	movb	%dl, (%rax)
	movq	-32(%rbp), %rax
	shrq	$16, %rax
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	addq	$2, %rax
	movb	%dl, (%rax)
	movq	-32(%rbp), %rax
	shrq	$24, %rax
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	addq	$3, %rax
	movb	%dl, (%rax)
	movq	-32(%rbp), %rax
	shrq	$32, %rax
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	addq	$4, %rax
	movb	%dl, (%rax)
	movq	-32(%rbp), %rax
	shrq	$40, %rax
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	addq	$5, %rax
	movb	%dl, (%rax)
	movq	-32(%rbp), %rax
	shrq	$48, %rax
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	addq	$6, %rax
	movb	%dl, (%rax)
	movq	-32(%rbp), %rax
	shrq	$56, %rax
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	addq	$7, %rax
	movb	%dl, (%rax)
	nop
	popq	%rbp
	ret
	.globl	os__fd_close
os__fd_close:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$32, %rsp
	movl	%edi, -20(%rbp)
	cmpl	$-1, -20(%rbp)
	jne	.L1775
	movl	$0, -8(%rbp)
	movl	-8(%rbp), %eax
	jmp	.L1776
.L1775:
	movl	-20(%rbp), %eax
	movl	%eax, %edi
	call	close
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
.L1776:
	leave
	ret
	.globl	os__NotExpected_msg
	.hidden	os__NotExpected_msg
os__NotExpected_msg:
	pushq	%rbp
	movq	%rsp, %rbp
	movq	16(%rbp), %rax
	movq	24(%rbp), %rdx
	movq	%rax, -16(%rbp)
	movq	%rdx, -8(%rbp)
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rdx
	popq	%rbp
	ret
	.globl	os__NotExpected_code
	.hidden	os__NotExpected_code
os__NotExpected_code:
	pushq	%rbp
	movq	%rsp, %rbp
	movl	32(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	popq	%rbp
	ret
	.globl	os__fix_windows_path
	.hidden	os__fix_windows_path
os__fix_windows_path:
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movq	%rcx, %rdx
	movq	%rax, -32(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdx
	movq	%rax, -16(%rbp)
	movq	%rdx, -8(%rbp)
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rdx
	popq	%rbp
	ret
	.section	.rodata, "a"
.LC178:
	.string	"r+"
.LC179:
	.string	"b"
.LC180:
	.string	"Failed to open or create file \""
.LC181:
	.string	"\""
	.text
	.globl	os__open_file
os__open_file:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$360, %rsp
	movq	%rdi, -360(%rbp)
	movq	%rsi, %rax
	movq	%rdx, %rsi
	movq	%rsi, %rdx
	movq	%rax, -384(%rbp)
	movq	%rdx, -376(%rbp)
	movq	%rcx, %rax
	movq	%r8, %rcx
	movq	%rcx, %rdx
	movq	%rax, -400(%rbp)
	movq	%rdx, -392(%rbp)
	movl	$0, -52(%rbp)
	movb	$0, -53(%rbp)
	movl	$0, -60(%rbp)
	jmp	.L1784
.L1793:
	movq	-400(%rbp), %rdx
	movl	-60(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	movb	%al, -81(%rbp)
	cmpb	$119, -81(%rbp)
	jne	.L1785
	movl	_const_os__o_create(%rip), %edx
	movl	_const_os__o_trunc(%rip), %eax
	orl	%eax, %edx
	movl	_const_os__o_wronly(%rip), %eax
	orl	%edx, %eax
	orl	%eax, -52(%rbp)
	jmp	.L1786
.L1785:
	cmpb	$97, -81(%rbp)
	jne	.L1787
	movl	_const_os__o_create(%rip), %edx
	movl	_const_os__o_append(%rip), %eax
	orl	%eax, %edx
	movl	_const_os__o_wronly(%rip), %eax
	orl	%edx, %eax
	orl	%eax, -52(%rbp)
	movb	$1, -53(%rbp)
	jmp	.L1786
.L1787:
	cmpb	$114, -81(%rbp)
	jne	.L1788
	movl	_const_os__o_rdonly(%rip), %eax
	orl	%eax, -52(%rbp)
	jmp	.L1786
.L1788:
	cmpb	$98, -81(%rbp)
	je	.L1786
	cmpb	$115, -81(%rbp)
	jne	.L1790
	movl	_const_os__o_sync(%rip), %eax
	orl	%eax, -52(%rbp)
	jmp	.L1786
.L1790:
	cmpb	$110, -81(%rbp)
	jne	.L1791
	movl	_const_os__o_nonblock(%rip), %eax
	orl	%eax, -52(%rbp)
	jmp	.L1786
.L1791:
	cmpb	$99, -81(%rbp)
	jne	.L1792
	movl	_const_os__o_noctty(%rip), %eax
	orl	%eax, -52(%rbp)
	jmp	.L1786
.L1792:
	cmpb	$43, -81(%rbp)
	jne	.L1786
	movl	_const_os__o_wronly(%rip), %eax
	notl	%eax
	andl	%eax, -52(%rbp)
	movl	_const_os__o_rdwr(%rip), %eax
	orl	%eax, -52(%rbp)
.L1786:
	addl	$1, -60(%rbp)
.L1784:
	movl	-392(%rbp), %eax
	cmpl	%eax, -60(%rbp)
	jl	.L1793
	leaq	.LC178(%rip), %r10
	movq	%r11, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, %r11
	movq	%r11, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r11
	movq	-400(%rbp), %rsi
	movq	-392(%rbp), %rax
	movq	%r10, %rdx
	movq	%r11, %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L1794
	movl	_const_os__o_rdwr(%rip), %eax
	movl	%eax, -52(%rbp)
.L1794:
	movl	$438, -64(%rbp)
	movl	36(%rbp), %eax
	testl	%eax, %eax
	jle	.L1795
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	16(%rbp), %rax
	movq	24(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	32(%rbp), %rax
	movq	40(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$0, %edi
	call	array_get
	addq	$32, %rsp
	movl	(%rax), %eax
	movl	%eax, -64(%rbp)
.L1795:
	movq	-384(%rbp), %rdx
	movq	-376(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	os__fix_windows_path
	movq	%rax, -176(%rbp)
	movq	%rdx, -168(%rbp)
	movq	-176(%rbp), %rax
	movl	-64(%rbp), %edx
	movl	-52(%rbp), %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	movl	$0, %eax
	call	open
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -72(%rbp)
	cmpl	$-1, -72(%rbp)
	jne	.L1796
	call	__errno_location
	movl	(%rax), %eax
	movl	%eax, %edi
	call	os__posix_get_error_msg
	leaq	-160(%rbp), %rcx
	movq	%rax, %rsi
	movq	%rdx, %rdi
	movq	%rdx, %rax
	movq	%rax, %rdx
	movq	%rcx, %rdi
	call	_v_error
	movq	-360(%rbp), %rax
	pxor	%xmm0, %xmm0
	movups	%xmm0, (%rax)
	movups	%xmm0, 16(%rax)
	movups	%xmm0, 32(%rax)
	movq	%xmm0, 48(%rax)
	movq	-360(%rbp), %rax
	movb	$1, (%rax)
	movq	-360(%rbp), %rcx
	movq	-160(%rbp), %rax
	movq	-152(%rbp), %rdx
	movq	%rax, 8(%rcx)
	movq	%rdx, 16(%rcx)
	movq	-144(%rbp), %rax
	movq	-136(%rbp), %rdx
	movq	%rax, 24(%rcx)
	movq	%rdx, 32(%rcx)
	jmp	.L1797
.L1796:
	leaq	.LC30(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	leaq	.LC179(%rip), %r14
	movq	%r15, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$1, %rax
	movq	%rax, %r15
	movq	%r15, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r15
	movq	-400(%rbp), %rsi
	movq	-392(%rbp), %rax
	movq	%r12, %r8
	movq	%r13, %r9
	movq	%r14, %rdx
	movq	%r15, %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string_replace
	movq	%rax, -192(%rbp)
	movq	%rdx, -184(%rbp)
	movq	-192(%rbp), %rdx
	movl	-72(%rbp), %eax
	movq	%rdx, %rsi
	movl	%eax, %edi
	call	fdopen
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rdi
	call	isnil
	testb	%al, %al
	je	.L1798
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -352(%rbp)
	movaps	%xmm0, -336(%rbp)
	movaps	%xmm0, -320(%rbp)
	movaps	%xmm0, -304(%rbp)
	movaps	%xmm0, -288(%rbp)
	leaq	.LC180(%rip), %rax
	movq	%rax, -352(%rbp)
	movl	$31, -344(%rbp)
	movl	$1, -340(%rbp)
	movl	$65040, -336(%rbp)
	movq	-384(%rbp), %rax
	movq	-376(%rbp), %rdx
	movq	%rax, -328(%rbp)
	movq	%rdx, -320(%rbp)
	leaq	.LC181(%rip), %rax
	movq	%rax, -312(%rbp)
	movl	$1, -304(%rbp)
	movl	$1, -300(%rbp)
	leaq	-352(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	leaq	-128(%rbp), %rcx
	movq	%rax, %rsi
	movq	%rdx, %rdi
	movq	%rdx, %rax
	movq	%rax, %rdx
	movq	%rcx, %rdi
	call	_v_error
	movq	-360(%rbp), %rax
	pxor	%xmm0, %xmm0
	movups	%xmm0, (%rax)
	movups	%xmm0, 16(%rax)
	movups	%xmm0, 32(%rax)
	movq	%xmm0, 48(%rax)
	movq	-360(%rbp), %rax
	movb	$1, (%rax)
	movq	-360(%rbp), %rcx
	movq	-128(%rbp), %rax
	movq	-120(%rbp), %rdx
	movq	%rax, 8(%rcx)
	movq	%rdx, 16(%rcx)
	movq	-112(%rbp), %rax
	movq	-104(%rbp), %rdx
	movq	%rax, 24(%rcx)
	movq	%rdx, 32(%rcx)
	jmp	.L1797
.L1798:
	cmpb	$0, -53(%rbp)
	je	.L1799
	movq	-80(%rbp), %rax
	movl	$2, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	fseeko
.L1799:
	movq	-80(%rbp), %rax
	movq	%rax, -272(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -264(%rbp)
	movb	$1, -260(%rbp)
	leaq	-256(%rbp), %rcx
	leaq	-272(%rbp), %rax
	movl	$16, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_result_ok
	movq	-360(%rbp), %rax
	movq	-256(%rbp), %rcx
	movq	-248(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-240(%rbp), %rcx
	movq	-232(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-224(%rbp), %rcx
	movq	-216(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	movq	-208(%rbp), %rdx
	movq	%rdx, 48(%rax)
.L1797:
	movq	-360(%rbp), %rax
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
	.section	.rodata, "a"
.LC182:
	.string	"0 bytes written"
	.text
	.globl	os__File_write
os__File_write:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$216, %rsp
	movq	%rdi, -232(%rbp)
	movq	%rsi, -240(%rbp)
	movq	-240(%rbp), %rax
	movzbl	12(%rax), %eax
	testb	%al, %al
	jne	.L1802
	leaq	-112(%rbp), %rax
	movq	%rax, %rdi
	call	os__error_file_not_opened
	movq	-232(%rbp), %rax
	pxor	%xmm0, %xmm0
	movups	%xmm0, (%rax)
	movups	%xmm0, 16(%rax)
	movups	%xmm0, 32(%rax)
	movq	-232(%rbp), %rax
	movb	$1, (%rax)
	movq	-232(%rbp), %rcx
	movq	-112(%rbp), %rax
	movq	-104(%rbp), %rdx
	movq	%rax, 8(%rcx)
	movq	%rdx, 16(%rcx)
	movq	-96(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rax, 24(%rcx)
	movq	%rdx, 32(%rcx)
	jmp	.L1801
.L1802:
	movq	-240(%rbp), %rax
	movq	(%rax), %rcx
	movl	36(%rbp), %eax
	movslq	%eax, %rdx
	movq	24(%rbp), %rax
	movl	$1, %esi
	movq	%rax, %rdi
	call	fwrite
	movl	%eax, -36(%rbp)
	cmpl	$0, -36(%rbp)
	jne	.L1804
	movl	36(%rbp), %eax
	testl	%eax, %eax
	je	.L1804
	leaq	.LC182(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$15, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	leaq	-80(%rbp), %rax
	movq	%r12, %rsi
	movq	%r13, %rdi
	movq	%r12, %rcx
	movq	%r13, %rbx
	movq	%rbx, %rdx
	movq	%rax, %rdi
	call	_v_error
	movq	-232(%rbp), %rax
	pxor	%xmm0, %xmm0
	movups	%xmm0, (%rax)
	movups	%xmm0, 16(%rax)
	movups	%xmm0, 32(%rax)
	movq	-232(%rbp), %rax
	movb	$1, (%rax)
	movq	-232(%rbp), %rcx
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, 8(%rcx)
	movq	%rdx, 16(%rcx)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 24(%rcx)
	movq	%rdx, 32(%rcx)
	jmp	.L1801
.L1804:
	movl	-36(%rbp), %eax
	movl	%eax, -164(%rbp)
	leaq	-160(%rbp), %rcx
	leaq	-164(%rbp), %rax
	movl	$4, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_result_ok
	movq	-232(%rbp), %rax
	movq	-160(%rbp), %rcx
	movq	-152(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-144(%rbp), %rcx
	movq	-136(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-128(%rbp), %rcx
	movq	-120(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
.L1801:
	movq	-232(%rbp), %rax
	addq	$216, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%rbp
	ret
	.section	.rodata, "a"
.LC183:
	.string	"file read error"
	.text
	.globl	os__fread
	.hidden	os__fread
os__fread:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$232, %rsp
	movq	%rdi, -232(%rbp)
	movq	%rsi, -240(%rbp)
	movl	%edx, -244(%rbp)
	movl	%ecx, -248(%rbp)
	movq	%r8, -256(%rbp)
	movl	-248(%rbp), %eax
	movslq	%eax, %rdx
	movl	-244(%rbp), %eax
	movslq	%eax, %rsi
	movq	-256(%rbp), %rcx
	movq	-240(%rbp), %rax
	movq	%rax, %rdi
	call	fread
	movl	%eax, -36(%rbp)
	cmpl	$0, -36(%rbp)
	jg	.L1807
	movq	-256(%rbp), %rax
	movq	%rax, %rdi
	call	feof
	testl	%eax, %eax
	je	.L1808
	leaq	-164(%rbp), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	memdup
	movq	%rax, %rdx
	leaq	-112(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	I_os__Eof_to_Interface_IError
	movq	-232(%rbp), %rax
	pxor	%xmm0, %xmm0
	movups	%xmm0, (%rax)
	movups	%xmm0, 16(%rax)
	movups	%xmm0, 32(%rax)
	movq	-232(%rbp), %rax
	movb	$1, (%rax)
	movq	-232(%rbp), %rcx
	movq	-112(%rbp), %rax
	movq	-104(%rbp), %rdx
	movq	%rax, 8(%rcx)
	movq	%rdx, 16(%rcx)
	movq	-96(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rax, 24(%rcx)
	movq	%rdx, 32(%rcx)
	jmp	.L1806
.L1808:
	movq	-256(%rbp), %rax
	movq	%rax, %rdi
	call	ferror
	testl	%eax, %eax
	je	.L1807
	leaq	.LC183(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$15, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	leaq	-80(%rbp), %rax
	movq	%r12, %rsi
	movq	%r13, %rdi
	movq	%r12, %rcx
	movq	%r13, %rbx
	movq	%rbx, %rdx
	movq	%rax, %rdi
	call	_v_error
	movq	-232(%rbp), %rax
	pxor	%xmm0, %xmm0
	movups	%xmm0, (%rax)
	movups	%xmm0, 16(%rax)
	movups	%xmm0, 32(%rax)
	movq	-232(%rbp), %rax
	movb	$1, (%rax)
	movq	-232(%rbp), %rcx
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, 8(%rcx)
	movq	%rdx, 16(%rcx)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 24(%rcx)
	movq	%rdx, 32(%rcx)
	jmp	.L1806
.L1807:
	movl	-36(%rbp), %eax
	movl	%eax, -164(%rbp)
	leaq	-160(%rbp), %rcx
	leaq	-164(%rbp), %rax
	movl	$4, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_result_ok
	movq	-232(%rbp), %rax
	movq	-160(%rbp), %rcx
	movq	-152(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-144(%rbp), %rcx
	movq	-136(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-128(%rbp), %rcx
	movq	-120(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
.L1806:
	movq	-232(%rbp), %rax
	addq	$232, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%rbp
	ret
	.section	.rodata, "a"
.LC184:
	.string	"os: file not opened"
	.text
	.globl	os__FileNotOpenedError_msg
os__FileNotOpenedError_msg:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	leaq	.LC184(%rip), %rax
	movq	%rax, -32(%rbp)
	movl	$19, -24(%rbp)
	movl	$1, -20(%rbp)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdx
	movq	-8(%rbp), %rbx
	leave
	ret
	.section	.rodata, "a"
.LC185:
	.string	"os: size of type is 0"
	.text
	.globl	os__SizeOfTypeIs0Error_msg
os__SizeOfTypeIs0Error_msg:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	leaq	.LC185(%rip), %rax
	movq	%rax, -32(%rbp)
	movl	$21, -24(%rbp)
	movl	$1, -20(%rbp)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdx
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	os__error_file_not_opened
	.hidden	os__error_file_not_opened
os__error_file_not_opened:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	leaq	-32(%rbp), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	memdup
	movq	%rax, %rdx
	leaq	-32(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	I_os__FileNotOpenedError_to_Interface_IError
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movq	-40(%rbp), %rax
	leave
	ret
	.globl	os__error_size_of_type_0
	.hidden	os__error_size_of_type_0
os__error_size_of_type_0:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	leaq	-32(%rbp), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	memdup
	movq	%rax, %rdx
	leaq	-32(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	I_os__SizeOfTypeIs0Error_to_Interface_IError
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movq	-40(%rbp), %rax
	leave
	ret
	.section	.rodata, "a"
.LC186:
	.string	"incomplete struct write"
	.text
	.globl	os__File_write_struct_T_elf__header__Elf64_Ehdr
os__File_write_struct_T_elf__header__Elf64_Ehdr:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$280, %rsp
	movq	%rdi, -280(%rbp)
	movq	%rsi, -288(%rbp)
	movq	%rdx, -296(%rbp)
	movq	-288(%rbp), %rax
	movzbl	12(%rax), %eax
	testb	%al, %al
	jne	.L1820
	leaq	-176(%rbp), %rax
	movq	%rax, %rdi
	call	os__error_file_not_opened
	movq	-280(%rbp), %rax
	pxor	%xmm0, %xmm0
	movups	%xmm0, (%rax)
	movups	%xmm0, 16(%rax)
	movups	%xmm0, 32(%rax)
	movq	-280(%rbp), %rax
	movb	$1, (%rax)
	movq	-280(%rbp), %rcx
	movq	-176(%rbp), %rax
	movq	-168(%rbp), %rdx
	movq	%rax, 8(%rcx)
	movq	%rdx, 16(%rcx)
	movq	-160(%rbp), %rax
	movq	-152(%rbp), %rdx
	movq	%rax, 24(%rcx)
	movq	%rdx, 32(%rcx)
	jmp	.L1819
.L1820:
	movl	$64, -36(%rbp)
	cmpl	$0, -36(%rbp)
	jne	.L1822
	leaq	-144(%rbp), %rax
	movq	%rax, %rdi
	call	os__error_size_of_type_0
	movq	-280(%rbp), %rax
	pxor	%xmm0, %xmm0
	movups	%xmm0, (%rax)
	movups	%xmm0, 16(%rax)
	movups	%xmm0, 32(%rax)
	movq	-280(%rbp), %rax
	movb	$1, (%rax)
	movq	-280(%rbp), %rcx
	movq	-144(%rbp), %rax
	movq	-136(%rbp), %rdx
	movq	%rax, 8(%rcx)
	movq	%rdx, 16(%rcx)
	movq	-128(%rbp), %rax
	movq	-120(%rbp), %rdx
	movq	%rax, 24(%rcx)
	movq	%rdx, 32(%rcx)
	jmp	.L1819
.L1822:
	call	__errno_location
	movl	$0, (%rax)
	movq	-288(%rbp), %rax
	movq	(%rax), %rcx
	movl	-36(%rbp), %eax
	movslq	%eax, %rdx
	movq	-296(%rbp), %rax
	movl	$1, %esi
	movq	%rax, %rdi
	call	fwrite
	movl	%eax, -40(%rbp)
	call	__errno_location
	movl	(%rax), %eax
	testl	%eax, %eax
	je	.L1823
	call	__errno_location
	movl	(%rax), %eax
	movl	%eax, %edi
	call	os__posix_get_error_msg
	leaq	-112(%rbp), %rcx
	movq	%rax, %rsi
	movq	%rdx, %rdi
	movq	%rdx, %rax
	movq	%rax, %rdx
	movq	%rcx, %rdi
	call	_v_error
	movq	-280(%rbp), %rax
	pxor	%xmm0, %xmm0
	movups	%xmm0, (%rax)
	movups	%xmm0, 16(%rax)
	movups	%xmm0, 32(%rax)
	movq	-280(%rbp), %rax
	movb	$1, (%rax)
	movq	-280(%rbp), %rcx
	movq	-112(%rbp), %rax
	movq	-104(%rbp), %rdx
	movq	%rax, 8(%rcx)
	movq	%rdx, 16(%rcx)
	movq	-96(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rax, 24(%rcx)
	movq	%rdx, 32(%rcx)
	jmp	.L1819
.L1823:
	movl	-40(%rbp), %eax
	cmpl	-36(%rbp), %eax
	je	.L1824
	leaq	.LC186(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$23, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	leaq	-80(%rbp), %rax
	movl	-40(%rbp), %edx
	movq	%r12, %rsi
	movq	%r13, %rdi
	movq	%r12, %rcx
	movq	%r13, %rbx
	movq	%rbx, %rdi
	movl	%edx, %ecx
	movq	%rdi, %rdx
	movq	%rax, %rdi
	call	error_with_code
	movq	-280(%rbp), %rax
	pxor	%xmm0, %xmm0
	movups	%xmm0, (%rax)
	movups	%xmm0, 16(%rax)
	movups	%xmm0, 32(%rax)
	movq	-280(%rbp), %rax
	movb	$1, (%rax)
	movq	-280(%rbp), %rcx
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, 8(%rcx)
	movq	%rdx, 16(%rcx)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 24(%rcx)
	movq	%rdx, 32(%rcx)
	jmp	.L1819
.L1824:
	movq	-280(%rbp), %rax
	pxor	%xmm0, %xmm0
	movups	%xmm0, (%rax)
	movups	%xmm0, 16(%rax)
	movups	%xmm0, 32(%rax)
.L1819:
	movq	-280(%rbp), %rax
	addq	$280, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%rbp
	ret
	.globl	os__File_write_struct_T_elf__header__Elf64_Sym
os__File_write_struct_T_elf__header__Elf64_Sym:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$280, %rsp
	movq	%rdi, -280(%rbp)
	movq	%rsi, -288(%rbp)
	movq	%rdx, -296(%rbp)
	movq	-288(%rbp), %rax
	movzbl	12(%rax), %eax
	testb	%al, %al
	jne	.L1827
	leaq	-176(%rbp), %rax
	movq	%rax, %rdi
	call	os__error_file_not_opened
	movq	-280(%rbp), %rax
	pxor	%xmm0, %xmm0
	movups	%xmm0, (%rax)
	movups	%xmm0, 16(%rax)
	movups	%xmm0, 32(%rax)
	movq	-280(%rbp), %rax
	movb	$1, (%rax)
	movq	-280(%rbp), %rcx
	movq	-176(%rbp), %rax
	movq	-168(%rbp), %rdx
	movq	%rax, 8(%rcx)
	movq	%rdx, 16(%rcx)
	movq	-160(%rbp), %rax
	movq	-152(%rbp), %rdx
	movq	%rax, 24(%rcx)
	movq	%rdx, 32(%rcx)
	jmp	.L1826
.L1827:
	movl	$24, -36(%rbp)
	cmpl	$0, -36(%rbp)
	jne	.L1829
	leaq	-144(%rbp), %rax
	movq	%rax, %rdi
	call	os__error_size_of_type_0
	movq	-280(%rbp), %rax
	pxor	%xmm0, %xmm0
	movups	%xmm0, (%rax)
	movups	%xmm0, 16(%rax)
	movups	%xmm0, 32(%rax)
	movq	-280(%rbp), %rax
	movb	$1, (%rax)
	movq	-280(%rbp), %rcx
	movq	-144(%rbp), %rax
	movq	-136(%rbp), %rdx
	movq	%rax, 8(%rcx)
	movq	%rdx, 16(%rcx)
	movq	-128(%rbp), %rax
	movq	-120(%rbp), %rdx
	movq	%rax, 24(%rcx)
	movq	%rdx, 32(%rcx)
	jmp	.L1826
.L1829:
	call	__errno_location
	movl	$0, (%rax)
	movq	-288(%rbp), %rax
	movq	(%rax), %rcx
	movl	-36(%rbp), %eax
	movslq	%eax, %rdx
	movq	-296(%rbp), %rax
	movl	$1, %esi
	movq	%rax, %rdi
	call	fwrite
	movl	%eax, -40(%rbp)
	call	__errno_location
	movl	(%rax), %eax
	testl	%eax, %eax
	je	.L1830
	call	__errno_location
	movl	(%rax), %eax
	movl	%eax, %edi
	call	os__posix_get_error_msg
	leaq	-112(%rbp), %rcx
	movq	%rax, %rsi
	movq	%rdx, %rdi
	movq	%rdx, %rax
	movq	%rax, %rdx
	movq	%rcx, %rdi
	call	_v_error
	movq	-280(%rbp), %rax
	pxor	%xmm0, %xmm0
	movups	%xmm0, (%rax)
	movups	%xmm0, 16(%rax)
	movups	%xmm0, 32(%rax)
	movq	-280(%rbp), %rax
	movb	$1, (%rax)
	movq	-280(%rbp), %rcx
	movq	-112(%rbp), %rax
	movq	-104(%rbp), %rdx
	movq	%rax, 8(%rcx)
	movq	%rdx, 16(%rcx)
	movq	-96(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rax, 24(%rcx)
	movq	%rdx, 32(%rcx)
	jmp	.L1826
.L1830:
	movl	-40(%rbp), %eax
	cmpl	-36(%rbp), %eax
	je	.L1831
	leaq	.LC186(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$23, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	leaq	-80(%rbp), %rax
	movl	-40(%rbp), %edx
	movq	%r12, %rsi
	movq	%r13, %rdi
	movq	%r12, %rcx
	movq	%r13, %rbx
	movq	%rbx, %rdi
	movl	%edx, %ecx
	movq	%rdi, %rdx
	movq	%rax, %rdi
	call	error_with_code
	movq	-280(%rbp), %rax
	pxor	%xmm0, %xmm0
	movups	%xmm0, (%rax)
	movups	%xmm0, 16(%rax)
	movups	%xmm0, 32(%rax)
	movq	-280(%rbp), %rax
	movb	$1, (%rax)
	movq	-280(%rbp), %rcx
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, 8(%rcx)
	movq	%rdx, 16(%rcx)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 24(%rcx)
	movq	%rdx, 32(%rcx)
	jmp	.L1826
.L1831:
	movq	-280(%rbp), %rax
	pxor	%xmm0, %xmm0
	movups	%xmm0, (%rax)
	movups	%xmm0, 16(%rax)
	movups	%xmm0, 32(%rax)
.L1826:
	movq	-280(%rbp), %rax
	addq	$280, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%rbp
	ret
	.globl	os__File_write_struct_T_elf__header__Elf64_Rela
os__File_write_struct_T_elf__header__Elf64_Rela:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$280, %rsp
	movq	%rdi, -280(%rbp)
	movq	%rsi, -288(%rbp)
	movq	%rdx, -296(%rbp)
	movq	-288(%rbp), %rax
	movzbl	12(%rax), %eax
	testb	%al, %al
	jne	.L1834
	leaq	-176(%rbp), %rax
	movq	%rax, %rdi
	call	os__error_file_not_opened
	movq	-280(%rbp), %rax
	pxor	%xmm0, %xmm0
	movups	%xmm0, (%rax)
	movups	%xmm0, 16(%rax)
	movups	%xmm0, 32(%rax)
	movq	-280(%rbp), %rax
	movb	$1, (%rax)
	movq	-280(%rbp), %rcx
	movq	-176(%rbp), %rax
	movq	-168(%rbp), %rdx
	movq	%rax, 8(%rcx)
	movq	%rdx, 16(%rcx)
	movq	-160(%rbp), %rax
	movq	-152(%rbp), %rdx
	movq	%rax, 24(%rcx)
	movq	%rdx, 32(%rcx)
	jmp	.L1833
.L1834:
	movl	$24, -36(%rbp)
	cmpl	$0, -36(%rbp)
	jne	.L1836
	leaq	-144(%rbp), %rax
	movq	%rax, %rdi
	call	os__error_size_of_type_0
	movq	-280(%rbp), %rax
	pxor	%xmm0, %xmm0
	movups	%xmm0, (%rax)
	movups	%xmm0, 16(%rax)
	movups	%xmm0, 32(%rax)
	movq	-280(%rbp), %rax
	movb	$1, (%rax)
	movq	-280(%rbp), %rcx
	movq	-144(%rbp), %rax
	movq	-136(%rbp), %rdx
	movq	%rax, 8(%rcx)
	movq	%rdx, 16(%rcx)
	movq	-128(%rbp), %rax
	movq	-120(%rbp), %rdx
	movq	%rax, 24(%rcx)
	movq	%rdx, 32(%rcx)
	jmp	.L1833
.L1836:
	call	__errno_location
	movl	$0, (%rax)
	movq	-288(%rbp), %rax
	movq	(%rax), %rcx
	movl	-36(%rbp), %eax
	movslq	%eax, %rdx
	movq	-296(%rbp), %rax
	movl	$1, %esi
	movq	%rax, %rdi
	call	fwrite
	movl	%eax, -40(%rbp)
	call	__errno_location
	movl	(%rax), %eax
	testl	%eax, %eax
	je	.L1837
	call	__errno_location
	movl	(%rax), %eax
	movl	%eax, %edi
	call	os__posix_get_error_msg
	leaq	-112(%rbp), %rcx
	movq	%rax, %rsi
	movq	%rdx, %rdi
	movq	%rdx, %rax
	movq	%rax, %rdx
	movq	%rcx, %rdi
	call	_v_error
	movq	-280(%rbp), %rax
	pxor	%xmm0, %xmm0
	movups	%xmm0, (%rax)
	movups	%xmm0, 16(%rax)
	movups	%xmm0, 32(%rax)
	movq	-280(%rbp), %rax
	movb	$1, (%rax)
	movq	-280(%rbp), %rcx
	movq	-112(%rbp), %rax
	movq	-104(%rbp), %rdx
	movq	%rax, 8(%rcx)
	movq	%rdx, 16(%rcx)
	movq	-96(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rax, 24(%rcx)
	movq	%rdx, 32(%rcx)
	jmp	.L1833
.L1837:
	movl	-40(%rbp), %eax
	cmpl	-36(%rbp), %eax
	je	.L1838
	leaq	.LC186(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$23, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	leaq	-80(%rbp), %rax
	movl	-40(%rbp), %edx
	movq	%r12, %rsi
	movq	%r13, %rdi
	movq	%r12, %rcx
	movq	%r13, %rbx
	movq	%rbx, %rdi
	movl	%edx, %ecx
	movq	%rdi, %rdx
	movq	%rax, %rdi
	call	error_with_code
	movq	-280(%rbp), %rax
	pxor	%xmm0, %xmm0
	movups	%xmm0, (%rax)
	movups	%xmm0, 16(%rax)
	movups	%xmm0, 32(%rax)
	movq	-280(%rbp), %rax
	movb	$1, (%rax)
	movq	-280(%rbp), %rcx
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, 8(%rcx)
	movq	%rdx, 16(%rcx)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 24(%rcx)
	movq	%rdx, 32(%rcx)
	jmp	.L1833
.L1838:
	movq	-280(%rbp), %rax
	pxor	%xmm0, %xmm0
	movups	%xmm0, (%rax)
	movups	%xmm0, 16(%rax)
	movups	%xmm0, 32(%rax)
.L1833:
	movq	-280(%rbp), %rax
	addq	$280, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%rbp
	ret
	.globl	os__File_write_struct_T_elf__header__Elf64_Shdr
os__File_write_struct_T_elf__header__Elf64_Shdr:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$280, %rsp
	movq	%rdi, -280(%rbp)
	movq	%rsi, -288(%rbp)
	movq	%rdx, -296(%rbp)
	movq	-288(%rbp), %rax
	movzbl	12(%rax), %eax
	testb	%al, %al
	jne	.L1841
	leaq	-176(%rbp), %rax
	movq	%rax, %rdi
	call	os__error_file_not_opened
	movq	-280(%rbp), %rax
	pxor	%xmm0, %xmm0
	movups	%xmm0, (%rax)
	movups	%xmm0, 16(%rax)
	movups	%xmm0, 32(%rax)
	movq	-280(%rbp), %rax
	movb	$1, (%rax)
	movq	-280(%rbp), %rcx
	movq	-176(%rbp), %rax
	movq	-168(%rbp), %rdx
	movq	%rax, 8(%rcx)
	movq	%rdx, 16(%rcx)
	movq	-160(%rbp), %rax
	movq	-152(%rbp), %rdx
	movq	%rax, 24(%rcx)
	movq	%rdx, 32(%rcx)
	jmp	.L1840
.L1841:
	movl	$64, -36(%rbp)
	cmpl	$0, -36(%rbp)
	jne	.L1843
	leaq	-144(%rbp), %rax
	movq	%rax, %rdi
	call	os__error_size_of_type_0
	movq	-280(%rbp), %rax
	pxor	%xmm0, %xmm0
	movups	%xmm0, (%rax)
	movups	%xmm0, 16(%rax)
	movups	%xmm0, 32(%rax)
	movq	-280(%rbp), %rax
	movb	$1, (%rax)
	movq	-280(%rbp), %rcx
	movq	-144(%rbp), %rax
	movq	-136(%rbp), %rdx
	movq	%rax, 8(%rcx)
	movq	%rdx, 16(%rcx)
	movq	-128(%rbp), %rax
	movq	-120(%rbp), %rdx
	movq	%rax, 24(%rcx)
	movq	%rdx, 32(%rcx)
	jmp	.L1840
.L1843:
	call	__errno_location
	movl	$0, (%rax)
	movq	-288(%rbp), %rax
	movq	(%rax), %rcx
	movl	-36(%rbp), %eax
	movslq	%eax, %rdx
	movq	-296(%rbp), %rax
	movl	$1, %esi
	movq	%rax, %rdi
	call	fwrite
	movl	%eax, -40(%rbp)
	call	__errno_location
	movl	(%rax), %eax
	testl	%eax, %eax
	je	.L1844
	call	__errno_location
	movl	(%rax), %eax
	movl	%eax, %edi
	call	os__posix_get_error_msg
	leaq	-112(%rbp), %rcx
	movq	%rax, %rsi
	movq	%rdx, %rdi
	movq	%rdx, %rax
	movq	%rax, %rdx
	movq	%rcx, %rdi
	call	_v_error
	movq	-280(%rbp), %rax
	pxor	%xmm0, %xmm0
	movups	%xmm0, (%rax)
	movups	%xmm0, 16(%rax)
	movups	%xmm0, 32(%rax)
	movq	-280(%rbp), %rax
	movb	$1, (%rax)
	movq	-280(%rbp), %rcx
	movq	-112(%rbp), %rax
	movq	-104(%rbp), %rdx
	movq	%rax, 8(%rcx)
	movq	%rdx, 16(%rcx)
	movq	-96(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rax, 24(%rcx)
	movq	%rdx, 32(%rcx)
	jmp	.L1840
.L1844:
	movl	-40(%rbp), %eax
	cmpl	-36(%rbp), %eax
	je	.L1845
	leaq	.LC186(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$23, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	leaq	-80(%rbp), %rax
	movl	-40(%rbp), %edx
	movq	%r12, %rsi
	movq	%r13, %rdi
	movq	%r12, %rcx
	movq	%r13, %rbx
	movq	%rbx, %rdi
	movl	%edx, %ecx
	movq	%rdi, %rdx
	movq	%rax, %rdi
	call	error_with_code
	movq	-280(%rbp), %rax
	pxor	%xmm0, %xmm0
	movups	%xmm0, (%rax)
	movups	%xmm0, 16(%rax)
	movups	%xmm0, 32(%rax)
	movq	-280(%rbp), %rax
	movb	$1, (%rax)
	movq	-280(%rbp), %rcx
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, 8(%rcx)
	movq	%rdx, 16(%rcx)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 24(%rcx)
	movq	%rdx, 32(%rcx)
	jmp	.L1840
.L1845:
	movq	-280(%rbp), %rax
	pxor	%xmm0, %xmm0
	movups	%xmm0, (%rax)
	movups	%xmm0, 16(%rax)
	movups	%xmm0, 32(%rax)
.L1840:
	movq	-280(%rbp), %rax
	addq	$280, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%rbp
	ret
	.section	.rodata, "a"
.LC187:
	.string	"fseek failed"
.LC188:
	.string	"ftell failed"
.LC189:
	.string	"int("
.LC190:
	.string	") cast results in "
	.text
	.globl	os__find_cfile_size
	.hidden	os__find_cfile_size
os__find_cfile_size:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$328, %rsp
	movq	%rdi, -360(%rbp)
	movq	%rsi, -368(%rbp)
	movq	-368(%rbp), %rax
	movl	$2, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	fseek
	movl	%eax, -52(%rbp)
	movq	-368(%rbp), %rax
	movq	%rax, %rdi
	call	ftell
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	je	.L1848
	cmpl	$0, -52(%rbp)
	je	.L1848
	leaq	.LC187(%rip), %r14
	movq	%r15, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$12, %rax
	movq	%rax, %r15
	movq	%r15, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r15
	leaq	-176(%rbp), %rax
	movq	%r14, %rsi
	movq	%r15, %rdi
	movq	%r14, %rcx
	movq	%r15, %rbx
	movq	%rbx, %rdx
	movq	%rax, %rdi
	call	_v_error
	movq	-360(%rbp), %rax
	pxor	%xmm0, %xmm0
	movups	%xmm0, (%rax)
	movups	%xmm0, 16(%rax)
	movups	%xmm0, 32(%rax)
	movq	-360(%rbp), %rax
	movb	$1, (%rax)
	movq	-360(%rbp), %rcx
	movq	-176(%rbp), %rax
	movq	-168(%rbp), %rdx
	movq	%rax, 8(%rcx)
	movq	%rdx, 16(%rcx)
	movq	-160(%rbp), %rax
	movq	-152(%rbp), %rdx
	movq	%rax, 24(%rcx)
	movq	%rdx, 32(%rcx)
	jmp	.L1847
.L1848:
	cmpl	$0, -52(%rbp)
	je	.L1850
	cmpq	$0, -64(%rbp)
	jns	.L1850
	leaq	.LC188(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$12, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	leaq	-144(%rbp), %rax
	movq	%r12, %rsi
	movq	%r13, %rdi
	movq	%r12, %rcx
	movq	%r13, %rbx
	movq	%rbx, %rdx
	movq	%rax, %rdi
	call	_v_error
	movq	-360(%rbp), %rax
	pxor	%xmm0, %xmm0
	movups	%xmm0, (%rax)
	movups	%xmm0, 16(%rax)
	movups	%xmm0, 32(%rax)
	movq	-360(%rbp), %rax
	movb	$1, (%rax)
	movq	-360(%rbp), %rcx
	movq	-144(%rbp), %rax
	movq	-136(%rbp), %rdx
	movq	%rax, 8(%rcx)
	movq	%rdx, 16(%rcx)
	movq	-128(%rbp), %rax
	movq	-120(%rbp), %rdx
	movq	%rax, 24(%rcx)
	movq	%rdx, 32(%rcx)
	jmp	.L1847
.L1850:
	movq	-64(%rbp), %rax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	cltq
	cmpq	%rax, -64(%rbp)
	jle	.L1851
	leaq	-352(%rbp), %rdx
	movl	$0, %eax
	movl	$15, %ecx
	movq	%rdx, %rdi
	rep stosq
	leaq	.LC189(%rip), %rax
	movq	%rax, -352(%rbp)
	movl	$4, -344(%rbp)
	movl	$1, -340(%rbp)
	movl	$65033, -336(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, -328(%rbp)
	leaq	.LC190(%rip), %rax
	movq	%rax, -312(%rbp)
	movl	$18, -304(%rbp)
	movl	$1, -300(%rbp)
	movl	$65031, -296(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -288(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -272(%rbp)
	movl	$1, -260(%rbp)
	leaq	-352(%rbp), %rax
	movq	%rax, %rsi
	movl	$3, %edi
	call	str_intp
	leaq	-112(%rbp), %rcx
	movq	%rax, %rsi
	movq	%rdx, %rdi
	movq	%rdx, %rax
	movq	%rax, %rdx
	movq	%rcx, %rdi
	call	_v_error
	movq	-360(%rbp), %rax
	pxor	%xmm0, %xmm0
	movups	%xmm0, (%rax)
	movups	%xmm0, 16(%rax)
	movups	%xmm0, 32(%rax)
	movq	-360(%rbp), %rax
	movb	$1, (%rax)
	movq	-360(%rbp), %rcx
	movq	-112(%rbp), %rax
	movq	-104(%rbp), %rdx
	movq	%rax, 8(%rcx)
	movq	%rdx, 16(%rcx)
	movq	-96(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rax, 24(%rcx)
	movq	%rdx, 32(%rcx)
	jmp	.L1847
.L1851:
	movq	-368(%rbp), %rax
	movq	%rax, %rdi
	call	rewind
	movl	-68(%rbp), %eax
	movl	%eax, -228(%rbp)
	leaq	-224(%rbp), %rcx
	leaq	-228(%rbp), %rax
	movl	$4, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_result_ok
	movq	-360(%rbp), %rax
	movq	-224(%rbp), %rcx
	movq	-216(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-208(%rbp), %rcx
	movq	-200(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-192(%rbp), %rcx
	movq	-184(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
.L1847:
	movq	-360(%rbp), %rax
	addq	$328, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
	.globl	os__slurp_file_in_builder
	.hidden	os__slurp_file_in_builder
os__slurp_file_in_builder:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$4392, %rsp
	movq	%rdi, -4392(%rbp)
	movq	%rsi, -4400(%rbp)
	movq	$0, -4128(%rbp)
	movq	$0, -4120(%rbp)
	leaq	-4112(%rbp), %rdx
	movl	$0, %eax
	movl	$510, %ecx
	movq	%rdx, %rdi
	rep stosq
	leaq	-4160(%rbp), %rax
	movl	$4096, %esi
	movq	%rax, %rdi
	call	strings__new_builder
.L1857:
	leaq	-4352(%rbp), %rax
	movq	-4400(%rbp), %rdx
	leaq	-4128(%rbp), %rsi
	movq	%rdx, %r8
	movl	$4096, %ecx
	movl	$1, %edx
	movq	%rax, %rdi
	call	os__fread
	movzbl	-4352(%rbp), %eax
	testb	%al, %al
	je	.L1854
	movq	-4344(%rbp), %rax
	movq	-4336(%rbp), %rdx
	movq	%rax, -4384(%rbp)
	movq	%rdx, -4376(%rbp)
	movq	-4328(%rbp), %rax
	movq	-4320(%rbp), %rdx
	movq	%rax, -4368(%rbp)
	movq	%rdx, -4360(%rbp)
	movl	-4376(%rbp), %eax
	movl	$6, %edx
	cmpl	%edx, %eax
	jne	.L1855
	movq	-4160(%rbp), %rax
	movq	-4152(%rbp), %rdx
	movq	%rax, -4272(%rbp)
	movq	%rdx, -4264(%rbp)
	movq	-4144(%rbp), %rax
	movq	-4136(%rbp), %rdx
	movq	%rax, -4256(%rbp)
	movq	%rdx, -4248(%rbp)
	leaq	-4240(%rbp), %rcx
	leaq	-4272(%rbp), %rax
	movl	$32, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_result_ok
	movq	-4392(%rbp), %rax
	movq	-4240(%rbp), %rcx
	movq	-4232(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-4224(%rbp), %rcx
	movq	-4216(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-4208(%rbp), %rcx
	movq	-4200(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	movq	-4192(%rbp), %rcx
	movq	-4184(%rbp), %rbx
	movq	%rcx, 48(%rax)
	movq	%rbx, 56(%rax)
	movq	-4176(%rbp), %rdx
	movq	%rdx, 64(%rax)
	jmp	.L1853
.L1855:
	leaq	-4160(%rbp), %rax
	movq	%rax, %rdi
	call	strings__Builder_free
	movq	-4392(%rbp), %rax
	pxor	%xmm0, %xmm0
	movups	%xmm0, (%rax)
	movups	%xmm0, 16(%rax)
	movups	%xmm0, 32(%rax)
	movups	%xmm0, 48(%rax)
	movq	%xmm0, 64(%rax)
	movq	-4392(%rbp), %rax
	movb	$1, (%rax)
	movq	-4392(%rbp), %rcx
	movq	-4384(%rbp), %rax
	movq	-4376(%rbp), %rdx
	movq	%rax, 8(%rcx)
	movq	%rdx, 16(%rcx)
	movq	-4368(%rbp), %rax
	movq	-4360(%rbp), %rdx
	movq	%rax, 24(%rcx)
	movq	%rdx, 32(%rcx)
	jmp	.L1853
.L1854:
	leaq	-4352(%rbp), %rax
	addq	$40, %rax
	movl	(%rax), %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %edx
	leaq	-4128(%rbp), %rcx
	leaq	-4160(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	strings__Builder_write_ptr
	jmp	.L1857
.L1853:
	movq	-4392(%rbp), %rax
	movq	-8(%rbp), %rbx
	leave
	ret
	.section	.rodata, "a"
.LC191:
	.string	"rb"
.LC192:
	.string	"fread failed"
	.text
	.globl	os__read_file
os__read_file:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$504, %rsp
	movq	%rdi, -504(%rbp)
	movq	%rdx, %rcx
	movq	%rsi, %rax
	movq	%rdi, %rdx
	movq	%rcx, %rdx
	movq	%rax, -528(%rbp)
	movq	%rdx, -520(%rbp)
	movb	$0, -33(%rbp)
	leaq	.LC191(%rip), %rax
	movq	%rax, -96(%rbp)
	movl	$2, -88(%rbp)
	movl	$1, -84(%rbp)
	leaq	-144(%rbp), %rax
	movq	-96(%rbp), %rcx
	movq	-88(%rbp), %rdi
	movq	-528(%rbp), %rsi
	movq	-520(%rbp), %rdx
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	os__vfopen
	movzbl	-144(%rbp), %eax
	testb	%al, %al
	je	.L1860
	leaq	-144(%rbp), %rcx
	leaq	-400(%rbp), %rax
	movl	$40, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy
	movq	-504(%rbp), %rax
	movq	-400(%rbp), %rcx
	movq	-392(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-384(%rbp), %rcx
	movq	-376(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-368(%rbp), %rcx
	movq	-360(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	movq	-352(%rbp), %rdx
	movq	%rdx, 48(%rax)
	jmp	.L1861
.L1860:
	leaq	-144(%rbp), %rax
	addq	$40, %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movb	$1, -33(%rbp)
	leaq	-192(%rbp), %rax
	movq	-48(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	os__find_cfile_size
	movzbl	-192(%rbp), %eax
	testb	%al, %al
	je	.L1862
	cmpb	$0, -33(%rbp)
	je	.L1863
	movq	-48(%rbp), %rax
	movq	%rax, %rdi
	call	fclose
.L1863:
	leaq	-192(%rbp), %rcx
	leaq	-400(%rbp), %rax
	movl	$40, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy
	movq	-504(%rbp), %rax
	movq	-400(%rbp), %rcx
	movq	-392(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-384(%rbp), %rcx
	movq	-376(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-368(%rbp), %rcx
	movq	-360(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	movq	-352(%rbp), %rdx
	movq	%rdx, 48(%rax)
	jmp	.L1861
.L1862:
	leaq	-192(%rbp), %rax
	addq	$40, %rax
	movl	(%rax), %eax
	movl	%eax, -52(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.L1864
	leaq	-400(%rbp), %rax
	movq	-48(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	os__slurp_file_in_builder
	movzbl	-400(%rbp), %eax
	testb	%al, %al
	je	.L1865
	cmpb	$0, -33(%rbp)
	je	.L1866
	movq	-48(%rbp), %rax
	movq	%rax, %rdi
	call	fclose
.L1866:
	leaq	-400(%rbp), %rcx
	leaq	-464(%rbp), %rax
	movl	$40, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy
	movq	-504(%rbp), %rax
	movq	-464(%rbp), %rcx
	movq	-456(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-448(%rbp), %rcx
	movq	-440(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-432(%rbp), %rcx
	movq	-424(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	movq	-416(%rbp), %rdx
	movq	%rdx, 48(%rax)
	jmp	.L1861
.L1865:
	leaq	-400(%rbp), %rax
	leaq	40(%rax), %rcx
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, -496(%rbp)
	movq	%rdx, -488(%rbp)
	movq	16(%rcx), %rax
	movq	24(%rcx), %rdx
	movq	%rax, -480(%rbp)
	movq	%rdx, -472(%rbp)
	leaq	-496(%rbp), %rax
	movq	%rax, %rdi
	call	strings__Builder_str
	movq	%rax, -272(%rbp)
	movq	%rdx, -264(%rbp)
	leaq	-496(%rbp), %rax
	movq	%rax, %rdi
	call	strings__Builder_free
	movq	-272(%rbp), %rax
	movq	-264(%rbp), %rdx
	movq	%rax, -288(%rbp)
	movq	%rdx, -280(%rbp)
	leaq	-464(%rbp), %rcx
	leaq	-288(%rbp), %rax
	movl	$16, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_result_ok
	cmpb	$0, -33(%rbp)
	je	.L1868
	movq	-48(%rbp), %rax
	movq	%rax, %rdi
	call	fclose
.L1868:
	movq	-504(%rbp), %rax
	movq	-464(%rbp), %rcx
	movq	-456(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-448(%rbp), %rcx
	movq	-440(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-432(%rbp), %rcx
	movq	-424(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	movq	-416(%rbp), %rdx
	movq	%rdx, 48(%rax)
	jmp	.L1861
.L1864:
	movl	-52(%rbp), %eax
	addl	$1, %eax
	cltq
	movq	%rax, %rdi
	call	malloc_noscan
	movq	%rax, -64(%rbp)
	movl	-52(%rbp), %eax
	movslq	%eax, %rdx
	movq	-48(%rbp), %rcx
	movq	-64(%rbp), %rax
	movl	$1, %esi
	movq	%rax, %rdi
	call	fread
	movl	%eax, -68(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, %rdi
	call	feof
	movl	%eax, -72(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, %rdi
	call	ferror
	movl	%eax, -76(%rbp)
	cmpl	$0, -72(%rbp)
	jne	.L1869
	cmpl	$0, -76(%rbp)
	je	.L1869
	movq	-64(%rbp), %rax
	movq	%rax, %rdi
	call	_v_free
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -400(%rbp)
	movaps	%xmm0, -384(%rbp)
	movaps	%xmm0, -368(%rbp)
	movq	%xmm0, -352(%rbp)
	movb	$1, -400(%rbp)
	leaq	.LC192(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$12, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	leaq	-392(%rbp), %rax
	movq	%r12, %rsi
	movq	%r13, %rdi
	movq	%r12, %rcx
	movq	%r13, %rbx
	movq	%rbx, %rdx
	movq	%rax, %rdi
	call	_v_error
	cmpb	$0, -33(%rbp)
	je	.L1870
	movq	-48(%rbp), %rax
	movq	%rax, %rdi
	call	fclose
.L1870:
	movq	-504(%rbp), %rax
	movq	-400(%rbp), %rcx
	movq	-392(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-384(%rbp), %rcx
	movq	-376(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-368(%rbp), %rcx
	movq	-360(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	movq	-352(%rbp), %rdx
	movq	%rdx, 48(%rax)
	jmp	.L1861
.L1869:
	movl	-68(%rbp), %eax
	movslq	%eax, %rdx
	movq	-64(%rbp), %rax
	addq	%rdx, %rax
	movb	$0, (%rax)
	cmpl	$0, -68(%rbp)
	jne	.L1872
	movq	-64(%rbp), %rax
	movq	%rax, %rdi
	call	u8_vstring
	movq	%rax, -320(%rbp)
	movq	%rdx, -312(%rbp)
	leaq	-400(%rbp), %rcx
	leaq	-320(%rbp), %rax
	movl	$16, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_result_ok
	cmpb	$0, -33(%rbp)
	je	.L1873
	movq	-48(%rbp), %rax
	movq	%rax, %rdi
	call	fclose
.L1873:
	movq	-504(%rbp), %rax
	movq	-400(%rbp), %rcx
	movq	-392(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-384(%rbp), %rcx
	movq	-376(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-368(%rbp), %rcx
	movq	-360(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	movq	-352(%rbp), %rdx
	movq	%rdx, 48(%rax)
	jmp	.L1861
.L1872:
	movl	-68(%rbp), %edx
	movq	-64(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	u8_vstring_with_len
	movq	%rax, -304(%rbp)
	movq	%rdx, -296(%rbp)
	leaq	-400(%rbp), %rcx
	leaq	-304(%rbp), %rax
	movl	$16, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_result_ok
	cmpb	$0, -33(%rbp)
	je	.L1874
	movq	-48(%rbp), %rax
	movq	%rax, %rdi
	call	fclose
.L1874:
	movq	-504(%rbp), %rax
	movq	-400(%rbp), %rcx
	movq	-392(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-384(%rbp), %rcx
	movq	-376(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-368(%rbp), %rcx
	movq	-360(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	movq	-352(%rbp), %rdx
	movq	%rdx, 48(%rax)
.L1861:
	movq	-504(%rbp), %rax
	addq	$504, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%rbp
	ret
	.section	.rodata, "a"
.LC193:
	.string	"vfopen called with \"\""
.LC194:
	.string	"failed to open file \""
	.text
	.globl	os__vfopen
os__vfopen:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$280, %rsp
	movq	%rdi, -248(%rbp)
	movq	%rsi, %rax
	movq	%rdx, %rsi
	movq	%rsi, %rdx
	movq	%rax, -272(%rbp)
	movq	%rdx, -264(%rbp)
	movq	%rcx, %rax
	movq	%r8, %rcx
	movq	%rcx, %rdx
	movq	%rax, -288(%rbp)
	movq	%rdx, -280(%rbp)
	movl	-264(%rbp), %eax
	testl	%eax, %eax
	jne	.L1877
	leaq	.LC193(%rip), %r10
	movq	%r11, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$21, %rax
	movq	%rax, %r11
	movq	%r11, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r11
	leaq	-96(%rbp), %rax
	movq	%r10, %rsi
	movq	%r11, %rdi
	movq	%r10, %rcx
	movq	%r11, %rbx
	movq	%rbx, %rdx
	movq	%rax, %rdi
	call	_v_error
	movq	-248(%rbp), %rax
	pxor	%xmm0, %xmm0
	movups	%xmm0, (%rax)
	movups	%xmm0, 16(%rax)
	movups	%xmm0, 32(%rax)
	movq	-248(%rbp), %rax
	movb	$1, (%rax)
	movq	-248(%rbp), %rcx
	movq	-96(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rax, 8(%rcx)
	movq	%rdx, 16(%rcx)
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, 24(%rcx)
	movq	%rdx, 32(%rcx)
	jmp	.L1876
.L1877:
	movq	$0, -24(%rbp)
	movq	-288(%rbp), %rdx
	movq	-272(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	fopen
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	isnil
	testb	%al, %al
	je	.L1879
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -240(%rbp)
	movaps	%xmm0, -224(%rbp)
	movaps	%xmm0, -208(%rbp)
	movaps	%xmm0, -192(%rbp)
	movaps	%xmm0, -176(%rbp)
	leaq	.LC194(%rip), %rax
	movq	%rax, -240(%rbp)
	movl	$21, -232(%rbp)
	movl	$1, -228(%rbp)
	movl	$65040, -224(%rbp)
	movq	-272(%rbp), %rax
	movq	-264(%rbp), %rdx
	movq	%rax, -216(%rbp)
	movq	%rdx, -208(%rbp)
	leaq	.LC181(%rip), %rax
	movq	%rax, -200(%rbp)
	movl	$1, -192(%rbp)
	movl	$1, -188(%rbp)
	leaq	-240(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	leaq	-64(%rbp), %rcx
	movq	%rax, %rsi
	movq	%rdx, %rdi
	movq	%rdx, %rax
	movq	%rax, %rdx
	movq	%rcx, %rdi
	call	_v_error
	movq	-248(%rbp), %rax
	pxor	%xmm0, %xmm0
	movups	%xmm0, (%rax)
	movups	%xmm0, 16(%rax)
	movups	%xmm0, 32(%rax)
	movq	-248(%rbp), %rax
	movb	$1, (%rax)
	movq	-248(%rbp), %rcx
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 8(%rcx)
	movq	%rdx, 16(%rcx)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 24(%rcx)
	movq	%rdx, 32(%rcx)
	jmp	.L1876
.L1879:
	movq	-24(%rbp), %rax
	movq	%rax, -152(%rbp)
	leaq	-240(%rbp), %rcx
	leaq	-152(%rbp), %rax
	movl	$8, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_result_ok
	movq	-248(%rbp), %rax
	movq	-240(%rbp), %rcx
	movq	-232(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-224(%rbp), %rcx
	movq	-216(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-208(%rbp), %rcx
	movq	-200(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
.L1876:
	movq	-248(%rbp), %rax
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	os__posix_get_error_msg
os__posix_get_error_msg:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$72, %rsp
	movl	%edi, -68(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, %edi
	call	strerror
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.L1882
	leaq	.LC30(%rip), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -56(%rbp)
	movl	$1, -52(%rbp)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	jmp	.L1884
.L1882:
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	tos3
	movq	%rax, -48(%rbp)
	movq	%rdx, -40(%rbp)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
.L1884:
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	os__get_raw_line
os__get_raw_line:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$72, %rsp
	movq	$0, -32(%rbp)
	movq	$0, -40(%rbp)
	movq	stdin(%rip), %rdx
	leaq	-32(%rbp), %rcx
	leaq	-40(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	getline
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	movl	$0, %edx
	testl	%eax, %eax
	cmovnsl	%eax, %edx
	movq	-40(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	tos
	movq	%rax, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-64(%rbp), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	string_clone
	movq	%rax, -80(%rbp)
	movq	%rdx, -72(%rbp)
	cmpl	$0, -20(%rbp)
	jle	.L1886
	movq	-40(%rbp), %rax
	testq	%rax, %rax
	je	.L1886
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	free
.L1886:
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	os__getwd
os__getwd:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$4136, %rsp
	movq	$0, -4144(%rbp)
	movq	$0, -4136(%rbp)
	leaq	-4128(%rbp), %rdx
	movl	$0, %eax
	movl	$510, %ecx
	movq	%rdx, %rdi
	rep stosq
	leaq	-4144(%rbp), %rax
	movl	$4096, %esi
	movq	%rax, %rdi
	call	getcwd
	testq	%rax, %rax
	jne	.L1889
	leaq	.LC30(%rip), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -40(%rbp)
	movl	$1, -36(%rbp)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	jmp	.L1890
.L1889:
	leaq	-4144(%rbp), %rax
	movq	%rax, %rdi
	call	tos_clone
	movq	%rax, -32(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdx
.L1890:
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	os__Result_free
os__Result_free:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	addq	$8, %rax
	movq	%rax, %rdi
	call	string_free
	nop
	leave
	ret
	.globl	os__file_ext
os__file_ext:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$144, %rsp
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movq	%rcx, %rdx
	movq	%rax, -144(%rbp)
	movq	%rdx, -136(%rbp)
	movl	-136(%rbp), %eax
	cmpl	$2, %eax
	jg	.L1894
	movq	_const_os__empty_str(%rip), %rax
	movq	8+_const_os__empty_str(%rip), %rdx
	jmp	.L1899
.L1894:
	movq	-144(%rbp), %rdx
	movq	-136(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	os__file_name
	movq	%rax, -32(%rbp)
	movq	%rdx, -24(%rbp)
	leaq	-80(%rbp), %rax
	movq	_const_os__dot_str(%rip), %rcx
	movq	8+_const_os__dot_str(%rip), %rdi
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	string_last_index
	movzbl	-80(%rbp), %eax
	testb	%al, %al
	je	.L1896
	movq	-72(%rbp), %rax
	movq	-64(%rbp), %rdx
	movq	%rax, -128(%rbp)
	movq	%rdx, -120(%rbp)
	movq	-56(%rbp), %rax
	movq	-48(%rbp), %rdx
	movq	%rax, -112(%rbp)
	movq	%rdx, -104(%rbp)
	movq	_const_os__empty_str(%rip), %rax
	movq	8+_const_os__empty_str(%rip), %rdx
	jmp	.L1899
.L1896:
	leaq	-80(%rbp), %rax
	addq	$40, %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	leal	1(%rax), %edx
	movl	-24(%rbp), %eax
	cmpl	%eax, %edx
	jge	.L1897
	cmpl	$0, -4(%rbp)
	jne	.L1898
.L1897:
	movq	_const_os__empty_str(%rip), %rax
	movq	8+_const_os__empty_str(%rip), %rdx
	jmp	.L1899
.L1898:
	movl	-24(%rbp), %ecx
	movl	-4(%rbp), %edx
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rax
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string_substr
	movq	%rax, -96(%rbp)
	movq	%rdx, -88(%rbp)
	movq	-96(%rbp), %rax
	movq	-88(%rbp), %rdx
.L1899:
	leave
	ret
	.section	.rodata, "a"
.LC195:
	.string	"/"
.LC196:
	.string	"\\"
	.text
	.globl	os__file_name
os__file_name:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$72, %rsp
	movq	%rdi, %rcx
	movq	%rsi, %rbx
	movq	%rcx, -80(%rbp)
	movq	%rbx, -72(%rbp)
	leaq	.LC195(%rip), %rax
	movq	%rdx, %rsi
	movabsq	$-4294967296, %rcx
	andq	%rsi, %rcx
	orq	$1, %rcx
	movq	%rcx, %rdx
	movq	%rdx, %rcx
	movl	%ecx, %esi
	movabsq	$4294967296, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	movq	_const_os__path_separator(%rip), %rdi
	movq	8+_const_os__path_separator(%rip), %rsi
	movq	%rdx, %rcx
	movq	%rax, %rdx
	call	string__eq
	testb	%al, %al
	je	.L1901
	leaq	.LC196(%rip), %rax
	movq	%rax, -32(%rbp)
	movl	$1, -24(%rbp)
	movl	$1, -20(%rbp)
	jmp	.L1902
.L1901:
	leaq	.LC195(%rip), %rax
	movq	%rax, -32(%rbp)
	movl	$1, -24(%rbp)
	movl	$1, -20(%rbp)
.L1902:
	movq	_const_os__path_separator(%rip), %rcx
	movq	8+_const_os__path_separator(%rip), %rbx
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdx
	movq	-80(%rbp), %rdi
	movq	-72(%rbp), %rsi
	movq	%rcx, %r8
	movq	%rbx, %r9
	movq	%rdx, %rcx
	movq	%rax, %rdx
	call	string_replace
	movq	%rax, -48(%rbp)
	movq	%rdx, -40(%rbp)
	movq	_const_os__path_separator(%rip), %rax
	movq	8+_const_os__path_separator(%rip), %rdx
	movq	-48(%rbp), %rdi
	movq	-40(%rbp), %rsi
	movq	%rdx, %rcx
	movq	%rax, %rdx
	call	string_all_after_last
	movq	%rax, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-64(%rbp), %rcx
	movq	-56(%rbp), %rbx
	movq	%rcx, %rax
	movq	%rbx, %rdx
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	os__get_raw_lines_joined
os__get_raw_lines_joined:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$88, %rsp
	leaq	.LC30(%rip), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -40(%rbp)
	movl	$1, -36(%rbp)
	leaq	-80(%rbp), %rax
	movl	$0, %r8d
	movl	$16, %ecx
	movl	$0, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array_with_default
.L1907:
	call	os__get_raw_line
	movq	%rax, -48(%rbp)
	movq	%rdx, -40(%rbp)
	movl	-40(%rbp), %eax
	testl	%eax, %eax
	jg	.L1905
	leaq	.LC30(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	%r12, %rcx
	movq	%r13, %rbx
	movq	%r12, %rax
	movq	%r13, %rdx
	movq	%rcx, %rdi
	movq	%rdx, %rsi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	call	Array_string_join
	addq	$32, %rsp
	movq	%rax, -96(%rbp)
	movq	%rdx, -88(%rbp)
	movq	-96(%rbp), %rax
	movq	-88(%rbp), %rdx
	jmp	.L1908
.L1905:
	movq	-48(%rbp), %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	string_clone
	movq	%rax, -112(%rbp)
	movq	%rdx, -104(%rbp)
	leaq	-112(%rbp), %rdx
	leaq	-80(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	array_push
	jmp	.L1907
.L1908:
	leaq	-24(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%rbp
	ret
	.section	.rodata, "a"
.LC197:
	.string	"os: failed to find executable"
	.text
	.globl	os__ExecutableNotFoundError_msg
os__ExecutableNotFoundError_msg:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	leaq	.LC197(%rip), %rax
	movq	%rax, -32(%rbp)
	movl	$29, -24(%rbp)
	movl	$1, -20(%rbp)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdx
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	os__init_os_args
	.hidden	os__init_os_args
os__init_os_args:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$112, %rsp
	movq	%rdi, -88(%rbp)
	movl	%esi, -92(%rbp)
	movq	%rdx, -104(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -56(%rbp)
	movl	$1, -52(%rbp)
	leaq	-48(%rbp), %rax
	leaq	-64(%rbp), %rdx
	movl	-92(%rbp), %esi
	movq	%rdx, %r8
	movl	$16, %ecx
	movl	$0, %edx
	movq	%rax, %rdi
	call	__new_array_with_default
	movl	$0, -4(%rbp)
	jmp	.L1912
.L1913:
	movl	-4(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-104(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	tos_clone
	movq	%rax, -80(%rbp)
	movq	%rdx, -72(%rbp)
	leaq	-80(%rbp), %rdx
	movl	-4(%rbp), %ecx
	leaq	-48(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	array_set
	addl	$1, -4(%rbp)
.L1912:
	movl	-4(%rbp), %eax
	cmpl	-92(%rbp), %eax
	jl	.L1913
	movq	-88(%rbp), %rcx
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movq	-88(%rbp), %rax
	leave
	ret
	.globl	os__File_close
os__File_close:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movzbl	12(%rax), %eax
	testb	%al, %al
	je	.L1918
	movq	-8(%rbp), %rax
	movb	$0, 12(%rax)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	fflush
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	fclose
	jmp	.L1915
.L1918:
	nop
.L1915:
	leave
	ret
	.globl	os__Process_close
os__Process_close:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	24(%rax), %eax
	testl	%eax, %eax
	je	.L1926
	movq	-24(%rbp), %rax
	movl	24(%rax), %eax
	cmpl	$5, %eax
	je	.L1926
	movq	-24(%rbp), %rax
	movl	$5, 24(%rax)
	movl	$0, -4(%rbp)
	jmp	.L1923
.L1925:
	movl	-4(%rbp), %eax
	movl	$3, %esi
	movl	%eax, %edi
	call	v_fixed_index
	movl	%eax, %edx
	movq	-24(%rbp), %rax
	movslq	%edx, %rdx
	addq	$32, %rdx
	movl	12(%rax,%rdx,4), %eax
	testl	%eax, %eax
	je	.L1924
	movl	-4(%rbp), %eax
	movl	$3, %esi
	movl	%eax, %edi
	call	v_fixed_index
	movl	%eax, %edx
	movq	-24(%rbp), %rax
	movslq	%edx, %rdx
	addq	$32, %rdx
	movl	12(%rax,%rdx,4), %eax
	movl	%eax, %edi
	call	os__fd_close
.L1924:
	addl	$1, -4(%rbp)
.L1923:
	cmpl	$2, -4(%rbp)
	jle	.L1925
	jmp	.L1919
.L1926:
	nop
.L1919:
	leave
	ret
	.globl	os__Process_free
os__Process_free:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	os__Process_close
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	string_free
	movq	-8(%rbp), %rax
	addq	$32, %rax
	movq	%rax, %rdi
	call	string_free
	movq	-8(%rbp), %rax
	addq	$48, %rax
	movq	%rax, %rdi
	call	array_free
	movq	-8(%rbp), %rax
	addq	$104, %rax
	movq	%rax, %rdi
	call	array_free
	nop
	leave
	ret
	.section	.rodata, "a"
.LC198:
	.string	"\033[1m"
.LC199:
	.string	":"
.LC200:
	.string	": \033[91merror\033[0m\033[1m: "
.LC201:
	.string	" \033[0m"
	.text
	.globl	error__print
error__print:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$192, %rsp
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movq	%rcx, %rdx
	movq	%rax, -192(%rbp)
	movq	%rdx, -184(%rbp)
	leaq	-176(%rbp), %rdx
	movl	$0, %eax
	movl	$20, %ecx
	movq	%rdx, %rdi
	rep stosq
	leaq	.LC198(%rip), %rax
	movq	%rax, -176(%rbp)
	movl	$4, -168(%rbp)
	movl	$1, -164(%rbp)
	movl	$65040, -160(%rbp)
	movq	16(%rbp), %rax
	movq	24(%rbp), %rdx
	movq	%rax, -152(%rbp)
	movq	%rdx, -144(%rbp)
	leaq	.LC199(%rip), %rax
	movq	%rax, -136(%rbp)
	movl	$1, -128(%rbp)
	movl	$1, -124(%rbp)
	movl	$65031, -120(%rbp)
	movl	32(%rbp), %eax
	movl	%eax, -112(%rbp)
	leaq	.LC200(%rip), %rax
	movq	%rax, -96(%rbp)
	movl	$22, -88(%rbp)
	movl	$1, -84(%rbp)
	movl	$65040, -80(%rbp)
	movq	-192(%rbp), %rax
	movq	-184(%rbp), %rdx
	movq	%rax, -72(%rbp)
	movq	%rdx, -64(%rbp)
	leaq	.LC201(%rip), %rax
	movq	%rax, -56(%rbp)
	movl	$5, -48(%rbp)
	movl	$1, -44(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, %rsi
	movl	$4, %edi
	call	str_intp
	movq	%rax, -16(%rbp)
	movq	%rdx, -8(%rbp)
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	eprintln
	nop
	leave
	ret
	.globl	lexer__new
lexer__new:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$112, %rsp
	movq	%rsi, %rax
	movq	%rdi, %r8
	movq	%r8, %rsi
	movq	%r9, %rdi
	movq	%rax, %rdi
	movq	%rsi, -96(%rbp)
	movq	%rdi, -88(%rbp)
	movq	%rdx, -112(%rbp)
	movq	%rcx, -104(%rbp)
	movl	-104(%rbp), %eax
	testl	%eax, %eax
	je	.L1930
	movq	-112(%rbp), %rcx
	movq	-104(%rbp), %rax
	movl	$0, %edx
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	string_at
	movzbl	%al, %eax
	jmp	.L1931
.L1930:
	movl	$0, %eax
.L1931:
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	movb	%al, -80(%rbp)
	movq	-112(%rbp), %rax
	movq	-104(%rbp), %rdx
	movq	%rax, -72(%rbp)
	movq	%rdx, -64(%rbp)
	movl	$0, -56(%rbp)
	movl	$1, -52(%rbp)
	movl	$0, -48(%rbp)
	movq	-96(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rax, -40(%rbp)
	movq	%rdx, -32(%rbp)
	leaq	-80(%rbp), %rax
	movl	$56, %esi
	movq	%rax, %rdi
	call	memdup
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	leave
	ret
	.globl	lexer__Lexer_advance
	.hidden	lexer__Lexer_advance
lexer__Lexer_advance:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	32(%rax), %eax
	leal	1(%rax), %edx
	movq	-8(%rbp), %rax
	movl	%edx, 32(%rax)
	movq	-8(%rbp), %rax
	movl	24(%rax), %eax
	leal	1(%rax), %edx
	movq	-8(%rbp), %rax
	movl	%edx, 24(%rax)
	movq	-8(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$10, %al
	jne	.L1934
	movq	-8(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-8(%rbp), %rax
	movl	28(%rax), %eax
	leal	1(%rax), %edx
	movq	-8(%rbp), %rax
	movl	%edx, 28(%rax)
.L1934:
	movq	-8(%rbp), %rax
	movl	16(%rax), %edx
	movq	-8(%rbp), %rax
	movl	24(%rax), %eax
	cmpl	%eax, %edx
	jne	.L1935
	movq	-8(%rbp), %rax
	movb	$0, (%rax)
	jmp	.L1937
.L1935:
	movq	-8(%rbp), %rax
	movl	24(%rax), %edx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rcx
	movq	16(%rax), %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	string_at
	movq	-8(%rbp), %rdx
	movb	%al, (%rdx)
.L1937:
	nop
	leave
	ret
	.globl	lexer__Lexer_peak
	.hidden	lexer__Lexer_peak
lexer__Lexer_peak:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	16(%rax), %edx
	movq	-24(%rbp), %rax
	movl	24(%rax), %ecx
	movl	-28(%rbp), %eax
	addl	%ecx, %eax
	cmpl	%eax, %edx
	jne	.L1939
	movb	$0, -2(%rbp)
	movzbl	-2(%rbp), %eax
	jmp	.L1940
.L1939:
	movq	-24(%rbp), %rax
	movl	24(%rax), %edx
	movl	-28(%rbp), %eax
	addl	%eax, %edx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rcx
	movq	16(%rax), %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	string_at
	movb	%al, -1(%rbp)
	movzbl	-1(%rbp), %eax
.L1940:
	leave
	ret
	.globl	lexer__Lexer_current_pos
	.hidden	lexer__Lexer_current_pos
lexer__Lexer_current_pos:
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, -72(%rbp)
	movq	%rsi, -80(%rbp)
	movq	-80(%rbp), %rax
	movq	48(%rax), %rdx
	movq	40(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-80(%rbp), %rax
	movl	28(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-72(%rbp), %rcx
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-16(%rbp), %rax
	movq	%rax, 16(%rcx)
	movq	-72(%rbp), %rax
	popq	%rbp
	ret
	.globl	lexer__Lexer_skip_comment
	.hidden	lexer__Lexer_skip_comment
lexer__Lexer_skip_comment:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
.L1945:
	movq	-8(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$10, %al
	je	.L1946
	movq	-8(%rbp), %rax
	movzbl	(%rax), %eax
	testb	%al, %al
	je	.L1946
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	lexer__Lexer_advance
	jmp	.L1945
.L1946:
	nop
	leave
	ret
	.globl	lexer__Lexer_is_hex
	.hidden	lexer__Lexer_is_hex
lexer__Lexer_is_hex:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	16(%rax), %edx
	movq	-24(%rbp), %rax
	movl	24(%rax), %eax
	addl	$1, %eax
	cmpl	%eax, %edx
	jne	.L1948
	movb	$0, -2(%rbp)
	movzbl	-2(%rbp), %eax
	jmp	.L1949
.L1948:
	movq	-24(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$48, %al
	jne	.L1950
	movq	-24(%rbp), %rax
	movl	24(%rax), %eax
	leal	1(%rax), %edx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rcx
	movq	16(%rax), %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	string_at
	cmpb	$120, %al
	je	.L1951
	movq	-24(%rbp), %rax
	movl	24(%rax), %eax
	leal	1(%rax), %edx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rcx
	movq	16(%rax), %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	string_at
	cmpb	$88, %al
	jne	.L1950
.L1951:
	movl	$1, %eax
	jmp	.L1952
.L1950:
	movl	$0, %eax
.L1952:
	movb	%al, -1(%rbp)
	movzbl	-1(%rbp), %eax
.L1949:
	leave
	ret
	.globl	lexer__Lexer_read_number
	.hidden	lexer__Lexer_read_number
lexer__Lexer_read_number:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$168, %rsp
	movq	%rdi, -168(%rbp)
	movq	%rsi, -176(%rbp)
	leaq	-48(%rbp), %rax
	movq	-176(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	lexer__Lexer_current_pos
	movq	-176(%rbp), %rax
	movl	24(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	-176(%rbp), %rax
	movq	%rax, %rdi
	call	lexer__Lexer_is_hex
	testb	%al, %al
	je	.L1954
	movq	-176(%rbp), %rax
	movq	%rax, %rdi
	call	lexer__Lexer_advance
	movq	-176(%rbp), %rax
	movq	%rax, %rdi
	call	lexer__Lexer_advance
.L1959:
	movq	-176(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$47, %al
	jbe	.L1955
	movq	-176(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$57, %al
	jbe	.L1956
.L1955:
	movq	-176(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$96, %al
	jbe	.L1957
	movq	-176(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$122, %al
	jbe	.L1956
.L1957:
	movq	-176(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$64, %al
	jbe	.L1958
	movq	-176(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$90, %al
	ja	.L1958
.L1956:
	movq	-176(%rbp), %rax
	movq	%rax, %rdi
	call	lexer__Lexer_advance
	jmp	.L1959
.L1954:
	movq	-176(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$47, %al
	jbe	.L1958
	movq	-176(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$57, %al
	ja	.L1958
	movq	-176(%rbp), %rax
	movq	%rax, %rdi
	call	lexer__Lexer_advance
	jmp	.L1954
.L1958:
	movq	-176(%rbp), %rax
	movl	24(%rax), %ecx
	movl	-20(%rbp), %edx
	movq	-176(%rbp), %rax
	movq	8(%rax), %rsi
	movq	16(%rax), %rax
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string_substr
	movq	%rax, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movl	$1, -112(%rbp)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, -104(%rbp)
	movq	%rdx, -96(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, -88(%rbp)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, -80(%rbp)
	movq	%rdx, -72(%rbp)
	movq	-168(%rbp), %rax
	movq	-112(%rbp), %rcx
	movq	-104(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-96(%rbp), %rcx
	movq	-88(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	movq	-168(%rbp), %rax
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	lexer__Lexer_read_ident
	.hidden	lexer__Lexer_read_ident
lexer__Lexer_read_ident:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$168, %rsp
	movq	%rdi, -168(%rbp)
	movq	%rsi, -176(%rbp)
	leaq	-48(%rbp), %rax
	movq	-176(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	lexer__Lexer_current_pos
	movq	-176(%rbp), %rax
	movl	24(%rax), %eax
	movl	%eax, -20(%rbp)
.L1967:
	movq	-176(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$96, %al
	jbe	.L1962
	movq	-176(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$122, %al
	jbe	.L1963
.L1962:
	movq	-176(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$64, %al
	jbe	.L1964
	movq	-176(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$90, %al
	jbe	.L1963
.L1964:
	movq	-176(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$47, %al
	jbe	.L1965
	movq	-176(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$57, %al
	jbe	.L1963
.L1965:
	movq	-176(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$95, %al
	je	.L1963
	movq	-176(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$46, %al
	je	.L1963
	movq	-176(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$45, %al
	je	.L1963
	movq	-176(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$36, %al
	jne	.L1966
.L1963:
	movq	-176(%rbp), %rax
	movq	%rax, %rdi
	call	lexer__Lexer_advance
	jmp	.L1967
.L1966:
	movq	-176(%rbp), %rax
	movl	24(%rax), %ecx
	movl	-20(%rbp), %edx
	movq	-176(%rbp), %rax
	movq	8(%rax), %rsi
	movq	16(%rax), %rax
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string_substr
	movq	%rax, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movl	$0, -112(%rbp)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, -104(%rbp)
	movq	%rdx, -96(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, -88(%rbp)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, -80(%rbp)
	movq	%rdx, -72(%rbp)
	movq	-168(%rbp), %rax
	movq	-112(%rbp), %rcx
	movq	-104(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-96(%rbp), %rcx
	movq	-88(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	movq	-168(%rbp), %rax
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	lexer__Lexer_read_string
	.hidden	lexer__Lexer_read_string
lexer__Lexer_read_string:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$200, %rsp
	movq	%rdi, -200(%rbp)
	movq	%rsi, -208(%rbp)
	leaq	-48(%rbp), %rax
	movq	-208(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	lexer__Lexer_current_pos
	movq	-208(%rbp), %rax
	movq	%rax, %rdi
	call	lexer__Lexer_advance
	leaq	-80(%rbp), %rax
	movl	$0, %r8d
	movl	$1, %ecx
	movl	$0, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array_with_default
.L1986:
	movq	-208(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$34, %al
	je	.L1989
	movq	-208(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$92, %al
	jne	.L1972
	movq	-208(%rbp), %rax
	movq	%rax, %rdi
	call	lexer__Lexer_advance
	movq	-208(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$110, %al
	jne	.L1973
	movb	$10, -177(%rbp)
	leaq	-177(%rbp), %rdx
	leaq	-80(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	array_push
	jmp	.L1974
.L1973:
	movq	-208(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$116, %al
	jne	.L1975
	movb	$9, -178(%rbp)
	leaq	-178(%rbp), %rdx
	leaq	-80(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	array_push
	jmp	.L1974
.L1975:
	movq	-208(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$97, %al
	jne	.L1976
	movb	$7, -179(%rbp)
	leaq	-179(%rbp), %rdx
	leaq	-80(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	array_push
	jmp	.L1974
.L1976:
	movq	-208(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$98, %al
	jne	.L1977
	movb	$8, -180(%rbp)
	leaq	-180(%rbp), %rdx
	leaq	-80(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	array_push
	jmp	.L1974
.L1977:
	movq	-208(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$102, %al
	jne	.L1978
	movb	$12, -181(%rbp)
	leaq	-181(%rbp), %rdx
	leaq	-80(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	array_push
	jmp	.L1974
.L1978:
	movq	-208(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$118, %al
	jne	.L1979
	movb	$11, -182(%rbp)
	leaq	-182(%rbp), %rdx
	leaq	-80(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	array_push
	jmp	.L1974
.L1979:
	movq	-208(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$48, %al
	jne	.L1980
	movq	-208(%rbp), %rax
	movl	$1, %esi
	movq	%rax, %rdi
	call	lexer__Lexer_peak
	cmpb	$51, %al
	jne	.L1981
	movq	-208(%rbp), %rax
	movl	$2, %esi
	movq	%rax, %rdi
	call	lexer__Lexer_peak
	cmpb	$51, %al
	jne	.L1981
	movq	-208(%rbp), %rax
	movq	%rax, %rdi
	call	lexer__Lexer_advance
	movq	-208(%rbp), %rax
	movq	%rax, %rdi
	call	lexer__Lexer_advance
	movb	$27, -183(%rbp)
	leaq	-183(%rbp), %rdx
	leaq	-80(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	array_push
	jmp	.L1974
.L1981:
	movq	-208(%rbp), %rax
	movl	$1, %esi
	movq	%rax, %rdi
	call	lexer__Lexer_peak
	cmpb	$49, %al
	jne	.L1983
	movq	-208(%rbp), %rax
	movl	$2, %esi
	movq	%rax, %rdi
	call	lexer__Lexer_peak
	cmpb	$49, %al
	jne	.L1983
	movq	-208(%rbp), %rax
	movq	%rax, %rdi
	call	lexer__Lexer_advance
	movq	-208(%rbp), %rax
	movq	%rax, %rdi
	call	lexer__Lexer_advance
	movb	$9, -184(%rbp)
	leaq	-184(%rbp), %rdx
	leaq	-80(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	array_push
	jmp	.L1974
.L1983:
	movq	-208(%rbp), %rax
	movl	$1, %esi
	movq	%rax, %rdi
	call	lexer__Lexer_peak
	cmpb	$50, %al
	jne	.L1984
	movq	-208(%rbp), %rax
	movl	$2, %esi
	movq	%rax, %rdi
	call	lexer__Lexer_peak
	cmpb	$50, %al
	jne	.L1984
	movq	-208(%rbp), %rax
	movq	%rax, %rdi
	call	lexer__Lexer_advance
	movq	-208(%rbp), %rax
	movq	%rax, %rdi
	call	lexer__Lexer_advance
	movb	$18, -185(%rbp)
	leaq	-185(%rbp), %rdx
	leaq	-80(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	array_push
	jmp	.L1974
.L1984:
	movb	$0, -186(%rbp)
	leaq	-186(%rbp), %rdx
	leaq	-80(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	array_push
	jmp	.L1974
.L1980:
	movb	$92, -187(%rbp)
	leaq	-187(%rbp), %rdx
	leaq	-80(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	array_push
	movq	-208(%rbp), %rax
	movzbl	(%rax), %eax
	movb	%al, -188(%rbp)
	leaq	-188(%rbp), %rdx
	leaq	-80(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	array_push
.L1974:
	movq	-208(%rbp), %rax
	movq	%rax, %rdi
	call	lexer__Lexer_advance
	jmp	.L1986
.L1972:
	movq	-208(%rbp), %rax
	movzbl	(%rax), %eax
	movb	%al, -189(%rbp)
	leaq	-189(%rbp), %rdx
	leaq	-80(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	array_push
	movq	-208(%rbp), %rax
	movq	%rax, %rdi
	call	lexer__Lexer_advance
	jmp	.L1986
.L1989:
	nop
	movq	-208(%rbp), %rax
	movq	%rax, %rdi
	call	lexer__Lexer_advance
	movl	$2, -128(%rbp)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, -120(%rbp)
	movq	%rdx, -112(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, -104(%rbp)
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	call	Array_u8_bytestr
	addq	$32, %rsp
	movq	%rax, -96(%rbp)
	movq	%rdx, -88(%rbp)
	movq	-200(%rbp), %rax
	movq	-128(%rbp), %rcx
	movq	-120(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-112(%rbp), %rcx
	movq	-104(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-96(%rbp), %rcx
	movq	-88(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	movq	-200(%rbp), %rax
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	lexer__Lexer_single_letter_token
	.hidden	lexer__Lexer_single_letter_token
lexer__Lexer_single_letter_token:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$184, %rsp
	movq	%rdi, -152(%rbp)
	movq	%rsi, -160(%rbp)
	movq	%rdx, -176(%rbp)
	movq	%rcx, -168(%rbp)
	movl	%r8d, -180(%rbp)
	leaq	-48(%rbp), %rax
	movq	-160(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	lexer__Lexer_current_pos
	movq	-160(%rbp), %rax
	movq	%rax, %rdi
	call	lexer__Lexer_advance
	movl	-180(%rbp), %eax
	movl	%eax, -96(%rbp)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, -88(%rbp)
	movq	%rdx, -80(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, -72(%rbp)
	movq	-176(%rbp), %rax
	movq	-168(%rbp), %rdx
	movq	%rax, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-152(%rbp), %rax
	movq	-96(%rbp), %rcx
	movq	-88(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-64(%rbp), %rcx
	movq	-56(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	movq	-152(%rbp), %rax
	movq	-8(%rbp), %rbx
	leave
	ret
	.section	.rodata, "a"
.LC202:
	.string	""
	.string	""
.LC203:
	.string	"("
.LC204:
	.string	"+"
.LC205:
	.string	"*"
.LC206:
	.string	"$"
.LC207:
	.string	"%"
.LC208:
	.string	","
.LC209:
	.string	"unexpected token `"
	.text
	.globl	lexer__Lexer_lex
lexer__Lexer_lex:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$424, %rsp
	movq	%rdi, -328(%rbp)
	movq	%rsi, -336(%rbp)
.L2017:
	movq	-336(%rbp), %rax
	movzbl	(%rax), %eax
	testb	%al, %al
	jne	.L1993
	movl	$14, -128(%rbp)
	leaq	-120(%rbp), %rax
	movq	-336(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	lexer__Lexer_current_pos
	leaq	.LC202(%rip), %rax
	movq	%rax, -96(%rbp)
	movl	$1, -88(%rbp)
	movl	$1, -84(%rbp)
	movq	-328(%rbp), %rax
	movq	-128(%rbp), %rcx
	movq	-120(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-112(%rbp), %rcx
	movq	-104(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-96(%rbp), %rcx
	movq	-88(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	jmp	.L1994
.L1993:
	leaq	-208(%rbp), %rdx
	movq	-336(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	lexer__Lexer_current_pos
	movq	-336(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$32, %al
	je	.L1995
	movq	-336(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$9, %al
	jne	.L1996
.L1995:
	movq	-336(%rbp), %rax
	movq	%rax, %rdi
	call	lexer__Lexer_advance
	jmp	.L1997
.L1996:
	movq	-336(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$47, %al
	jbe	.L1998
	movq	-336(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$57, %al
	ja	.L1998
	leaq	-320(%rbp), %rax
	movq	-336(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	lexer__Lexer_read_number
	movq	-328(%rbp), %rax
	movq	-320(%rbp), %rcx
	movq	-312(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-304(%rbp), %rcx
	movq	-296(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-288(%rbp), %rcx
	movq	-280(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	jmp	.L1994
.L1998:
	movq	-336(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$96, %al
	jbe	.L2000
	movq	-336(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$122, %al
	jbe	.L2001
.L2000:
	movq	-336(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$64, %al
	jbe	.L2002
	movq	-336(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$90, %al
	jbe	.L2001
.L2002:
	movq	-336(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$95, %al
	je	.L2001
	movq	-336(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$46, %al
	jne	.L2003
.L2001:
	leaq	-320(%rbp), %rax
	movq	-336(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	lexer__Lexer_read_ident
	movq	-328(%rbp), %rax
	movq	-320(%rbp), %rcx
	movq	-312(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-304(%rbp), %rcx
	movq	-296(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-288(%rbp), %rcx
	movq	-280(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	jmp	.L1994
.L2003:
	movq	-336(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$34, %al
	jne	.L2004
	leaq	-320(%rbp), %rax
	movq	-336(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	lexer__Lexer_read_string
	movq	-328(%rbp), %rax
	movq	-320(%rbp), %rcx
	movq	-312(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-304(%rbp), %rcx
	movq	-296(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-288(%rbp), %rcx
	movq	-280(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	jmp	.L1994
.L2004:
	movq	-336(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$35, %al
	jne	.L2005
	movq	-336(%rbp), %rax
	movq	%rax, %rdi
	call	lexer__Lexer_skip_comment
	jmp	.L2017
.L2005:
	movq	-336(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$10, %al
	jne	.L2006
	movq	-336(%rbp), %rax
	movq	%rax, %rdi
	call	lexer__Lexer_advance
	jmp	.L2017
.L2006:
	movq	-336(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$58, %al
	jne	.L2007
	leaq	.LC199(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$1, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	leaq	-320(%rbp), %rax
	movq	-336(%rbp), %rsi
	movl	$4, %r8d
	movq	%r12, %rdx
	movq	%r13, %rcx
	movq	%rax, %rdi
	call	lexer__Lexer_single_letter_token
	movq	-328(%rbp), %rax
	movq	-320(%rbp), %rcx
	movq	-312(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-304(%rbp), %rcx
	movq	-296(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-288(%rbp), %rcx
	movq	-280(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	jmp	.L1994
.L2007:
	movq	-336(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$40, %al
	jne	.L2008
	leaq	.LC203(%rip), %r14
	movq	%r15, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$1, %rax
	movq	%rax, %r15
	movq	%r15, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r15
	leaq	-320(%rbp), %rax
	movq	-336(%rbp), %rsi
	movl	$5, %r8d
	movq	%r14, %rdx
	movq	%r15, %rcx
	movq	%rax, %rdi
	call	lexer__Lexer_single_letter_token
	movq	-328(%rbp), %rax
	movq	-320(%rbp), %rcx
	movq	-312(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-304(%rbp), %rcx
	movq	-296(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-288(%rbp), %rcx
	movq	-280(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	jmp	.L1994
.L2008:
	movq	-336(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$41, %al
	jne	.L2009
	leaq	.LC50(%rip), %rax
	movq	%rax, -352(%rbp)
	movq	-344(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$1, %rax
	movq	%rax, -344(%rbp)
	movq	-344(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -344(%rbp)
	leaq	-320(%rbp), %rax
	movq	-336(%rbp), %rsi
	movl	$6, %r8d
	movq	-352(%rbp), %rdx
	movq	-344(%rbp), %rcx
	movq	%rax, %rdi
	call	lexer__Lexer_single_letter_token
	movq	-328(%rbp), %rax
	movq	-320(%rbp), %rcx
	movq	-312(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-304(%rbp), %rcx
	movq	-296(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-288(%rbp), %rcx
	movq	-280(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	jmp	.L1994
.L2009:
	movq	-336(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$43, %al
	jne	.L2010
	leaq	.LC204(%rip), %rax
	movq	%rax, -368(%rbp)
	movq	-360(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$1, %rax
	movq	%rax, -360(%rbp)
	movq	-360(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -360(%rbp)
	leaq	-320(%rbp), %rax
	movq	-336(%rbp), %rsi
	movl	$7, %r8d
	movq	-368(%rbp), %rdx
	movq	-360(%rbp), %rcx
	movq	%rax, %rdi
	call	lexer__Lexer_single_letter_token
	movq	-328(%rbp), %rax
	movq	-320(%rbp), %rcx
	movq	-312(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-304(%rbp), %rcx
	movq	-296(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-288(%rbp), %rcx
	movq	-280(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	jmp	.L1994
.L2010:
	movq	-336(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$45, %al
	jne	.L2011
	leaq	.LC40(%rip), %rax
	movq	%rax, -384(%rbp)
	movq	-376(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$1, %rax
	movq	%rax, -376(%rbp)
	movq	-376(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -376(%rbp)
	leaq	-320(%rbp), %rax
	movq	-336(%rbp), %rsi
	movl	$8, %r8d
	movq	-384(%rbp), %rdx
	movq	-376(%rbp), %rcx
	movq	%rax, %rdi
	call	lexer__Lexer_single_letter_token
	movq	-328(%rbp), %rax
	movq	-320(%rbp), %rcx
	movq	-312(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-304(%rbp), %rcx
	movq	-296(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-288(%rbp), %rcx
	movq	-280(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	jmp	.L1994
.L2011:
	movq	-336(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$42, %al
	jne	.L2012
	leaq	.LC205(%rip), %rax
	movq	%rax, -400(%rbp)
	movq	-392(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$1, %rax
	movq	%rax, -392(%rbp)
	movq	-392(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -392(%rbp)
	leaq	-320(%rbp), %rax
	movq	-336(%rbp), %rsi
	movl	$9, %r8d
	movq	-400(%rbp), %rdx
	movq	-392(%rbp), %rcx
	movq	%rax, %rdi
	call	lexer__Lexer_single_letter_token
	movq	-328(%rbp), %rax
	movq	-320(%rbp), %rcx
	movq	-312(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-304(%rbp), %rcx
	movq	-296(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-288(%rbp), %rcx
	movq	-280(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	jmp	.L1994
.L2012:
	movq	-336(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$47, %al
	jne	.L2013
	leaq	.LC195(%rip), %rax
	movq	%rax, -416(%rbp)
	movq	-408(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$1, %rax
	movq	%rax, -408(%rbp)
	movq	-408(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -408(%rbp)
	leaq	-320(%rbp), %rax
	movq	-336(%rbp), %rsi
	movl	$10, %r8d
	movq	-416(%rbp), %rdx
	movq	-408(%rbp), %rcx
	movq	%rax, %rdi
	call	lexer__Lexer_single_letter_token
	movq	-328(%rbp), %rax
	movq	-320(%rbp), %rcx
	movq	-312(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-304(%rbp), %rcx
	movq	-296(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-288(%rbp), %rcx
	movq	-280(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	jmp	.L1994
.L2013:
	movq	-336(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$36, %al
	jne	.L2014
	leaq	.LC206(%rip), %rax
	movq	%rax, -432(%rbp)
	movq	-424(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$1, %rax
	movq	%rax, -424(%rbp)
	movq	-424(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -424(%rbp)
	leaq	-320(%rbp), %rax
	movq	-336(%rbp), %rsi
	movl	$12, %r8d
	movq	-432(%rbp), %rdx
	movq	-424(%rbp), %rcx
	movq	%rax, %rdi
	call	lexer__Lexer_single_letter_token
	movq	-328(%rbp), %rax
	movq	-320(%rbp), %rcx
	movq	-312(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-304(%rbp), %rcx
	movq	-296(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-288(%rbp), %rcx
	movq	-280(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	jmp	.L1994
.L2014:
	movq	-336(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$37, %al
	jne	.L2015
	leaq	.LC207(%rip), %rax
	movq	%rax, -448(%rbp)
	movq	-440(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$1, %rax
	movq	%rax, -440(%rbp)
	movq	-440(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -440(%rbp)
	leaq	-320(%rbp), %rax
	movq	-336(%rbp), %rsi
	movl	$11, %r8d
	movq	-448(%rbp), %rdx
	movq	-440(%rbp), %rcx
	movq	%rax, %rdi
	call	lexer__Lexer_single_letter_token
	movq	-328(%rbp), %rax
	movq	-320(%rbp), %rcx
	movq	-312(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-304(%rbp), %rcx
	movq	-296(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-288(%rbp), %rcx
	movq	-280(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	jmp	.L1994
.L2015:
	movq	-336(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$44, %al
	jne	.L2016
	leaq	.LC208(%rip), %rax
	movq	%rax, -464(%rbp)
	movq	-456(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$1, %rax
	movq	%rax, -456(%rbp)
	movq	-456(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -456(%rbp)
	leaq	-320(%rbp), %rax
	movq	-336(%rbp), %rsi
	movl	$3, %r8d
	movq	-464(%rbp), %rdx
	movq	-456(%rbp), %rcx
	movq	%rax, %rdi
	call	lexer__Lexer_single_letter_token
	movq	-328(%rbp), %rax
	movq	-320(%rbp), %rcx
	movq	-312(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-304(%rbp), %rcx
	movq	-296(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-288(%rbp), %rcx
	movq	-280(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	jmp	.L1994
.L2016:
	movq	-336(%rbp), %rax
	movzbl	(%rax), %eax
	movb	%al, -225(%rbp)
	leaq	-80(%rbp), %rax
	leaq	-225(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	call	Array_u8_bytestr
	addq	$32, %rsp
	movq	%rax, -224(%rbp)
	movq	%rdx, -216(%rbp)
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -320(%rbp)
	movaps	%xmm0, -304(%rbp)
	movaps	%xmm0, -288(%rbp)
	movaps	%xmm0, -272(%rbp)
	movaps	%xmm0, -256(%rbp)
	leaq	.LC209(%rip), %rax
	movq	%rax, -320(%rbp)
	movl	$18, -312(%rbp)
	movl	$1, -308(%rbp)
	movl	$65040, -304(%rbp)
	movq	-224(%rbp), %rax
	movq	-216(%rbp), %rdx
	movq	%rax, -296(%rbp)
	movq	%rdx, -288(%rbp)
	leaq	.LC85(%rip), %rax
	movq	%rax, -280(%rbp)
	movl	$1, -272(%rbp)
	movl	$1, -268(%rbp)
	leaq	-320(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %rdi
	movq	%rdx, %rsi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rcx
	movq	-208(%rbp), %rax
	movq	-200(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-192(%rbp), %rax
	movq	%rax, 16(%rcx)
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L1997:
	jmp	.L2017
.L1994:
	movq	-328(%rbp), %rax
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
	.section	.rodata, "a"
.LC210:
	.string	"unkown attribute "
	.text
	.globl	encoder__section_flags
	.hidden	encoder__section_flags
encoder__section_flags:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$120, %rsp
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movq	%rcx, %rdx
	movq	%rax, -128(%rbp)
	movq	%rdx, -120(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -24(%rbp)
	jmp	.L2020
.L2025:
	movq	-128(%rbp), %rdx
	movl	-24(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	movb	%al, -25(%rbp)
	cmpb	$97, -25(%rbp)
	jne	.L2021
	orl	$2, -20(%rbp)
	jmp	.L2022
.L2021:
	cmpb	$120, -25(%rbp)
	jne	.L2023
	orl	$4, -20(%rbp)
	jmp	.L2022
.L2023:
	cmpb	$119, -25(%rbp)
	jne	.L2024
	orl	$1, -20(%rbp)
	jmp	.L2022
.L2024:
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -112(%rbp)
	movaps	%xmm0, -96(%rbp)
	movaps	%xmm0, -80(%rbp)
	movaps	%xmm0, -64(%rbp)
	movaps	%xmm0, -48(%rbp)
	leaq	.LC210(%rip), %rax
	movq	%rax, -112(%rbp)
	movl	$17, -104(%rbp)
	movl	$1, -100(%rbp)
	movl	$65026, -96(%rbp)
	movzbl	-25(%rbp), %eax
	movb	%al, -88(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -72(%rbp)
	movl	$1, -60(%rbp)
	leaq	-112(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	_v_panic
.L2022:
	addl	$1, -24(%rbp)
.L2020:
	movl	-120(%rbp), %eax
	cmpl	%eax, -24(%rbp)
	jl	.L2025
	movl	-20(%rbp), %eax
	movq	-8(%rbp), %rbx
	leave
	ret
	.section	.rodata, "a"
.LC211:
	.string	"array index out of range"
.LC212:
	.string	"undefined symbol `"
.LC213:
	.string	"sections cannot be global"
	.text
	.globl	encoder__Encoder_change_symbol_binding
	.hidden	encoder__Encoder_change_symbol_binding
encoder__Encoder_change_symbol_binding:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$376, %rsp
	movq	%rdi, -376(%rbp)
	movl	%esi, %eax
	movb	%al, -380(%rbp)
	movq	56(%rbp), %rax
	movq	64(%rbp), %rdx
	movq	%rax, -208(%rbp)
	movq	%rdx, -200(%rbp)
	movq	-376(%rbp), %rax
	movq	192(%rax), %rcx
	movq	200(%rax), %rbx
	movq	%rcx, -192(%rbp)
	movq	%rbx, -184(%rbp)
	movq	208(%rax), %rcx
	movq	216(%rax), %rbx
	movq	%rcx, -176(%rbp)
	movq	%rbx, -168(%rbp)
	movq	224(%rax), %rcx
	movq	232(%rax), %rbx
	movq	%rcx, -160(%rbp)
	movq	%rbx, -152(%rbp)
	movq	240(%rax), %rcx
	movq	248(%rax), %rbx
	movq	%rcx, -144(%rbp)
	movq	%rbx, -136(%rbp)
	movq	256(%rax), %rcx
	movq	264(%rax), %rbx
	movq	%rcx, -128(%rbp)
	movq	%rbx, -120(%rbp)
	movq	272(%rax), %rcx
	movq	280(%rax), %rbx
	movq	%rcx, -112(%rbp)
	movq	%rbx, -104(%rbp)
	movq	288(%rax), %rcx
	movq	296(%rax), %rbx
	movq	%rcx, -96(%rbp)
	movq	%rbx, -88(%rbp)
	movq	304(%rax), %rax
	movq	%rax, -80(%rbp)
	leaq	-208(%rbp), %rdx
	leaq	-192(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	map_get_check
	movq	%rax, -56(%rbp)
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -256(%rbp)
	movaps	%xmm0, -240(%rbp)
	movaps	%xmm0, -224(%rbp)
	cmpq	$0, -56(%rbp)
	je	.L2028
	leaq	-256(%rbp), %rax
	leaq	40(%rax), %rdx
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, (%rdx)
	jmp	.L2029
.L2028:
	movb	$2, -256(%rbp)
	leaq	.LC211(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$24, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	leaq	-416(%rbp), %rax
	movq	%r12, %rsi
	movq	%r13, %rdi
	movq	%r12, %rcx
	movq	%r13, %rbx
	movq	%rbx, %rdx
	movq	%rax, %rdi
	call	_v_error
	movq	-416(%rbp), %rax
	movq	-408(%rbp), %rdx
	movq	%rax, -248(%rbp)
	movq	%rdx, -240(%rbp)
	movq	-400(%rbp), %rax
	movq	-392(%rbp), %rdx
	movq	%rax, -232(%rbp)
	movq	%rdx, -224(%rbp)
.L2029:
	movzbl	-256(%rbp), %eax
	testb	%al, %al
	je	.L2030
	movq	-248(%rbp), %rax
	movq	-240(%rbp), %rdx
	movq	%rax, -368(%rbp)
	movq	%rdx, -360(%rbp)
	movq	-232(%rbp), %rax
	movq	-224(%rbp), %rdx
	movq	%rax, -352(%rbp)
	movq	%rdx, -344(%rbp)
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -336(%rbp)
	movaps	%xmm0, -320(%rbp)
	movaps	%xmm0, -304(%rbp)
	movaps	%xmm0, -288(%rbp)
	movaps	%xmm0, -272(%rbp)
	leaq	.LC212(%rip), %rax
	movq	%rax, -336(%rbp)
	movl	$18, -328(%rbp)
	movl	$1, -324(%rbp)
	movl	$65040, -320(%rbp)
	movq	56(%rbp), %rax
	movq	64(%rbp), %rdx
	movq	%rax, -312(%rbp)
	movq	%rdx, -304(%rbp)
	leaq	.LC85(%rip), %rax
	movq	%rax, -296(%rbp)
	movl	$1, -288(%rbp)
	movl	$1, -284(%rbp)
	leaq	-336(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %rdi
	movq	%rdx, %rsi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rcx
	movq	128(%rbp), %rax
	movq	136(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	144(%rbp), %rax
	movq	%rax, 16(%rcx)
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2030:
	leaq	-256(%rbp), %rax
	addq	$40, %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	cmpb	$1, -380(%rbp)
	jne	.L2031
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1, %eax
	jne	.L2031
	leaq	.LC213(%rip), %r14
	movq	%r15, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$25, %rax
	movq	%rax, %r15
	movq	%r15, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r15
	movq	%r14, %rcx
	movq	%r15, %rbx
	movq	%r14, %rax
	movq	%r15, %rdx
	movq	%rcx, %rdi
	movq	%rdx, %rsi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rcx
	movq	128(%rbp), %rax
	movq	136(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	144(%rbp), %rax
	movq	%rax, 16(%rcx)
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2031:
	movq	-64(%rbp), %rax
	movzbl	-380(%rbp), %edx
	movb	%dl, 80(%rax)
	nop
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
	.globl	encoder__Encoder_change_symbol_visibility
	.hidden	encoder__Encoder_change_symbol_visibility
encoder__Encoder_change_symbol_visibility:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$376, %rsp
	movq	%rdi, -360(%rbp)
	movl	%esi, %eax
	movb	%al, -364(%rbp)
	movq	56(%rbp), %rax
	movq	64(%rbp), %rdx
	movq	%rax, -192(%rbp)
	movq	%rdx, -184(%rbp)
	movq	-360(%rbp), %rax
	movq	192(%rax), %rcx
	movq	200(%rax), %rbx
	movq	%rcx, -176(%rbp)
	movq	%rbx, -168(%rbp)
	movq	208(%rax), %rcx
	movq	216(%rax), %rbx
	movq	%rcx, -160(%rbp)
	movq	%rbx, -152(%rbp)
	movq	224(%rax), %rcx
	movq	232(%rax), %rbx
	movq	%rcx, -144(%rbp)
	movq	%rbx, -136(%rbp)
	movq	240(%rax), %rcx
	movq	248(%rax), %rbx
	movq	%rcx, -128(%rbp)
	movq	%rbx, -120(%rbp)
	movq	256(%rax), %rcx
	movq	264(%rax), %rbx
	movq	%rcx, -112(%rbp)
	movq	%rbx, -104(%rbp)
	movq	272(%rax), %rcx
	movq	280(%rax), %rbx
	movq	%rcx, -96(%rbp)
	movq	%rbx, -88(%rbp)
	movq	288(%rax), %rcx
	movq	296(%rax), %rbx
	movq	%rcx, -80(%rbp)
	movq	%rbx, -72(%rbp)
	movq	304(%rax), %rax
	movq	%rax, -64(%rbp)
	leaq	-192(%rbp), %rdx
	leaq	-176(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	map_get_check
	movq	%rax, -40(%rbp)
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -240(%rbp)
	movaps	%xmm0, -224(%rbp)
	movaps	%xmm0, -208(%rbp)
	cmpq	$0, -40(%rbp)
	je	.L2033
	leaq	-240(%rbp), %rax
	leaq	40(%rax), %rdx
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, (%rdx)
	jmp	.L2034
.L2033:
	movb	$2, -240(%rbp)
	leaq	.LC211(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$24, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	leaq	-400(%rbp), %rax
	movq	%r12, %rsi
	movq	%r13, %rdi
	movq	%r12, %rcx
	movq	%r13, %rbx
	movq	%rbx, %rdx
	movq	%rax, %rdi
	call	_v_error
	movq	-400(%rbp), %rax
	movq	-392(%rbp), %rdx
	movq	%rax, -232(%rbp)
	movq	%rdx, -224(%rbp)
	movq	-384(%rbp), %rax
	movq	-376(%rbp), %rdx
	movq	%rax, -216(%rbp)
	movq	%rdx, -208(%rbp)
.L2034:
	movzbl	-240(%rbp), %eax
	testb	%al, %al
	je	.L2035
	movq	-232(%rbp), %rax
	movq	-224(%rbp), %rdx
	movq	%rax, -352(%rbp)
	movq	%rdx, -344(%rbp)
	movq	-216(%rbp), %rax
	movq	-208(%rbp), %rdx
	movq	%rax, -336(%rbp)
	movq	%rdx, -328(%rbp)
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -320(%rbp)
	movaps	%xmm0, -304(%rbp)
	movaps	%xmm0, -288(%rbp)
	movaps	%xmm0, -272(%rbp)
	movaps	%xmm0, -256(%rbp)
	leaq	.LC212(%rip), %rax
	movq	%rax, -320(%rbp)
	movl	$18, -312(%rbp)
	movl	$1, -308(%rbp)
	movl	$65040, -304(%rbp)
	movq	56(%rbp), %rax
	movq	64(%rbp), %rdx
	movq	%rax, -296(%rbp)
	movq	%rdx, -288(%rbp)
	leaq	.LC85(%rip), %rax
	movq	%rax, -280(%rbp)
	movl	$1, -272(%rbp)
	movl	$1, -268(%rbp)
	leaq	-320(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %rdi
	movq	%rdx, %rsi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rcx
	movq	128(%rbp), %rax
	movq	136(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	144(%rbp), %rax
	movq	%rax, 16(%rcx)
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2035:
	leaq	-240(%rbp), %rax
	addq	$40, %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movzbl	-364(%rbp), %edx
	movb	%dl, 81(%rax)
	nop
	leaq	-24(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%rbp
	ret
	.globl	encoder__Encoder_fix_same_section_relocations
	.hidden	encoder__Encoder_fix_same_section_relocations
encoder__Encoder_fix_same_section_relocations:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$976, %rsp
	movq	%rdi, -968(%rbp)
	movl	$0, -36(%rbp)
	jmp	.L2037
.L2046:
	movq	-968(%rbp), %rax
	movq	168(%rax), %rcx
	movl	-36(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$4, %rax
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	8(%rax), %rdx
	movq	(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	%rdx, -88(%rbp)
	movq	-968(%rbp), %rax
	movq	192(%rax), %rcx
	movq	200(%rax), %rbx
	movq	%rcx, -880(%rbp)
	movq	%rbx, -872(%rbp)
	movq	208(%rax), %rcx
	movq	216(%rax), %rbx
	movq	%rcx, -864(%rbp)
	movq	%rbx, -856(%rbp)
	movq	224(%rax), %rcx
	movq	232(%rax), %rbx
	movq	%rcx, -848(%rbp)
	movq	%rbx, -840(%rbp)
	movq	240(%rax), %rcx
	movq	248(%rax), %rbx
	movq	%rcx, -832(%rbp)
	movq	%rbx, -824(%rbp)
	movq	256(%rax), %rcx
	movq	264(%rax), %rbx
	movq	%rcx, -816(%rbp)
	movq	%rbx, -808(%rbp)
	movq	272(%rax), %rcx
	movq	280(%rax), %rbx
	movq	%rcx, -800(%rbp)
	movq	%rbx, -792(%rbp)
	movq	288(%rax), %rcx
	movq	296(%rax), %rbx
	movq	%rcx, -784(%rbp)
	movq	%rbx, -776(%rbp)
	movq	304(%rax), %rax
	movq	%rax, -768(%rbp)
	leaq	-96(%rbp), %rdx
	leaq	-880(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	map_get_check
	movq	%rax, -56(%rbp)
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -928(%rbp)
	movaps	%xmm0, -912(%rbp)
	movaps	%xmm0, -896(%rbp)
	cmpq	$0, -56(%rbp)
	je	.L2038
	leaq	-928(%rbp), %rax
	leaq	40(%rax), %rdx
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, (%rdx)
	jmp	.L2039
.L2038:
	movb	$2, -928(%rbp)
	leaq	.LC211(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$24, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	leaq	-1008(%rbp), %rax
	movq	%r12, %rsi
	movq	%r13, %rdi
	movq	%r12, %rcx
	movq	%r13, %rbx
	movq	%rbx, %rdx
	movq	%rax, %rdi
	call	_v_error
	movq	-1008(%rbp), %rax
	movq	-1000(%rbp), %rdx
	movq	%rax, -920(%rbp)
	movq	%rdx, -912(%rbp)
	movq	-992(%rbp), %rax
	movq	-984(%rbp), %rdx
	movq	%rax, -904(%rbp)
	movq	%rdx, -896(%rbp)
.L2039:
	movzbl	-928(%rbp), %eax
	testb	%al, %al
	jne	.L2045
	leaq	-928(%rbp), %rax
	addq	$40, %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-48(%rbp), %rax
	movq	16(%rax), %rax
	movq	96(%rax), %rdx
	movq	88(%rax), %rax
	movq	-64(%rbp), %rcx
	movq	88(%rcx), %rdi
	movq	96(%rcx), %rsi
	movq	%rdx, %rcx
	movq	%rax, %rdx
	call	string__eq
	testb	%al, %al
	je	.L2047
	movq	-64(%rbp), %rax
	movzbl	80(%rax), %eax
	cmpb	$1, %al
	je	.L2048
	movq	-48(%rbp), %rax
	movq	16(%rax), %rax
	movzbl	104(%rax), %eax
	testb	%al, %al
	jne	.L2044
	movq	-48(%rbp), %rax
	movq	32(%rax), %rax
	movl	$2, %edx
	cmpq	%rdx, %rax
	jne	.L2049
.L2044:
	movq	-64(%rbp), %rax
	movq	72(%rax), %rdx
	movq	-48(%rbp), %rax
	movq	16(%rax), %rax
	movq	72(%rax), %rax
	subq	%rax, %rdx
	movq	-48(%rbp), %rax
	movq	16(%rax), %rax
	movl	28(%rax), %eax
	cltq
	subq	%rax, %rdx
	movq	-48(%rbp), %rax
	movl	40(%rax), %eax
	cltq
	addq	%rdx, %rax
	movq	%rax, -72(%rbp)
	movb	$0, -100(%rbp)
	movb	$0, -99(%rbp)
	movb	$0, -98(%rbp)
	movb	$0, -97(%rbp)
	leaq	-960(%rbp), %rax
	leaq	-100(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$4, %edx
	movl	$4, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-72(%rbp), %rax
	movl	%eax, %edx
	leaq	-960(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	encoding__binary__little_endian_put_u32
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-960(%rbp), %rax
	movq	-952(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-944(%rbp), %rax
	movq	-936(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$0, %edi
	call	array_get
	addq	$32, %rsp
	movzbl	(%rax), %eax
	movb	%al, -137(%rbp)
	movq	-48(%rbp), %rax
	movq	16(%rax), %rax
	movq	72(%rax), %rax
	movl	%eax, %edx
	movq	-48(%rbp), %rax
	movq	24(%rax), %rax
	addl	%edx, %eax
	movl	%eax, %r14d
	movq	$0, -136(%rbp)
	movq	-48(%rbp), %rax
	movq	16(%rax), %rax
	movq	96(%rax), %rdx
	movq	88(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	%rdx, -120(%rbp)
	movq	-968(%rbp), %rax
	movq	312(%rax), %rcx
	movq	320(%rax), %rbx
	movq	%rcx, -752(%rbp)
	movq	%rbx, -744(%rbp)
	movq	328(%rax), %rcx
	movq	336(%rax), %rbx
	movq	%rcx, -736(%rbp)
	movq	%rbx, -728(%rbp)
	movq	344(%rax), %rcx
	movq	352(%rax), %rbx
	movq	%rcx, -720(%rbp)
	movq	%rbx, -712(%rbp)
	movq	360(%rax), %rcx
	movq	368(%rax), %rbx
	movq	%rcx, -704(%rbp)
	movq	%rbx, -696(%rbp)
	movq	376(%rax), %rcx
	movq	384(%rax), %rbx
	movq	%rcx, -688(%rbp)
	movq	%rbx, -680(%rbp)
	movq	392(%rax), %rcx
	movq	400(%rax), %rbx
	movq	%rcx, -672(%rbp)
	movq	%rbx, -664(%rbp)
	movq	408(%rax), %rcx
	movq	416(%rax), %rbx
	movq	%rcx, -656(%rbp)
	movq	%rbx, -648(%rbp)
	movq	424(%rax), %rax
	movq	%rax, -640(%rbp)
	leaq	-136(%rbp), %rdx
	leaq	-128(%rbp), %rcx
	leaq	-752(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	map_get
	movq	(%rax), %rax
	movq	%rax, %rcx
	leaq	-137(%rbp), %rax
	movq	%rax, %rdx
	movl	%r14d, %esi
	movq	%rcx, %rdi
	call	array_set
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-960(%rbp), %rax
	movq	-952(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-944(%rbp), %rax
	movq	-936(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$1, %edi
	call	array_get
	addq	$32, %rsp
	movzbl	(%rax), %eax
	movb	%al, -169(%rbp)
	movq	-48(%rbp), %rax
	movq	16(%rax), %rax
	movq	72(%rax), %rax
	movl	%eax, %edx
	movq	-48(%rbp), %rax
	movq	24(%rax), %rax
	addl	%edx, %eax
	addl	$1, %eax
	movl	%eax, %r14d
	movq	$0, -168(%rbp)
	movq	-48(%rbp), %rax
	movq	16(%rax), %rax
	movq	96(%rax), %rdx
	movq	88(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	%rdx, -152(%rbp)
	movq	-968(%rbp), %rax
	movq	312(%rax), %rcx
	movq	320(%rax), %rbx
	movq	%rcx, -624(%rbp)
	movq	%rbx, -616(%rbp)
	movq	328(%rax), %rcx
	movq	336(%rax), %rbx
	movq	%rcx, -608(%rbp)
	movq	%rbx, -600(%rbp)
	movq	344(%rax), %rcx
	movq	352(%rax), %rbx
	movq	%rcx, -592(%rbp)
	movq	%rbx, -584(%rbp)
	movq	360(%rax), %rcx
	movq	368(%rax), %rbx
	movq	%rcx, -576(%rbp)
	movq	%rbx, -568(%rbp)
	movq	376(%rax), %rcx
	movq	384(%rax), %rbx
	movq	%rcx, -560(%rbp)
	movq	%rbx, -552(%rbp)
	movq	392(%rax), %rcx
	movq	400(%rax), %rbx
	movq	%rcx, -544(%rbp)
	movq	%rbx, -536(%rbp)
	movq	408(%rax), %rcx
	movq	416(%rax), %rbx
	movq	%rcx, -528(%rbp)
	movq	%rbx, -520(%rbp)
	movq	424(%rax), %rax
	movq	%rax, -512(%rbp)
	leaq	-168(%rbp), %rdx
	leaq	-160(%rbp), %rcx
	leaq	-624(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	map_get
	movq	(%rax), %rax
	movq	%rax, %rcx
	leaq	-169(%rbp), %rax
	movq	%rax, %rdx
	movl	%r14d, %esi
	movq	%rcx, %rdi
	call	array_set
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-960(%rbp), %rax
	movq	-952(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-944(%rbp), %rax
	movq	-936(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$2, %edi
	call	array_get
	addq	$32, %rsp
	movzbl	(%rax), %eax
	movb	%al, -201(%rbp)
	movq	-48(%rbp), %rax
	movq	16(%rax), %rax
	movq	72(%rax), %rax
	movl	%eax, %edx
	movq	-48(%rbp), %rax
	movq	24(%rax), %rax
	addl	%edx, %eax
	addl	$2, %eax
	movl	%eax, %r14d
	movq	$0, -200(%rbp)
	movq	-48(%rbp), %rax
	movq	16(%rax), %rax
	movq	96(%rax), %rdx
	movq	88(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	%rdx, -184(%rbp)
	movq	-968(%rbp), %rax
	movq	312(%rax), %rcx
	movq	320(%rax), %rbx
	movq	%rcx, -496(%rbp)
	movq	%rbx, -488(%rbp)
	movq	328(%rax), %rcx
	movq	336(%rax), %rbx
	movq	%rcx, -480(%rbp)
	movq	%rbx, -472(%rbp)
	movq	344(%rax), %rcx
	movq	352(%rax), %rbx
	movq	%rcx, -464(%rbp)
	movq	%rbx, -456(%rbp)
	movq	360(%rax), %rcx
	movq	368(%rax), %rbx
	movq	%rcx, -448(%rbp)
	movq	%rbx, -440(%rbp)
	movq	376(%rax), %rcx
	movq	384(%rax), %rbx
	movq	%rcx, -432(%rbp)
	movq	%rbx, -424(%rbp)
	movq	392(%rax), %rcx
	movq	400(%rax), %rbx
	movq	%rcx, -416(%rbp)
	movq	%rbx, -408(%rbp)
	movq	408(%rax), %rcx
	movq	416(%rax), %rbx
	movq	%rcx, -400(%rbp)
	movq	%rbx, -392(%rbp)
	movq	424(%rax), %rax
	movq	%rax, -384(%rbp)
	leaq	-200(%rbp), %rdx
	leaq	-192(%rbp), %rcx
	leaq	-496(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	map_get
	movq	(%rax), %rax
	movq	%rax, %rcx
	leaq	-201(%rbp), %rax
	movq	%rax, %rdx
	movl	%r14d, %esi
	movq	%rcx, %rdi
	call	array_set
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-960(%rbp), %rax
	movq	-952(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-944(%rbp), %rax
	movq	-936(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$3, %edi
	call	array_get
	addq	$32, %rsp
	movzbl	(%rax), %eax
	movb	%al, -233(%rbp)
	movq	-48(%rbp), %rax
	movq	16(%rax), %rax
	movq	72(%rax), %rax
	movl	%eax, %edx
	movq	-48(%rbp), %rax
	movq	24(%rax), %rax
	addl	%edx, %eax
	addl	$3, %eax
	movl	%eax, %r14d
	movq	$0, -232(%rbp)
	movq	-48(%rbp), %rax
	movq	16(%rax), %rax
	movq	96(%rax), %rdx
	movq	88(%rax), %rax
	movq	%rax, -224(%rbp)
	movq	%rdx, -216(%rbp)
	movq	-968(%rbp), %rax
	movq	312(%rax), %rcx
	movq	320(%rax), %rbx
	movq	%rcx, -368(%rbp)
	movq	%rbx, -360(%rbp)
	movq	328(%rax), %rcx
	movq	336(%rax), %rbx
	movq	%rcx, -352(%rbp)
	movq	%rbx, -344(%rbp)
	movq	344(%rax), %rcx
	movq	352(%rax), %rbx
	movq	%rcx, -336(%rbp)
	movq	%rbx, -328(%rbp)
	movq	360(%rax), %rcx
	movq	368(%rax), %rbx
	movq	%rcx, -320(%rbp)
	movq	%rbx, -312(%rbp)
	movq	376(%rax), %rcx
	movq	384(%rax), %rbx
	movq	%rcx, -304(%rbp)
	movq	%rbx, -296(%rbp)
	movq	392(%rax), %rcx
	movq	400(%rax), %rbx
	movq	%rcx, -288(%rbp)
	movq	%rbx, -280(%rbp)
	movq	408(%rax), %rcx
	movq	416(%rax), %rbx
	movq	%rcx, -272(%rbp)
	movq	%rbx, -264(%rbp)
	movq	424(%rax), %rax
	movq	%rax, -256(%rbp)
	leaq	-232(%rbp), %rdx
	leaq	-224(%rbp), %rcx
	leaq	-368(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	map_get
	movq	(%rax), %rax
	movq	%rax, %rcx
	leaq	-233(%rbp), %rax
	movq	%rax, %rdx
	movl	%r14d, %esi
	movq	%rcx, %rdi
	call	array_set
	movq	-48(%rbp), %rax
	movb	$1, 44(%rax)
	jmp	.L2045
.L2047:
	nop
	jmp	.L2045
.L2048:
	nop
	jmp	.L2045
.L2049:
	nop
.L2045:
	addl	$1, -36(%rbp)
.L2037:
	movq	-968(%rbp), %rax
	movl	180(%rax), %eax
	cmpl	%eax, -36(%rbp)
	jl	.L2046
	nop
	nop
	leaq	-32(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%rbp
	ret
	.section	.rodata, "a"
.LC214:
	.string	"this should not happen"
	.text
	.globl	encoder__Encoder_assign_addresses
encoder__Encoder_assign_addresses:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$344, %rsp
	movq	%rdi, -344(%rbp)
	movl	$0, -52(%rbp)
	jmp	.L2051
.L2062:
	movq	-344(%rbp), %rax
	movq	136(%rax), %rax
	movl	-52(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	96(%rax), %rdx
	movq	88(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	%rdx, -104(%rbp)
	movq	-344(%rbp), %rax
	movq	312(%rax), %rcx
	movq	320(%rax), %rbx
	movq	%rcx, -256(%rbp)
	movq	%rbx, -248(%rbp)
	movq	328(%rax), %rcx
	movq	336(%rax), %rbx
	movq	%rcx, -240(%rbp)
	movq	%rbx, -232(%rbp)
	movq	344(%rax), %rcx
	movq	352(%rax), %rbx
	movq	%rcx, -224(%rbp)
	movq	%rbx, -216(%rbp)
	movq	360(%rax), %rcx
	movq	368(%rax), %rbx
	movq	%rcx, -208(%rbp)
	movq	%rbx, -200(%rbp)
	movq	376(%rax), %rcx
	movq	384(%rax), %rbx
	movq	%rcx, -192(%rbp)
	movq	%rbx, -184(%rbp)
	movq	392(%rax), %rcx
	movq	400(%rax), %rbx
	movq	%rcx, -176(%rbp)
	movq	%rbx, -168(%rbp)
	movq	408(%rax), %rcx
	movq	416(%rax), %rbx
	movq	%rcx, -160(%rbp)
	movq	%rbx, -152(%rbp)
	movq	424(%rax), %rax
	movq	%rax, -144(%rbp)
	leaq	-112(%rbp), %rdx
	leaq	-256(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	map_exists
	testb	%al, %al
	jne	.L2052
	leaq	-304(%rbp), %rax
	movl	$1, %ecx
	movl	$0, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array
	movl	$0, -272(%rbp)
	movl	$0, -268(%rbp)
	movq	$0, -136(%rbp)
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	96(%rax), %rdx
	movq	88(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	%rdx, -120(%rbp)
	movq	-344(%rbp), %rax
	leaq	312(%rax), %rcx
	leaq	-136(%rbp), %rdx
	leaq	-128(%rbp), %rax
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	map_get_and_set
	movq	%rax, %rbx
	leaq	-304(%rbp), %rax
	movl	$40, %esi
	movq	%rax, %rdi
	call	memdup
	movq	%rax, (%rbx)
.L2052:
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	96(%rax), %rdx
	movq	88(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	%rdx, -88(%rbp)
	movq	-344(%rbp), %rax
	movq	312(%rax), %rcx
	movq	320(%rax), %rbx
	movq	%rcx, -256(%rbp)
	movq	%rbx, -248(%rbp)
	movq	328(%rax), %rcx
	movq	336(%rax), %rbx
	movq	%rcx, -240(%rbp)
	movq	%rbx, -232(%rbp)
	movq	344(%rax), %rcx
	movq	352(%rax), %rbx
	movq	%rcx, -224(%rbp)
	movq	%rbx, -216(%rbp)
	movq	360(%rax), %rcx
	movq	368(%rax), %rbx
	movq	%rcx, -208(%rbp)
	movq	%rbx, -200(%rbp)
	movq	376(%rax), %rcx
	movq	384(%rax), %rbx
	movq	%rcx, -192(%rbp)
	movq	%rbx, -184(%rbp)
	movq	392(%rax), %rcx
	movq	400(%rax), %rbx
	movq	%rcx, -176(%rbp)
	movq	%rbx, -168(%rbp)
	movq	408(%rax), %rcx
	movq	416(%rax), %rbx
	movq	%rcx, -160(%rbp)
	movq	%rbx, -152(%rbp)
	movq	424(%rax), %rax
	movq	%rax, -144(%rbp)
	leaq	-96(%rbp), %rdx
	leaq	-256(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	map_get_check
	movq	%rax, -72(%rbp)
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -304(%rbp)
	movaps	%xmm0, -288(%rbp)
	movaps	%xmm0, -272(%rbp)
	cmpq	$0, -72(%rbp)
	je	.L2053
	leaq	-304(%rbp), %rax
	leaq	40(%rax), %rdx
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, (%rdx)
	jmp	.L2054
.L2053:
	movb	$2, -304(%rbp)
	leaq	.LC211(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$24, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	leaq	-384(%rbp), %rax
	movq	%r12, %rsi
	movq	%r13, %rdi
	movq	%r12, %rcx
	movq	%r13, %rbx
	movq	%rbx, %rdx
	movq	%rax, %rdi
	call	_v_error
	movq	-384(%rbp), %rax
	movq	-376(%rbp), %rdx
	movq	%rax, -296(%rbp)
	movq	%rdx, -288(%rbp)
	movq	-368(%rbp), %rax
	movq	-360(%rbp), %rdx
	movq	%rax, -280(%rbp)
	movq	%rdx, -272(%rbp)
.L2054:
	movzbl	-304(%rbp), %eax
	testb	%al, %al
	je	.L2055
	movq	-296(%rbp), %rax
	movq	-288(%rbp), %rdx
	movq	%rax, -336(%rbp)
	movq	%rdx, -328(%rbp)
	movq	-280(%rbp), %rax
	movq	-272(%rbp), %rdx
	movq	%rax, -320(%rbp)
	movq	%rdx, -312(%rbp)
	leaq	.LC214(%rip), %r14
	movq	%r15, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$22, %rax
	movq	%rax, %r15
	movq	%r15, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r15
	movq	%r14, %rcx
	movq	%r15, %rbx
	movq	%r14, %rax
	movq	%r15, %rdx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	_v_panic
.L2055:
	leaq	-304(%rbp), %rax
	addq	$40, %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	cmpl	$1, %eax
	jne	.L2056
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	56(%rax), %rdx
	movq	64(%rax), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	encoder__section_flags
	movq	-80(%rbp), %rdx
	movl	%eax, 36(%rdx)
	jmp	.L2057
.L2056:
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	cmpl	$2, %eax
	jne	.L2058
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	-344(%rbp), %rdi
	subq	$8, %rsp
	subq	$136, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rax
	movq	%rax, 128(%rdx)
	movl	$1, %esi
	call	encoder__Encoder_change_symbol_binding
	addq	$144, %rsp
	jmp	.L2057
.L2058:
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	cmpl	$3, %eax
	jne	.L2059
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	-344(%rbp), %rdi
	subq	$8, %rsp
	subq	$136, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rax
	movq	%rax, 128(%rdx)
	movl	$0, %esi
	call	encoder__Encoder_change_symbol_binding
	addq	$144, %rsp
	jmp	.L2057
.L2059:
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	cmpl	$4, %eax
	jne	.L2060
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	-344(%rbp), %rdi
	subq	$8, %rsp
	subq	$136, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rax
	movq	%rax, 128(%rdx)
	movl	$2, %esi
	call	encoder__Encoder_change_symbol_visibility
	addq	$144, %rsp
	jmp	.L2057
.L2060:
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	cmpl	$5, %eax
	jne	.L2061
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	-344(%rbp), %rdi
	subq	$8, %rsp
	subq	$136, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rax
	movq	%rax, 128(%rdx)
	movl	$1, %esi
	call	encoder__Encoder_change_symbol_visibility
	addq	$144, %rsp
	jmp	.L2057
.L2061:
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	cmpl	$6, %eax
	jne	.L2057
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	-344(%rbp), %rdi
	subq	$8, %rsp
	subq	$136, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rax
	movq	%rax, 128(%rdx)
	movl	$3, %esi
	call	encoder__Encoder_change_symbol_visibility
	addq	$144, %rsp
.L2057:
	movq	-80(%rbp), %rax
	movl	32(%rax), %edx
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movslq	%edx, %rdx
	movq	%rdx, 72(%rax)
	movq	-80(%rbp), %rax
	movl	32(%rax), %edx
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movl	28(%rax), %eax
	addl	%eax, %edx
	movq	-80(%rbp), %rax
	movl	%edx, 32(%rax)
	movq	-64(%rbp), %rax
	movq	(%rax), %rcx
	movq	8(%rcx), %rax
	movq	16(%rcx), %rdx
	movq	%rax, -336(%rbp)
	movq	%rdx, -328(%rbp)
	movq	24(%rcx), %rax
	movq	32(%rcx), %rdx
	movq	%rax, -320(%rbp)
	movq	%rdx, -312(%rbp)
	movl	-316(%rbp), %edx
	movq	-328(%rbp), %rcx
	movq	-80(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	array_push_many
	addl	$1, -52(%rbp)
.L2051:
	movq	-344(%rbp), %rax
	movl	148(%rax), %eax
	cmpl	%eax, -52(%rbp)
	jl	.L2062
	movq	-344(%rbp), %rax
	movq	%rax, %rdi
	call	encoder__Encoder_fix_same_section_relocations
	nop
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
	.globl	encoder__Encoder_add_imm_rela
	.hidden	encoder__Encoder_add_imm_rela
encoder__Encoder_add_imm_rela:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$224, %rsp
	movq	%rdi, -200(%rbp)
	movq	%rsi, %rax
	movq	%rdx, %rsi
	movq	%rsi, %rdx
	movq	%rax, -224(%rbp)
	movq	%rdx, -216(%rbp)
	movl	%ecx, -204(%rbp)
	movl	%r8d, -208(%rbp)
	movq	-224(%rbp), %rax
	movq	-216(%rbp), %rdx
	movq	%rax, -48(%rbp)
	movq	%rdx, -40(%rbp)
	movq	-200(%rbp), %rax
	movq	120(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	-200(%rbp), %rax
	movq	120(%rax), %rax
	movl	28(%rax), %eax
	cltq
	movq	%rax, -24(%rbp)
	movq	$0, -16(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -8(%rbp)
	movb	$0, -4(%rbp)
	cmpl	$0, -208(%rbp)
	jne	.L2064
	movl	$14, %eax
	movq	%rax, -16(%rbp)
	movb	$0, -145(%rbp)
	movq	-200(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-145(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	jmp	.L2065
.L2064:
	cmpl	$1, -208(%rbp)
	jne	.L2066
	movl	$12, %eax
	movq	%rax, -16(%rbp)
	movb	$0, -147(%rbp)
	movb	$0, -146(%rbp)
	leaq	-192(%rbp), %rax
	leaq	-147(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movl	-172(%rbp), %edx
	movq	-184(%rbp), %rax
	movq	-200(%rbp), %rcx
	movq	120(%rcx), %rcx
	addq	$8, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	jmp	.L2065
.L2066:
	cmpl	$2, -208(%rbp)
	jne	.L2067
	movl	$10, %eax
	movq	%rax, -16(%rbp)
	movb	$0, -151(%rbp)
	movb	$0, -150(%rbp)
	movb	$0, -149(%rbp)
	movb	$0, -148(%rbp)
	leaq	-192(%rbp), %rax
	leaq	-151(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$4, %edx
	movl	$4, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movl	-172(%rbp), %edx
	movq	-184(%rbp), %rax
	movq	-200(%rbp), %rcx
	movq	120(%rcx), %rcx
	addq	$8, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	jmp	.L2065
.L2067:
	cmpl	$3, -208(%rbp)
	jne	.L2065
	movl	$11, %eax
	movq	%rax, -16(%rbp)
	movb	$0, -155(%rbp)
	movb	$0, -154(%rbp)
	movb	$0, -153(%rbp)
	movb	$0, -152(%rbp)
	leaq	-192(%rbp), %rax
	leaq	-155(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$4, %edx
	movl	$4, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movl	-172(%rbp), %edx
	movq	-184(%rbp), %rax
	movq	-200(%rbp), %rcx
	movq	120(%rcx), %rcx
	addq	$8, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
.L2065:
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, -144(%rbp)
	movq	%rdx, -136(%rbp)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdx
	movq	%rax, -128(%rbp)
	movq	%rdx, -120(%rbp)
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rdx
	movq	%rax, -112(%rbp)
	movq	%rdx, -104(%rbp)
	movq	-200(%rbp), %rax
	leaq	160(%rax), %rdx
	leaq	-144(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	nop
	leave
	ret
	.section	.rodata, "a"
.LC215:
	.string	"unreachable"
	.text
	.globl	encoder__Encoder_add_imm_value
	.hidden	encoder__Encoder_add_imm_value
encoder__Encoder_add_imm_value:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$104, %rsp
	movq	%rdi, -120(%rbp)
	movl	%esi, -124(%rbp)
	movl	%edx, -128(%rbp)
	movl	-124(%rbp), %eax
	movl	%eax, %edi
	call	encoder__is_in_i8_range
	testb	%al, %al
	jne	.L2069
	cmpl	$0, -128(%rbp)
	jne	.L2070
.L2069:
	movl	-124(%rbp), %eax
	movb	%al, -33(%rbp)
	movq	-120(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-33(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	nop
	jmp	.L2068
.L2070:
	cmpl	$1, -128(%rbp)
	jne	.L2072
	movb	$0, -35(%rbp)
	movb	$0, -34(%rbp)
	leaq	-112(%rbp), %rax
	leaq	-35(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movl	-124(%rbp), %eax
	movzwl	%ax, %edx
	leaq	-112(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	encoding__binary__little_endian_put_u16
	movq	-112(%rbp), %rax
	movq	-104(%rbp), %rdx
	movq	%rax, -80(%rbp)
	movq	%rdx, -72(%rbp)
	movq	-96(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rax, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movl	-60(%rbp), %edx
	movq	-72(%rbp), %rax
	movq	-120(%rbp), %rcx
	movq	120(%rcx), %rcx
	addq	$8, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	jmp	.L2068
.L2072:
	movl	-124(%rbp), %eax
	movl	%eax, %edi
	call	encoder__is_in_i32_range
	testb	%al, %al
	je	.L2073
	movb	$0, -39(%rbp)
	movb	$0, -38(%rbp)
	movb	$0, -37(%rbp)
	movb	$0, -36(%rbp)
	leaq	-112(%rbp), %rax
	leaq	-39(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$4, %edx
	movl	$4, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movl	-124(%rbp), %edx
	leaq	-112(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	encoding__binary__little_endian_put_u32
	movq	-112(%rbp), %rax
	movq	-104(%rbp), %rdx
	movq	%rax, -80(%rbp)
	movq	%rdx, -72(%rbp)
	movq	-96(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rax, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movl	-60(%rbp), %edx
	movq	-72(%rbp), %rax
	movq	-120(%rbp), %rcx
	movq	120(%rcx), %rcx
	addq	$8, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	jmp	.L2068
.L2073:
	leaq	.LC215(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$11, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	%r12, %rcx
	movq	%r13, %rbx
	movq	%r12, %rax
	movq	%r13, %rdx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	_v_panic
.L2068:
	addq	$104, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%rbp
	ret
	.globl	encoder__Encoder_add_imm_value2
	.hidden	encoder__Encoder_add_imm_value2
encoder__Encoder_add_imm_value2:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$96, %rsp
	movq	%rdi, -88(%rbp)
	movl	%esi, -92(%rbp)
	movl	%edx, -96(%rbp)
	cmpl	$0, -96(%rbp)
	jne	.L2075
	movl	-92(%rbp), %eax
	movb	%al, -1(%rbp)
	leaq	-48(%rbp), %rax
	leaq	-1(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movl	-28(%rbp), %edx
	movq	-40(%rbp), %rax
	movq	-88(%rbp), %rcx
	movq	120(%rcx), %rcx
	addq	$8, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	jmp	.L2078
.L2075:
	cmpl	$1, -96(%rbp)
	jne	.L2077
	movb	$0, -3(%rbp)
	movb	$0, -2(%rbp)
	leaq	-80(%rbp), %rax
	leaq	-3(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movl	-92(%rbp), %eax
	movzwl	%ax, %edx
	leaq	-80(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	encoding__binary__little_endian_put_u16
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$0, %edi
	call	array_get
	addq	$32, %rsp
	movzbl	(%rax), %eax
	movb	%al, -5(%rbp)
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$1, %edi
	call	array_get
	addq	$32, %rsp
	movzbl	(%rax), %eax
	movb	%al, -4(%rbp)
	leaq	-48(%rbp), %rax
	leaq	-5(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movl	-28(%rbp), %edx
	movq	-40(%rbp), %rax
	movq	-88(%rbp), %rcx
	movq	120(%rcx), %rcx
	addq	$8, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	jmp	.L2078
.L2077:
	movb	$0, -9(%rbp)
	movb	$0, -8(%rbp)
	movb	$0, -7(%rbp)
	movb	$0, -6(%rbp)
	leaq	-80(%rbp), %rax
	leaq	-9(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$4, %edx
	movl	$4, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movl	-92(%rbp), %edx
	leaq	-80(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	encoding__binary__little_endian_put_u32
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$0, %edi
	call	array_get
	addq	$32, %rsp
	movzbl	(%rax), %eax
	movb	%al, -13(%rbp)
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$1, %edi
	call	array_get
	addq	$32, %rsp
	movzbl	(%rax), %eax
	movb	%al, -12(%rbp)
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$2, %edi
	call	array_get
	addq	$32, %rsp
	movzbl	(%rax), %eax
	movb	%al, -11(%rbp)
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$3, %edi
	call	array_get
	addq	$32, %rsp
	movzbl	(%rax), %eax
	movb	%al, -10(%rbp)
	leaq	-48(%rbp), %rax
	leaq	-13(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$4, %edx
	movl	$4, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movl	-28(%rbp), %edx
	movq	-40(%rbp), %rax
	movq	-88(%rbp), %rcx
	movq	120(%rcx), %rcx
	addq	$8, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
.L2078:
	nop
	leave
	ret
	.section	.rodata, "a"
.LC216:
	.string	"invalid operand for instruction"
	.text
	.globl	encoder__Encoder_cmov
	.hidden	encoder__Encoder_cmov
encoder__Encoder_cmov:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$216, %rsp
	movq	%rdi, -248(%rbp)
	movl	%esi, -252(%rbp)
	movl	%edx, -256(%rbp)
	movl	-252(%rbp), %edx
	movq	-248(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_set_current_instr
	leaq	-128(%rbp), %rax
	movq	-248(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	encoder__Encoder_parse_two_operand
	movq	-128(%rbp), %rax
	movq	-120(%rbp), %rdx
	movq	%rax, -160(%rbp)
	movq	%rdx, -152(%rbp)
	movq	-112(%rbp), %rax
	movq	%rax, -144(%rbp)
	movq	-104(%rbp), %rax
	movq	-96(%rbp), %rdx
	movq	%rax, -192(%rbp)
	movq	%rdx, -184(%rbp)
	movq	-88(%rbp), %rax
	movq	%rax, -176(%rbp)
	movl	-152(%rbp), %eax
	cmpl	$165, %eax
	jne	.L2080
	movl	-184(%rbp), %eax
	cmpl	$165, %eax
	jne	.L2080
	movl	-256(%rbp), %eax
	movl	%eax, -196(%rbp)
	leaq	-80(%rbp), %rax
	leaq	-196(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-160(%rbp), %r8
	leaq	.LC30(%rip), %r14
	movq	%r15, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, %r15
	movq	%r15, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r15
	movq	-192(%rbp), %rax
	movq	%r14, %rsi
	movq	%r15, %rdi
	movq	%r14, %rcx
	movq	%r15, %rbx
	movq	%rsi, %r10
	movq	%rbx, %r11
	movq	(%rax), %rsi
	movq	8(%rax), %r9
	movq	-248(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	8(%r8)
	pushq	(%r8)
	movq	%r10, %rcx
	movq	%r11, %r8
	movq	%r9, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movq	16(%rbp), %rax
	movq	24(%rbp), %rdx
	movq	%rax, -240(%rbp)
	movq	%rdx, -232(%rbp)
	movq	32(%rbp), %rax
	movq	40(%rbp), %rdx
	movq	%rax, -224(%rbp)
	movq	%rdx, -216(%rbp)
	movl	-220(%rbp), %edx
	movq	-232(%rbp), %rax
	movq	-248(%rbp), %rcx
	movq	120(%rcx), %rcx
	addq	$8, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	movq	-160(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	call	encoder__Register_regi_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %r12d
	movq	-192(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	call	encoder__Register_regi_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %ecx
	movl	$3, %eax
	movzbl	%al, %eax
	movl	%r12d, %edx
	movl	%ecx, %esi
	movl	%eax, %edi
	call	encoder__compose_mod_rm
	movb	%al, -197(%rbp)
	movq	-248(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-197(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	jmp	.L2082
.L2080:
	leaq	.LC216(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$31, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	-144(%rbp), %rcx
	movq	%r12, %rsi
	movq	%r13, %rdi
	movq	%r12, %rax
	movq	%r13, %rdx
	movq	%rsi, %rdi
	movq	%rdx, %r8
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	movq	%r8, %rsi
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2082:
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
	.section	.rodata, "a"
.LC217:
	.string	"invalid immediate operand"
	.text
	.globl	encoder__Encoder_mov
	.hidden	encoder__Encoder_mov
encoder__Encoder_mov:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$696, %rsp
	movq	%rdi, -616(%rbp)
	movl	%esi, -620(%rbp)
	movq	-616(%rbp), %rax
	movl	$26, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_set_current_instr
	leaq	-400(%rbp), %rdx
	movq	-616(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	encoder__Encoder_parse_two_operand
	movq	-400(%rbp), %rax
	movq	-392(%rbp), %rdx
	movq	%rax, -432(%rbp)
	movq	%rdx, -424(%rbp)
	movq	-384(%rbp), %rax
	movq	%rax, -416(%rbp)
	movq	-376(%rbp), %rax
	movq	-368(%rbp), %rdx
	movq	%rax, -464(%rbp)
	movq	%rdx, -456(%rbp)
	movq	-360(%rbp), %rax
	movq	%rax, -448(%rbp)
	movl	-424(%rbp), %eax
	cmpl	$166, %eax
	jne	.L2084
	movl	-456(%rbp), %eax
	cmpl	$165, %eax
	jne	.L2084
	movq	-464(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movl	$3, %edi
	call	encoder__Register_check_regi_size
	addq	$48, %rsp
	movl	$1, -472(%rbp)
	movl	$3, -468(%rbp)
	leaq	-352(%rbp), %rax
	leaq	-472(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-464(%rbp), %r8
	leaq	.LC30(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	-432(%rbp), %rax
	movq	%r12, %rsi
	movq	%r13, %rdi
	movq	%r12, %rcx
	movq	%r13, %rbx
	movq	%rsi, %r10
	movq	%rbx, %r11
	movq	(%rax), %rsi
	movq	8(%rax), %r9
	movq	-616(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-352(%rbp), %rax
	movq	-344(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-336(%rbp), %rax
	movq	-328(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	8(%r8)
	pushq	(%r8)
	movq	%r10, %rcx
	movq	%r11, %r8
	movq	%r9, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movb	$15, -475(%rbp)
	movb	$126, -474(%rbp)
	leaq	-576(%rbp), %rax
	leaq	-475(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movl	-556(%rbp), %edx
	movq	-568(%rbp), %rax
	movq	-616(%rbp), %rcx
	movq	120(%rcx), %rcx
	addq	$8, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	movq	-464(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	call	encoder__Register_regi_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %r12d
	movq	-432(%rbp), %rax
	subq	$8, %rsp
	subq	$40, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rax
	movq	%rax, 32(%rdx)
	call	encoder__Xmm_xmm_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %ecx
	movl	$3, %eax
	movzbl	%al, %eax
	movl	%r12d, %edx
	movl	%ecx, %esi
	movl	%eax, %edi
	call	encoder__compose_mod_rm
	movb	%al, -473(%rbp)
	movq	-616(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-473(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	jmp	.L2085
.L2084:
	movl	-424(%rbp), %eax
	cmpl	$165, %eax
	jne	.L2086
	movl	-456(%rbp), %eax
	cmpl	$166, %eax
	jne	.L2086
	movq	-432(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movl	$3, %edi
	call	encoder__Register_check_regi_size
	addq	$48, %rsp
	movl	$1, -484(%rbp)
	movl	$3, -480(%rbp)
	leaq	-320(%rbp), %rax
	leaq	-484(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-432(%rbp), %r8
	leaq	.LC30(%rip), %r14
	movq	%r15, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, %r15
	movq	%r15, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r15
	movq	-464(%rbp), %rax
	movq	%r14, %rsi
	movq	%r15, %rdi
	movq	%r14, %rcx
	movq	%r15, %rbx
	movq	%rsi, %r10
	movq	%rbx, %r11
	movq	(%rax), %rsi
	movq	8(%rax), %r9
	movq	-616(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-320(%rbp), %rax
	movq	-312(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-304(%rbp), %rax
	movq	-296(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	8(%r8)
	pushq	(%r8)
	movq	%r10, %rcx
	movq	%r11, %r8
	movq	%r9, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movb	$15, -487(%rbp)
	movb	$110, -486(%rbp)
	leaq	-576(%rbp), %rax
	leaq	-487(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movl	-556(%rbp), %edx
	movq	-568(%rbp), %rax
	movq	-616(%rbp), %rcx
	movq	120(%rcx), %rcx
	addq	$8, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	movq	-432(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	call	encoder__Register_regi_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %r12d
	movq	-464(%rbp), %rax
	subq	$8, %rsp
	subq	$40, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rax
	movq	%rax, 32(%rdx)
	call	encoder__Xmm_xmm_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %ecx
	movl	$3, %eax
	movzbl	%al, %eax
	movl	%r12d, %edx
	movl	%ecx, %esi
	movl	%eax, %edi
	call	encoder__compose_mod_rm
	movb	%al, -485(%rbp)
	movq	-616(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-485(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	jmp	.L2085
.L2086:
	movl	-424(%rbp), %eax
	cmpl	$167, %eax
	jne	.L2087
	movl	-456(%rbp), %eax
	cmpl	$166, %eax
	jne	.L2087
	movq	-432(%rbp), %rax
	movq	-616(%rbp), %rsi
	subq	$176, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, 128(%rdx)
	movq	%rbx, 136(%rdx)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, 144(%rdx)
	movq	%rbx, 152(%rdx)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, 160(%rdx)
	movq	%rbx, 168(%rdx)
	movq	%rsi, %rdi
	call	encoder__Encoder_add_segment_override_prefix
	addq	$176, %rsp
	movl	$4, -492(%rbp)
	leaq	-288(%rbp), %rax
	leaq	-492(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-432(%rbp), %r10
	movq	-432(%rbp), %rdx
	movq	-464(%rbp), %rax
	movq	72(%rdx), %r8
	movq	80(%rdx), %r11
	movq	(%rax), %rsi
	movq	8(%rax), %r9
	movq	-616(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-288(%rbp), %rax
	movq	-280(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-272(%rbp), %rax
	movq	-264(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	32(%r10)
	pushq	24(%r10)
	movq	%r8, %rcx
	movq	%r11, %r8
	movq	%r9, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movb	$15, -494(%rbp)
	movb	$126, -493(%rbp)
	leaq	-576(%rbp), %rax
	leaq	-494(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movl	-556(%rbp), %edx
	movq	-568(%rbp), %rax
	movq	-616(%rbp), %rcx
	movq	120(%rcx), %rcx
	addq	$8, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	movq	-464(%rbp), %rax
	subq	$8, %rsp
	subq	$40, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rax
	movq	%rax, 32(%rdx)
	call	encoder__Xmm_xmm_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %esi
	movq	-432(%rbp), %rax
	movq	-616(%rbp), %rdi
	subq	$176, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, 128(%rdx)
	movq	%rbx, 136(%rdx)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, 144(%rdx)
	movq	%rbx, 152(%rdx)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, 160(%rdx)
	movq	%rbx, 168(%rdx)
	call	encoder__Encoder_add_modrm_sib_disp
	addq	$176, %rsp
	jmp	.L2085
.L2087:
	movl	-424(%rbp), %eax
	cmpl	$166, %eax
	jne	.L2088
	movl	-456(%rbp), %eax
	cmpl	$167, %eax
	jne	.L2088
	movq	-464(%rbp), %rax
	movq	-616(%rbp), %rsi
	subq	$176, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, 128(%rdx)
	movq	%rbx, 136(%rdx)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, 144(%rdx)
	movq	%rbx, 152(%rdx)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, 160(%rdx)
	movq	%rbx, 168(%rdx)
	movq	%rsi, %rdi
	call	encoder__Encoder_add_segment_override_prefix
	addq	$176, %rsp
	movl	$1, -500(%rbp)
	leaq	-256(%rbp), %rax
	leaq	-500(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-464(%rbp), %r10
	movq	-464(%rbp), %rdx
	movq	-432(%rbp), %rax
	movq	72(%rdx), %r8
	movq	80(%rdx), %r11
	movq	(%rax), %rsi
	movq	8(%rax), %r9
	movq	-616(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-256(%rbp), %rax
	movq	-248(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-240(%rbp), %rax
	movq	-232(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	32(%r10)
	pushq	24(%r10)
	movq	%r8, %rcx
	movq	%r11, %r8
	movq	%r9, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movb	$15, -502(%rbp)
	movb	$-42, -501(%rbp)
	leaq	-576(%rbp), %rax
	leaq	-502(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movl	-556(%rbp), %edx
	movq	-568(%rbp), %rax
	movq	-616(%rbp), %rcx
	movq	120(%rcx), %rcx
	addq	$8, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	movq	-432(%rbp), %rax
	subq	$8, %rsp
	subq	$40, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rax
	movq	%rax, 32(%rdx)
	call	encoder__Xmm_xmm_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %esi
	movq	-464(%rbp), %rax
	movq	-616(%rbp), %rdi
	subq	$176, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, 128(%rdx)
	movq	%rbx, 136(%rdx)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, 144(%rdx)
	movq	%rbx, 152(%rdx)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, 160(%rdx)
	movq	%rbx, 168(%rdx)
	call	encoder__Encoder_add_modrm_sib_disp
	addq	$176, %rsp
	jmp	.L2085
.L2088:
	movl	-424(%rbp), %eax
	cmpl	$165, %eax
	jne	.L2089
	cmpl	$0, -620(%rbp)
	jne	.L2090
	movb	$-120, -503(%rbp)
	leaq	-608(%rbp), %rdi
	leaq	-503(%rbp), %rax
	movq	%rax, %r8
	movl	$1, %ecx
	movl	$1, %edx
	movl	$1, %esi
	call	new_array_from_c_array
	jmp	.L2091
.L2090:
	movb	$-119, -504(%rbp)
	leaq	-608(%rbp), %rdi
	leaq	-504(%rbp), %rax
	movq	%rax, %r8
	movl	$1, %ecx
	movl	$1, %edx
	movl	$1, %esi
	call	new_array_from_c_array
.L2091:
	movq	-432(%rbp), %rsi
	movl	-620(%rbp), %edi
	subq	$48, %rsp
	movq	%rsp, %rcx
	movq	(%rsi), %rax
	movq	8(%rsi), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	16(%rsi), %rax
	movq	24(%rsi), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movq	32(%rsi), %rax
	movq	40(%rsi), %rdx
	movq	%rax, 32(%rcx)
	movq	%rdx, 40(%rcx)
	call	encoder__Register_check_regi_size
	addq	$48, %rsp
	movl	-456(%rbp), %eax
	cmpl	$165, %eax
	jne	.L2092
	movq	-464(%rbp), %rax
	movl	-620(%rbp), %esi
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movl	%esi, %edi
	call	encoder__Register_check_regi_size
	addq	$48, %rsp
	movl	-620(%rbp), %eax
	movl	%eax, -508(%rbp)
	leaq	-224(%rbp), %rax
	leaq	-508(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-464(%rbp), %r8
	leaq	.LC30(%rip), %rax
	movq	%rax, -656(%rbp)
	movq	-648(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, -648(%rbp)
	movq	-648(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -648(%rbp)
	movq	-432(%rbp), %rax
	movq	-656(%rbp), %rcx
	movq	-648(%rbp), %rbx
	movq	%rcx, %rsi
	movq	%rbx, %rdi
	movq	%rsi, %r10
	movq	%rbx, %r11
	movq	(%rax), %rsi
	movq	8(%rax), %r9
	movq	-616(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-224(%rbp), %rax
	movq	-216(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-208(%rbp), %rax
	movq	-200(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	8(%r8)
	pushq	(%r8)
	movq	%r10, %rcx
	movq	%r11, %r8
	movq	%r9, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movq	-608(%rbp), %rax
	movq	-600(%rbp), %rdx
	movq	%rax, -576(%rbp)
	movq	%rdx, -568(%rbp)
	movq	-592(%rbp), %rax
	movq	-584(%rbp), %rdx
	movq	%rax, -560(%rbp)
	movq	%rdx, -552(%rbp)
	movl	-556(%rbp), %edx
	movq	-568(%rbp), %rax
	movq	-616(%rbp), %rcx
	movq	120(%rcx), %rcx
	addq	$8, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	movq	-464(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	call	encoder__Register_regi_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %r12d
	movq	-432(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	call	encoder__Register_regi_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %ecx
	movl	$3, %eax
	movzbl	%al, %eax
	movl	%r12d, %edx
	movl	%ecx, %esi
	movl	%eax, %edi
	call	encoder__compose_mod_rm
	movb	%al, -509(%rbp)
	movq	-616(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-509(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	jmp	.L2085
.L2092:
	movl	-456(%rbp), %eax
	cmpl	$167, %eax
	jne	.L2089
	movq	-464(%rbp), %rax
	movq	-616(%rbp), %rsi
	subq	$176, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, 128(%rdx)
	movq	%rbx, 136(%rdx)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, 144(%rdx)
	movq	%rbx, 152(%rdx)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, 160(%rdx)
	movq	%rbx, 168(%rdx)
	movq	%rsi, %rdi
	call	encoder__Encoder_add_segment_override_prefix
	addq	$176, %rsp
	movl	-620(%rbp), %eax
	movl	%eax, -516(%rbp)
	leaq	-192(%rbp), %rax
	leaq	-516(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-464(%rbp), %r10
	movq	-464(%rbp), %rdx
	movq	-432(%rbp), %rax
	movq	72(%rdx), %r8
	movq	80(%rdx), %r11
	movq	(%rax), %rsi
	movq	8(%rax), %r9
	movq	-616(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-192(%rbp), %rax
	movq	-184(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-176(%rbp), %rax
	movq	-168(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	32(%r10)
	pushq	24(%r10)
	movq	%r8, %rcx
	movq	%r11, %r8
	movq	%r9, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movq	-608(%rbp), %rax
	movq	-600(%rbp), %rdx
	movq	%rax, -576(%rbp)
	movq	%rdx, -568(%rbp)
	movq	-592(%rbp), %rax
	movq	-584(%rbp), %rdx
	movq	%rax, -560(%rbp)
	movq	%rdx, -552(%rbp)
	movl	-556(%rbp), %edx
	movq	-568(%rbp), %rax
	movq	-616(%rbp), %rcx
	movq	120(%rcx), %rcx
	addq	$8, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	movq	-432(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	call	encoder__Register_regi_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %esi
	movq	-464(%rbp), %rax
	movq	-616(%rbp), %rdi
	subq	$176, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, 128(%rdx)
	movq	%rbx, 136(%rdx)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, 144(%rdx)
	movq	%rbx, 152(%rdx)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, 160(%rdx)
	movq	%rbx, 168(%rdx)
	call	encoder__Encoder_add_modrm_sib_disp
	addq	$176, %rsp
	jmp	.L2085
.L2089:
	movl	-424(%rbp), %eax
	cmpl	$167, %eax
	jne	.L2095
	movl	-456(%rbp), %eax
	cmpl	$165, %eax
	jne	.L2095
	cmpl	$0, -620(%rbp)
	jne	.L2096
	movb	$-118, -517(%rbp)
	leaq	-608(%rbp), %rax
	leaq	-517(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	jmp	.L2097
.L2096:
	movb	$-117, -518(%rbp)
	leaq	-608(%rbp), %rax
	leaq	-518(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
.L2097:
	movq	-464(%rbp), %rax
	movl	-620(%rbp), %esi
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movl	%esi, %edi
	call	encoder__Register_check_regi_size
	addq	$48, %rsp
	movq	-432(%rbp), %rax
	movq	-616(%rbp), %rsi
	subq	$176, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, 128(%rdx)
	movq	%rbx, 136(%rdx)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, 144(%rdx)
	movq	%rbx, 152(%rdx)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, 160(%rdx)
	movq	%rbx, 168(%rdx)
	movq	%rsi, %rdi
	call	encoder__Encoder_add_segment_override_prefix
	addq	$176, %rsp
	movl	-620(%rbp), %eax
	movl	%eax, -524(%rbp)
	leaq	-160(%rbp), %rax
	leaq	-524(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-432(%rbp), %r10
	movq	-432(%rbp), %rdx
	movq	-464(%rbp), %rax
	movq	72(%rdx), %r8
	movq	80(%rdx), %r11
	movq	(%rax), %rsi
	movq	8(%rax), %r9
	movq	-616(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-160(%rbp), %rax
	movq	-152(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-144(%rbp), %rax
	movq	-136(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	32(%r10)
	pushq	24(%r10)
	movq	%r8, %rcx
	movq	%r11, %r8
	movq	%r9, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movq	-608(%rbp), %rax
	movq	-600(%rbp), %rdx
	movq	%rax, -576(%rbp)
	movq	%rdx, -568(%rbp)
	movq	-592(%rbp), %rax
	movq	-584(%rbp), %rdx
	movq	%rax, -560(%rbp)
	movq	%rdx, -552(%rbp)
	movl	-556(%rbp), %edx
	movq	-568(%rbp), %rax
	movq	-616(%rbp), %rcx
	movq	120(%rcx), %rcx
	addq	$8, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	movq	-464(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	call	encoder__Register_regi_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %esi
	movq	-432(%rbp), %rax
	movq	-616(%rbp), %rdi
	subq	$176, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, 128(%rdx)
	movq	%rbx, 136(%rdx)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, 144(%rdx)
	movq	%rbx, 152(%rdx)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, 160(%rdx)
	movq	%rbx, 168(%rdx)
	call	encoder__Encoder_add_modrm_sib_disp
	addq	$176, %rsp
	jmp	.L2085
.L2095:
	movl	-424(%rbp), %eax
	cmpl	$168, %eax
	jne	.L2098
	movl	-456(%rbp), %eax
	cmpl	$165, %eax
	jne	.L2099
	movq	-464(%rbp), %rax
	movl	-620(%rbp), %esi
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movl	%esi, %edi
	call	encoder__Register_check_regi_size
	addq	$48, %rsp
	movl	-620(%rbp), %eax
	movl	%eax, -528(%rbp)
	leaq	-128(%rbp), %rax
	leaq	-528(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-464(%rbp), %rsi
	leaq	.LC30(%rip), %rbx
	movq	%rbx, -688(%rbp)
	movq	-680(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, -680(%rbp)
	movq	-680(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -680(%rbp)
	movq	%rbx, -672(%rbp)
	movq	-664(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, -664(%rbp)
	movq	-664(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -664(%rbp)
	movq	-688(%rbp), %rax
	movq	-680(%rbp), %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %r8
	movq	%rdx, %r11
	movq	-672(%rbp), %rax
	movq	-664(%rbp), %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %r10
	movq	%rdx, %r9
	movq	-616(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-128(%rbp), %rax
	movq	-120(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-112(%rbp), %rax
	movq	-104(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	8(%rsi)
	pushq	(%rsi)
	movq	%r8, %rcx
	movq	%r11, %r8
	movq	%r10, %rsi
	movq	%r9, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	cmpl	$3, -620(%rbp)
	jne	.L2100
	movb	$-57, -530(%rbp)
	movq	-616(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-530(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	movq	-464(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	call	encoder__Register_regi_bits
	addq	$48, %rsp
	andl	$7, %eax
	subl	$64, %eax
	movb	%al, -49(%rbp)
	jmp	.L2101
.L2100:
	cmpl	$0, -620(%rbp)
	jne	.L2102
	movq	-464(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	call	encoder__Register_regi_bits
	addq	$48, %rsp
	andl	$7, %eax
	subl	$80, %eax
	movb	%al, -49(%rbp)
	jmp	.L2101
.L2102:
	movq	-464(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	call	encoder__Register_regi_bits
	addq	$48, %rsp
	andl	$7, %eax
	subl	$72, %eax
	movb	%al, -49(%rbp)
.L2101:
	movzbl	-49(%rbp), %eax
	movb	%al, -529(%rbp)
	movq	-616(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-529(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	jmp	.L2103
.L2099:
	movl	-456(%rbp), %eax
	cmpl	$167, %eax
	jne	.L2104
	movq	-464(%rbp), %rax
	movq	-616(%rbp), %rsi
	subq	$176, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, 128(%rdx)
	movq	%rbx, 136(%rdx)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, 144(%rdx)
	movq	%rbx, 152(%rdx)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, 160(%rdx)
	movq	%rbx, 168(%rdx)
	movq	%rsi, %rdi
	call	encoder__Encoder_add_segment_override_prefix
	addq	$176, %rsp
	movl	-620(%rbp), %eax
	movl	%eax, -536(%rbp)
	leaq	-96(%rbp), %rax
	leaq	-536(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-464(%rbp), %r8
	movq	-464(%rbp), %rax
	leaq	.LC30(%rip), %rbx
	movq	%rbx, -704(%rbp)
	movq	-696(%rbp), %rcx
	movabsq	$-4294967296, %rdx
	andq	%rcx, %rdx
	movq	%rdx, -696(%rbp)
	movq	-696(%rbp), %rdx
	movl	%edx, %ecx
	movabsq	$4294967296, %rdx
	orq	%rcx, %rdx
	movq	%rdx, -696(%rbp)
	movq	72(%rax), %rsi
	movq	80(%rax), %r9
	movq	-704(%rbp), %rax
	movq	-696(%rbp), %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %r11
	movq	%rdx, %r10
	movq	-616(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-96(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	32(%r8)
	pushq	24(%r8)
	movq	%rsi, %rcx
	movq	%r9, %r8
	movq	%r11, %rsi
	movq	%r10, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	cmpl	$0, -620(%rbp)
	jne	.L2105
	movl	$-58, %eax
	jmp	.L2106
.L2105:
	movl	$-57, %eax
.L2106:
	movb	%al, -537(%rbp)
	movq	-616(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-537(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	movq	-464(%rbp), %rax
	movq	-616(%rbp), %rdi
	subq	$176, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, 128(%rdx)
	movq	%rbx, 136(%rdx)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, 144(%rdx)
	movq	%rbx, 152(%rdx)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, 160(%rdx)
	movq	%rbx, 168(%rdx)
	movl	$0, %esi
	call	encoder__Encoder_add_modrm_sib_disp
	addq	$176, %rsp
	jmp	.L2103
.L2104:
	leaq	.LC216(%rip), %rax
	movq	%rax, -720(%rbp)
	movq	-712(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$31, %rax
	movq	%rax, -712(%rbp)
	movq	-712(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -712(%rbp)
	movq	-448(%rbp), %rcx
	movq	-720(%rbp), %rax
	movq	-712(%rbp), %rdx
	movq	%rax, %rsi
	movq	%rdx, %rdi
	movq	%rsi, %rdi
	movq	%rdx, %r8
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	movq	%r8, %rsi
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2103:
	leaq	-576(%rbp), %rax
	movl	$0, %r8d
	movl	$16, %ecx
	movl	$0, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array_with_default
	movq	-432(%rbp), %rcx
	leaq	-576(%rbp), %rdi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	call	encoder__eval_expr_get_symbol
	addq	$32, %rsp
	movl	%eax, -56(%rbp)
	movl	-556(%rbp), %eax
	cmpl	$1, %eax
	jle	.L2107
	leaq	.LC217(%rip), %rax
	movq	%rax, -736(%rbp)
	movq	-728(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$25, %rax
	movq	%rax, -728(%rbp)
	movq	-728(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -728(%rbp)
	movq	-432(%rbp), %rcx
	movq	-736(%rbp), %rax
	movq	-728(%rbp), %rdx
	movq	%rax, %rsi
	movq	%rdx, %rdi
	movq	%rsi, %rdi
	movq	%rdx, %r8
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	24(%rcx), %rax
	movq	32(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	40(%rcx), %rax
	movq	%rax, 16(%rsi)
	movq	%r8, %rsi
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2107:
	movl	-556(%rbp), %eax
	cmpl	$1, %eax
	sete	%al
	movb	%al, -57(%rbp)
	cmpb	$0, -57(%rbp)
	je	.L2108
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-576(%rbp), %rax
	movq	-568(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-560(%rbp), %rax
	movq	-552(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$0, %edi
	call	array_get
	addq	$32, %rsp
	movl	-620(%rbp), %edi
	movl	-56(%rbp), %ecx
	movq	(%rax), %rsi
	movq	8(%rax), %rdx
	movq	-616(%rbp), %rax
	movl	%edi, %r8d
	movq	%rax, %rdi
	call	encoder__Encoder_add_imm_rela
	jmp	.L2085
.L2108:
	movl	-620(%rbp), %edx
	movl	-56(%rbp), %ecx
	movq	-616(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_add_imm_value2
	jmp	.L2085
.L2098:
	leaq	.LC216(%rip), %rax
	movq	%rax, -640(%rbp)
	movq	-632(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$31, %rax
	movq	%rax, -632(%rbp)
	movq	-632(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -632(%rbp)
	movq	-416(%rbp), %rcx
	movq	-640(%rbp), %rax
	movq	-632(%rbp), %rdx
	movq	%rax, %rsi
	movq	%rdx, %rdi
	movq	%rsi, %rdi
	movq	%rdx, %r8
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	movq	%r8, %rsi
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2085:
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
	.section	.rodata, "a"
.LC218:
	.string	"movsq"
.LC219:
	.string	"stosq"
	.text
	.globl	encoder__Encoder_rep
	.hidden	encoder__Encoder_rep
encoder__Encoder_rep:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	subq	$112, %rsp
	movq	%rdi, -120(%rbp)
	movq	-120(%rbp), %rax
	movl	$28, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_set_current_instr
	leaq	-64(%rbp), %rax
	movq	-120(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	encoder__Encoder_parse_operand
	movl	-56(%rbp), %eax
	cmpl	$169, %eax
	jne	.L2112
	leaq	.LC218(%rip), %r14
	movq	%r15, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$5, %rax
	movq	%rax, %r15
	movq	%r15, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r15
	movq	-64(%rbp), %rax
	movq	(%rax), %rsi
	movq	8(%rax), %rax
	movq	%r14, %rdx
	movq	%r15, %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2113
	movb	$-13, -67(%rbp)
	movb	$72, -66(%rbp)
	movb	$-91, -65(%rbp)
	leaq	-112(%rbp), %rax
	leaq	-67(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$3, %edx
	movl	$3, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movl	-92(%rbp), %edx
	movq	-104(%rbp), %rax
	movq	-120(%rbp), %rcx
	movq	120(%rcx), %rcx
	addq	$8, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	jmp	.L2117
.L2113:
	leaq	.LC219(%rip), %rax
	movq	%rax, -144(%rbp)
	movq	-136(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$5, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -136(%rbp)
	movq	-64(%rbp), %rax
	movq	(%rax), %rsi
	movq	8(%rax), %rax
	movq	-144(%rbp), %rdx
	movq	-136(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2112
	movb	$-13, -70(%rbp)
	movb	$72, -69(%rbp)
	movb	$-85, -68(%rbp)
	leaq	-112(%rbp), %rax
	leaq	-70(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$3, %edx
	movl	$3, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movl	-92(%rbp), %edx
	movq	-104(%rbp), %rax
	movq	-120(%rbp), %rcx
	movq	120(%rcx), %rcx
	addq	$8, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	jmp	.L2117
.L2112:
	leaq	.LC216(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$31, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	-48(%rbp), %rcx
	movq	%r12, %rsi
	movq	%r13, %rdi
	movq	%r12, %rax
	movq	%r13, %rdx
	movq	%rsi, %rdi
	movq	%rdx, %r8
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	movq	%r8, %rsi
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2117:
	leaq	-32(%rbp), %rsp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
	.globl	encoder__Encoder_movabsq
	.hidden	encoder__Encoder_movabsq
encoder__Encoder_movabsq:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$376, %rsp
	movq	%rdi, -376(%rbp)
	movq	-376(%rbp), %rax
	movl	$27, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_set_current_instr
	leaq	-144(%rbp), %rax
	movq	-376(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	encoder__Encoder_parse_two_operand
	movq	-144(%rbp), %rax
	movq	-136(%rbp), %rdx
	movq	%rax, -176(%rbp)
	movq	%rdx, -168(%rbp)
	movq	-128(%rbp), %rax
	movq	%rax, -160(%rbp)
	movq	-120(%rbp), %rax
	movq	-112(%rbp), %rdx
	movq	%rax, -208(%rbp)
	movq	%rdx, -200(%rbp)
	movq	-104(%rbp), %rax
	movq	%rax, -192(%rbp)
	movl	-168(%rbp), %eax
	cmpl	$168, %eax
	jne	.L2119
	movl	-200(%rbp), %eax
	cmpl	$165, %eax
	jne	.L2119
	movq	-208(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movl	$3, %edi
	call	encoder__Register_check_regi_size
	addq	$48, %rsp
	movl	$3, -212(%rbp)
	leaq	-96(%rbp), %rax
	leaq	-212(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-208(%rbp), %rsi
	leaq	.LC30(%rip), %r14
	movq	%r15, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, %r15
	movq	%r15, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r15
	leaq	.LC30(%rip), %rax
	movq	%rax, -400(%rbp)
	movq	-392(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, -392(%rbp)
	movq	-392(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -392(%rbp)
	movq	%r14, %rcx
	movq	%r15, %rbx
	movq	%r14, %rax
	movq	%r15, %rdx
	movq	%rcx, %r8
	movq	%rdx, %r11
	movq	-400(%rbp), %rax
	movq	-392(%rbp), %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %r10
	movq	%rdx, %r9
	movq	-376(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-96(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	8(%rsi)
	pushq	(%rsi)
	movq	%r8, %rcx
	movq	%r11, %r8
	movq	%r10, %rsi
	movq	%r9, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movq	-208(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	call	encoder__Register_regi_bits
	addq	$48, %rsp
	andl	$7, %eax
	subl	$72, %eax
	movb	%al, -213(%rbp)
	movq	-376(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-213(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	leaq	-368(%rbp), %rax
	movl	$0, %r8d
	movl	$16, %ecx
	movl	$0, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array_with_default
	movq	-176(%rbp), %rcx
	leaq	-368(%rbp), %rdi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	call	encoder__eval_expr_get_symbol_64
	addq	$32, %rsp
	movq	%rax, -56(%rbp)
	movl	-348(%rbp), %eax
	cmpl	$1, %eax
	jle	.L2120
	leaq	.LC217(%rip), %rax
	movq	%rax, -416(%rbp)
	movq	-408(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$25, %rax
	movq	%rax, -408(%rbp)
	movq	-408(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -408(%rbp)
	movq	-176(%rbp), %rcx
	movq	-416(%rbp), %rax
	movq	-408(%rbp), %rdx
	movq	%rax, %rsi
	movq	%rdx, %rdi
	movq	%rsi, %rdi
	movq	%rdx, %r8
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	24(%rcx), %rax
	movq	32(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	40(%rcx), %rax
	movq	%rax, 16(%rsi)
	movq	%r8, %rsi
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2120:
	movl	-348(%rbp), %eax
	cmpl	$1, %eax
	sete	%al
	movb	%al, -57(%rbp)
	cmpb	$0, -57(%rbp)
	je	.L2121
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-368(%rbp), %rax
	movq	-360(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-352(%rbp), %rax
	movq	-344(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$0, %edi
	call	array_get
	addq	$32, %rsp
	movq	8(%rax), %rdx
	movq	(%rax), %rax
	movq	%rax, -336(%rbp)
	movq	%rdx, -328(%rbp)
	movq	-376(%rbp), %rax
	movq	120(%rax), %rax
	movq	%rax, -320(%rbp)
	movq	-376(%rbp), %rax
	movq	120(%rax), %rax
	movl	28(%rax), %eax
	cltq
	movq	%rax, -312(%rbp)
	movq	$0, -304(%rbp)
	movq	-56(%rbp), %rax
	movl	%eax, -296(%rbp)
	movb	$0, -292(%rbp)
	movl	$1, %eax
	movq	%rax, -304(%rbp)
	movq	$0, -221(%rbp)
	leaq	-288(%rbp), %rax
	leaq	-221(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$8, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movl	-268(%rbp), %edx
	movq	-280(%rbp), %rax
	movq	-376(%rbp), %rcx
	movq	120(%rcx), %rcx
	addq	$8, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	movq	-336(%rbp), %rax
	movq	-328(%rbp), %rdx
	movq	%rax, -288(%rbp)
	movq	%rdx, -280(%rbp)
	movq	-320(%rbp), %rax
	movq	-312(%rbp), %rdx
	movq	%rax, -272(%rbp)
	movq	%rdx, -264(%rbp)
	movq	-304(%rbp), %rax
	movq	-296(%rbp), %rdx
	movq	%rax, -256(%rbp)
	movq	%rdx, -248(%rbp)
	movq	-376(%rbp), %rax
	leaq	160(%rax), %rdx
	leaq	-288(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	jmp	.L2124
.L2121:
	movq	$0, -229(%rbp)
	leaq	-336(%rbp), %rax
	leaq	-229(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$8, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-56(%rbp), %rdx
	leaq	-336(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	encoding__binary__little_endian_put_u64
	movq	-336(%rbp), %rax
	movq	-328(%rbp), %rdx
	movq	%rax, -288(%rbp)
	movq	%rdx, -280(%rbp)
	movq	-320(%rbp), %rax
	movq	-312(%rbp), %rdx
	movq	%rax, -272(%rbp)
	movq	%rdx, -264(%rbp)
	movl	-268(%rbp), %edx
	movq	-280(%rbp), %rax
	movq	-376(%rbp), %rcx
	movq	120(%rcx), %rcx
	addq	$8, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	jmp	.L2124
.L2119:
	leaq	.LC216(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$31, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	-160(%rbp), %rcx
	movq	%r12, %rsi
	movq	%r13, %rdi
	movq	%r12, %rax
	movq	%r13, %rdx
	movq	%rsi, %rdi
	movq	%rdx, %r8
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	movq	%r8, %rsi
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2124:
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
	.globl	encoder__Encoder_mul
	.hidden	encoder__Encoder_mul
encoder__Encoder_mul:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$232, %rsp
	movq	%rdi, -232(%rbp)
	movl	%esi, -236(%rbp)
	movq	-232(%rbp), %rax
	movl	$24, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_set_current_instr
	leaq	-144(%rbp), %rax
	movq	-232(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	encoder__Encoder_parse_operand
	movq	-232(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$3, %eax
	je	.L2126
	cmpl	$0, -236(%rbp)
	jne	.L2127
	movb	$-10, -145(%rbp)
	leaq	-224(%rbp), %rax
	leaq	-145(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	jmp	.L2128
.L2127:
	movb	$-9, -146(%rbp)
	leaq	-224(%rbp), %rax
	leaq	-146(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
.L2128:
	movl	-136(%rbp), %eax
	cmpl	$165, %eax
	jne	.L2129
	movq	-144(%rbp), %rax
	movl	-236(%rbp), %esi
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movl	%esi, %edi
	call	encoder__Register_check_regi_size
	addq	$48, %rsp
	movl	-236(%rbp), %eax
	movl	%eax, -152(%rbp)
	leaq	-112(%rbp), %rax
	leaq	-152(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-144(%rbp), %rsi
	leaq	.LC30(%rip), %rbx
	movq	%rbx, -272(%rbp)
	movq	-264(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, -264(%rbp)
	movq	-264(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -264(%rbp)
	movq	%rbx, -256(%rbp)
	movq	-248(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, -248(%rbp)
	movq	-248(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -248(%rbp)
	movq	-272(%rbp), %rax
	movq	-264(%rbp), %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %r8
	movq	%rdx, %r11
	movq	-256(%rbp), %rax
	movq	-248(%rbp), %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %r10
	movq	%rdx, %r9
	movq	-232(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-112(%rbp), %rax
	movq	-104(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-96(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	8(%rsi)
	pushq	(%rsi)
	movq	%r8, %rcx
	movq	%r11, %r8
	movq	%r10, %rsi
	movq	%r9, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movq	-224(%rbp), %rax
	movq	-216(%rbp), %rdx
	movq	%rax, -192(%rbp)
	movq	%rdx, -184(%rbp)
	movq	-208(%rbp), %rax
	movq	-200(%rbp), %rdx
	movq	%rax, -176(%rbp)
	movq	%rdx, -168(%rbp)
	movl	-172(%rbp), %edx
	movq	-184(%rbp), %rax
	movq	-232(%rbp), %rcx
	movq	120(%rcx), %rcx
	addq	$8, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	movq	-144(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	call	encoder__Register_regi_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %edx
	movl	$3, %eax
	movzbl	%al, %eax
	movl	$4, %esi
	movl	%eax, %edi
	call	encoder__compose_mod_rm
	movb	%al, -153(%rbp)
	movq	-232(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-153(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	jmp	.L2133
.L2129:
	movl	-136(%rbp), %eax
	cmpl	$167, %eax
	jne	.L2126
	movq	-144(%rbp), %rax
	movq	-232(%rbp), %rsi
	subq	$176, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, 128(%rdx)
	movq	%rbx, 136(%rdx)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, 144(%rdx)
	movq	%rbx, 152(%rdx)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, 160(%rdx)
	movq	%rbx, 168(%rdx)
	movq	%rsi, %rdi
	call	encoder__Encoder_add_segment_override_prefix
	addq	$176, %rsp
	movl	-236(%rbp), %eax
	movl	%eax, -160(%rbp)
	leaq	-80(%rbp), %rax
	leaq	-160(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-144(%rbp), %r8
	movq	-144(%rbp), %rax
	leaq	.LC30(%rip), %r14
	movq	%r15, %rcx
	movabsq	$-4294967296, %rdx
	andq	%rcx, %rdx
	movq	%rdx, %r15
	movq	%r15, %rdx
	movl	%edx, %ecx
	movabsq	$4294967296, %rdx
	orq	%rcx, %rdx
	movq	%rdx, %r15
	movq	72(%rax), %rsi
	movq	80(%rax), %r9
	movq	%r14, %rcx
	movq	%r15, %rbx
	movq	%r14, %rax
	movq	%r15, %rdx
	movq	%rcx, %r11
	movq	%rdx, %r10
	movq	-232(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	32(%r8)
	pushq	24(%r8)
	movq	%rsi, %rcx
	movq	%r9, %r8
	movq	%r11, %rsi
	movq	%r10, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movq	-224(%rbp), %rax
	movq	-216(%rbp), %rdx
	movq	%rax, -192(%rbp)
	movq	%rdx, -184(%rbp)
	movq	-208(%rbp), %rax
	movq	-200(%rbp), %rdx
	movq	%rax, -176(%rbp)
	movq	%rdx, -168(%rbp)
	movl	-172(%rbp), %edx
	movq	-184(%rbp), %rax
	movq	-232(%rbp), %rcx
	movq	120(%rcx), %rcx
	addq	$8, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	movq	-144(%rbp), %rax
	movq	-232(%rbp), %rdi
	subq	$176, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, 128(%rdx)
	movq	%rbx, 136(%rdx)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, 144(%rdx)
	movq	%rbx, 152(%rdx)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, 160(%rdx)
	movq	%rbx, 168(%rdx)
	movl	$4, %esi
	call	encoder__Encoder_add_modrm_sib_disp
	addq	$176, %rsp
	jmp	.L2133
.L2126:
	leaq	.LC216(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$31, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	-128(%rbp), %rcx
	movq	%r12, %rsi
	movq	%r13, %rdi
	movq	%r12, %rax
	movq	%r13, %rdx
	movq	%rsi, %rdi
	movq	%rdx, %r8
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	movq	%r8, %rsi
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2133:
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
	.section	.rodata, "a"
.LC220:
	.string	"AH"
.LC221:
	.string	"CH"
.LC222:
	.string	"DH"
.LC223:
	.string	"BH"
.LC224:
	.string	"can't encode `%"
.LC225:
	.string	"` in an instruction requiring REX prefix"
	.text
	.globl	encoder__Encoder_mov_zero_or_sign_extend
	.hidden	encoder__Encoder_mov_zero_or_sign_extend
encoder__Encoder_mov_zero_or_sign_extend:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$360, %rsp
	movq	%rdi, -328(%rbp)
	movl	%esi, -332(%rbp)
	movl	%edx, -336(%rbp)
	movq	-328(%rbp), %rax
	movl	$30, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_set_current_instr
	leaq	-160(%rbp), %rax
	movq	-328(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	encoder__Encoder_parse_two_operand
	movq	-160(%rbp), %rax
	movq	-152(%rbp), %rdx
	movq	%rax, -192(%rbp)
	movq	%rdx, -184(%rbp)
	movq	-144(%rbp), %rax
	movq	%rax, -176(%rbp)
	movq	-136(%rbp), %rax
	movq	-128(%rbp), %rdx
	movq	%rax, -224(%rbp)
	movq	%rdx, -216(%rbp)
	movq	-120(%rbp), %rax
	movq	%rax, -208(%rbp)
	movl	-184(%rbp), %eax
	cmpl	$165, %eax
	jne	.L2135
	movl	-216(%rbp), %eax
	cmpl	$165, %eax
	jne	.L2135
	cmpl	$3, -336(%rbp)
	jne	.L2136
	leaq	.LC220(%rip), %rax
	movq	%rax, -352(%rbp)
	movq	-344(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, -344(%rbp)
	movq	-344(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -344(%rbp)
	movq	-192(%rbp), %rax
	movq	(%rax), %rsi
	movq	8(%rax), %rax
	movq	-352(%rbp), %rdx
	movq	-344(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2137
	leaq	.LC221(%rip), %rax
	movq	%rax, -368(%rbp)
	movq	-360(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, -360(%rbp)
	movq	-360(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -360(%rbp)
	movq	-192(%rbp), %rax
	movq	(%rax), %rsi
	movq	8(%rax), %rax
	movq	-368(%rbp), %rdx
	movq	-360(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2137
	leaq	.LC222(%rip), %rax
	movq	%rax, -384(%rbp)
	movq	-376(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, -376(%rbp)
	movq	-376(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -376(%rbp)
	movq	-192(%rbp), %rax
	movq	(%rax), %rsi
	movq	8(%rax), %rax
	movq	-384(%rbp), %rdx
	movq	-376(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2137
	leaq	.LC223(%rip), %rax
	movq	%rax, -400(%rbp)
	movq	-392(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, -392(%rbp)
	movq	-392(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -392(%rbp)
	movq	-192(%rbp), %rax
	movq	(%rax), %rsi
	movq	8(%rax), %rax
	movq	-400(%rbp), %rdx
	movq	-392(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2136
.L2137:
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -320(%rbp)
	movaps	%xmm0, -304(%rbp)
	movaps	%xmm0, -288(%rbp)
	movaps	%xmm0, -272(%rbp)
	movaps	%xmm0, -256(%rbp)
	leaq	.LC224(%rip), %rax
	movq	%rax, -320(%rbp)
	movl	$15, -312(%rbp)
	movl	$1, -308(%rbp)
	movl	$65040, -304(%rbp)
	movq	-192(%rbp), %rax
	movq	8(%rax), %rdx
	movq	(%rax), %rax
	movq	%rax, -296(%rbp)
	movq	%rdx, -288(%rbp)
	leaq	.LC225(%rip), %rax
	movq	%rax, -280(%rbp)
	movl	$40, -272(%rbp)
	movl	$1, -268(%rbp)
	leaq	-320(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	movq	-192(%rbp), %rcx
	movq	%rax, %rsi
	movq	%rdx, %rdi
	movq	%rsi, %rdi
	movq	%rdx, %r8
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	24(%rcx), %rax
	movq	32(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	40(%rcx), %rax
	movq	%rax, 16(%rsi)
	movq	%r8, %rsi
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2136:
	movq	-192(%rbp), %rax
	movl	-332(%rbp), %esi
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movl	%esi, %edi
	call	encoder__Register_check_regi_size
	addq	$48, %rsp
	movq	-224(%rbp), %rax
	movl	-336(%rbp), %esi
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movl	%esi, %edi
	call	encoder__Register_check_regi_size
	addq	$48, %rsp
	movl	-336(%rbp), %eax
	movl	%eax, -228(%rbp)
	leaq	-112(%rbp), %rax
	leaq	-228(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-192(%rbp), %r8
	leaq	.LC30(%rip), %r14
	movq	%r15, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, %r15
	movq	%r15, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r15
	movq	-224(%rbp), %rax
	movq	%r14, %rsi
	movq	%r15, %rdi
	movq	%r14, %rcx
	movq	%r15, %rbx
	movq	%rsi, %r10
	movq	%rbx, %r11
	movq	(%rax), %rsi
	movq	8(%rax), %r9
	movq	-328(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-112(%rbp), %rax
	movq	-104(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-96(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	8(%r8)
	pushq	(%r8)
	movq	%r10, %rcx
	movq	%r11, %r8
	movq	%r9, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movq	16(%rbp), %rax
	movq	24(%rbp), %rdx
	movq	%rax, -320(%rbp)
	movq	%rdx, -312(%rbp)
	movq	32(%rbp), %rax
	movq	40(%rbp), %rdx
	movq	%rax, -304(%rbp)
	movq	%rdx, -296(%rbp)
	movl	-300(%rbp), %edx
	movq	-312(%rbp), %rax
	movq	-328(%rbp), %rcx
	movq	120(%rcx), %rcx
	addq	$8, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	movq	-192(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	call	encoder__Register_regi_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %r12d
	movq	-224(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	call	encoder__Register_regi_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %ecx
	movl	$3, %eax
	movzbl	%al, %eax
	movl	%r12d, %edx
	movl	%ecx, %esi
	movl	%eax, %edi
	call	encoder__compose_mod_rm
	movb	%al, -229(%rbp)
	movq	-328(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-229(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	jmp	.L2138
.L2135:
	movl	-184(%rbp), %eax
	cmpl	$167, %eax
	jne	.L2139
	movl	-216(%rbp), %eax
	cmpl	$165, %eax
	jne	.L2139
	movq	-224(%rbp), %rax
	movl	-336(%rbp), %esi
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movl	%esi, %edi
	call	encoder__Register_check_regi_size
	addq	$48, %rsp
	movq	-192(%rbp), %rax
	movq	-328(%rbp), %rsi
	subq	$176, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, 128(%rdx)
	movq	%rbx, 136(%rdx)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, 144(%rdx)
	movq	%rbx, 152(%rdx)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, 160(%rdx)
	movq	%rbx, 168(%rdx)
	movq	%rsi, %rdi
	call	encoder__Encoder_add_segment_override_prefix
	addq	$176, %rsp
	movl	-336(%rbp), %eax
	movl	%eax, -236(%rbp)
	leaq	-80(%rbp), %rax
	leaq	-236(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-192(%rbp), %r10
	movq	-192(%rbp), %rdx
	movq	-224(%rbp), %rax
	movq	72(%rdx), %r8
	movq	80(%rdx), %r11
	movq	(%rax), %rsi
	movq	8(%rax), %r9
	movq	-328(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	32(%r10)
	pushq	24(%r10)
	movq	%r8, %rcx
	movq	%r11, %r8
	movq	%r9, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movq	16(%rbp), %rax
	movq	24(%rbp), %rdx
	movq	%rax, -320(%rbp)
	movq	%rdx, -312(%rbp)
	movq	32(%rbp), %rax
	movq	40(%rbp), %rdx
	movq	%rax, -304(%rbp)
	movq	%rdx, -296(%rbp)
	movl	-300(%rbp), %edx
	movq	-312(%rbp), %rax
	movq	-328(%rbp), %rcx
	movq	120(%rcx), %rcx
	addq	$8, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	movq	-224(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	call	encoder__Register_regi_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %esi
	movq	-192(%rbp), %rax
	movq	-328(%rbp), %rdi
	subq	$176, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, 128(%rdx)
	movq	%rbx, 136(%rdx)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, 144(%rdx)
	movq	%rbx, 152(%rdx)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, 160(%rdx)
	movq	%rbx, 168(%rdx)
	call	encoder__Encoder_add_modrm_sib_disp
	addq	$176, %rsp
	jmp	.L2138
.L2139:
	leaq	.LC216(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$31, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	-176(%rbp), %rcx
	movq	%r12, %rsi
	movq	%r13, %rdi
	movq	%r12, %rax
	movq	%r13, %rdx
	movq	%rsi, %rdi
	movq	%rdx, %r8
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	movq	%r8, %rsi
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2138:
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
	.globl	encoder__Encoder_test
	.hidden	encoder__Encoder_test
encoder__Encoder_test:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$504, %rsp
	movq	%rdi, -456(%rbp)
	movl	%esi, -460(%rbp)
	movq	-456(%rbp), %rax
	movl	$29, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_set_current_instr
	leaq	-272(%rbp), %rdx
	movq	-456(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	encoder__Encoder_parse_two_operand
	movq	-272(%rbp), %rax
	movq	-264(%rbp), %rdx
	movq	%rax, -304(%rbp)
	movq	%rdx, -296(%rbp)
	movq	-256(%rbp), %rax
	movq	%rax, -288(%rbp)
	movq	-248(%rbp), %rax
	movq	-240(%rbp), %rdx
	movq	%rax, -336(%rbp)
	movq	%rdx, -328(%rbp)
	movq	-232(%rbp), %rax
	movq	%rax, -320(%rbp)
	movl	-296(%rbp), %eax
	cmpl	$165, %eax
	jne	.L2142
	cmpl	$0, -460(%rbp)
	jne	.L2143
	movb	$-124, -337(%rbp)
	leaq	-448(%rbp), %rdi
	leaq	-337(%rbp), %rax
	movq	%rax, %r8
	movl	$1, %ecx
	movl	$1, %edx
	movl	$1, %esi
	call	new_array_from_c_array
	jmp	.L2144
.L2143:
	movb	$-123, -338(%rbp)
	leaq	-448(%rbp), %rdi
	leaq	-338(%rbp), %rax
	movq	%rax, %r8
	movl	$1, %ecx
	movl	$1, %edx
	movl	$1, %esi
	call	new_array_from_c_array
.L2144:
	movq	-304(%rbp), %rsi
	movl	-460(%rbp), %edi
	subq	$48, %rsp
	movq	%rsp, %rcx
	movq	(%rsi), %rax
	movq	8(%rsi), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	16(%rsi), %rax
	movq	24(%rsi), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movq	32(%rsi), %rax
	movq	40(%rsi), %rdx
	movq	%rax, 32(%rcx)
	movq	%rdx, 40(%rcx)
	call	encoder__Register_check_regi_size
	addq	$48, %rsp
	movl	-328(%rbp), %eax
	cmpl	$165, %eax
	jne	.L2145
	movq	-336(%rbp), %rax
	movl	-460(%rbp), %esi
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movl	%esi, %edi
	call	encoder__Register_check_regi_size
	addq	$48, %rsp
	movl	-460(%rbp), %eax
	movl	%eax, -344(%rbp)
	leaq	-224(%rbp), %rax
	leaq	-344(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-336(%rbp), %r8
	leaq	.LC30(%rip), %r14
	movq	%r15, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, %r15
	movq	%r15, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r15
	movq	-304(%rbp), %rax
	movq	%r14, %rsi
	movq	%r15, %rdi
	movq	%r14, %rcx
	movq	%r15, %rbx
	movq	%rsi, %r10
	movq	%rbx, %r11
	movq	(%rax), %rsi
	movq	8(%rax), %r9
	movq	-456(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-224(%rbp), %rax
	movq	-216(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-208(%rbp), %rax
	movq	-200(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	8(%r8)
	pushq	(%r8)
	movq	%r10, %rcx
	movq	%r11, %r8
	movq	%r9, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movq	-448(%rbp), %rax
	movq	-440(%rbp), %rdx
	movq	%rax, -416(%rbp)
	movq	%rdx, -408(%rbp)
	movq	-432(%rbp), %rax
	movq	-424(%rbp), %rdx
	movq	%rax, -400(%rbp)
	movq	%rdx, -392(%rbp)
	movl	-396(%rbp), %edx
	movq	-408(%rbp), %rax
	movq	-456(%rbp), %rcx
	movq	120(%rcx), %rcx
	addq	$8, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	movq	-336(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	call	encoder__Register_regi_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %r12d
	movq	-304(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	call	encoder__Register_regi_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %ecx
	movl	$3, %eax
	movzbl	%al, %eax
	movl	%r12d, %edx
	movl	%ecx, %esi
	movl	%eax, %edi
	call	encoder__compose_mod_rm
	movb	%al, -345(%rbp)
	movq	-456(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-345(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	jmp	.L2148
.L2145:
	movl	-328(%rbp), %eax
	cmpl	$167, %eax
	jne	.L2142
	movq	-336(%rbp), %rax
	movq	-456(%rbp), %rsi
	subq	$176, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, 128(%rdx)
	movq	%rbx, 136(%rdx)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, 144(%rdx)
	movq	%rbx, 152(%rdx)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, 160(%rdx)
	movq	%rbx, 168(%rdx)
	movq	%rsi, %rdi
	call	encoder__Encoder_add_segment_override_prefix
	addq	$176, %rsp
	movl	-460(%rbp), %eax
	movl	%eax, -352(%rbp)
	leaq	-192(%rbp), %rax
	leaq	-352(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-336(%rbp), %r10
	movq	-336(%rbp), %rdx
	movq	-304(%rbp), %rax
	movq	72(%rdx), %r8
	movq	80(%rdx), %r11
	movq	(%rax), %rsi
	movq	8(%rax), %r9
	movq	-456(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-192(%rbp), %rax
	movq	-184(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-176(%rbp), %rax
	movq	-168(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	32(%r10)
	pushq	24(%r10)
	movq	%r8, %rcx
	movq	%r11, %r8
	movq	%r9, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movq	-448(%rbp), %rax
	movq	-440(%rbp), %rdx
	movq	%rax, -416(%rbp)
	movq	%rdx, -408(%rbp)
	movq	-432(%rbp), %rax
	movq	-424(%rbp), %rdx
	movq	%rax, -400(%rbp)
	movq	%rdx, -392(%rbp)
	movl	-396(%rbp), %edx
	movq	-408(%rbp), %rax
	movq	-456(%rbp), %rcx
	movq	120(%rcx), %rcx
	addq	$8, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	movq	-304(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	call	encoder__Register_regi_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %esi
	movq	-336(%rbp), %rax
	movq	-456(%rbp), %rdi
	subq	$176, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, 128(%rdx)
	movq	%rbx, 136(%rdx)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, 144(%rdx)
	movq	%rbx, 152(%rdx)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, 160(%rdx)
	movq	%rbx, 168(%rdx)
	call	encoder__Encoder_add_modrm_sib_disp
	addq	$176, %rsp
	jmp	.L2148
.L2142:
	movl	-296(%rbp), %eax
	cmpl	$167, %eax
	jne	.L2149
	movl	-328(%rbp), %eax
	cmpl	$165, %eax
	jne	.L2149
	cmpl	$0, -460(%rbp)
	jne	.L2150
	movb	$-124, -353(%rbp)
	leaq	-448(%rbp), %rax
	leaq	-353(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	jmp	.L2151
.L2150:
	movb	$-123, -354(%rbp)
	leaq	-448(%rbp), %rax
	leaq	-354(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
.L2151:
	movq	-336(%rbp), %rax
	movl	-460(%rbp), %esi
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movl	%esi, %edi
	call	encoder__Register_check_regi_size
	addq	$48, %rsp
	movq	-304(%rbp), %rax
	movq	-456(%rbp), %rsi
	subq	$176, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, 128(%rdx)
	movq	%rbx, 136(%rdx)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, 144(%rdx)
	movq	%rbx, 152(%rdx)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, 160(%rdx)
	movq	%rbx, 168(%rdx)
	movq	%rsi, %rdi
	call	encoder__Encoder_add_segment_override_prefix
	addq	$176, %rsp
	movl	-460(%rbp), %eax
	movl	%eax, -360(%rbp)
	leaq	-160(%rbp), %rax
	leaq	-360(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-304(%rbp), %r10
	movq	-304(%rbp), %rdx
	movq	-336(%rbp), %rax
	movq	72(%rdx), %r8
	movq	80(%rdx), %r11
	movq	(%rax), %rsi
	movq	8(%rax), %r9
	movq	-456(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-160(%rbp), %rax
	movq	-152(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-144(%rbp), %rax
	movq	-136(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	32(%r10)
	pushq	24(%r10)
	movq	%r8, %rcx
	movq	%r11, %r8
	movq	%r9, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movq	-448(%rbp), %rax
	movq	-440(%rbp), %rdx
	movq	%rax, -416(%rbp)
	movq	%rdx, -408(%rbp)
	movq	-432(%rbp), %rax
	movq	-424(%rbp), %rdx
	movq	%rax, -400(%rbp)
	movq	%rdx, -392(%rbp)
	movl	-396(%rbp), %edx
	movq	-408(%rbp), %rax
	movq	-456(%rbp), %rcx
	movq	120(%rcx), %rcx
	addq	$8, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	movq	-336(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	call	encoder__Register_regi_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %esi
	movq	-304(%rbp), %rax
	movq	-456(%rbp), %rdi
	subq	$176, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, 128(%rdx)
	movq	%rbx, 136(%rdx)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, 144(%rdx)
	movq	%rbx, 152(%rdx)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, 160(%rdx)
	movq	%rbx, 168(%rdx)
	call	encoder__Encoder_add_modrm_sib_disp
	addq	$176, %rsp
	jmp	.L2148
.L2149:
	movl	-296(%rbp), %eax
	cmpl	$168, %eax
	jne	.L2152
	leaq	-416(%rbp), %rax
	movl	$0, %r8d
	movl	$16, %ecx
	movl	$0, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array_with_default
	movq	-304(%rbp), %rcx
	leaq	-416(%rbp), %rdi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	call	encoder__eval_expr_get_symbol
	addq	$32, %rsp
	movl	%eax, -52(%rbp)
	movl	-396(%rbp), %eax
	cmpl	$1, %eax
	jle	.L2153
	leaq	.LC217(%rip), %rax
	movq	%rax, -528(%rbp)
	movq	-520(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$25, %rax
	movq	%rax, -520(%rbp)
	movq	-520(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -520(%rbp)
	movq	-304(%rbp), %rcx
	movq	-528(%rbp), %rax
	movq	-520(%rbp), %rdx
	movq	%rax, %rsi
	movq	%rdx, %rdi
	movq	%rsi, %rdi
	movq	%rdx, %r8
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	24(%rcx), %rax
	movq	32(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	40(%rcx), %rax
	movq	%rax, 16(%rsi)
	movq	%r8, %rsi
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2153:
	movl	-396(%rbp), %eax
	cmpl	$1, %eax
	sete	%al
	movb	%al, -53(%rbp)
	cmpl	$0, -460(%rbp)
	jne	.L2154
	movl	$-10, %eax
	jmp	.L2155
.L2154:
	movl	$-9, %eax
.L2155:
	movb	%al, -54(%rbp)
	movl	-328(%rbp), %eax
	cmpl	$165, %eax
	jne	.L2156
	movq	-336(%rbp), %rax
	movl	-460(%rbp), %esi
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movl	%esi, %edi
	call	encoder__Register_check_regi_size
	addq	$48, %rsp
	movl	-460(%rbp), %eax
	movl	%eax, -364(%rbp)
	leaq	-128(%rbp), %rax
	leaq	-364(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-336(%rbp), %rsi
	leaq	.LC30(%rip), %rbx
	movq	%rbx, -496(%rbp)
	movq	-488(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, -488(%rbp)
	movq	-488(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -488(%rbp)
	movq	%rbx, -480(%rbp)
	movq	-472(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, -472(%rbp)
	movq	-472(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -472(%rbp)
	movq	-496(%rbp), %rax
	movq	-488(%rbp), %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %r8
	movq	%rdx, %r11
	movq	-480(%rbp), %rax
	movq	-472(%rbp), %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %r10
	movq	%rdx, %r9
	movq	-456(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-128(%rbp), %rax
	movq	-120(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-112(%rbp), %rax
	movq	-104(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	8(%rsi)
	pushq	(%rsi)
	movq	%r8, %rcx
	movq	%r11, %r8
	movq	%r10, %rsi
	movq	%r9, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movzbl	-54(%rbp), %eax
	movb	%al, -365(%rbp)
	movq	-456(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-365(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	movq	-336(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	call	encoder__Register_regi_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %edx
	movl	$3, %eax
	movzbl	%al, %eax
	movl	$0, %esi
	movl	%eax, %edi
	call	encoder__compose_mod_rm
	movb	%al, -366(%rbp)
	movq	-456(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-366(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	jmp	.L2157
.L2156:
	movl	-328(%rbp), %eax
	cmpl	$167, %eax
	jne	.L2158
	movq	-336(%rbp), %rax
	movq	-456(%rbp), %rsi
	subq	$176, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, 128(%rdx)
	movq	%rbx, 136(%rdx)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, 144(%rdx)
	movq	%rbx, 152(%rdx)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, 160(%rdx)
	movq	%rbx, 168(%rdx)
	movq	%rsi, %rdi
	call	encoder__Encoder_add_segment_override_prefix
	addq	$176, %rsp
	movl	-460(%rbp), %eax
	movl	%eax, -372(%rbp)
	leaq	-96(%rbp), %rax
	leaq	-372(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-336(%rbp), %r8
	movq	-336(%rbp), %rax
	leaq	.LC30(%rip), %rbx
	movq	%rbx, -512(%rbp)
	movq	-504(%rbp), %rcx
	movabsq	$-4294967296, %rdx
	andq	%rcx, %rdx
	movq	%rdx, -504(%rbp)
	movq	-504(%rbp), %rdx
	movl	%edx, %ecx
	movabsq	$4294967296, %rdx
	orq	%rcx, %rdx
	movq	%rdx, -504(%rbp)
	movq	72(%rax), %rsi
	movq	80(%rax), %r9
	movq	-512(%rbp), %rax
	movq	-504(%rbp), %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %r11
	movq	%rdx, %r10
	movq	-456(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-96(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	32(%r8)
	pushq	24(%r8)
	movq	%rsi, %rcx
	movq	%r9, %r8
	movq	%r11, %rsi
	movq	%r10, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movzbl	-54(%rbp), %eax
	movb	%al, -373(%rbp)
	movq	-456(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-373(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	movq	-336(%rbp), %rax
	movq	-456(%rbp), %rdi
	subq	$176, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, 128(%rdx)
	movq	%rbx, 136(%rdx)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, 144(%rdx)
	movq	%rbx, 152(%rdx)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, 160(%rdx)
	movq	%rbx, 168(%rdx)
	movl	$0, %esi
	call	encoder__Encoder_add_modrm_sib_disp
	addq	$176, %rsp
	jmp	.L2157
.L2158:
	leaq	.LC216(%rip), %rax
	movq	%rax, -544(%rbp)
	movq	-536(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$31, %rax
	movq	%rax, -536(%rbp)
	movq	-536(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -536(%rbp)
	movq	-304(%rbp), %rcx
	movq	-544(%rbp), %rax
	movq	-536(%rbp), %rdx
	movq	%rax, %rsi
	movq	%rdx, %rdi
	movq	%rsi, %rdi
	movq	%rdx, %r8
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	24(%rcx), %rax
	movq	32(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	40(%rcx), %rax
	movq	%rax, 16(%rsi)
	movq	%r8, %rsi
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2157:
	cmpb	$0, -53(%rbp)
	je	.L2159
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-416(%rbp), %rax
	movq	-408(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-400(%rbp), %rax
	movq	-392(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$0, %edi
	call	array_get
	addq	$32, %rsp
	movl	-460(%rbp), %edi
	movl	-52(%rbp), %ecx
	movq	(%rax), %rsi
	movq	8(%rax), %rdx
	movq	-456(%rbp), %rax
	movl	%edi, %r8d
	movq	%rax, %rdi
	call	encoder__Encoder_add_imm_rela
	jmp	.L2148
.L2159:
	movl	-460(%rbp), %edx
	movl	-52(%rbp), %ecx
	movq	-456(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_add_imm_value2
	jmp	.L2148
.L2152:
	leaq	.LC216(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$31, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	-288(%rbp), %rcx
	movq	%r12, %rsi
	movq	%r13, %rdi
	movq	%r12, %rax
	movq	%r13, %rdx
	movq	%rsi, %rdi
	movq	%rdx, %r8
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	movq	%r8, %rsi
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2148:
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
	.globl	encoder__Encoder_arith_instr
	.hidden	encoder__Encoder_arith_instr
encoder__Encoder_arith_instr:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$488, %rsp
	movq	%rdi, -424(%rbp)
	movl	%esi, -428(%rbp)
	movl	%edx, %eax
	movl	%ecx, %edx
	movl	%r8d, -440(%rbp)
	movb	%al, -432(%rbp)
	movl	%edx, %eax
	movb	%al, -436(%rbp)
	movl	-428(%rbp), %edx
	movq	-424(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_set_current_instr
	leaq	-272(%rbp), %rdx
	movq	-424(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	encoder__Encoder_parse_two_operand
	movq	-272(%rbp), %rax
	movq	-264(%rbp), %rdx
	movq	%rax, -304(%rbp)
	movq	%rdx, -296(%rbp)
	movq	-256(%rbp), %rax
	movq	%rax, -288(%rbp)
	movq	-248(%rbp), %rax
	movq	-240(%rbp), %rdx
	movq	%rax, -336(%rbp)
	movq	%rdx, -328(%rbp)
	movq	-232(%rbp), %rax
	movq	%rax, -320(%rbp)
	movl	-296(%rbp), %eax
	cmpl	$165, %eax
	jne	.L2163
	cmpl	$0, -440(%rbp)
	je	.L2164
	movzbl	-432(%rbp), %eax
	addl	$1, %eax
	jmp	.L2165
.L2164:
	movzbl	-432(%rbp), %eax
.L2165:
	movb	%al, -49(%rbp)
	movq	-304(%rbp), %rsi
	movl	-440(%rbp), %edi
	subq	$48, %rsp
	movq	%rsp, %rcx
	movq	(%rsi), %rax
	movq	8(%rsi), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	16(%rsi), %rax
	movq	24(%rsi), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movq	32(%rsi), %rax
	movq	40(%rsi), %rdx
	movq	%rax, 32(%rcx)
	movq	%rdx, 40(%rcx)
	call	encoder__Register_check_regi_size
	addq	$48, %rsp
	movl	-328(%rbp), %eax
	cmpl	$165, %eax
	jne	.L2166
	movq	-336(%rbp), %rax
	movl	-440(%rbp), %esi
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movl	%esi, %edi
	call	encoder__Register_check_regi_size
	addq	$48, %rsp
	movl	-440(%rbp), %eax
	movl	%eax, -340(%rbp)
	leaq	-224(%rbp), %rax
	leaq	-340(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-336(%rbp), %r8
	leaq	.LC30(%rip), %r14
	movq	%r15, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, %r15
	movq	%r15, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r15
	movq	-304(%rbp), %rax
	movq	%r14, %rsi
	movq	%r15, %rdi
	movq	%r14, %rcx
	movq	%r15, %rbx
	movq	%rsi, %r10
	movq	%rbx, %r11
	movq	(%rax), %rsi
	movq	8(%rax), %r9
	movq	-424(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-224(%rbp), %rax
	movq	-216(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-208(%rbp), %rax
	movq	-200(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	8(%r8)
	pushq	(%r8)
	movq	%r10, %rcx
	movq	%r11, %r8
	movq	%r9, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movzbl	-49(%rbp), %eax
	movb	%al, -341(%rbp)
	movq	-424(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-341(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	movq	-336(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	call	encoder__Register_regi_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %r12d
	movq	-304(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	call	encoder__Register_regi_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %ecx
	movl	$3, %eax
	movzbl	%al, %eax
	movl	%r12d, %edx
	movl	%ecx, %esi
	movl	%eax, %edi
	call	encoder__compose_mod_rm
	movb	%al, -342(%rbp)
	movq	-424(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-342(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	jmp	.L2167
.L2166:
	movl	-328(%rbp), %eax
	cmpl	$167, %eax
	jne	.L2163
	movq	-336(%rbp), %rax
	movq	-424(%rbp), %rsi
	subq	$176, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, 128(%rdx)
	movq	%rbx, 136(%rdx)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, 144(%rdx)
	movq	%rbx, 152(%rdx)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, 160(%rdx)
	movq	%rbx, 168(%rdx)
	movq	%rsi, %rdi
	call	encoder__Encoder_add_segment_override_prefix
	addq	$176, %rsp
	movl	-440(%rbp), %eax
	movl	%eax, -348(%rbp)
	leaq	-192(%rbp), %rax
	leaq	-348(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-336(%rbp), %r10
	movq	-336(%rbp), %rdx
	movq	-304(%rbp), %rax
	movq	72(%rdx), %r8
	movq	80(%rdx), %r11
	movq	(%rax), %rsi
	movq	8(%rax), %r9
	movq	-424(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-192(%rbp), %rax
	movq	-184(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-176(%rbp), %rax
	movq	-168(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	32(%r10)
	pushq	24(%r10)
	movq	%r8, %rcx
	movq	%r11, %r8
	movq	%r9, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movzbl	-49(%rbp), %eax
	movb	%al, -349(%rbp)
	movq	-424(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-349(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	movq	-304(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	call	encoder__Register_regi_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %esi
	movq	-336(%rbp), %rax
	movq	-424(%rbp), %rdi
	subq	$176, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, 128(%rdx)
	movq	%rbx, 136(%rdx)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, 144(%rdx)
	movq	%rbx, 152(%rdx)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, 160(%rdx)
	movq	%rbx, 168(%rdx)
	call	encoder__Encoder_add_modrm_sib_disp
	addq	$176, %rsp
	jmp	.L2167
.L2163:
	movl	-296(%rbp), %eax
	cmpl	$167, %eax
	jne	.L2168
	movl	-328(%rbp), %eax
	cmpl	$165, %eax
	jne	.L2168
	cmpl	$0, -440(%rbp)
	jne	.L2169
	movzbl	-432(%rbp), %eax
	addl	$2, %eax
	jmp	.L2170
.L2169:
	movzbl	-432(%rbp), %eax
	addl	$3, %eax
.L2170:
	movb	%al, -50(%rbp)
	movq	-336(%rbp), %rax
	movl	-440(%rbp), %esi
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movl	%esi, %edi
	call	encoder__Register_check_regi_size
	addq	$48, %rsp
	movq	-304(%rbp), %rax
	movq	-424(%rbp), %rsi
	subq	$176, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, 128(%rdx)
	movq	%rbx, 136(%rdx)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, 144(%rdx)
	movq	%rbx, 152(%rdx)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, 160(%rdx)
	movq	%rbx, 168(%rdx)
	movq	%rsi, %rdi
	call	encoder__Encoder_add_segment_override_prefix
	addq	$176, %rsp
	movl	-440(%rbp), %eax
	movl	%eax, -356(%rbp)
	leaq	-160(%rbp), %rax
	leaq	-356(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-304(%rbp), %r10
	movq	-304(%rbp), %rdx
	movq	-336(%rbp), %rax
	movq	72(%rdx), %r8
	movq	80(%rdx), %r11
	movq	(%rax), %rsi
	movq	8(%rax), %r9
	movq	-424(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-160(%rbp), %rax
	movq	-152(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-144(%rbp), %rax
	movq	-136(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	32(%r10)
	pushq	24(%r10)
	movq	%r8, %rcx
	movq	%r11, %r8
	movq	%r9, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movzbl	-50(%rbp), %eax
	movb	%al, -357(%rbp)
	movq	-424(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-357(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	movq	-336(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	call	encoder__Register_regi_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %esi
	movq	-304(%rbp), %rax
	movq	-424(%rbp), %rdi
	subq	$176, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, 128(%rdx)
	movq	%rbx, 136(%rdx)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, 144(%rdx)
	movq	%rbx, 152(%rdx)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, 160(%rdx)
	movq	%rbx, 168(%rdx)
	call	encoder__Encoder_add_modrm_sib_disp
	addq	$176, %rsp
	jmp	.L2167
.L2168:
	movl	-296(%rbp), %eax
	cmpl	$168, %eax
	jne	.L2171
	leaq	-416(%rbp), %rax
	movl	$0, %r8d
	movl	$16, %ecx
	movl	$0, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array_with_default
	movq	-304(%rbp), %rcx
	leaq	-416(%rbp), %rdi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	call	encoder__eval_expr_get_symbol
	addq	$32, %rsp
	movl	%eax, -56(%rbp)
	movl	-396(%rbp), %eax
	cmpl	$1, %eax
	jle	.L2172
	leaq	.LC217(%rip), %rax
	movq	%rax, -512(%rbp)
	movq	-504(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$25, %rax
	movq	%rax, -504(%rbp)
	movq	-504(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -504(%rbp)
	movq	-304(%rbp), %rcx
	movq	-512(%rbp), %rax
	movq	-504(%rbp), %rdx
	movq	%rax, %rsi
	movq	%rdx, %rdi
	movq	%rsi, %rdi
	movq	%rdx, %r8
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	24(%rcx), %rax
	movq	32(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	40(%rcx), %rax
	movq	%rax, 16(%rsi)
	movq	%r8, %rsi
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2172:
	movl	-396(%rbp), %eax
	cmpl	$1, %eax
	sete	%al
	movb	%al, -57(%rbp)
	cmpl	$0, -440(%rbp)
	je	.L2173
	movl	-56(%rbp), %eax
	movl	%eax, %edi
	call	encoder__is_in_i8_range
	testb	%al, %al
	je	.L2174
	cmpb	$0, -57(%rbp)
	jne	.L2174
	movl	$-125, %eax
	jmp	.L2176
.L2174:
	movl	$-127, %eax
	jmp	.L2176
.L2173:
	movl	$-128, %eax
.L2176:
	movb	%al, -58(%rbp)
	movl	-328(%rbp), %eax
	cmpl	$165, %eax
	jne	.L2177
	movq	-336(%rbp), %rax
	movl	-440(%rbp), %esi
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movl	%esi, %edi
	call	encoder__Register_check_regi_size
	addq	$48, %rsp
	movl	-440(%rbp), %eax
	movl	%eax, -364(%rbp)
	leaq	-128(%rbp), %rax
	leaq	-364(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-336(%rbp), %rsi
	leaq	.LC30(%rip), %rbx
	movq	%rbx, -480(%rbp)
	movq	-472(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, -472(%rbp)
	movq	-472(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -472(%rbp)
	movq	%rbx, -464(%rbp)
	movq	-456(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, -456(%rbp)
	movq	-456(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -456(%rbp)
	movq	-480(%rbp), %rax
	movq	-472(%rbp), %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %r8
	movq	%rdx, %r11
	movq	-464(%rbp), %rax
	movq	-456(%rbp), %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %r10
	movq	%rdx, %r9
	movq	-424(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-128(%rbp), %rax
	movq	-120(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-112(%rbp), %rax
	movq	-104(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	8(%rsi)
	pushq	(%rsi)
	movq	%r8, %rcx
	movq	%r11, %r8
	movq	%r10, %rsi
	movq	%r9, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movzbl	-58(%rbp), %eax
	movb	%al, -365(%rbp)
	movq	-424(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-365(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	movq	-336(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	call	encoder__Register_regi_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %edx
	movzbl	-436(%rbp), %ecx
	movl	$3, %eax
	movzbl	%al, %eax
	movl	%ecx, %esi
	movl	%eax, %edi
	call	encoder__compose_mod_rm
	movb	%al, -366(%rbp)
	movq	-424(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-366(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	jmp	.L2178
.L2177:
	movl	-328(%rbp), %eax
	cmpl	$167, %eax
	jne	.L2179
	movq	-336(%rbp), %rax
	movq	-424(%rbp), %rsi
	subq	$176, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, 128(%rdx)
	movq	%rbx, 136(%rdx)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, 144(%rdx)
	movq	%rbx, 152(%rdx)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, 160(%rdx)
	movq	%rbx, 168(%rdx)
	movq	%rsi, %rdi
	call	encoder__Encoder_add_segment_override_prefix
	addq	$176, %rsp
	movl	-440(%rbp), %eax
	movl	%eax, -372(%rbp)
	leaq	-96(%rbp), %rax
	leaq	-372(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-336(%rbp), %r8
	movq	-336(%rbp), %rax
	leaq	.LC30(%rip), %rbx
	movq	%rbx, -496(%rbp)
	movq	-488(%rbp), %rcx
	movabsq	$-4294967296, %rdx
	andq	%rcx, %rdx
	movq	%rdx, -488(%rbp)
	movq	-488(%rbp), %rdx
	movl	%edx, %ecx
	movabsq	$4294967296, %rdx
	orq	%rcx, %rdx
	movq	%rdx, -488(%rbp)
	movq	72(%rax), %rsi
	movq	80(%rax), %r9
	movq	-496(%rbp), %rax
	movq	-488(%rbp), %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %r11
	movq	%rdx, %r10
	movq	-424(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-96(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	32(%r8)
	pushq	24(%r8)
	movq	%rsi, %rcx
	movq	%r9, %r8
	movq	%r11, %rsi
	movq	%r10, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movzbl	-58(%rbp), %eax
	movb	%al, -373(%rbp)
	movq	-424(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-373(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	movzbl	-436(%rbp), %esi
	movq	-336(%rbp), %rax
	movq	-424(%rbp), %rdi
	subq	$176, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, 128(%rdx)
	movq	%rbx, 136(%rdx)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, 144(%rdx)
	movq	%rbx, 152(%rdx)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, 160(%rdx)
	movq	%rbx, 168(%rdx)
	call	encoder__Encoder_add_modrm_sib_disp
	addq	$176, %rsp
	jmp	.L2178
.L2179:
	leaq	.LC216(%rip), %rax
	movq	%rax, -528(%rbp)
	movq	-520(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$31, %rax
	movq	%rax, -520(%rbp)
	movq	-520(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -520(%rbp)
	movq	-304(%rbp), %rcx
	movq	-528(%rbp), %rax
	movq	-520(%rbp), %rdx
	movq	%rax, %rsi
	movq	%rdx, %rdi
	movq	%rsi, %rdi
	movq	%rdx, %r8
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	24(%rcx), %rax
	movq	32(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	40(%rcx), %rax
	movq	%rax, 16(%rsi)
	movq	%r8, %rsi
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2178:
	cmpb	$0, -57(%rbp)
	je	.L2180
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-416(%rbp), %rax
	movq	-408(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-400(%rbp), %rax
	movq	-392(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$0, %edi
	call	array_get
	addq	$32, %rsp
	movl	-440(%rbp), %edi
	movl	-56(%rbp), %ecx
	movq	(%rax), %rsi
	movq	8(%rax), %rdx
	movq	-424(%rbp), %rax
	movl	%edi, %r8d
	movq	%rax, %rdi
	call	encoder__Encoder_add_imm_rela
	jmp	.L2167
.L2180:
	movl	-440(%rbp), %edx
	movl	-56(%rbp), %ecx
	movq	-424(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_add_imm_value
	jmp	.L2167
.L2171:
	leaq	.LC216(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$31, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	-288(%rbp), %rcx
	movq	%r12, %rsi
	movq	%r13, %rdi
	movq	%r12, %rax
	movq	%r13, %rdx
	movq	%rsi, %rdi
	movq	%rdx, %r8
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	movq	%r8, %rsi
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2167:
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
	.globl	encoder__Encoder_imul
	.hidden	encoder__Encoder_imul
encoder__Encoder_imul:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$520, %rsp
	movq	%rdi, -472(%rbp)
	movl	%esi, -476(%rbp)
	movq	-472(%rbp), %rax
	movl	$20, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_set_current_instr
	leaq	-256(%rbp), %rdx
	movq	-472(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	encoder__Encoder_parse_operand
	movq	-472(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$3, %eax
	je	.L2184
	cmpl	$0, -476(%rbp)
	jne	.L2185
	movb	$-10, -353(%rbp)
	leaq	-464(%rbp), %rdi
	leaq	-353(%rbp), %rax
	movq	%rax, %r8
	movl	$1, %ecx
	movl	$1, %edx
	movl	$1, %esi
	call	new_array_from_c_array
	jmp	.L2186
.L2185:
	movb	$-9, -354(%rbp)
	leaq	-464(%rbp), %rdi
	leaq	-354(%rbp), %rax
	movq	%rax, %r8
	movl	$1, %ecx
	movl	$1, %edx
	movl	$1, %esi
	call	new_array_from_c_array
.L2186:
	movl	-248(%rbp), %eax
	cmpl	$165, %eax
	jne	.L2187
	movq	-256(%rbp), %rax
	movl	-476(%rbp), %esi
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movl	%esi, %edi
	call	encoder__Register_check_regi_size
	addq	$48, %rsp
	movl	-476(%rbp), %eax
	movl	%eax, -360(%rbp)
	leaq	-224(%rbp), %rax
	leaq	-360(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-256(%rbp), %rsi
	leaq	.LC30(%rip), %rbx
	movq	%rbx, -512(%rbp)
	movq	-504(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, -504(%rbp)
	movq	-504(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -504(%rbp)
	movq	%rbx, -496(%rbp)
	movq	-488(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, -488(%rbp)
	movq	-488(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -488(%rbp)
	movq	-512(%rbp), %rax
	movq	-504(%rbp), %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %r8
	movq	%rdx, %r11
	movq	-496(%rbp), %rax
	movq	-488(%rbp), %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %r10
	movq	%rdx, %r9
	movq	-472(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-224(%rbp), %rax
	movq	-216(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-208(%rbp), %rax
	movq	-200(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	8(%rsi)
	pushq	(%rsi)
	movq	%r8, %rcx
	movq	%r11, %r8
	movq	%r10, %rsi
	movq	%r9, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movq	-464(%rbp), %rax
	movq	-456(%rbp), %rdx
	movq	%rax, -432(%rbp)
	movq	%rdx, -424(%rbp)
	movq	-448(%rbp), %rax
	movq	-440(%rbp), %rdx
	movq	%rax, -416(%rbp)
	movq	%rdx, -408(%rbp)
	movl	-412(%rbp), %edx
	movq	-424(%rbp), %rax
	movq	-472(%rbp), %rcx
	movq	120(%rcx), %rcx
	addq	$8, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	movq	-256(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	call	encoder__Register_regi_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %edx
	movl	$3, %eax
	movzbl	%al, %eax
	movl	$5, %esi
	movl	%eax, %edi
	call	encoder__compose_mod_rm
	movb	%al, -361(%rbp)
	movq	-472(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-361(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	jmp	.L2190
.L2187:
	movl	-248(%rbp), %eax
	cmpl	$167, %eax
	jne	.L2184
	movq	-256(%rbp), %rax
	movq	-472(%rbp), %rsi
	subq	$176, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, 128(%rdx)
	movq	%rbx, 136(%rdx)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, 144(%rdx)
	movq	%rbx, 152(%rdx)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, 160(%rdx)
	movq	%rbx, 168(%rdx)
	movq	%rsi, %rdi
	call	encoder__Encoder_add_segment_override_prefix
	addq	$176, %rsp
	movl	-476(%rbp), %eax
	movl	%eax, -368(%rbp)
	leaq	-192(%rbp), %rax
	leaq	-368(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-256(%rbp), %r8
	movq	-256(%rbp), %rax
	leaq	.LC30(%rip), %rbx
	movq	%rbx, -528(%rbp)
	movq	-520(%rbp), %rcx
	movabsq	$-4294967296, %rdx
	andq	%rcx, %rdx
	movq	%rdx, -520(%rbp)
	movq	-520(%rbp), %rdx
	movl	%edx, %ecx
	movabsq	$4294967296, %rdx
	orq	%rcx, %rdx
	movq	%rdx, -520(%rbp)
	movq	72(%rax), %rsi
	movq	80(%rax), %r9
	movq	-528(%rbp), %rax
	movq	-520(%rbp), %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %r11
	movq	%rdx, %r10
	movq	-472(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-192(%rbp), %rax
	movq	-184(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-176(%rbp), %rax
	movq	-168(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	32(%r8)
	pushq	24(%r8)
	movq	%rsi, %rcx
	movq	%r9, %r8
	movq	%r11, %rsi
	movq	%r10, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movq	-464(%rbp), %rax
	movq	-456(%rbp), %rdx
	movq	%rax, -432(%rbp)
	movq	%rdx, -424(%rbp)
	movq	-448(%rbp), %rax
	movq	-440(%rbp), %rdx
	movq	%rax, -416(%rbp)
	movq	%rdx, -408(%rbp)
	movl	-412(%rbp), %edx
	movq	-424(%rbp), %rax
	movq	-472(%rbp), %rcx
	movq	120(%rcx), %rcx
	addq	$8, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	movq	-256(%rbp), %rax
	movq	-472(%rbp), %rdi
	subq	$176, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, 128(%rdx)
	movq	%rbx, 136(%rdx)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, 144(%rdx)
	movq	%rbx, 152(%rdx)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, 160(%rdx)
	movq	%rbx, 168(%rdx)
	movl	$5, %esi
	call	encoder__Encoder_add_modrm_sib_disp
	addq	$176, %rsp
	jmp	.L2190
.L2184:
	movq	-472(%rbp), %rax
	movl	$3, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_expect
	leaq	-288(%rbp), %rax
	movq	-472(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	encoder__Encoder_parse_operand
	movl	-248(%rbp), %eax
	cmpl	$167, %eax
	jne	.L2191
	movl	-280(%rbp), %eax
	cmpl	$165, %eax
	jne	.L2191
	movq	-288(%rbp), %rax
	movl	-476(%rbp), %esi
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movl	%esi, %edi
	call	encoder__Register_check_regi_size
	addq	$48, %rsp
	movq	-256(%rbp), %rax
	movq	-472(%rbp), %rsi
	subq	$176, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, 128(%rdx)
	movq	%rbx, 136(%rdx)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, 144(%rdx)
	movq	%rbx, 152(%rdx)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, 160(%rdx)
	movq	%rbx, 168(%rdx)
	movq	%rsi, %rdi
	call	encoder__Encoder_add_segment_override_prefix
	addq	$176, %rsp
	movl	-476(%rbp), %eax
	movl	%eax, -372(%rbp)
	leaq	-160(%rbp), %rax
	leaq	-372(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-256(%rbp), %r10
	movq	-256(%rbp), %rdx
	movq	-288(%rbp), %rax
	movq	72(%rdx), %r8
	movq	80(%rdx), %r11
	movq	(%rax), %rsi
	movq	8(%rax), %r9
	movq	-472(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-160(%rbp), %rax
	movq	-152(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-144(%rbp), %rax
	movq	-136(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	32(%r10)
	pushq	24(%r10)
	movq	%r8, %rcx
	movq	%r11, %r8
	movq	%r9, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movb	$15, -374(%rbp)
	movb	$-81, -373(%rbp)
	leaq	-432(%rbp), %rax
	leaq	-374(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movl	-412(%rbp), %edx
	movq	-424(%rbp), %rax
	movq	-472(%rbp), %rcx
	movq	120(%rcx), %rcx
	addq	$8, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	movq	-288(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	call	encoder__Register_regi_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %esi
	movq	-256(%rbp), %rax
	movq	-472(%rbp), %rdi
	subq	$176, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, 128(%rdx)
	movq	%rbx, 136(%rdx)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, 144(%rdx)
	movq	%rbx, 152(%rdx)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, 160(%rdx)
	movq	%rbx, 168(%rdx)
	call	encoder__Encoder_add_modrm_sib_disp
	addq	$176, %rsp
	jmp	.L2190
.L2191:
	movl	-248(%rbp), %eax
	cmpl	$165, %eax
	jne	.L2192
	movl	-280(%rbp), %eax
	cmpl	$165, %eax
	jne	.L2192
	movq	-256(%rbp), %rax
	movl	-476(%rbp), %esi
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movl	%esi, %edi
	call	encoder__Register_check_regi_size
	addq	$48, %rsp
	movq	-288(%rbp), %rax
	movl	-476(%rbp), %esi
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movl	%esi, %edi
	call	encoder__Register_check_regi_size
	addq	$48, %rsp
	movl	-476(%rbp), %eax
	movl	%eax, -380(%rbp)
	leaq	-128(%rbp), %rax
	leaq	-380(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-256(%rbp), %r8
	leaq	.LC30(%rip), %rax
	movq	%rax, -544(%rbp)
	movq	-536(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, -536(%rbp)
	movq	-536(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -536(%rbp)
	movq	-288(%rbp), %rax
	movq	-544(%rbp), %rcx
	movq	-536(%rbp), %rbx
	movq	%rcx, %rsi
	movq	%rbx, %rdi
	movq	%rsi, %r10
	movq	%rbx, %r11
	movq	(%rax), %rsi
	movq	8(%rax), %r9
	movq	-472(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-128(%rbp), %rax
	movq	-120(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-112(%rbp), %rax
	movq	-104(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	8(%r8)
	pushq	(%r8)
	movq	%r10, %rcx
	movq	%r11, %r8
	movq	%r9, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movb	$15, -383(%rbp)
	movb	$-81, -382(%rbp)
	leaq	-432(%rbp), %rax
	leaq	-383(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movl	-412(%rbp), %edx
	movq	-424(%rbp), %rax
	movq	-472(%rbp), %rcx
	movq	120(%rcx), %rcx
	addq	$8, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	movq	-256(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	call	encoder__Register_regi_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %r12d
	movq	-288(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	call	encoder__Register_regi_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %ecx
	movl	$3, %eax
	movzbl	%al, %eax
	movl	%r12d, %edx
	movl	%ecx, %esi
	movl	%eax, %edi
	call	encoder__compose_mod_rm
	movb	%al, -381(%rbp)
	movq	-472(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-381(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	jmp	.L2190
.L2192:
	movq	-472(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$3, %eax
	je	.L2193
	movq	-288(%rbp), %rax
	movq	-280(%rbp), %rdx
	movq	%rax, -320(%rbp)
	movq	%rdx, -312(%rbp)
	movq	-272(%rbp), %rax
	movq	%rax, -304(%rbp)
	jmp	.L2194
.L2193:
	movq	-472(%rbp), %rax
	movl	$3, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_expect
	leaq	-320(%rbp), %rax
	movq	-472(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	encoder__Encoder_parse_operand
.L2194:
	movq	-320(%rbp), %rax
	movq	-312(%rbp), %rdx
	movq	%rax, -352(%rbp)
	movq	%rdx, -344(%rbp)
	movq	-304(%rbp), %rax
	movq	%rax, -336(%rbp)
	movl	-248(%rbp), %eax
	cmpl	$168, %eax
	jne	.L2195
	movl	-280(%rbp), %eax
	cmpl	$165, %eax
	jne	.L2195
	movl	-344(%rbp), %eax
	cmpl	$165, %eax
	jne	.L2195
	leaq	-432(%rbp), %rax
	movl	$0, %r8d
	movl	$16, %ecx
	movl	$0, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array_with_default
	movq	-256(%rbp), %rcx
	leaq	-432(%rbp), %rdi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	call	encoder__eval_expr_get_symbol
	addq	$32, %rsp
	movl	%eax, -52(%rbp)
	movl	-412(%rbp), %eax
	cmpl	$1, %eax
	jle	.L2196
	leaq	.LC217(%rip), %rax
	movq	%rax, -560(%rbp)
	movq	-552(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$25, %rax
	movq	%rax, -552(%rbp)
	movq	-552(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -552(%rbp)
	movq	-256(%rbp), %rcx
	movq	-560(%rbp), %rax
	movq	-552(%rbp), %rdx
	movq	%rax, %rsi
	movq	%rdx, %rdi
	movq	%rsi, %rdi
	movq	%rdx, %r8
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	24(%rcx), %rax
	movq	32(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	40(%rcx), %rax
	movq	%rax, 16(%rsi)
	movq	%r8, %rsi
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2196:
	movl	-412(%rbp), %eax
	cmpl	$1, %eax
	sete	%al
	movb	%al, -53(%rbp)
	movl	-52(%rbp), %eax
	movl	%eax, %edi
	call	encoder__is_in_i8_range
	testb	%al, %al
	je	.L2197
	cmpb	$0, -53(%rbp)
	jne	.L2197
	movl	$107, %eax
	jmp	.L2198
.L2197:
	movl	$105, %eax
.L2198:
	movb	%al, -54(%rbp)
	movq	-288(%rbp), %rax
	movl	-476(%rbp), %esi
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movl	%esi, %edi
	call	encoder__Register_check_regi_size
	addq	$48, %rsp
	movq	-352(%rbp), %rax
	movl	-476(%rbp), %esi
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movl	%esi, %edi
	call	encoder__Register_check_regi_size
	addq	$48, %rsp
	movl	-476(%rbp), %eax
	movl	%eax, -388(%rbp)
	leaq	-96(%rbp), %rax
	leaq	-388(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-288(%rbp), %r8
	leaq	.LC30(%rip), %r14
	movq	%r15, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, %r15
	movq	%r15, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r15
	movq	-352(%rbp), %rax
	movq	%r14, %rsi
	movq	%r15, %rdi
	movq	%r14, %rcx
	movq	%r15, %rbx
	movq	%rsi, %r10
	movq	%rbx, %r11
	movq	(%rax), %rsi
	movq	8(%rax), %r9
	movq	-472(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-96(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	8(%r8)
	pushq	(%r8)
	movq	%r10, %rcx
	movq	%r11, %r8
	movq	%r9, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movzbl	-54(%rbp), %eax
	movb	%al, -389(%rbp)
	movq	-472(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-389(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	movq	-288(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	call	encoder__Register_regi_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %r12d
	movq	-352(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	call	encoder__Register_regi_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %ecx
	movl	$3, %eax
	movzbl	%al, %eax
	movl	%r12d, %edx
	movl	%ecx, %esi
	movl	%eax, %edi
	call	encoder__compose_mod_rm
	movb	%al, -390(%rbp)
	movq	-472(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-390(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	cmpb	$0, -53(%rbp)
	je	.L2199
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-432(%rbp), %rax
	movq	-424(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-416(%rbp), %rax
	movq	-408(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$0, %edi
	call	array_get
	addq	$32, %rsp
	movl	-476(%rbp), %edi
	movl	-52(%rbp), %ecx
	movq	(%rax), %rsi
	movq	8(%rax), %rdx
	movq	-472(%rbp), %rax
	movl	%edi, %r8d
	movq	%rax, %rdi
	call	encoder__Encoder_add_imm_rela
	jmp	.L2190
.L2199:
	movl	-476(%rbp), %edx
	movl	-52(%rbp), %ecx
	movq	-472(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_add_imm_value
	jmp	.L2190
.L2195:
	leaq	.LC216(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$31, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	-240(%rbp), %rcx
	movq	%r12, %rsi
	movq	%r13, %rdi
	movq	%r12, %rax
	movq	%r13, %rdx
	movq	%rsi, %rdi
	movq	%rdx, %r8
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	movq	%r8, %rsi
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2190:
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
	.globl	encoder__Encoder_one_operand_arith
	.hidden	encoder__Encoder_one_operand_arith
encoder__Encoder_one_operand_arith:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$248, %rsp
	movq	%rdi, -232(%rbp)
	movl	%esi, -236(%rbp)
	movl	%edx, %eax
	movl	%ecx, -244(%rbp)
	movb	%al, -240(%rbp)
	movl	-236(%rbp), %edx
	movq	-232(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_set_current_instr
	leaq	-144(%rbp), %rax
	movq	-232(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	encoder__Encoder_parse_operand
	cmpl	$0, -244(%rbp)
	jne	.L2203
	movb	$-10, -177(%rbp)
	leaq	-176(%rbp), %rax
	leaq	-177(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	jmp	.L2204
.L2203:
	movb	$-9, -178(%rbp)
	leaq	-176(%rbp), %rax
	leaq	-178(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
.L2204:
	movl	-136(%rbp), %eax
	cmpl	$165, %eax
	jne	.L2205
	movq	-144(%rbp), %rax
	movl	-244(%rbp), %esi
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movl	%esi, %edi
	call	encoder__Register_check_regi_size
	addq	$48, %rsp
	movl	-244(%rbp), %eax
	movl	%eax, -184(%rbp)
	leaq	-112(%rbp), %rax
	leaq	-184(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-144(%rbp), %rsi
	leaq	.LC30(%rip), %rbx
	movq	%rbx, -288(%rbp)
	movq	-280(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, -280(%rbp)
	movq	-280(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -280(%rbp)
	movq	%rbx, -272(%rbp)
	movq	-264(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, -264(%rbp)
	movq	-264(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -264(%rbp)
	movq	-288(%rbp), %rax
	movq	-280(%rbp), %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %r8
	movq	%rdx, %r11
	movq	-272(%rbp), %rax
	movq	-264(%rbp), %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %r10
	movq	%rdx, %r9
	movq	-232(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-112(%rbp), %rax
	movq	-104(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-96(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	8(%rsi)
	pushq	(%rsi)
	movq	%r8, %rcx
	movq	%r11, %r8
	movq	%r10, %rsi
	movq	%r9, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movq	-176(%rbp), %rax
	movq	-168(%rbp), %rdx
	movq	%rax, -224(%rbp)
	movq	%rdx, -216(%rbp)
	movq	-160(%rbp), %rax
	movq	-152(%rbp), %rdx
	movq	%rax, -208(%rbp)
	movq	%rdx, -200(%rbp)
	movl	-204(%rbp), %edx
	movq	-216(%rbp), %rax
	movq	-232(%rbp), %rcx
	movq	120(%rcx), %rcx
	addq	$8, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	movq	-144(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	call	encoder__Register_regi_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %edx
	movzbl	-240(%rbp), %ecx
	movl	$3, %eax
	movzbl	%al, %eax
	movl	%ecx, %esi
	movl	%eax, %edi
	call	encoder__compose_mod_rm
	movb	%al, -185(%rbp)
	movq	-232(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-185(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	jmp	.L2206
.L2205:
	movl	-136(%rbp), %eax
	cmpl	$167, %eax
	jne	.L2207
	movq	-144(%rbp), %rax
	movq	-232(%rbp), %rsi
	subq	$176, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, 128(%rdx)
	movq	%rbx, 136(%rdx)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, 144(%rdx)
	movq	%rbx, 152(%rdx)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, 160(%rdx)
	movq	%rbx, 168(%rdx)
	movq	%rsi, %rdi
	call	encoder__Encoder_add_segment_override_prefix
	addq	$176, %rsp
	movl	-244(%rbp), %eax
	movl	%eax, -192(%rbp)
	leaq	-80(%rbp), %rax
	leaq	-192(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-144(%rbp), %r8
	movq	-144(%rbp), %rax
	leaq	.LC30(%rip), %r14
	movq	%r15, %rcx
	movabsq	$-4294967296, %rdx
	andq	%rcx, %rdx
	movq	%rdx, %r15
	movq	%r15, %rdx
	movl	%edx, %ecx
	movabsq	$4294967296, %rdx
	orq	%rcx, %rdx
	movq	%rdx, %r15
	movq	72(%rax), %rsi
	movq	80(%rax), %r9
	movq	%r14, %rcx
	movq	%r15, %rbx
	movq	%r14, %rax
	movq	%r15, %rdx
	movq	%rcx, %r11
	movq	%rdx, %r10
	movq	-232(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	32(%r8)
	pushq	24(%r8)
	movq	%rsi, %rcx
	movq	%r9, %r8
	movq	%r11, %rsi
	movq	%r10, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movq	-176(%rbp), %rax
	movq	-168(%rbp), %rdx
	movq	%rax, -224(%rbp)
	movq	%rdx, -216(%rbp)
	movq	-160(%rbp), %rax
	movq	-152(%rbp), %rdx
	movq	%rax, -208(%rbp)
	movq	%rdx, -200(%rbp)
	movl	-204(%rbp), %edx
	movq	-216(%rbp), %rax
	movq	-232(%rbp), %rcx
	movq	120(%rcx), %rcx
	addq	$8, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	movzbl	-240(%rbp), %esi
	movq	-144(%rbp), %rax
	movq	-232(%rbp), %rdi
	subq	$176, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, 128(%rdx)
	movq	%rbx, 136(%rdx)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, 144(%rdx)
	movq	%rbx, 152(%rdx)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, 160(%rdx)
	movq	%rbx, 168(%rdx)
	call	encoder__Encoder_add_modrm_sib_disp
	addq	$176, %rsp
	jmp	.L2206
.L2207:
	leaq	.LC216(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$31, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	-128(%rbp), %rcx
	movq	%r12, %rsi
	movq	%r13, %rdi
	movq	%r12, %rax
	movq	%r13, %rdx
	movq	%rsi, %rdi
	movq	%rdx, %r8
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	movq	%r8, %rsi
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2206:
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
	.globl	encoder__Encoder_lea
	.hidden	encoder__Encoder_lea
encoder__Encoder_lea:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$216, %rsp
	movq	%rdi, -216(%rbp)
	movq	%rdx, %rcx
	movq	%rsi, %rax
	movq	%rdi, %rdx
	movq	%rcx, %rdx
	movq	%rax, -240(%rbp)
	movq	%rdx, -232(%rbp)
	movq	-216(%rbp), %rax
	movl	$25, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_set_current_instr
	movq	-240(%rbp), %rdx
	movq	-232(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	encoder__get_size_by_suffix
	movl	%eax, -36(%rbp)
	leaq	-128(%rbp), %rax
	movq	-216(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	encoder__Encoder_parse_two_operand
	movq	-128(%rbp), %rax
	movq	-120(%rbp), %rdx
	movq	%rax, -160(%rbp)
	movq	%rdx, -152(%rbp)
	movq	-112(%rbp), %rax
	movq	%rax, -144(%rbp)
	movq	-104(%rbp), %rax
	movq	-96(%rbp), %rdx
	movq	%rax, -192(%rbp)
	movq	%rdx, -184(%rbp)
	movq	-88(%rbp), %rax
	movq	%rax, -176(%rbp)
	movl	-152(%rbp), %eax
	cmpl	$167, %eax
	jne	.L2210
	movl	-184(%rbp), %eax
	cmpl	$165, %eax
	jne	.L2210
	movq	-192(%rbp), %rax
	movl	-36(%rbp), %esi
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movl	%esi, %edi
	call	encoder__Register_check_regi_size
	addq	$48, %rsp
	movq	-160(%rbp), %rax
	movq	-216(%rbp), %rsi
	subq	$176, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, 128(%rdx)
	movq	%rbx, 136(%rdx)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, 144(%rdx)
	movq	%rbx, 152(%rdx)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, 160(%rdx)
	movq	%rbx, 168(%rdx)
	movq	%rsi, %rdi
	call	encoder__Encoder_add_segment_override_prefix
	addq	$176, %rsp
	movl	-36(%rbp), %eax
	movl	%eax, -196(%rbp)
	leaq	-80(%rbp), %rax
	leaq	-196(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-160(%rbp), %r10
	movq	-160(%rbp), %rdx
	movq	-192(%rbp), %rax
	movq	72(%rdx), %r8
	movq	80(%rdx), %r11
	movq	(%rax), %rsi
	movq	8(%rax), %r9
	movq	-216(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	32(%r10)
	pushq	24(%r10)
	movq	%r8, %rcx
	movq	%r11, %r8
	movq	%r9, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movb	$-115, -197(%rbp)
	movq	-216(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-197(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	movq	-192(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	call	encoder__Register_regi_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %esi
	movq	-160(%rbp), %rax
	movq	-216(%rbp), %rdi
	subq	$176, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, 128(%rdx)
	movq	%rbx, 136(%rdx)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, 144(%rdx)
	movq	%rbx, 152(%rdx)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, 160(%rdx)
	movq	%rbx, 168(%rdx)
	call	encoder__Encoder_add_modrm_sib_disp
	addq	$176, %rsp
	jmp	.L2212
.L2210:
	leaq	.LC216(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$31, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	-144(%rbp), %rcx
	movq	%r12, %rsi
	movq	%r13, %rdi
	movq	%r12, %rax
	movq	%r13, %rdx
	movq	%rsi, %rdi
	movq	%rdx, %r8
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	movq	%r8, %rsi
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2212:
	leaq	-24(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%rbp
	ret
	.globl	encoder__Encoder_set
	.hidden	encoder__Encoder_set
encoder__Encoder_set:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$152, %rsp
	movq	%rdi, -168(%rbp)
	movl	%esi, -172(%rbp)
	movl	-172(%rbp), %edx
	movq	-168(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_set_current_instr
	leaq	-112(%rbp), %rax
	movq	-168(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	encoder__Encoder_parse_operand
	movl	-104(%rbp), %eax
	cmpl	$165, %eax
	jne	.L2214
	movq	-112(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movl	$0, %edi
	call	encoder__Register_check_regi_size
	addq	$48, %rsp
	movl	$0, -116(%rbp)
	leaq	-80(%rbp), %rax
	leaq	-116(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-112(%rbp), %rsi
	leaq	.LC30(%rip), %r14
	movq	%r15, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, %r15
	movq	%r15, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r15
	leaq	.LC30(%rip), %rax
	movq	%rax, -192(%rbp)
	movq	-184(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, -184(%rbp)
	movq	-184(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -184(%rbp)
	movq	%r14, %rcx
	movq	%r15, %rbx
	movq	%r14, %rax
	movq	%r15, %rdx
	movq	%rcx, %r8
	movq	%rdx, %r11
	movq	-192(%rbp), %rax
	movq	-184(%rbp), %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %r10
	movq	%rdx, %r9
	movq	-168(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	8(%rsi)
	pushq	(%rsi)
	movq	%r8, %rcx
	movq	%r11, %r8
	movq	%r10, %rsi
	movq	%r9, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movq	16(%rbp), %rax
	movq	24(%rbp), %rdx
	movq	%rax, -160(%rbp)
	movq	%rdx, -152(%rbp)
	movq	32(%rbp), %rax
	movq	40(%rbp), %rdx
	movq	%rax, -144(%rbp)
	movq	%rdx, -136(%rbp)
	movl	-140(%rbp), %edx
	movq	-152(%rbp), %rax
	movq	-168(%rbp), %rcx
	movq	120(%rcx), %rcx
	addq	$8, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	movq	-112(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	call	encoder__Register_regi_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %edx
	movl	$3, %eax
	movzbl	%al, %eax
	movl	$0, %esi
	movl	%eax, %edi
	call	encoder__compose_mod_rm
	movb	%al, -117(%rbp)
	movq	-168(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-117(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	jmp	.L2216
.L2214:
	leaq	.LC216(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$31, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	-96(%rbp), %rcx
	movq	%r12, %rsi
	movq	%r13, %rdi
	movq	%r12, %rax
	movq	%r13, %rdx
	movq	%rsi, %rdi
	movq	%rdx, %r8
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	movq	%r8, %rsi
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2216:
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
	.section	.rodata, "a"
.LC226:
	.string	"CL"
	.text
	.globl	encoder__Encoder_shift
	.hidden	encoder__Encoder_shift
encoder__Encoder_shift:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$552, %rsp
	movq	%rdi, -408(%rbp)
	movl	%esi, -412(%rbp)
	movl	%edx, %eax
	movl	%ecx, -420(%rbp)
	movb	%al, -416(%rbp)
	movl	-412(%rbp), %edx
	movq	-408(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_set_current_instr
	leaq	-288(%rbp), %rdx
	movq	-408(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	encoder__Encoder_parse_operand
	movq	-408(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$3, %eax
	je	.L2218
	cmpl	$0, -420(%rbp)
	jne	.L2219
	movl	$-48, %eax
	jmp	.L2220
.L2219:
	movl	$-47, %eax
.L2220:
	movb	%al, -49(%rbp)
	movl	-280(%rbp), %eax
	cmpl	$165, %eax
	jne	.L2221
	movq	-288(%rbp), %rax
	movl	-420(%rbp), %esi
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movl	%esi, %edi
	call	encoder__Register_check_regi_size
	addq	$48, %rsp
	movl	-420(%rbp), %eax
	movl	%eax, -324(%rbp)
	leaq	-256(%rbp), %rax
	leaq	-324(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-288(%rbp), %rsi
	leaq	.LC30(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	leaq	.LC30(%rip), %r14
	movq	%r15, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, %r15
	movq	%r15, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r15
	movq	%r12, %rcx
	movq	%r13, %rbx
	movq	%r12, %rax
	movq	%r13, %rdx
	movq	%rcx, %r8
	movq	%rdx, %r11
	movq	%r14, %rcx
	movq	%r15, %rbx
	movq	%r14, %rax
	movq	%r15, %rdx
	movq	%rcx, %r10
	movq	%rdx, %r9
	movq	-408(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-256(%rbp), %rax
	movq	-248(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-240(%rbp), %rax
	movq	-232(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	8(%rsi)
	pushq	(%rsi)
	movq	%r8, %rcx
	movq	%r11, %r8
	movq	%r10, %rsi
	movq	%r9, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movzbl	-49(%rbp), %eax
	movb	%al, -325(%rbp)
	movq	-408(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-325(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	movq	-288(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	call	encoder__Register_regi_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %edx
	movzbl	-416(%rbp), %ecx
	movl	$3, %eax
	movzbl	%al, %eax
	movl	%ecx, %esi
	movl	%eax, %edi
	call	encoder__compose_mod_rm
	movb	%al, -326(%rbp)
	movq	-408(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-326(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	jmp	.L2222
.L2221:
	movl	-280(%rbp), %eax
	cmpl	$167, %eax
	jne	.L2218
	movq	-288(%rbp), %rax
	movq	-408(%rbp), %rsi
	subq	$176, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, 128(%rdx)
	movq	%rbx, 136(%rdx)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, 144(%rdx)
	movq	%rbx, 152(%rdx)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, 160(%rdx)
	movq	%rbx, 168(%rdx)
	movq	%rsi, %rdi
	call	encoder__Encoder_add_segment_override_prefix
	addq	$176, %rsp
	movl	-420(%rbp), %eax
	movl	%eax, -332(%rbp)
	leaq	-224(%rbp), %rax
	leaq	-332(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-288(%rbp), %r8
	movq	-288(%rbp), %rax
	leaq	.LC30(%rip), %rbx
	movq	%rbx, -464(%rbp)
	movq	-456(%rbp), %rcx
	movabsq	$-4294967296, %rdx
	andq	%rcx, %rdx
	movq	%rdx, -456(%rbp)
	movq	-456(%rbp), %rdx
	movl	%edx, %ecx
	movabsq	$4294967296, %rdx
	orq	%rcx, %rdx
	movq	%rdx, -456(%rbp)
	movq	72(%rax), %rsi
	movq	80(%rax), %r9
	movq	-464(%rbp), %rax
	movq	-456(%rbp), %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %r11
	movq	%rdx, %r10
	movq	-408(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-224(%rbp), %rax
	movq	-216(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-208(%rbp), %rax
	movq	-200(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	32(%r8)
	pushq	24(%r8)
	movq	%rsi, %rcx
	movq	%r9, %r8
	movq	%r11, %rsi
	movq	%r10, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movzbl	-49(%rbp), %eax
	movb	%al, -333(%rbp)
	movq	-408(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-333(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	movzbl	-416(%rbp), %esi
	movq	-288(%rbp), %rax
	movq	-408(%rbp), %rdi
	subq	$176, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, 128(%rdx)
	movq	%rbx, 136(%rdx)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, 144(%rdx)
	movq	%rbx, 152(%rdx)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, 160(%rdx)
	movq	%rbx, 168(%rdx)
	call	encoder__Encoder_add_modrm_sib_disp
	addq	$176, %rsp
	jmp	.L2222
.L2218:
	movq	-408(%rbp), %rax
	movl	$3, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_expect
	leaq	-320(%rbp), %rdx
	movq	-408(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	encoder__Encoder_parse_operand
	movl	-280(%rbp), %eax
	cmpl	$165, %eax
	jne	.L2223
	leaq	.LC226(%rip), %rax
	movq	%rax, -480(%rbp)
	movq	-472(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, -472(%rbp)
	movq	-472(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -472(%rbp)
	movq	-288(%rbp), %rax
	movq	(%rax), %rsi
	movq	8(%rax), %rax
	movq	-480(%rbp), %rdx
	movq	-472(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2224
	leaq	.LC216(%rip), %rax
	movq	%rax, -560(%rbp)
	movq	-552(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$31, %rax
	movq	%rax, -552(%rbp)
	movq	-552(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -552(%rbp)
	movq	-288(%rbp), %rcx
	movq	-560(%rbp), %rax
	movq	-552(%rbp), %rdx
	movq	%rax, %rsi
	movq	%rdx, %rdi
	movq	%rsi, %rdi
	movq	%rdx, %r8
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	24(%rcx), %rax
	movq	32(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	40(%rcx), %rax
	movq	%rax, 16(%rsi)
	movq	%r8, %rsi
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2224:
	cmpl	$0, -420(%rbp)
	jne	.L2225
	movl	$-46, %eax
	jmp	.L2226
.L2225:
	movl	$-45, %eax
.L2226:
	movb	%al, -50(%rbp)
	movl	-312(%rbp), %eax
	cmpl	$165, %eax
	jne	.L2227
	movq	-320(%rbp), %rax
	movl	-420(%rbp), %esi
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movl	%esi, %edi
	call	encoder__Register_check_regi_size
	addq	$48, %rsp
	movl	-420(%rbp), %eax
	movl	%eax, -340(%rbp)
	leaq	-192(%rbp), %rax
	leaq	-340(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-320(%rbp), %r8
	leaq	.LC30(%rip), %rax
	movq	%rax, -496(%rbp)
	movq	-488(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, -488(%rbp)
	movq	-488(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -488(%rbp)
	movq	-288(%rbp), %rax
	movq	-496(%rbp), %rcx
	movq	-488(%rbp), %rbx
	movq	%rcx, %rsi
	movq	%rbx, %rdi
	movq	%rsi, %r10
	movq	%rbx, %r11
	movq	(%rax), %rsi
	movq	8(%rax), %r9
	movq	-408(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-192(%rbp), %rax
	movq	-184(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-176(%rbp), %rax
	movq	-168(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	8(%r8)
	pushq	(%r8)
	movq	%r10, %rcx
	movq	%r11, %r8
	movq	%r9, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movzbl	-50(%rbp), %eax
	movb	%al, -341(%rbp)
	movq	-408(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-341(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	movq	-320(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	call	encoder__Register_regi_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %edx
	movzbl	-416(%rbp), %ecx
	movl	$3, %eax
	movzbl	%al, %eax
	movl	%ecx, %esi
	movl	%eax, %edi
	call	encoder__compose_mod_rm
	movb	%al, -342(%rbp)
	movq	-408(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-342(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	jmp	.L2222
.L2227:
	movl	-312(%rbp), %eax
	cmpl	$167, %eax
	jne	.L2223
	movq	-320(%rbp), %rax
	movq	-408(%rbp), %rsi
	subq	$176, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, 128(%rdx)
	movq	%rbx, 136(%rdx)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, 144(%rdx)
	movq	%rbx, 152(%rdx)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, 160(%rdx)
	movq	%rbx, 168(%rdx)
	movq	%rsi, %rdi
	call	encoder__Encoder_add_segment_override_prefix
	addq	$176, %rsp
	movl	-420(%rbp), %eax
	movl	%eax, -348(%rbp)
	leaq	-160(%rbp), %rax
	leaq	-348(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-320(%rbp), %r10
	movq	-320(%rbp), %rdx
	movq	-288(%rbp), %rax
	movq	72(%rdx), %r8
	movq	80(%rdx), %r11
	movq	(%rax), %rsi
	movq	8(%rax), %r9
	movq	-408(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-160(%rbp), %rax
	movq	-152(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-144(%rbp), %rax
	movq	-136(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	32(%r10)
	pushq	24(%r10)
	movq	%r8, %rcx
	movq	%r11, %r8
	movq	%r9, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movzbl	-50(%rbp), %eax
	movb	%al, -349(%rbp)
	movq	-408(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-349(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	movzbl	-416(%rbp), %esi
	movq	-320(%rbp), %rax
	movq	-408(%rbp), %rdi
	subq	$176, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, 128(%rdx)
	movq	%rbx, 136(%rdx)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, 144(%rdx)
	movq	%rbx, 152(%rdx)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, 160(%rdx)
	movq	%rbx, 168(%rdx)
	call	encoder__Encoder_add_modrm_sib_disp
	addq	$176, %rsp
	jmp	.L2222
.L2223:
	movl	-280(%rbp), %eax
	cmpl	$168, %eax
	jne	.L2228
	leaq	-400(%rbp), %rax
	movl	$0, %r8d
	movl	$16, %ecx
	movl	$0, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array_with_default
	movq	-288(%rbp), %rcx
	leaq	-400(%rbp), %rdi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	call	encoder__eval_expr_get_symbol
	addq	$32, %rsp
	movl	%eax, -56(%rbp)
	movl	-380(%rbp), %eax
	cmpl	$1, %eax
	jle	.L2229
	leaq	.LC217(%rip), %rax
	movq	%rax, -576(%rbp)
	movq	-568(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$25, %rax
	movq	%rax, -568(%rbp)
	movq	-568(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -568(%rbp)
	movq	-288(%rbp), %rax
	movq	16(%rax), %rcx
	movq	-576(%rbp), %rax
	movq	-568(%rbp), %rdx
	movq	%rax, %rsi
	movq	%rdx, %rdi
	movq	%rsi, %rdi
	movq	%rdx, %r8
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	movq	%r8, %rsi
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2229:
	movl	-380(%rbp), %eax
	cmpl	$1, %eax
	sete	%al
	movb	%al, -57(%rbp)
	cmpl	$1, -56(%rbp)
	jne	.L2230
	cmpb	$0, -57(%rbp)
	jne	.L2230
	cmpl	$0, -420(%rbp)
	jne	.L2231
	movl	$-48, %eax
	jmp	.L2233
.L2231:
	movl	$-47, %eax
	jmp	.L2233
.L2230:
	cmpl	$0, -420(%rbp)
	jne	.L2234
	movl	$-64, %eax
	jmp	.L2233
.L2234:
	movl	$-63, %eax
.L2233:
	movb	%al, -58(%rbp)
	movl	-312(%rbp), %eax
	cmpl	$165, %eax
	jne	.L2236
	movq	-320(%rbp), %rax
	movl	-420(%rbp), %esi
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movl	%esi, %edi
	call	encoder__Register_check_regi_size
	addq	$48, %rsp
	movl	-420(%rbp), %eax
	movl	%eax, -356(%rbp)
	leaq	-128(%rbp), %rax
	leaq	-356(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-320(%rbp), %rsi
	leaq	.LC30(%rip), %rbx
	movq	%rbx, -528(%rbp)
	movq	-520(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, -520(%rbp)
	movq	-520(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -520(%rbp)
	movq	%rbx, -512(%rbp)
	movq	-504(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, -504(%rbp)
	movq	-504(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -504(%rbp)
	movq	-528(%rbp), %rax
	movq	-520(%rbp), %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %r8
	movq	%rdx, %r11
	movq	-512(%rbp), %rax
	movq	-504(%rbp), %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %r10
	movq	%rdx, %r9
	movq	-408(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-128(%rbp), %rax
	movq	-120(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-112(%rbp), %rax
	movq	-104(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	8(%rsi)
	pushq	(%rsi)
	movq	%r8, %rcx
	movq	%r11, %r8
	movq	%r10, %rsi
	movq	%r9, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movzbl	-58(%rbp), %eax
	movb	%al, -357(%rbp)
	movq	-408(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-357(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	movq	-320(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	call	encoder__Register_regi_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %edx
	movzbl	-416(%rbp), %ecx
	movl	$3, %eax
	movzbl	%al, %eax
	movl	%ecx, %esi
	movl	%eax, %edi
	call	encoder__compose_mod_rm
	movb	%al, -358(%rbp)
	movq	-408(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-358(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	jmp	.L2237
.L2236:
	movl	-312(%rbp), %eax
	cmpl	$167, %eax
	jne	.L2238
	movq	-320(%rbp), %rax
	movq	-408(%rbp), %rsi
	subq	$176, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, 128(%rdx)
	movq	%rbx, 136(%rdx)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, 144(%rdx)
	movq	%rbx, 152(%rdx)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, 160(%rdx)
	movq	%rbx, 168(%rdx)
	movq	%rsi, %rdi
	call	encoder__Encoder_add_segment_override_prefix
	addq	$176, %rsp
	movl	-420(%rbp), %eax
	movl	%eax, -364(%rbp)
	leaq	-96(%rbp), %rax
	leaq	-364(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-320(%rbp), %r8
	movq	-320(%rbp), %rax
	leaq	.LC30(%rip), %rbx
	movq	%rbx, -544(%rbp)
	movq	-536(%rbp), %rcx
	movabsq	$-4294967296, %rdx
	andq	%rcx, %rdx
	movq	%rdx, -536(%rbp)
	movq	-536(%rbp), %rdx
	movl	%edx, %ecx
	movabsq	$4294967296, %rdx
	orq	%rcx, %rdx
	movq	%rdx, -536(%rbp)
	movq	72(%rax), %rsi
	movq	80(%rax), %r9
	movq	-544(%rbp), %rax
	movq	-536(%rbp), %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %r11
	movq	%rdx, %r10
	movq	-408(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-96(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	32(%r8)
	pushq	24(%r8)
	movq	%rsi, %rcx
	movq	%r9, %r8
	movq	%r11, %rsi
	movq	%r10, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movzbl	-58(%rbp), %eax
	movb	%al, -365(%rbp)
	movq	-408(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-365(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	movzbl	-416(%rbp), %esi
	movq	-320(%rbp), %rax
	movq	-408(%rbp), %rdi
	subq	$176, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, 128(%rdx)
	movq	%rbx, 136(%rdx)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, 144(%rdx)
	movq	%rbx, 152(%rdx)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, 160(%rdx)
	movq	%rbx, 168(%rdx)
	call	encoder__Encoder_add_modrm_sib_disp
	addq	$176, %rsp
	jmp	.L2237
.L2238:
	leaq	.LC216(%rip), %rax
	movq	%rax, -592(%rbp)
	movq	-584(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$31, %rax
	movq	%rax, -584(%rbp)
	movq	-584(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -584(%rbp)
	movq	-304(%rbp), %rcx
	movq	-592(%rbp), %rax
	movq	-584(%rbp), %rdx
	movq	%rax, %rsi
	movq	%rdx, %rdi
	movq	%rsi, %rdi
	movq	%rdx, %r8
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	movq	%r8, %rsi
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2237:
	cmpb	$0, -57(%rbp)
	je	.L2239
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-400(%rbp), %rax
	movq	-392(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-384(%rbp), %rax
	movq	-376(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$0, %edi
	call	array_get
	addq	$32, %rsp
	movq	(%rax), %rsi
	movq	8(%rax), %rdx
	movq	-408(%rbp), %rax
	movl	$0, %r8d
	movl	$0, %ecx
	movq	%rax, %rdi
	call	encoder__Encoder_add_imm_rela
	jmp	.L2222
.L2239:
	cmpl	$1, -56(%rbp)
	je	.L2222
	movl	-56(%rbp), %eax
	movzbl	%al, %ecx
	movq	-408(%rbp), %rax
	movl	$0, %edx
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_add_imm_value
	jmp	.L2222
.L2228:
	leaq	.LC216(%rip), %rax
	movq	%rax, -448(%rbp)
	movq	-440(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$31, %rax
	movq	%rax, -440(%rbp)
	movq	-440(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -440(%rbp)
	movq	-272(%rbp), %rcx
	movq	-448(%rbp), %rax
	movq	-440(%rbp), %rdx
	movq	%rax, %rsi
	movq	%rdx, %rdi
	movq	%rsi, %rdi
	movq	%rdx, %r8
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	movq	%r8, %rsi
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2222:
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
	.section	.rodata, "a"
.LC227:
	.string	"symbol `"
.LC228:
	.string	"` is already defined"
	.text
	.globl	encoder__Encoder_add_section
	.hidden	encoder__Encoder_add_section
encoder__Encoder_add_section:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$696, %rsp
	movq	%rdi, -648(%rbp)
	movq	%rsi, %rax
	movq	%rdx, %rsi
	movq	%rsi, %rdx
	movq	%rax, -672(%rbp)
	movq	%rdx, -664(%rbp)
	movq	%rcx, %rax
	movq	%r8, %rcx
	movq	%rcx, %rdx
	movq	%rax, -688(%rbp)
	movq	%rdx, -680(%rbp)
	movq	-648(%rbp), %rcx
	movq	-672(%rbp), %rax
	movq	-664(%rbp), %rdx
	movq	%rax, 104(%rcx)
	movq	%rdx, 112(%rcx)
	leaq	-336(%rbp), %rdx
	movl	$0, %eax
	movl	$17, %ecx
	movq	%rdx, %rdi
	rep stosq
	movl	$1, -336(%rbp)
	leaq	-328(%rbp), %rax
	movl	$0, %r8d
	movl	$1, %ecx
	movl	$16, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array_with_default
	leaq	.LC30(%rip), %rax
	movq	%rax, -296(%rbp)
	movl	$1, -284(%rbp)
	movq	-688(%rbp), %rax
	movq	-680(%rbp), %rdx
	movq	%rax, -280(%rbp)
	movq	%rdx, -272(%rbp)
	movb	$3, -254(%rbp)
	movq	-672(%rbp), %rax
	movq	-664(%rbp), %rdx
	movq	%rax, -248(%rbp)
	movq	%rdx, -240(%rbp)
	movq	16(%rbp), %rax
	movq	24(%rbp), %rdx
	movq	%rax, -224(%rbp)
	movq	%rdx, -216(%rbp)
	movq	32(%rbp), %rax
	movq	%rax, -208(%rbp)
	leaq	-336(%rbp), %rax
	movl	$136, %esi
	movq	%rax, %rdi
	call	memdup
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, -344(%rbp)
	movq	-648(%rbp), %rax
	leaq	128(%rax), %rdx
	leaq	-344(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	movq	-672(%rbp), %rax
	movq	-664(%rbp), %rdx
	movq	%rax, -480(%rbp)
	movq	%rdx, -472(%rbp)
	movq	-648(%rbp), %rax
	movq	192(%rax), %rcx
	movq	200(%rax), %rbx
	movq	%rcx, -464(%rbp)
	movq	%rbx, -456(%rbp)
	movq	208(%rax), %rcx
	movq	216(%rax), %rbx
	movq	%rcx, -448(%rbp)
	movq	%rbx, -440(%rbp)
	movq	224(%rax), %rcx
	movq	232(%rax), %rbx
	movq	%rcx, -432(%rbp)
	movq	%rbx, -424(%rbp)
	movq	240(%rax), %rcx
	movq	248(%rax), %rbx
	movq	%rcx, -416(%rbp)
	movq	%rbx, -408(%rbp)
	movq	256(%rax), %rcx
	movq	264(%rax), %rbx
	movq	%rcx, -400(%rbp)
	movq	%rbx, -392(%rbp)
	movq	272(%rax), %rcx
	movq	280(%rax), %rbx
	movq	%rcx, -384(%rbp)
	movq	%rbx, -376(%rbp)
	movq	288(%rax), %rcx
	movq	296(%rax), %rbx
	movq	%rcx, -368(%rbp)
	movq	%rbx, -360(%rbp)
	movq	304(%rax), %rax
	movq	%rax, -352(%rbp)
	leaq	-480(%rbp), %rdx
	leaq	-464(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	map_get_check
	movq	%rax, -48(%rbp)
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -528(%rbp)
	movaps	%xmm0, -512(%rbp)
	movaps	%xmm0, -496(%rbp)
	cmpq	$0, -48(%rbp)
	je	.L2243
	leaq	-528(%rbp), %rax
	leaq	40(%rax), %rdx
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, (%rdx)
	jmp	.L2244
.L2243:
	movb	$2, -528(%rbp)
	leaq	.LC211(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$24, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	leaq	-720(%rbp), %rax
	movq	%r12, %rsi
	movq	%r13, %rdi
	movq	%r12, %rcx
	movq	%r13, %rbx
	movq	%rbx, %rdx
	movq	%rax, %rdi
	call	_v_error
	movq	-720(%rbp), %rax
	movq	-712(%rbp), %rdx
	movq	%rax, -520(%rbp)
	movq	%rdx, -512(%rbp)
	movq	-704(%rbp), %rax
	movq	-696(%rbp), %rdx
	movq	%rax, -504(%rbp)
	movq	%rdx, -496(%rbp)
.L2244:
	movzbl	-528(%rbp), %eax
	testb	%al, %al
	jne	.L2245
	leaq	-528(%rbp), %rax
	addq	$40, %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$107, %eax
	jne	.L2247
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -640(%rbp)
	movaps	%xmm0, -624(%rbp)
	movaps	%xmm0, -608(%rbp)
	movaps	%xmm0, -592(%rbp)
	movaps	%xmm0, -576(%rbp)
	leaq	.LC227(%rip), %rax
	movq	%rax, -640(%rbp)
	movl	$8, -632(%rbp)
	movl	$1, -628(%rbp)
	movl	$65040, -624(%rbp)
	movq	-672(%rbp), %rax
	movq	-664(%rbp), %rdx
	movq	%rax, -616(%rbp)
	movq	%rdx, -608(%rbp)
	leaq	.LC228(%rip), %rax
	movq	%rax, -600(%rbp)
	movl	$20, -592(%rbp)
	movl	$1, -588(%rbp)
	leaq	-640(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %rdi
	movq	%rdx, %rsi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rcx
	movq	16(%rbp), %rax
	movq	24(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rcx)
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2245:
	movq	-520(%rbp), %rax
	movq	-512(%rbp), %rdx
	movq	%rax, -640(%rbp)
	movq	%rdx, -632(%rbp)
	movq	-504(%rbp), %rax
	movq	-496(%rbp), %rdx
	movq	%rax, -624(%rbp)
	movq	%rdx, -616(%rbp)
	movq	$0, -552(%rbp)
	movq	-672(%rbp), %rax
	movq	-664(%rbp), %rdx
	movq	%rax, -544(%rbp)
	movq	%rdx, -536(%rbp)
	movq	-648(%rbp), %rax
	leaq	192(%rax), %rcx
	leaq	-552(%rbp), %rdx
	leaq	-544(%rbp), %rax
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	map_get_and_set
	movq	-40(%rbp), %rdx
	movq	%rdx, (%rax)
.L2247:
	nop
	leaq	-24(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%rbp
	ret
	.globl	encoder__Encoder_section
	.hidden	encoder__Encoder_section
encoder__Encoder_section:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$80, %rsp
	movq	%rdi, -72(%rbp)
	movq	-72(%rbp), %rcx
	movq	8(%rcx), %rax
	movq	16(%rcx), %rdx
	movq	%rax, -32(%rbp)
	movq	%rdx, -24(%rbp)
	movq	24(%rcx), %rax
	movq	%rax, -16(%rbp)
	movq	-72(%rbp), %rax
	movq	40(%rax), %rdx
	movq	32(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	%rdx, -40(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, %rdi
	call	encoder__Encoder_next
	movq	-72(%rbp), %rax
	movl	$3, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_expect
	movq	-72(%rbp), %rax
	movq	40(%rax), %rdx
	movq	32(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-72(%rbp), %rax
	movl	$2, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_expect
	movq	-64(%rbp), %r8
	movq	-56(%rbp), %r10
	movq	-48(%rbp), %rsi
	movq	-40(%rbp), %r9
	movq	-72(%rbp), %rdi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rcx
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-16(%rbp), %rax
	movq	%rax, 16(%rcx)
	movq	%r8, %rcx
	movq	%r10, %r8
	movq	%r9, %rdx
	call	encoder__Encoder_add_section
	addq	$32, %rsp
	nop
	leave
	ret
	.globl	encoder__Encoder_zero
	.hidden	encoder__Encoder_zero
encoder__Encoder_zero:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$64, %rsp
	movq	%rdi, -56(%rbp)
	movq	-56(%rbp), %rax
	movl	$12, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_set_current_instr
	leaq	-32(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	encoder__Encoder_parse_operand
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rcx
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-16(%rbp), %rax
	movq	%rax, 16(%rcx)
	call	encoder__eval_expr
	addq	$32, %rsp
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
	jmp	.L2250
.L2251:
	movb	$0, -33(%rbp)
	movq	-56(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-33(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	addl	$1, -4(%rbp)
.L2250:
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jl	.L2251
	nop
	nop
	leave
	ret
	.globl	encoder__Encoder_string
	.hidden	encoder__Encoder_string
encoder__Encoder_string:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$88, %rsp
	movq	%rdi, -56(%rbp)
	movq	-56(%rbp), %rax
	movl	$7, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_set_current_instr
	movq	-56(%rbp), %rax
	movq	40(%rax), %rdx
	movq	32(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-56(%rbp), %rax
	movl	$2, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_expect
	movq	-56(%rbp), %rax
	movq	120(%rax), %rbx
	leaq	-96(%rbp), %rax
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	string_bytes
	movq	-96(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rax, 8(%rbx)
	movq	%rdx, 16(%rbx)
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, 24(%rbx)
	movq	%rdx, 32(%rbx)
	movb	$0, -33(%rbp)
	movq	-56(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-33(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	nop
	movq	-8(%rbp), %rbx
	leave
	ret
	.section	.rodata, "a"
.LC229:
	.string	"invalid operand"
	.text
	.globl	encoder__Encoder_byte
	.hidden	encoder__Encoder_byte
encoder__Encoder_byte:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$232, %rsp
	movq	%rdi, -216(%rbp)
	movq	-216(%rbp), %rax
	movl	$8, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_set_current_instr
	leaq	-64(%rbp), %rax
	movq	-216(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	encoder__Encoder_parse_operand
	leaq	-96(%rbp), %rax
	movl	$0, %r8d
	movl	$16, %ecx
	movl	$0, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array_with_default
	leaq	-96(%rbp), %rsi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rcx
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-48(%rbp), %rax
	movq	%rax, 16(%rcx)
	movq	%rsi, %rdi
	call	encoder__eval_expr_get_symbol
	addq	$32, %rsp
	movl	%eax, -36(%rbp)
	movl	-76(%rbp), %eax
	cmpl	$1, %eax
	jle	.L2254
	leaq	.LC229(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$15, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	-48(%rbp), %rcx
	movq	%r12, %rsi
	movq	%r13, %rdi
	movq	%r12, %rax
	movq	%r13, %rdx
	movq	%rsi, %rdi
	movq	%rdx, %r8
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	movq	%r8, %rsi
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2254:
	movl	-76(%rbp), %eax
	cmpl	$1, %eax
	jne	.L2255
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-96(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$0, %edi
	call	array_get
	addq	$32, %rsp
	movq	8(%rax), %rdx
	movq	(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	%rdx, -200(%rbp)
	movq	-216(%rbp), %rax
	movq	120(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	$0, -184(%rbp)
	movl	$14, %eax
	movq	%rax, -176(%rbp)
	movl	-36(%rbp), %eax
	movl	%eax, -168(%rbp)
	movb	$0, -164(%rbp)
	leaq	-208(%rbp), %rax
	movl	$48, %esi
	movq	%rax, %rdi
	call	memdup
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, -160(%rbp)
	movq	%rbx, -152(%rbp)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, -144(%rbp)
	movq	%rbx, -136(%rbp)
	movq	40(%rax), %rdx
	movq	32(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	%rdx, -120(%rbp)
	movq	-216(%rbp), %rax
	leaq	160(%rax), %rdx
	leaq	-160(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	movb	$0, -97(%rbp)
	movq	-216(%rbp), %rax
	movq	120(%rax), %rbx
	leaq	-256(%rbp), %rax
	leaq	-97(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-256(%rbp), %rax
	movq	-248(%rbp), %rdx
	movq	%rax, 8(%rbx)
	movq	%rdx, 16(%rbx)
	movq	-240(%rbp), %rax
	movq	-232(%rbp), %rdx
	movq	%rax, 24(%rbx)
	movq	%rdx, 32(%rbx)
	jmp	.L2257
.L2255:
	movl	-36(%rbp), %eax
	movb	%al, -98(%rbp)
	movq	-216(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-98(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
.L2257:
	nop
	leaq	-24(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%rbp
	ret
	.globl	encoder__Encoder_word
	.hidden	encoder__Encoder_word
encoder__Encoder_word:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$232, %rsp
	movq	%rdi, -216(%rbp)
	movq	-216(%rbp), %rax
	movl	$9, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_set_current_instr
	leaq	-64(%rbp), %rax
	movq	-216(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	encoder__Encoder_parse_operand
	leaq	-96(%rbp), %rax
	movl	$0, %r8d
	movl	$16, %ecx
	movl	$0, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array_with_default
	leaq	-96(%rbp), %rsi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rcx
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-48(%rbp), %rax
	movq	%rax, 16(%rcx)
	movq	%rsi, %rdi
	call	encoder__eval_expr_get_symbol
	addq	$32, %rsp
	movl	%eax, -36(%rbp)
	movl	-76(%rbp), %eax
	cmpl	$1, %eax
	jle	.L2259
	leaq	.LC229(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$15, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	-48(%rbp), %rcx
	movq	%r12, %rsi
	movq	%r13, %rdi
	movq	%r12, %rax
	movq	%r13, %rdx
	movq	%rsi, %rdi
	movq	%rdx, %r8
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	movq	%r8, %rsi
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2259:
	movl	-76(%rbp), %eax
	cmpl	$1, %eax
	jne	.L2260
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-96(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$0, %edi
	call	array_get
	addq	$32, %rsp
	movq	8(%rax), %rdx
	movq	(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	%rdx, -200(%rbp)
	movq	-216(%rbp), %rax
	movq	120(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	$0, -184(%rbp)
	movl	$12, %eax
	movq	%rax, -176(%rbp)
	movl	-36(%rbp), %eax
	movl	%eax, -168(%rbp)
	movb	$0, -164(%rbp)
	leaq	-208(%rbp), %rax
	movl	$48, %esi
	movq	%rax, %rdi
	call	memdup
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, -160(%rbp)
	movq	%rbx, -152(%rbp)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, -144(%rbp)
	movq	%rbx, -136(%rbp)
	movq	40(%rax), %rdx
	movq	32(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	%rdx, -120(%rbp)
	movq	-216(%rbp), %rax
	leaq	160(%rax), %rdx
	leaq	-160(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	movb	$0, -98(%rbp)
	movb	$0, -97(%rbp)
	movq	-216(%rbp), %rax
	movq	120(%rax), %rbx
	leaq	-256(%rbp), %rax
	leaq	-98(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-256(%rbp), %rax
	movq	-248(%rbp), %rdx
	movq	%rax, 8(%rbx)
	movq	%rdx, 16(%rbx)
	movq	-240(%rbp), %rax
	movq	-232(%rbp), %rdx
	movq	%rax, 24(%rbx)
	movq	%rdx, 32(%rbx)
	jmp	.L2262
.L2260:
	movb	$0, -100(%rbp)
	movb	$0, -99(%rbp)
	leaq	-160(%rbp), %rax
	leaq	-100(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movl	-36(%rbp), %eax
	movzwl	%ax, %edx
	leaq	-160(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	encoding__binary__little_endian_put_u16
	movq	-216(%rbp), %rax
	movq	120(%rax), %rcx
	movq	-160(%rbp), %rax
	movq	-152(%rbp), %rdx
	movq	%rax, 8(%rcx)
	movq	%rdx, 16(%rcx)
	movq	-144(%rbp), %rax
	movq	-136(%rbp), %rdx
	movq	%rax, 24(%rcx)
	movq	%rdx, 32(%rcx)
.L2262:
	nop
	leaq	-24(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%rbp
	ret
	.globl	encoder__Encoder_long
	.hidden	encoder__Encoder_long
encoder__Encoder_long:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$232, %rsp
	movq	%rdi, -216(%rbp)
	movq	-216(%rbp), %rax
	movl	$10, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_set_current_instr
	leaq	-64(%rbp), %rax
	movq	-216(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	encoder__Encoder_parse_operand
	leaq	-96(%rbp), %rax
	movl	$0, %r8d
	movl	$16, %ecx
	movl	$0, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array_with_default
	leaq	-96(%rbp), %rsi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rcx
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-48(%rbp), %rax
	movq	%rax, 16(%rcx)
	movq	%rsi, %rdi
	call	encoder__eval_expr_get_symbol
	addq	$32, %rsp
	movl	%eax, -36(%rbp)
	movl	-76(%rbp), %eax
	cmpl	$1, %eax
	jle	.L2264
	leaq	.LC229(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$15, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	-48(%rbp), %rcx
	movq	%r12, %rsi
	movq	%r13, %rdi
	movq	%r12, %rax
	movq	%r13, %rdx
	movq	%rsi, %rdi
	movq	%rdx, %r8
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	movq	%r8, %rsi
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2264:
	movl	-76(%rbp), %eax
	cmpl	$1, %eax
	jne	.L2265
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-96(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$0, %edi
	call	array_get
	addq	$32, %rsp
	movq	8(%rax), %rdx
	movq	(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	%rdx, -200(%rbp)
	movq	-216(%rbp), %rax
	movq	120(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	$0, -184(%rbp)
	movl	$10, %eax
	movq	%rax, -176(%rbp)
	movl	-36(%rbp), %eax
	movl	%eax, -168(%rbp)
	movb	$0, -164(%rbp)
	leaq	-208(%rbp), %rax
	movl	$48, %esi
	movq	%rax, %rdi
	call	memdup
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, -160(%rbp)
	movq	%rbx, -152(%rbp)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, -144(%rbp)
	movq	%rbx, -136(%rbp)
	movq	40(%rax), %rdx
	movq	32(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	%rdx, -120(%rbp)
	movq	-216(%rbp), %rax
	leaq	160(%rax), %rdx
	leaq	-160(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	movb	$0, -100(%rbp)
	movb	$0, -99(%rbp)
	movb	$0, -98(%rbp)
	movb	$0, -97(%rbp)
	movq	-216(%rbp), %rax
	movq	120(%rax), %rbx
	leaq	-256(%rbp), %rax
	leaq	-100(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$4, %edx
	movl	$4, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-256(%rbp), %rax
	movq	-248(%rbp), %rdx
	movq	%rax, 8(%rbx)
	movq	%rdx, 16(%rbx)
	movq	-240(%rbp), %rax
	movq	-232(%rbp), %rdx
	movq	%rax, 24(%rbx)
	movq	%rdx, 32(%rbx)
	jmp	.L2267
.L2265:
	movb	$0, -104(%rbp)
	movb	$0, -103(%rbp)
	movb	$0, -102(%rbp)
	movb	$0, -101(%rbp)
	leaq	-160(%rbp), %rax
	leaq	-104(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$4, %edx
	movl	$4, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movl	-36(%rbp), %edx
	leaq	-160(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	encoding__binary__little_endian_put_u32
	movq	-216(%rbp), %rax
	movq	120(%rax), %rcx
	movq	-160(%rbp), %rax
	movq	-152(%rbp), %rdx
	movq	%rax, 8(%rcx)
	movq	%rdx, 16(%rcx)
	movq	-144(%rbp), %rax
	movq	-136(%rbp), %rdx
	movq	%rax, 24(%rcx)
	movq	%rdx, 32(%rcx)
.L2267:
	nop
	leaq	-24(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%rbp
	ret
	.globl	encoder__Encoder_quad
	.hidden	encoder__Encoder_quad
encoder__Encoder_quad:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$248, %rsp
	movq	%rdi, -232(%rbp)
	movq	-232(%rbp), %rax
	movl	$11, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_set_current_instr
	leaq	-80(%rbp), %rax
	movq	-232(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	encoder__Encoder_parse_operand
	leaq	-112(%rbp), %rax
	movl	$0, %r8d
	movl	$16, %ecx
	movl	$0, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array_with_default
	leaq	-112(%rbp), %rsi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rcx
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-64(%rbp), %rax
	movq	%rax, 16(%rcx)
	movq	%rsi, %rdi
	call	encoder__eval_expr_get_symbol
	addq	$32, %rsp
	movl	%eax, -36(%rbp)
	movl	-92(%rbp), %eax
	cmpl	$1, %eax
	jle	.L2269
	leaq	.LC229(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$15, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	-64(%rbp), %rcx
	movq	%r12, %rsi
	movq	%r13, %rdi
	movq	%r12, %rax
	movq	%r13, %rdx
	movq	%rsi, %rdi
	movq	%rdx, %r8
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	movq	%r8, %rsi
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2269:
	movl	-92(%rbp), %eax
	cmpl	$1, %eax
	jne	.L2270
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-112(%rbp), %rax
	movq	-104(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-96(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$0, %edi
	call	array_get
	addq	$32, %rsp
	movq	8(%rax), %rdx
	movq	(%rax), %rax
	movq	%rax, -224(%rbp)
	movq	%rdx, -216(%rbp)
	movq	-232(%rbp), %rax
	movq	120(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	$0, -200(%rbp)
	movl	$1, %eax
	movq	%rax, -192(%rbp)
	movl	-36(%rbp), %eax
	movl	%eax, -184(%rbp)
	movb	$0, -180(%rbp)
	leaq	-224(%rbp), %rax
	movl	$48, %esi
	movq	%rax, %rdi
	call	memdup
	movq	%rax, -48(%rbp)
	movq	$0, -120(%rbp)
	movq	-232(%rbp), %rax
	movq	120(%rax), %rbx
	leaq	-272(%rbp), %rax
	leaq	-120(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$8, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-272(%rbp), %rax
	movq	-264(%rbp), %rdx
	movq	%rax, 8(%rbx)
	movq	%rdx, 16(%rbx)
	movq	-256(%rbp), %rax
	movq	-248(%rbp), %rdx
	movq	%rax, 24(%rbx)
	movq	%rdx, 32(%rbx)
	movq	-48(%rbp), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, -176(%rbp)
	movq	%rbx, -168(%rbp)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, -160(%rbp)
	movq	%rbx, -152(%rbp)
	movq	40(%rax), %rdx
	movq	32(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	%rdx, -136(%rbp)
	movq	-232(%rbp), %rax
	leaq	160(%rax), %rdx
	leaq	-176(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	jmp	.L2272
.L2270:
	movq	$0, -128(%rbp)
	leaq	-176(%rbp), %rax
	leaq	-128(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$8, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movl	-36(%rbp), %eax
	movslq	%eax, %rdx
	leaq	-176(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	encoding__binary__little_endian_put_u64
	movq	-232(%rbp), %rax
	movq	120(%rax), %rcx
	movq	-176(%rbp), %rax
	movq	-168(%rbp), %rdx
	movq	%rax, 8(%rcx)
	movq	%rdx, 16(%rcx)
	movq	-160(%rbp), %rax
	movq	-152(%rbp), %rdx
	movq	%rax, 24(%rcx)
	movq	%rdx, 32(%rcx)
.L2272:
	nop
	leaq	-24(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%rbp
	ret
	.section	.rodata, "a"
.LC230:
	.string	"ax"
.LC231:
	.string	".text"
	.text
	.globl	encoder__new
encoder__new:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$728, %rsp
	movq	%rdi, -712(%rbp)
	movq	%rdx, %rcx
	movq	%rsi, %rax
	movq	%rdi, %rdx
	movq	%rcx, %rdx
	movq	%rax, -736(%rbp)
	movq	%rdx, -728(%rbp)
	leaq	-80(%rbp), %rax
	movq	-712(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	lexer__Lexer_lex
	leaq	-224(%rbp), %rdx
	movl	$0, %eax
	movl	$17, %ecx
	movq	%rdx, %rdi
	rep stosq
	movl	$1, -224(%rbp)
	leaq	-216(%rbp), %rax
	movl	$0, %r8d
	movl	$1, %ecx
	movl	$16, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array_with_default
	leaq	.LC30(%rip), %rax
	movq	%rax, -184(%rbp)
	movl	$1, -172(%rbp)
	leaq	.LC230(%rip), %rax
	movq	%rax, -168(%rbp)
	movl	$2, -160(%rbp)
	movl	$1, -156(%rbp)
	movb	$3, -142(%rbp)
	leaq	.LC231(%rip), %rax
	movq	%rax, -136(%rbp)
	movl	$5, -128(%rbp)
	movl	$1, -124(%rbp)
	movq	-72(%rbp), %rax
	movq	-64(%rbp), %rdx
	movq	%rax, -112(%rbp)
	movq	%rdx, -104(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -96(%rbp)
	leaq	-224(%rbp), %rax
	movl	$136, %esi
	movq	%rax, %rdi
	call	memdup
	movq	%rax, -24(%rbp)
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, -688(%rbp)
	movq	%rdx, -680(%rbp)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, -672(%rbp)
	movq	%rdx, -664(%rbp)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, -656(%rbp)
	movq	%rdx, -648(%rbp)
	movq	-712(%rbp), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, -640(%rbp)
	movq	%rbx, -632(%rbp)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, -624(%rbp)
	movq	%rbx, -616(%rbp)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, -608(%rbp)
	movq	%rbx, -600(%rbp)
	movq	48(%rax), %rax
	movq	%rax, -592(%rbp)
	leaq	.LC231(%rip), %rax
	movq	%rax, -584(%rbp)
	movl	$5, -576(%rbp)
	movl	$1, -572(%rbp)
	movq	$0, -568(%rbp)
	leaq	-560(%rbp), %rax
	movl	$0, %r8d
	movl	$8, %ecx
	movl	$1500000, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array_with_default
	leaq	-528(%rbp), %rax
	movl	$48, %ecx
	movl	$0, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array
	movq	-24(%rbp), %rax
	movq	%rax, -248(%rbp)
	leaq	.LC231(%rip), %rax
	movq	%rax, -240(%rbp)
	movl	$5, -232(%rbp)
	movl	$1, -228(%rbp)
	leaq	-496(%rbp), %rax
	leaq	-248(%rbp), %rdx
	pushq	%rdx
	leaq	-240(%rbp), %rdx
	pushq	%rdx
	pushq	$8
	pushq	$16
	movl	$1, %r9d
	leaq	map_free_string(%rip), %r8
	leaq	map_clone_string(%rip), %rdx
	movq	%rdx, %rcx
	leaq	map_eq_string(%rip), %rdx
	leaq	map_hash_string(%rip), %rsi
	movq	%rax, %rdi
	call	new_map_init
	addq	$32, %rsp
	leaq	-376(%rbp), %rax
	subq	$8, %rsp
	leaq	map_free_string(%rip), %rdx
	pushq	%rdx
	leaq	map_clone_string(%rip), %r9
	leaq	map_eq_string(%rip), %r8
	leaq	map_hash_string(%rip), %rdx
	movq	%rdx, %rcx
	movl	$8, %edx
	movl	$16, %esi
	movq	%rax, %rdi
	call	new_map
	addq	$16, %rsp
	leaq	-688(%rbp), %rax
	movl	$432, %esi
	movq	%rax, %rdi
	call	memdup
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, -696(%rbp)
	movq	-32(%rbp), %rax
	leaq	128(%rax), %rdx
	leaq	-696(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	movq	-32(%rbp), %rax
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	encoder__Encoder_set_current_instr
	.hidden	encoder__Encoder_set_current_instr
encoder__Encoder_set_current_instr:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$176, %rsp
	movq	%rdi, -168(%rbp)
	movl	%esi, -172(%rbp)
	leaq	-144(%rbp), %rdx
	movl	$0, %eax
	movl	$17, %ecx
	movq	%rdx, %rdi
	rep stosq
	movl	-172(%rbp), %eax
	movl	%eax, -144(%rbp)
	leaq	-136(%rbp), %rax
	movl	$0, %r8d
	movl	$1, %ecx
	movl	$16, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array_with_default
	leaq	.LC30(%rip), %rax
	movq	%rax, -104(%rbp)
	movl	$1, -92(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -88(%rbp)
	movl	$1, -76(%rbp)
	movq	-168(%rbp), %rax
	movq	112(%rax), %rdx
	movq	104(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	%rdx, -48(%rbp)
	movq	-168(%rbp), %rcx
	movq	8(%rcx), %rax
	movq	16(%rcx), %rdx
	movq	%rax, -32(%rbp)
	movq	%rdx, -24(%rbp)
	movq	24(%rcx), %rax
	movq	%rax, -16(%rbp)
	leaq	-144(%rbp), %rax
	movl	$136, %esi
	movq	%rax, %rdi
	call	memdup
	movq	%rax, -8(%rbp)
	movq	-168(%rbp), %rax
	movq	-8(%rbp), %rdx
	movq	%rdx, 120(%rax)
	movq	-8(%rbp), %rax
	movq	%rax, -152(%rbp)
	movq	-168(%rbp), %rax
	leaq	128(%rax), %rdx
	leaq	-152(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	nop
	leave
	ret
	.globl	encoder__Encoder_next
	.hidden	encoder__Encoder_next
encoder__Encoder_next:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$72, %rsp
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	leaq	48(%rax), %rdx
	movq	-24(%rbp), %rbx
	leaq	-80(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	lexer__Lexer_lex
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, (%rbx)
	movq	%rdx, 8(%rbx)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 16(%rbx)
	movq	%rdx, 24(%rbx)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 32(%rbx)
	movq	%rdx, 40(%rbx)
	nop
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	encoder__Encoder_expect
	.hidden	encoder__Encoder_expect
encoder__Encoder_expect:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$104, %rsp
	movq	%rdi, -104(%rbp)
	movl	%esi, -108(%rbp)
	movq	-104(%rbp), %rax
	movl	(%rax), %eax
	cmpl	%eax, -108(%rbp)
	je	.L2278
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -96(%rbp)
	movaps	%xmm0, -80(%rbp)
	movaps	%xmm0, -64(%rbp)
	movaps	%xmm0, -48(%rbp)
	movaps	%xmm0, -32(%rbp)
	leaq	.LC209(%rip), %rax
	movq	%rax, -96(%rbp)
	movl	$18, -88(%rbp)
	movl	$1, -84(%rbp)
	movl	$65040, -80(%rbp)
	movq	-104(%rbp), %rax
	movq	40(%rax), %rdx
	movq	32(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	%rdx, -64(%rbp)
	leaq	.LC85(%rip), %rax
	movq	%rax, -56(%rbp)
	movl	$1, -48(%rbp)
	movl	$1, -44(%rbp)
	leaq	-96(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %rdi
	movq	%rdx, %r8
	subq	$8, %rsp
	movq	-104(%rbp), %rcx
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	8(%rcx), %rax
	movq	16(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	24(%rcx), %rax
	movq	%rax, 16(%rsi)
	movq	%r8, %rsi
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2278:
	movq	-104(%rbp), %rax
	movq	%rax, %rdi
	call	encoder__Encoder_next
	nop
	movq	-8(%rbp), %rbx
	leave
	ret
	.section	.rodata, "a"
.LC232:
	.string	"RAX"
.LC233:
	.string	"RCX"
.LC234:
	.string	"RDX"
.LC235:
	.string	"RBX"
.LC236:
	.string	"RSP"
.LC237:
	.string	"RBP"
.LC238:
	.string	"RSI"
.LC239:
	.string	"RDI"
.LC240:
	.string	"RIP"
.LC241:
	.string	"R8"
.LC242:
	.string	"R9"
.LC243:
	.string	"R10"
.LC244:
	.string	"R11"
.LC245:
	.string	"R12"
.LC246:
	.string	"R13"
.LC247:
	.string	"R14"
.LC248:
	.string	"R15"
.LC249:
	.string	"EAX"
.LC250:
	.string	"ECX"
.LC251:
	.string	"EDX"
.LC252:
	.string	"EBX"
.LC253:
	.string	"ESP"
.LC254:
	.string	"EBP"
.LC255:
	.string	"ESI"
.LC256:
	.string	"EDI"
.LC257:
	.string	"EIP"
.LC258:
	.string	"R8D"
.LC259:
	.string	"R9D"
.LC260:
	.string	"R10D"
.LC261:
	.string	"R11D"
.LC262:
	.string	"R12D"
.LC263:
	.string	"R13D"
.LC264:
	.string	"R14D"
.LC265:
	.string	"R15D"
.LC266:
	.string	"AX"
.LC267:
	.string	"CX"
.LC268:
	.string	"DX"
.LC269:
	.string	"BX"
.LC270:
	.string	"SP"
.LC271:
	.string	"BP"
.LC272:
	.string	"SI"
.LC273:
	.string	"DI"
.LC274:
	.string	"IP"
.LC275:
	.string	"R8W"
.LC276:
	.string	"R9W"
.LC277:
	.string	"R10W"
.LC278:
	.string	"R11W"
.LC279:
	.string	"R12W"
.LC280:
	.string	"R13W"
.LC281:
	.string	"R14W"
.LC282:
	.string	"R15W"
.LC283:
	.string	"AL"
.LC284:
	.string	"DL"
.LC285:
	.string	"BL"
.LC286:
	.string	"SIL"
.LC287:
	.string	"DIL"
.LC288:
	.string	"SPL"
.LC289:
	.string	"BPL"
.LC290:
	.string	"R8B"
.LC291:
	.string	"R9B"
.LC292:
	.string	"R10B"
.LC293:
	.string	"R11B"
.LC294:
	.string	"R12B"
.LC295:
	.string	"R13B"
.LC296:
	.string	"R14B"
.LC297:
	.string	"R15B"
	.text
	.globl	encoder__regi_size
	.hidden	encoder__regi_size
encoder__regi_size:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$1240, %rsp
	movq	%rdi, -168(%rbp)
	movq	%rdx, %rcx
	movq	%rsi, %rax
	movq	%rdi, %rdx
	movq	%rcx, %rdx
	movq	%rax, -192(%rbp)
	movq	%rdx, -184(%rbp)
	leaq	.LC232(%rip), %r8
	movq	%r9, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, %r9
	movq	%r9, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r9
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	%r8, %rdx
	movq	%r9, %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2280
	leaq	.LC233(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	%r12, %rdx
	movq	%r13, %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2280
	leaq	.LC234(%rip), %r14
	movq	%r15, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, %r15
	movq	%r15, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r15
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	%r14, %rdx
	movq	%r15, %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2280
	leaq	.LC235(%rip), %rax
	movq	%rax, -208(%rbp)
	movq	-200(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -200(%rbp)
	movq	-200(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -200(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-208(%rbp), %rdx
	movq	-200(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2280
	leaq	.LC236(%rip), %rax
	movq	%rax, -224(%rbp)
	movq	-216(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -216(%rbp)
	movq	-216(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -216(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-224(%rbp), %rdx
	movq	-216(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2280
	leaq	.LC237(%rip), %rax
	movq	%rax, -240(%rbp)
	movq	-232(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -232(%rbp)
	movq	-232(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -232(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-240(%rbp), %rdx
	movq	-232(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2280
	leaq	.LC238(%rip), %rax
	movq	%rax, -256(%rbp)
	movq	-248(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -248(%rbp)
	movq	-248(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -248(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-256(%rbp), %rdx
	movq	-248(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2280
	leaq	.LC239(%rip), %rax
	movq	%rax, -272(%rbp)
	movq	-264(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -264(%rbp)
	movq	-264(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -264(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-272(%rbp), %rdx
	movq	-264(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2280
	leaq	.LC240(%rip), %rax
	movq	%rax, -288(%rbp)
	movq	-280(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -280(%rbp)
	movq	-280(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -280(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-288(%rbp), %rdx
	movq	-280(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2280
	leaq	.LC241(%rip), %rax
	movq	%rax, -304(%rbp)
	movq	-296(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, -296(%rbp)
	movq	-296(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -296(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-304(%rbp), %rdx
	movq	-296(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2280
	leaq	.LC242(%rip), %rax
	movq	%rax, -320(%rbp)
	movq	-312(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, -312(%rbp)
	movq	-312(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -312(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-320(%rbp), %rdx
	movq	-312(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2280
	leaq	.LC243(%rip), %rax
	movq	%rax, -336(%rbp)
	movq	-328(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -328(%rbp)
	movq	-328(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -328(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-336(%rbp), %rdx
	movq	-328(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2280
	leaq	.LC244(%rip), %rax
	movq	%rax, -352(%rbp)
	movq	-344(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -344(%rbp)
	movq	-344(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -344(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-352(%rbp), %rdx
	movq	-344(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2280
	leaq	.LC245(%rip), %rax
	movq	%rax, -368(%rbp)
	movq	-360(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -360(%rbp)
	movq	-360(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -360(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-368(%rbp), %rdx
	movq	-360(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2280
	leaq	.LC246(%rip), %rax
	movq	%rax, -384(%rbp)
	movq	-376(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -376(%rbp)
	movq	-376(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -376(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-384(%rbp), %rdx
	movq	-376(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2280
	leaq	.LC247(%rip), %rax
	movq	%rax, -400(%rbp)
	movq	-392(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -392(%rbp)
	movq	-392(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -392(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-400(%rbp), %rdx
	movq	-392(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2280
	leaq	.LC248(%rip), %rax
	movq	%rax, -416(%rbp)
	movq	-408(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -408(%rbp)
	movq	-408(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -408(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-416(%rbp), %rdx
	movq	-408(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2281
.L2280:
	movl	$3, -100(%rbp)
	leaq	-160(%rbp), %rcx
	leaq	-100(%rbp), %rax
	movl	$4, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_option_ok
	movq	-168(%rbp), %rax
	movq	-160(%rbp), %rcx
	movq	-152(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-144(%rbp), %rcx
	movq	-136(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-128(%rbp), %rcx
	movq	-120(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	jmp	.L2279
.L2281:
	leaq	.LC249(%rip), %rax
	movq	%rax, -432(%rbp)
	movq	-424(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -424(%rbp)
	movq	-424(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -424(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-432(%rbp), %rdx
	movq	-424(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2283
	leaq	.LC250(%rip), %rax
	movq	%rax, -448(%rbp)
	movq	-440(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -440(%rbp)
	movq	-440(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -440(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-448(%rbp), %rdx
	movq	-440(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2283
	leaq	.LC251(%rip), %rax
	movq	%rax, -464(%rbp)
	movq	-456(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -456(%rbp)
	movq	-456(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -456(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-464(%rbp), %rdx
	movq	-456(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2283
	leaq	.LC252(%rip), %rax
	movq	%rax, -480(%rbp)
	movq	-472(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -472(%rbp)
	movq	-472(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -472(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-480(%rbp), %rdx
	movq	-472(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2283
	leaq	.LC253(%rip), %rax
	movq	%rax, -496(%rbp)
	movq	-488(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -488(%rbp)
	movq	-488(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -488(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-496(%rbp), %rdx
	movq	-488(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2283
	leaq	.LC254(%rip), %rax
	movq	%rax, -512(%rbp)
	movq	-504(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -504(%rbp)
	movq	-504(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -504(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-512(%rbp), %rdx
	movq	-504(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2283
	leaq	.LC255(%rip), %rax
	movq	%rax, -528(%rbp)
	movq	-520(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -520(%rbp)
	movq	-520(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -520(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-528(%rbp), %rdx
	movq	-520(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2283
	leaq	.LC256(%rip), %rax
	movq	%rax, -544(%rbp)
	movq	-536(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -536(%rbp)
	movq	-536(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -536(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-544(%rbp), %rdx
	movq	-536(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2283
	leaq	.LC257(%rip), %rax
	movq	%rax, -560(%rbp)
	movq	-552(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -552(%rbp)
	movq	-552(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -552(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-560(%rbp), %rdx
	movq	-552(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2283
	leaq	.LC258(%rip), %rax
	movq	%rax, -576(%rbp)
	movq	-568(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -568(%rbp)
	movq	-568(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -568(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-576(%rbp), %rdx
	movq	-568(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2283
	leaq	.LC259(%rip), %rax
	movq	%rax, -592(%rbp)
	movq	-584(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -584(%rbp)
	movq	-584(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -584(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-592(%rbp), %rdx
	movq	-584(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2283
	leaq	.LC260(%rip), %rax
	movq	%rax, -608(%rbp)
	movq	-600(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -600(%rbp)
	movq	-600(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -600(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-608(%rbp), %rdx
	movq	-600(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2283
	leaq	.LC261(%rip), %rax
	movq	%rax, -624(%rbp)
	movq	-616(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -616(%rbp)
	movq	-616(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -616(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-624(%rbp), %rdx
	movq	-616(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2283
	leaq	.LC262(%rip), %rax
	movq	%rax, -640(%rbp)
	movq	-632(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -632(%rbp)
	movq	-632(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -632(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-640(%rbp), %rdx
	movq	-632(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2283
	leaq	.LC263(%rip), %rax
	movq	%rax, -656(%rbp)
	movq	-648(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -648(%rbp)
	movq	-648(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -648(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-656(%rbp), %rdx
	movq	-648(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2283
	leaq	.LC264(%rip), %rax
	movq	%rax, -672(%rbp)
	movq	-664(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -664(%rbp)
	movq	-664(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -664(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-672(%rbp), %rdx
	movq	-664(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2283
	leaq	.LC265(%rip), %rax
	movq	%rax, -688(%rbp)
	movq	-680(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -680(%rbp)
	movq	-680(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -680(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-688(%rbp), %rdx
	movq	-680(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2284
.L2283:
	movl	$2, -104(%rbp)
	leaq	-160(%rbp), %rcx
	leaq	-104(%rbp), %rax
	movl	$4, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_option_ok
	movq	-168(%rbp), %rax
	movq	-160(%rbp), %rcx
	movq	-152(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-144(%rbp), %rcx
	movq	-136(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-128(%rbp), %rcx
	movq	-120(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	jmp	.L2279
.L2284:
	leaq	.LC266(%rip), %rax
	movq	%rax, -704(%rbp)
	movq	-696(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, -696(%rbp)
	movq	-696(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -696(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-704(%rbp), %rdx
	movq	-696(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2285
	leaq	.LC267(%rip), %rax
	movq	%rax, -720(%rbp)
	movq	-712(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, -712(%rbp)
	movq	-712(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -712(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-720(%rbp), %rdx
	movq	-712(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2285
	leaq	.LC268(%rip), %rax
	movq	%rax, -736(%rbp)
	movq	-728(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, -728(%rbp)
	movq	-728(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -728(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-736(%rbp), %rdx
	movq	-728(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2285
	leaq	.LC269(%rip), %rax
	movq	%rax, -752(%rbp)
	movq	-744(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, -744(%rbp)
	movq	-744(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -744(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-752(%rbp), %rdx
	movq	-744(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2285
	leaq	.LC270(%rip), %rax
	movq	%rax, -768(%rbp)
	movq	-760(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, -760(%rbp)
	movq	-760(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -760(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-768(%rbp), %rdx
	movq	-760(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2285
	leaq	.LC271(%rip), %rax
	movq	%rax, -784(%rbp)
	movq	-776(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, -776(%rbp)
	movq	-776(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -776(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-784(%rbp), %rdx
	movq	-776(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2285
	leaq	.LC272(%rip), %rax
	movq	%rax, -800(%rbp)
	movq	-792(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, -792(%rbp)
	movq	-792(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -792(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-800(%rbp), %rdx
	movq	-792(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2285
	leaq	.LC273(%rip), %rax
	movq	%rax, -816(%rbp)
	movq	-808(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, -808(%rbp)
	movq	-808(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -808(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-816(%rbp), %rdx
	movq	-808(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2285
	leaq	.LC274(%rip), %rax
	movq	%rax, -832(%rbp)
	movq	-824(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, -824(%rbp)
	movq	-824(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -824(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-832(%rbp), %rdx
	movq	-824(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2285
	leaq	.LC275(%rip), %rax
	movq	%rax, -848(%rbp)
	movq	-840(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -840(%rbp)
	movq	-840(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -840(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-848(%rbp), %rdx
	movq	-840(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2285
	leaq	.LC276(%rip), %rax
	movq	%rax, -864(%rbp)
	movq	-856(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -856(%rbp)
	movq	-856(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -856(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-864(%rbp), %rdx
	movq	-856(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2285
	leaq	.LC277(%rip), %rax
	movq	%rax, -880(%rbp)
	movq	-872(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -872(%rbp)
	movq	-872(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -872(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-880(%rbp), %rdx
	movq	-872(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2285
	leaq	.LC278(%rip), %rax
	movq	%rax, -896(%rbp)
	movq	-888(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -888(%rbp)
	movq	-888(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -888(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-896(%rbp), %rdx
	movq	-888(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2285
	leaq	.LC279(%rip), %rax
	movq	%rax, -912(%rbp)
	movq	-904(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -904(%rbp)
	movq	-904(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -904(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-912(%rbp), %rdx
	movq	-904(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2285
	leaq	.LC280(%rip), %rax
	movq	%rax, -928(%rbp)
	movq	-920(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -920(%rbp)
	movq	-920(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -920(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-928(%rbp), %rdx
	movq	-920(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2285
	leaq	.LC281(%rip), %rax
	movq	%rax, -944(%rbp)
	movq	-936(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -936(%rbp)
	movq	-936(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -936(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-944(%rbp), %rdx
	movq	-936(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2285
	leaq	.LC282(%rip), %rax
	movq	%rax, -960(%rbp)
	movq	-952(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -952(%rbp)
	movq	-952(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -952(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-960(%rbp), %rdx
	movq	-952(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2286
.L2285:
	movl	$1, -108(%rbp)
	leaq	-160(%rbp), %rcx
	leaq	-108(%rbp), %rax
	movl	$4, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_option_ok
	movq	-168(%rbp), %rax
	movq	-160(%rbp), %rcx
	movq	-152(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-144(%rbp), %rcx
	movq	-136(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-128(%rbp), %rcx
	movq	-120(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	jmp	.L2279
.L2286:
	leaq	.LC283(%rip), %rax
	movq	%rax, -976(%rbp)
	movq	-968(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, -968(%rbp)
	movq	-968(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -968(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-976(%rbp), %rdx
	movq	-968(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2287
	leaq	.LC226(%rip), %rax
	movq	%rax, -992(%rbp)
	movq	-984(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, -984(%rbp)
	movq	-984(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -984(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-992(%rbp), %rdx
	movq	-984(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2287
	leaq	.LC284(%rip), %rax
	movq	%rax, -1008(%rbp)
	movq	-1000(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, -1000(%rbp)
	movq	-1000(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -1000(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-1008(%rbp), %rdx
	movq	-1000(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2287
	leaq	.LC285(%rip), %rax
	movq	%rax, -1024(%rbp)
	movq	-1016(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, -1016(%rbp)
	movq	-1016(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -1016(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-1024(%rbp), %rdx
	movq	-1016(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2287
	leaq	.LC220(%rip), %rax
	movq	%rax, -1040(%rbp)
	movq	-1032(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, -1032(%rbp)
	movq	-1032(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -1032(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-1040(%rbp), %rdx
	movq	-1032(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2287
	leaq	.LC221(%rip), %rax
	movq	%rax, -1056(%rbp)
	movq	-1048(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, -1048(%rbp)
	movq	-1048(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -1048(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-1056(%rbp), %rdx
	movq	-1048(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2287
	leaq	.LC222(%rip), %rax
	movq	%rax, -1072(%rbp)
	movq	-1064(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, -1064(%rbp)
	movq	-1064(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -1064(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-1072(%rbp), %rdx
	movq	-1064(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2287
	leaq	.LC223(%rip), %rax
	movq	%rax, -1088(%rbp)
	movq	-1080(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, -1080(%rbp)
	movq	-1080(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -1080(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-1088(%rbp), %rdx
	movq	-1080(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2287
	leaq	.LC286(%rip), %rax
	movq	%rax, -1104(%rbp)
	movq	-1096(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -1096(%rbp)
	movq	-1096(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -1096(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-1104(%rbp), %rdx
	movq	-1096(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2287
	leaq	.LC287(%rip), %rax
	movq	%rax, -1120(%rbp)
	movq	-1112(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -1112(%rbp)
	movq	-1112(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -1112(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-1120(%rbp), %rdx
	movq	-1112(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2287
	leaq	.LC288(%rip), %rax
	movq	%rax, -1136(%rbp)
	movq	-1128(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -1128(%rbp)
	movq	-1128(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -1128(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-1136(%rbp), %rdx
	movq	-1128(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2287
	leaq	.LC289(%rip), %rax
	movq	%rax, -1152(%rbp)
	movq	-1144(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -1144(%rbp)
	movq	-1144(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -1144(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-1152(%rbp), %rdx
	movq	-1144(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2287
	leaq	.LC290(%rip), %rax
	movq	%rax, -1168(%rbp)
	movq	-1160(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -1160(%rbp)
	movq	-1160(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -1160(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-1168(%rbp), %rdx
	movq	-1160(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2287
	leaq	.LC291(%rip), %rax
	movq	%rax, -1184(%rbp)
	movq	-1176(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -1176(%rbp)
	movq	-1176(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -1176(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-1184(%rbp), %rdx
	movq	-1176(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2287
	leaq	.LC292(%rip), %rax
	movq	%rax, -1200(%rbp)
	movq	-1192(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -1192(%rbp)
	movq	-1192(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -1192(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-1200(%rbp), %rdx
	movq	-1192(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2287
	leaq	.LC293(%rip), %rax
	movq	%rax, -1216(%rbp)
	movq	-1208(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -1208(%rbp)
	movq	-1208(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -1208(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-1216(%rbp), %rdx
	movq	-1208(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2287
	leaq	.LC294(%rip), %rax
	movq	%rax, -1232(%rbp)
	movq	-1224(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -1224(%rbp)
	movq	-1224(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -1224(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-1232(%rbp), %rdx
	movq	-1224(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2287
	leaq	.LC295(%rip), %rax
	movq	%rax, -1248(%rbp)
	movq	-1240(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -1240(%rbp)
	movq	-1240(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -1240(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-1248(%rbp), %rdx
	movq	-1240(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2287
	leaq	.LC296(%rip), %rax
	movq	%rax, -1264(%rbp)
	movq	-1256(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -1256(%rbp)
	movq	-1256(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -1256(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-1264(%rbp), %rdx
	movq	-1256(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2287
	leaq	.LC297(%rip), %rax
	movq	%rax, -1280(%rbp)
	movq	-1272(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -1272(%rbp)
	movq	-1272(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -1272(%rbp)
	movq	-192(%rbp), %rsi
	movq	-184(%rbp), %rax
	movq	-1280(%rbp), %rdx
	movq	-1272(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2288
.L2287:
	movl	$0, -112(%rbp)
	leaq	-160(%rbp), %rcx
	leaq	-112(%rbp), %rax
	movl	$4, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_option_ok
	movq	-168(%rbp), %rax
	movq	-160(%rbp), %rcx
	movq	-152(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-144(%rbp), %rcx
	movq	-136(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-128(%rbp), %rcx
	movq	-120(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	jmp	.L2279
.L2288:
	movq	-168(%rbp), %rax
	pxor	%xmm0, %xmm0
	movups	%xmm0, (%rax)
	movups	%xmm0, 16(%rax)
	movups	%xmm0, 32(%rax)
	movq	-168(%rbp), %rax
	movb	$2, (%rax)
	movq	-168(%rbp), %rcx
	movq	_const_none__(%rip), %rax
	movq	8+_const_none__(%rip), %rdx
	movq	%rax, 8(%rcx)
	movq	%rdx, 16(%rcx)
	movq	16+_const_none__(%rip), %rax
	movq	24+_const_none__(%rip), %rdx
	movq	%rax, 24(%rcx)
	movq	%rdx, 32(%rcx)
.L2279:
	movq	-168(%rbp), %rax
	addq	$1240, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
	.section	.rodata, "a"
.LC298:
	.string	"invalid register name `"
	.text
	.globl	encoder__Encoder_parse_register
	.hidden	encoder__Encoder_parse_register
encoder__Encoder_parse_register:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$328, %rsp
	movq	%rdi, -328(%rbp)
	movq	%rsi, -336(%rbp)
	movq	-336(%rbp), %rax
	movl	$11, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_expect
	movq	-336(%rbp), %rcx
	movq	8(%rcx), %rax
	movq	16(%rcx), %rdx
	movq	%rax, -48(%rbp)
	movq	%rdx, -40(%rbp)
	movq	24(%rcx), %rax
	movq	%rax, -32(%rbp)
	movq	-336(%rbp), %rax
	movq	32(%rax), %rdx
	movq	40(%rax), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	string_to_upper
	movq	%rax, -64(%rbp)
	movq	%rdx, -56(%rbp)
	leaq	-112(%rbp), %rax
	movq	-64(%rbp), %rcx
	movq	-56(%rbp), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	encoder__regi_size
	movzbl	-112(%rbp), %eax
	testb	%al, %al
	je	.L2291
	movq	-104(%rbp), %rax
	movq	-96(%rbp), %rdx
	movq	%rax, -320(%rbp)
	movq	%rdx, -312(%rbp)
	movq	-88(%rbp), %rax
	movq	-80(%rbp), %rdx
	movq	%rax, -304(%rbp)
	movq	%rdx, -296(%rbp)
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -288(%rbp)
	movaps	%xmm0, -272(%rbp)
	movaps	%xmm0, -256(%rbp)
	movaps	%xmm0, -240(%rbp)
	movaps	%xmm0, -224(%rbp)
	leaq	.LC298(%rip), %rax
	movq	%rax, -288(%rbp)
	movl	$23, -280(%rbp)
	movl	$1, -276(%rbp)
	movl	$65040, -272(%rbp)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, -264(%rbp)
	movq	%rdx, -256(%rbp)
	leaq	.LC85(%rip), %rax
	movq	%rax, -248(%rbp)
	movl	$1, -240(%rbp)
	movl	$1, -236(%rbp)
	leaq	-288(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %rdi
	movq	%rdx, %r8
	subq	$8, %rsp
	movq	-336(%rbp), %rcx
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	8(%rcx), %rax
	movq	16(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	24(%rcx), %rax
	movq	%rax, 16(%rsi)
	movq	%r8, %rsi
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2291:
	leaq	-112(%rbp), %rax
	addq	$40, %rax
	movl	(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	-336(%rbp), %rax
	movq	%rax, %rdi
	call	encoder__Encoder_next
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, -160(%rbp)
	movq	%rdx, -152(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, -144(%rbp)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, -136(%rbp)
	movq	%rdx, -128(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, -120(%rbp)
	movq	-328(%rbp), %rax
	movq	-160(%rbp), %rcx
	movq	-152(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-144(%rbp), %rcx
	movq	-136(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-128(%rbp), %rcx
	movq	-120(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	movq	-328(%rbp), %rax
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	encoder__Encoder_parse_factor
	.hidden	encoder__Encoder_parse_factor
encoder__Encoder_parse_factor:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$296, %rsp
	movq	%rdi, -296(%rbp)
	movq	%rsi, -304(%rbp)
	movq	-304(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1, %eax
	jne	.L2294
	movq	-304(%rbp), %rax
	movq	40(%rax), %rdx
	movq	32(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-304(%rbp), %rax
	movq	%rax, %rdi
	call	encoder__Encoder_next
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, -288(%rbp)
	movq	%rdx, -280(%rbp)
	movq	-304(%rbp), %rcx
	movq	8(%rcx), %rax
	movq	16(%rcx), %rdx
	movq	%rax, -272(%rbp)
	movq	%rdx, -264(%rbp)
	movq	24(%rcx), %rax
	movq	%rax, -256(%rbp)
	leaq	-96(%rbp), %rax
	leaq	-288(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	encoder__Number_to_sumtype_encoder__Expr
	movq	-296(%rbp), %rcx
	movq	-96(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-80(%rbp), %rax
	movq	%rax, 16(%rcx)
	jmp	.L2293
.L2294:
	movq	-304(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	jne	.L2296
	movq	-304(%rbp), %rax
	movq	40(%rax), %rdx
	movq	32(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	%rdx, -104(%rbp)
	movq	-304(%rbp), %rax
	movq	%rax, %rdi
	call	encoder__Encoder_next
	movq	-112(%rbp), %rax
	movq	-104(%rbp), %rdx
	movq	%rax, -288(%rbp)
	movq	%rdx, -280(%rbp)
	movq	-304(%rbp), %rcx
	movq	8(%rcx), %rax
	movq	16(%rcx), %rdx
	movq	%rax, -272(%rbp)
	movq	%rdx, -264(%rbp)
	movq	24(%rcx), %rax
	movq	%rax, -256(%rbp)
	leaq	-144(%rbp), %rax
	leaq	-288(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	encoder__Ident_to_sumtype_encoder__Expr
	movq	-296(%rbp), %rcx
	movq	-144(%rbp), %rax
	movq	-136(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-128(%rbp), %rax
	movq	%rax, 16(%rcx)
	jmp	.L2293
.L2296:
	movq	-304(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$8, %eax
	jne	.L2297
	movq	-304(%rbp), %rax
	movq	%rax, %rdi
	call	encoder__Encoder_next
	leaq	-176(%rbp), %rax
	movq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	encoder__Encoder_parse_factor
	movq	-176(%rbp), %rax
	movq	-168(%rbp), %rdx
	movq	%rax, -288(%rbp)
	movq	%rdx, -280(%rbp)
	movq	-160(%rbp), %rax
	movq	%rax, -272(%rbp)
	movq	-304(%rbp), %rcx
	movq	8(%rcx), %rax
	movq	16(%rcx), %rdx
	movq	%rax, -264(%rbp)
	movq	%rdx, -256(%rbp)
	movq	24(%rcx), %rax
	movq	%rax, -248(%rbp)
	leaq	-208(%rbp), %rax
	leaq	-288(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	encoder__Neg_to_sumtype_encoder__Expr
	movq	-296(%rbp), %rcx
	movq	-208(%rbp), %rax
	movq	-200(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-192(%rbp), %rax
	movq	%rax, 16(%rcx)
	jmp	.L2293
.L2297:
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -288(%rbp)
	movaps	%xmm0, -272(%rbp)
	movaps	%xmm0, -256(%rbp)
	movaps	%xmm0, -240(%rbp)
	movaps	%xmm0, -224(%rbp)
	leaq	.LC209(%rip), %rax
	movq	%rax, -288(%rbp)
	movl	$18, -280(%rbp)
	movl	$1, -276(%rbp)
	movl	$65040, -272(%rbp)
	movq	-304(%rbp), %rax
	movq	40(%rax), %rdx
	movq	32(%rax), %rax
	movq	%rax, -264(%rbp)
	movq	%rdx, -256(%rbp)
	leaq	.LC85(%rip), %rax
	movq	%rax, -248(%rbp)
	movl	$1, -240(%rbp)
	movl	$1, -236(%rbp)
	leaq	-288(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %rdi
	movq	%rdx, %r8
	subq	$8, %rsp
	movq	-304(%rbp), %rcx
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	8(%rcx), %rax
	movq	16(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	24(%rcx), %rax
	movq	%rax, 16(%rsi)
	movq	%r8, %rsi
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2293:
	movq	-296(%rbp), %rax
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	encoder__Encoder_parse_expr
	.hidden	encoder__Encoder_parse_expr
encoder__Encoder_parse_expr:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$224, %rsp
	movq	%rdi, -216(%rbp)
	movq	%rsi, -224(%rbp)
	leaq	-32(%rbp), %rax
	movq	-224(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	encoder__Encoder_parse_factor
	movq	-224(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$7, %eax
	je	.L2300
	movq	-224(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$8, %eax
	je	.L2300
	movq	-224(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$9, %eax
	je	.L2300
	movq	-224(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$10, %eax
	jne	.L2301
.L2300:
	movq	-224(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-224(%rbp), %rcx
	movq	8(%rcx), %rax
	movq	16(%rcx), %rdx
	movq	%rax, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movq	24(%rcx), %rax
	movq	%rax, -48(%rbp)
	movq	-224(%rbp), %rax
	movq	%rax, %rdi
	call	encoder__Encoder_next
	leaq	-96(%rbp), %rax
	movq	-224(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	encoder__Encoder_parse_expr
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdx
	movq	%rax, -208(%rbp)
	movq	%rdx, -200(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, -192(%rbp)
	movq	-96(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rax, -184(%rbp)
	movq	%rdx, -176(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, -168(%rbp)
	movl	-4(%rbp), %eax
	movl	%eax, -160(%rbp)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, -152(%rbp)
	movq	%rdx, -144(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -136(%rbp)
	leaq	-128(%rbp), %rax
	leaq	-208(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	encoder__Binop_to_sumtype_encoder__Expr
	movq	-216(%rbp), %rcx
	movq	-128(%rbp), %rax
	movq	-120(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-112(%rbp), %rax
	movq	%rax, 16(%rcx)
	jmp	.L2299
.L2301:
	movq	-216(%rbp), %rcx
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-16(%rbp), %rax
	movq	%rax, 16(%rcx)
.L2299:
	movq	-216(%rbp), %rax
	leave
	ret
	.globl	encoder__Encoder_parse_two_operand
	.hidden	encoder__Encoder_parse_two_operand
encoder__Encoder_parse_two_operand:
	pushq	%rbp
	movq	%rsp, %rbp
	addq	$-128, %rsp
	movq	%rdi, -120(%rbp)
	movq	%rsi, -128(%rbp)
	leaq	-32(%rbp), %rax
	movq	-128(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	encoder__Encoder_parse_operand
	movq	-128(%rbp), %rax
	movl	$3, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_expect
	leaq	-64(%rbp), %rax
	movq	-128(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	encoder__Encoder_parse_operand
	movq	-120(%rbp), %rcx
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-16(%rbp), %rax
	movq	%rax, 16(%rcx)
	movq	-120(%rbp), %rcx
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 24(%rcx)
	movq	%rdx, 32(%rcx)
	movq	-48(%rbp), %rax
	movq	%rax, 40(%rcx)
	movq	-120(%rbp), %rax
	leave
	ret
	.section	.rodata, "a"
.LC299:
	.string	"XMM"
.LC300:
	.string	"1"
	.text
	.globl	encoder__Encoder_parse_operand
	.hidden	encoder__Encoder_parse_operand
encoder__Encoder_parse_operand:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$760, %rsp
	movq	%rdi, -728(%rbp)
	movq	%rsi, -736(%rbp)
	movq	-736(%rbp), %rcx
	movq	8(%rcx), %rax
	movq	16(%rcx), %rdx
	movq	%rax, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movq	24(%rcx), %rax
	movq	%rax, -48(%rbp)
	movq	-736(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$12, %eax
	jne	.L2307
	movq	-736(%rbp), %rax
	movq	%rax, %rdi
	call	encoder__Encoder_next
	leaq	-624(%rbp), %rax
	movq	-736(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	encoder__Encoder_parse_expr
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, -600(%rbp)
	movq	%rdx, -592(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -584(%rbp)
	leaq	-208(%rbp), %rax
	leaq	-624(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	encoder__Immediate_to_sumtype_encoder__Expr
	movq	-728(%rbp), %rcx
	movq	-208(%rbp), %rax
	movq	-200(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-192(%rbp), %rax
	movq	%rax, 16(%rcx)
	jmp	.L2308
.L2307:
	movq	-736(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$11, %eax
	jne	.L2309
	movq	-736(%rbp), %rax
	movl	$11, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_expect
	movq	-736(%rbp), %rax
	movq	32(%rax), %rdx
	movq	40(%rax), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	string_to_upper
	movq	%rax, -224(%rbp)
	movq	%rdx, -216(%rbp)
	movq	-736(%rbp), %rax
	movq	%rax, %rdi
	call	encoder__Encoder_next
	leaq	.LC299(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	-224(%rbp), %rsi
	movq	-216(%rbp), %rax
	movq	%r12, %rdx
	movq	%r13, %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string_starts_with
	testb	%al, %al
	je	.L2310
	movq	-224(%rbp), %rax
	movq	-216(%rbp), %rdx
	movq	%rax, -624(%rbp)
	movq	%rdx, -616(%rbp)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, -608(%rbp)
	movq	%rdx, -600(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -592(%rbp)
	leaq	-256(%rbp), %rax
	leaq	-624(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	encoder__Xmm_to_sumtype_encoder__Expr
	movq	-728(%rbp), %rcx
	movq	-256(%rbp), %rax
	movq	-248(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-240(%rbp), %rax
	movq	%rax, 16(%rcx)
	jmp	.L2308
.L2310:
	leaq	-672(%rbp), %rax
	movq	-224(%rbp), %rcx
	movq	-216(%rbp), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	encoder__regi_size
	movzbl	-672(%rbp), %eax
	testb	%al, %al
	je	.L2312
	movq	-664(%rbp), %rax
	movq	-656(%rbp), %rdx
	movq	%rax, -720(%rbp)
	movq	%rdx, -712(%rbp)
	movq	-648(%rbp), %rax
	movq	-640(%rbp), %rdx
	movq	%rax, -704(%rbp)
	movq	%rdx, -696(%rbp)
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -624(%rbp)
	movaps	%xmm0, -608(%rbp)
	movaps	%xmm0, -592(%rbp)
	movaps	%xmm0, -576(%rbp)
	movaps	%xmm0, -560(%rbp)
	leaq	.LC298(%rip), %rax
	movq	%rax, -624(%rbp)
	movl	$23, -616(%rbp)
	movl	$1, -612(%rbp)
	movl	$65040, -608(%rbp)
	movq	-224(%rbp), %rax
	movq	-216(%rbp), %rdx
	movq	%rax, -600(%rbp)
	movq	%rdx, -592(%rbp)
	leaq	.LC85(%rip), %rax
	movq	%rax, -584(%rbp)
	movl	$1, -576(%rbp)
	movl	$1, -572(%rbp)
	leaq	-624(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %rdi
	movq	%rdx, %r8
	subq	$8, %rsp
	movq	-736(%rbp), %rcx
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	8(%rcx), %rax
	movq	16(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	24(%rcx), %rax
	movq	%rax, 16(%rsi)
	movq	%r8, %rsi
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2312:
	leaq	-672(%rbp), %rax
	addq	$40, %rax
	movl	(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-224(%rbp), %rax
	movq	-216(%rbp), %rdx
	movq	%rax, -624(%rbp)
	movq	%rdx, -616(%rbp)
	movl	-36(%rbp), %eax
	movl	%eax, -608(%rbp)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, -600(%rbp)
	movq	%rdx, -592(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -584(%rbp)
	leaq	-288(%rbp), %rax
	leaq	-624(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	encoder__Register_to_sumtype_encoder__Expr
	movq	-728(%rbp), %rcx
	movq	-288(%rbp), %rax
	movq	-280(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-272(%rbp), %rax
	movq	%rax, 16(%rcx)
	jmp	.L2308
.L2309:
	movq	-736(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$9, %eax
	jne	.L2313
	movq	-736(%rbp), %rax
	movl	$9, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_expect
	leaq	-672(%rbp), %rax
	movq	-736(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	encoder__Encoder_parse_register
	movq	-672(%rbp), %rax
	movq	-664(%rbp), %rdx
	movq	%rax, -624(%rbp)
	movq	%rdx, -616(%rbp)
	movq	-656(%rbp), %rax
	movq	-648(%rbp), %rdx
	movq	%rax, -608(%rbp)
	movq	%rdx, -600(%rbp)
	movq	-640(%rbp), %rax
	movq	-632(%rbp), %rdx
	movq	%rax, -592(%rbp)
	movq	%rdx, -584(%rbp)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, -576(%rbp)
	movq	%rdx, -568(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -560(%rbp)
	leaq	-320(%rbp), %rax
	leaq	-624(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	encoder__Star_to_sumtype_encoder__Expr
	movq	-728(%rbp), %rcx
	movq	-320(%rbp), %rax
	movq	-312(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-304(%rbp), %rax
	movq	%rax, 16(%rcx)
	jmp	.L2308
.L2313:
	movq	-736(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$5, %eax
	jne	.L2314
	leaq	.LC39(%rip), %rax
	movq	%rax, -720(%rbp)
	movl	$1, -712(%rbp)
	movl	$1, -708(%rbp)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, -704(%rbp)
	movq	%rdx, -696(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -688(%rbp)
	leaq	-352(%rbp), %rax
	leaq	-720(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	encoder__Number_to_sumtype_encoder__Expr
	jmp	.L2315
.L2314:
	leaq	-352(%rbp), %rax
	movq	-736(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	encoder__Encoder_parse_expr
.L2315:
	movq	-736(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$5, %eax
	je	.L2316
	movq	-728(%rbp), %rcx
	movq	-352(%rbp), %rax
	movq	-344(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-336(%rbp), %rax
	movq	%rax, 16(%rcx)
	jmp	.L2308
.L2316:
	movq	-736(%rbp), %rax
	movq	%rax, %rdi
	call	encoder__Encoder_next
	leaq	-624(%rbp), %rdx
	movl	$0, %eax
	movl	$22, %ecx
	movq	%rdx, %rdi
	rep stosq
	movq	-352(%rbp), %rax
	movq	-344(%rbp), %rdx
	movq	%rax, -624(%rbp)
	movq	%rdx, -616(%rbp)
	movq	-336(%rbp), %rax
	movq	%rax, -608(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -600(%rbp)
	movl	$1, -588(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -576(%rbp)
	movl	$1, -564(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -552(%rbp)
	movl	$1, -540(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -528(%rbp)
	movl	$1, -516(%rbp)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, -480(%rbp)
	movq	%rdx, -472(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -464(%rbp)
	movq	-736(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$3, %eax
	je	.L2318
	movb	$1, -456(%rbp)
	leaq	-784(%rbp), %rax
	movq	-736(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	encoder__Encoder_parse_register
	movq	-784(%rbp), %rax
	movq	-776(%rbp), %rdx
	movq	%rax, -600(%rbp)
	movq	%rdx, -592(%rbp)
	movq	-768(%rbp), %rax
	movq	-760(%rbp), %rdx
	movq	%rax, -584(%rbp)
	movq	%rdx, -576(%rbp)
	movq	-752(%rbp), %rax
	movq	-744(%rbp), %rdx
	movq	%rax, -568(%rbp)
	movq	%rdx, -560(%rbp)
.L2318:
	movq	-736(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$3, %eax
	jne	.L2319
	movb	$1, -455(%rbp)
	movq	-736(%rbp), %rax
	movq	%rax, %rdi
	call	encoder__Encoder_next
	leaq	-784(%rbp), %rax
	movq	-736(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	encoder__Encoder_parse_register
	movq	-784(%rbp), %rax
	movq	-776(%rbp), %rdx
	movq	%rax, -552(%rbp)
	movq	%rdx, -544(%rbp)
	movq	-768(%rbp), %rax
	movq	-760(%rbp), %rdx
	movq	%rax, -536(%rbp)
	movq	%rdx, -528(%rbp)
	movq	-752(%rbp), %rax
	movq	-744(%rbp), %rdx
	movq	%rax, -520(%rbp)
	movq	%rdx, -512(%rbp)
	movq	-736(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$3, %eax
	jne	.L2320
	movq	-736(%rbp), %rax
	movl	$3, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_expect
	leaq	-448(%rbp), %rax
	movq	-736(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	encoder__Encoder_parse_expr
	jmp	.L2321
.L2320:
	leaq	.LC300(%rip), %rax
	movq	%rax, -672(%rbp)
	movl	$1, -664(%rbp)
	movl	$1, -660(%rbp)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, -656(%rbp)
	movq	%rdx, -648(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -640(%rbp)
	leaq	-784(%rbp), %rax
	leaq	-672(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	encoder__Number_to_sumtype_encoder__Expr
	movq	-784(%rbp), %rax
	movq	-776(%rbp), %rdx
	movq	%rax, -448(%rbp)
	movq	%rdx, -440(%rbp)
	movq	-768(%rbp), %rax
	movq	%rax, -432(%rbp)
.L2321:
	movq	-448(%rbp), %rax
	movq	-440(%rbp), %rdx
	movq	%rax, -504(%rbp)
	movq	%rdx, -496(%rbp)
	movq	-432(%rbp), %rax
	movq	%rax, -488(%rbp)
.L2319:
	movq	-736(%rbp), %rax
	movl	$6, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_expect
	movq	-728(%rbp), %rax
	leaq	-624(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	encoder__Indirection_to_sumtype_encoder__Expr
.L2308:
	movq	-728(%rbp), %rax
	leaq	-24(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%rbp
	ret
	.section	.rodata, "a"
.LC301:
	.string	"invalid number `expr.lit`"
.LC302:
	.string	"[internal error] somthing whent wrong..."
	.text
	.globl	encoder__eval_expr_get_symbol_64
	.hidden	encoder__eval_expr_get_symbol_64
encoder__eval_expr_get_symbol_64:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$152, %rsp
	movq	%rdi, -168(%rbp)
	movq	$0, -40(%rbp)
	movl	24(%rbp), %ecx
	cmpl	$174, %ecx
	jne	.L2324
	movq	16(%rbp), %rax
	leaq	-128(%rbp), %rdi
	movq	(%rax), %rdx
	movq	8(%rax), %rax
	movl	$64, %r8d
	movl	$0, %ecx
	movq	%rdx, %rsi
	movq	%rax, %rdx
	call	strconv__parse_int
	movzbl	-128(%rbp), %eax
	testb	%al, %al
	je	.L2325
	movq	-120(%rbp), %rax
	movq	-112(%rbp), %rdx
	movq	%rax, -160(%rbp)
	movq	%rdx, -152(%rbp)
	movq	-104(%rbp), %rax
	movq	-96(%rbp), %rdx
	movq	%rax, -144(%rbp)
	movq	%rdx, -136(%rbp)
	leaq	.LC301(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$25, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	16(%rbp), %rcx
	movq	%r12, %rsi
	movq	%r13, %rdi
	movq	%r12, %rax
	movq	%r13, %rdx
	movq	%rsi, %rdi
	movq	%rdx, %r8
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	16(%rcx), %rax
	movq	24(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	32(%rcx), %rax
	movq	%rax, 16(%rsi)
	movq	%r8, %rsi
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2325:
	leaq	-128(%rbp), %rax
	addq	$40, %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	jmp	.L2326
.L2324:
	movl	24(%rbp), %ecx
	cmpl	$175, %ecx
	jne	.L2327
	movq	$0, -48(%rbp)
	movq	16(%rbp), %rcx
	movl	48(%rcx), %ecx
	cmpl	$7, %ecx
	jne	.L2328
	movq	16(%rbp), %rcx
	movq	-168(%rbp), %rdi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	call	encoder__eval_expr_get_symbol_64
	addq	$32, %rsp
	movq	%rax, %rbx
	movq	16(%rbp), %rcx
	movq	-168(%rbp), %rdi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	24(%rcx), %rax
	movq	32(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	40(%rcx), %rax
	movq	%rax, 16(%rsi)
	call	encoder__eval_expr_get_symbol_64
	addq	$32, %rsp
	addq	%rbx, %rax
	movq	%rax, -48(%rbp)
	jmp	.L2329
.L2328:
	movq	16(%rbp), %rcx
	movl	48(%rcx), %ecx
	cmpl	$8, %ecx
	jne	.L2330
	movq	16(%rbp), %rcx
	movq	-168(%rbp), %rdi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	call	encoder__eval_expr_get_symbol_64
	addq	$32, %rsp
	movq	%rax, %rbx
	movq	16(%rbp), %rcx
	movq	-168(%rbp), %rdi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	24(%rcx), %rax
	movq	32(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	40(%rcx), %rax
	movq	%rax, 16(%rsi)
	call	encoder__eval_expr_get_symbol_64
	addq	$32, %rsp
	subq	%rax, %rbx
	movq	%rbx, %rdx
	movq	%rdx, -48(%rbp)
	jmp	.L2329
.L2330:
	movq	16(%rbp), %rcx
	movl	48(%rcx), %ecx
	cmpl	$9, %ecx
	jne	.L2331
	movq	16(%rbp), %rcx
	movq	-168(%rbp), %rdi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	call	encoder__eval_expr_get_symbol_64
	addq	$32, %rsp
	movq	%rax, %rbx
	movq	16(%rbp), %rcx
	movq	-168(%rbp), %rdi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	24(%rcx), %rax
	movq	32(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	40(%rcx), %rax
	movq	%rax, 16(%rsi)
	call	encoder__eval_expr_get_symbol_64
	addq	$32, %rsp
	imulq	%rbx, %rax
	movq	%rax, -48(%rbp)
	jmp	.L2329
.L2331:
	movq	16(%rbp), %rcx
	movl	48(%rcx), %ecx
	cmpl	$10, %ecx
	jne	.L2332
	movq	16(%rbp), %rcx
	movq	-168(%rbp), %rdi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	call	encoder__eval_expr_get_symbol_64
	addq	$32, %rsp
	movq	%rax, %rbx
	movq	16(%rbp), %rcx
	movq	-168(%rbp), %rdi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	24(%rcx), %rax
	movq	32(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	40(%rcx), %rax
	movq	%rax, 16(%rsi)
	call	encoder__eval_expr_get_symbol_64
	addq	$32, %rsp
	movq	%rax, %rdi
	movq	%rbx, %rax
	cqto
	idivq	%rdi
	movq	%rax, -48(%rbp)
	jmp	.L2329
.L2332:
	leaq	.LC302(%rip), %rax
	movq	%rdx, %rsi
	movabsq	$-4294967296, %rcx
	andq	%rsi, %rcx
	orq	$40, %rcx
	movq	%rcx, %rdx
	movq	%rdx, %rcx
	movl	%ecx, %esi
	movabsq	$4294967296, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	_v_panic
.L2329:
	movq	-48(%rbp), %rax
	movq	%rax, -40(%rbp)
	jmp	.L2326
.L2327:
	movl	24(%rbp), %eax
	cmpl	$169, %eax
	jne	.L2333
	movq	16(%rbp), %rax
	movq	(%rax), %rdx
	movq	8(%rax), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	string_clone
	movq	%rax, -80(%rbp)
	movq	%rdx, -72(%rbp)
	leaq	-80(%rbp), %rdx
	movq	-168(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	array_push
	movq	$0, -40(%rbp)
	jmp	.L2326
.L2333:
	movl	24(%rbp), %eax
	cmpl	$176, %eax
	jne	.L2334
	movq	16(%rbp), %rcx
	movq	-168(%rbp), %rdi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	call	encoder__eval_expr_get_symbol_64
	addq	$32, %rsp
	negq	%rax
	movq	%rax, -40(%rbp)
	jmp	.L2326
.L2334:
	movl	24(%rbp), %eax
	cmpl	$168, %eax
	jne	.L2335
	movq	16(%rbp), %rcx
	movq	-168(%rbp), %rdi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	call	encoder__eval_expr_get_symbol_64
	addq	$32, %rsp
	movq	%rax, -40(%rbp)
	jmp	.L2326
.L2335:
	movq	$0, -40(%rbp)
.L2326:
	movq	-40(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rax
	leaq	-24(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%rbp
	ret
	.globl	encoder__eval_expr_get_symbol
	.hidden	encoder__eval_expr_get_symbol
encoder__eval_expr_get_symbol:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$136, %rsp
	movq	%rdi, -152(%rbp)
	movl	$0, -36(%rbp)
	movl	24(%rbp), %ecx
	cmpl	$174, %ecx
	jne	.L2338
	movq	16(%rbp), %rax
	leaq	-112(%rbp), %rdi
	movq	(%rax), %rdx
	movq	8(%rax), %rax
	movl	$64, %r8d
	movl	$0, %ecx
	movq	%rdx, %rsi
	movq	%rax, %rdx
	call	strconv__parse_int
	movzbl	-112(%rbp), %eax
	testb	%al, %al
	je	.L2339
	movq	-104(%rbp), %rax
	movq	-96(%rbp), %rdx
	movq	%rax, -144(%rbp)
	movq	%rdx, -136(%rbp)
	movq	-88(%rbp), %rax
	movq	-80(%rbp), %rdx
	movq	%rax, -128(%rbp)
	movq	%rdx, -120(%rbp)
	leaq	.LC301(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$25, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	16(%rbp), %rcx
	movq	%r12, %rsi
	movq	%r13, %rdi
	movq	%r12, %rax
	movq	%r13, %rdx
	movq	%rsi, %rdi
	movq	%rdx, %r8
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	16(%rcx), %rax
	movq	24(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	32(%rcx), %rax
	movq	%rax, 16(%rsi)
	movq	%r8, %rsi
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2339:
	leaq	-112(%rbp), %rax
	addq	$40, %rax
	movq	(%rax), %rax
	movl	%eax, -36(%rbp)
	jmp	.L2340
.L2338:
	movl	24(%rbp), %ecx
	cmpl	$175, %ecx
	jne	.L2341
	movl	$0, -40(%rbp)
	movq	16(%rbp), %rcx
	movl	48(%rcx), %ecx
	cmpl	$7, %ecx
	jne	.L2342
	movq	16(%rbp), %rcx
	movq	-152(%rbp), %rdi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	call	encoder__eval_expr_get_symbol
	addq	$32, %rsp
	movl	%eax, %ebx
	movq	16(%rbp), %rcx
	movq	-152(%rbp), %rdi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	24(%rcx), %rax
	movq	32(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	40(%rcx), %rax
	movq	%rax, 16(%rsi)
	call	encoder__eval_expr_get_symbol
	addq	$32, %rsp
	addl	%ebx, %eax
	movl	%eax, -40(%rbp)
	jmp	.L2343
.L2342:
	movq	16(%rbp), %rcx
	movl	48(%rcx), %ecx
	cmpl	$8, %ecx
	jne	.L2344
	movq	16(%rbp), %rcx
	movq	-152(%rbp), %rdi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	call	encoder__eval_expr_get_symbol
	addq	$32, %rsp
	movl	%eax, %ebx
	movq	16(%rbp), %rcx
	movq	-152(%rbp), %rdi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	24(%rcx), %rax
	movq	32(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	40(%rcx), %rax
	movq	%rax, 16(%rsi)
	call	encoder__eval_expr_get_symbol
	addq	$32, %rsp
	subl	%eax, %ebx
	movl	%ebx, %edx
	movl	%edx, -40(%rbp)
	jmp	.L2343
.L2344:
	movq	16(%rbp), %rcx
	movl	48(%rcx), %ecx
	cmpl	$9, %ecx
	jne	.L2345
	movq	16(%rbp), %rcx
	movq	-152(%rbp), %rdi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	call	encoder__eval_expr_get_symbol
	addq	$32, %rsp
	movl	%eax, %ebx
	movq	16(%rbp), %rcx
	movq	-152(%rbp), %rdi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	24(%rcx), %rax
	movq	32(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	40(%rcx), %rax
	movq	%rax, 16(%rsi)
	call	encoder__eval_expr_get_symbol
	addq	$32, %rsp
	imull	%ebx, %eax
	movl	%eax, -40(%rbp)
	jmp	.L2343
.L2345:
	movq	16(%rbp), %rcx
	movl	48(%rcx), %ecx
	cmpl	$10, %ecx
	jne	.L2346
	movq	16(%rbp), %rcx
	movq	-152(%rbp), %rdi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	call	encoder__eval_expr_get_symbol
	addq	$32, %rsp
	movl	%eax, %ebx
	movq	16(%rbp), %rcx
	movq	-152(%rbp), %rdi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	24(%rcx), %rax
	movq	32(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	40(%rcx), %rax
	movq	%rax, 16(%rsi)
	call	encoder__eval_expr_get_symbol
	addq	$32, %rsp
	movl	%eax, %edi
	movl	%ebx, %eax
	cltd
	idivl	%edi
	movl	%eax, -40(%rbp)
	jmp	.L2343
.L2346:
	leaq	.LC302(%rip), %rax
	movq	%rdx, %rsi
	movabsq	$-4294967296, %rcx
	andq	%rsi, %rcx
	orq	$40, %rcx
	movq	%rcx, %rdx
	movq	%rdx, %rcx
	movl	%ecx, %esi
	movabsq	$4294967296, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	_v_panic
.L2343:
	movl	-40(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.L2340
.L2341:
	movl	24(%rbp), %eax
	cmpl	$169, %eax
	jne	.L2347
	movq	16(%rbp), %rax
	movq	(%rax), %rdx
	movq	8(%rax), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	string_clone
	movq	%rax, -64(%rbp)
	movq	%rdx, -56(%rbp)
	leaq	-64(%rbp), %rdx
	movq	-152(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	array_push
	movl	$0, -36(%rbp)
	jmp	.L2340
.L2347:
	movl	24(%rbp), %eax
	cmpl	$176, %eax
	jne	.L2348
	movq	16(%rbp), %rcx
	movq	-152(%rbp), %rdi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	call	encoder__eval_expr_get_symbol
	addq	$32, %rsp
	negl	%eax
	movl	%eax, -36(%rbp)
	jmp	.L2340
.L2348:
	movl	24(%rbp), %eax
	cmpl	$168, %eax
	jne	.L2349
	movq	16(%rbp), %rcx
	movq	-152(%rbp), %rdi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	call	encoder__eval_expr_get_symbol
	addq	$32, %rsp
	movl	%eax, -36(%rbp)
	jmp	.L2340
.L2349:
	movl	$0, -36(%rbp)
.L2340:
	movl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	leaq	-24(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%rbp
	ret
	.globl	encoder__eval_expr
	.hidden	encoder__eval_expr
encoder__eval_expr:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$104, %rsp
	movl	$0, -36(%rbp)
	movl	24(%rbp), %ecx
	cmpl	$174, %ecx
	jne	.L2352
	movq	16(%rbp), %rax
	leaq	-96(%rbp), %rdi
	movq	(%rax), %rdx
	movq	8(%rax), %rax
	movl	$64, %r8d
	movl	$0, %ecx
	movq	%rdx, %rsi
	movq	%rax, %rdx
	call	strconv__parse_int
	movzbl	-96(%rbp), %eax
	testb	%al, %al
	je	.L2353
	movq	-88(%rbp), %rax
	movq	-80(%rbp), %rdx
	movq	%rax, -128(%rbp)
	movq	%rdx, -120(%rbp)
	movq	-72(%rbp), %rax
	movq	-64(%rbp), %rdx
	movq	%rax, -112(%rbp)
	movq	%rdx, -104(%rbp)
	leaq	.LC301(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$25, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	16(%rbp), %rcx
	movq	%r12, %rsi
	movq	%r13, %rdi
	movq	%r12, %rax
	movq	%r13, %rdx
	movq	%rsi, %rdi
	movq	%rdx, %r8
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	16(%rcx), %rax
	movq	24(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	32(%rcx), %rax
	movq	%rax, 16(%rsi)
	movq	%r8, %rsi
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2353:
	leaq	-96(%rbp), %rax
	addq	$40, %rax
	movq	(%rax), %rax
	movl	%eax, -36(%rbp)
	jmp	.L2354
.L2352:
	movl	24(%rbp), %ecx
	cmpl	$175, %ecx
	jne	.L2355
	movl	$0, -40(%rbp)
	movq	16(%rbp), %rcx
	movl	48(%rcx), %ecx
	cmpl	$7, %ecx
	jne	.L2356
	movq	16(%rbp), %rcx
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	call	encoder__eval_expr
	addq	$32, %rsp
	movl	%eax, %ebx
	movq	16(%rbp), %rcx
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	24(%rcx), %rax
	movq	32(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	40(%rcx), %rax
	movq	%rax, 16(%rsi)
	call	encoder__eval_expr
	addq	$32, %rsp
	addl	%ebx, %eax
	movl	%eax, -40(%rbp)
	jmp	.L2357
.L2356:
	movq	16(%rbp), %rcx
	movl	48(%rcx), %ecx
	cmpl	$8, %ecx
	jne	.L2358
	movq	16(%rbp), %rcx
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	call	encoder__eval_expr
	addq	$32, %rsp
	movl	%eax, %ebx
	movq	16(%rbp), %rcx
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	24(%rcx), %rax
	movq	32(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	40(%rcx), %rax
	movq	%rax, 16(%rsi)
	call	encoder__eval_expr
	addq	$32, %rsp
	subl	%eax, %ebx
	movl	%ebx, %edx
	movl	%edx, -40(%rbp)
	jmp	.L2357
.L2358:
	movq	16(%rbp), %rcx
	movl	48(%rcx), %ecx
	cmpl	$9, %ecx
	jne	.L2359
	movq	16(%rbp), %rcx
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	call	encoder__eval_expr
	addq	$32, %rsp
	movl	%eax, %ebx
	movq	16(%rbp), %rcx
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	24(%rcx), %rax
	movq	32(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	40(%rcx), %rax
	movq	%rax, 16(%rsi)
	call	encoder__eval_expr
	addq	$32, %rsp
	imull	%ebx, %eax
	movl	%eax, -40(%rbp)
	jmp	.L2357
.L2359:
	movq	16(%rbp), %rcx
	movl	48(%rcx), %ecx
	cmpl	$10, %ecx
	jne	.L2360
	movq	16(%rbp), %rcx
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	call	encoder__eval_expr
	addq	$32, %rsp
	movl	%eax, %ebx
	movq	16(%rbp), %rcx
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	24(%rcx), %rax
	movq	32(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	40(%rcx), %rax
	movq	%rax, 16(%rsi)
	call	encoder__eval_expr
	addq	$32, %rsp
	movl	%eax, %edi
	movl	%ebx, %eax
	cltd
	idivl	%edi
	movl	%eax, -40(%rbp)
	jmp	.L2357
.L2360:
	leaq	.LC302(%rip), %rax
	movq	%rdx, %rsi
	movabsq	$-4294967296, %rcx
	andq	%rsi, %rcx
	orq	$40, %rcx
	movq	%rcx, %rdx
	movq	%rdx, %rcx
	movl	%ecx, %esi
	movabsq	$4294967296, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	_v_panic
.L2357:
	movl	-40(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.L2354
.L2355:
	movl	24(%rbp), %eax
	cmpl	$176, %eax
	jne	.L2361
	movq	16(%rbp), %rcx
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	call	encoder__eval_expr
	addq	$32, %rsp
	negl	%eax
	movl	%eax, -36(%rbp)
	jmp	.L2354
.L2361:
	movl	24(%rbp), %eax
	cmpl	$168, %eax
	jne	.L2362
	movq	16(%rbp), %rcx
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	call	encoder__eval_expr
	addq	$32, %rsp
	movl	%eax, -36(%rbp)
	jmp	.L2354
.L2362:
	movl	$0, -36(%rbp)
.L2354:
	movl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	leaq	-24(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%rbp
	ret
	.section	.rodata, "a"
.LC303:
	.string	"unkown DataSize"
	.text
	.globl	encoder__get_size_by_suffix
	.hidden	encoder__get_size_by_suffix
encoder__get_size_by_suffix:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$40, %rsp
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movq	%rcx, %rdx
	movq	%rax, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movl	-56(%rbp), %eax
	leal	-1(%rax), %ebx
	movq	-64(%rbp), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	string_to_upper
	movq	%rax, %rsi
	movq	%rdx, %rdi
	movq	%rsi, %rcx
	movq	%rdx, %rax
	movl	%ebx, %edx
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	string_at
	movb	%al, -37(%rbp)
	movl	$0, -36(%rbp)
	cmpb	$81, -37(%rbp)
	jne	.L2365
	movl	$3, -36(%rbp)
	jmp	.L2366
.L2365:
	cmpb	$76, -37(%rbp)
	jne	.L2367
	movl	$2, -36(%rbp)
	jmp	.L2366
.L2367:
	cmpb	$87, -37(%rbp)
	jne	.L2368
	movl	$1, -36(%rbp)
	jmp	.L2366
.L2368:
	cmpb	$66, -37(%rbp)
	jne	.L2369
	movl	$0, -36(%rbp)
	jmp	.L2366
.L2369:
	leaq	.LC303(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$15, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	%r12, %rcx
	movq	%r13, %rbx
	movq	%r12, %rax
	movq	%r13, %rdx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	_v_panic
.L2366:
	movl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%rbp
	ret
	.globl	encoder__Register_regi_bits
	.hidden	encoder__Register_regi_bits
encoder__Register_regi_bits:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$1080, %rsp
	leaq	.LC232(%rip), %rcx
	movq	%rbx, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, %rbx
	movq	%rbx, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %rbx
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	%rcx, %rdx
	movq	%rbx, %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2372
	leaq	.LC249(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	%r12, %rdx
	movq	%r13, %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2372
	leaq	.LC266(%rip), %r14
	movq	%r15, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, %r15
	movq	%r15, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r15
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	%r14, %rdx
	movq	%r15, %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2372
	leaq	.LC283(%rip), %rax
	movq	%rax, -80(%rbp)
	movq	-72(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -72(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-80(%rbp), %rdx
	movq	-72(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2372
	leaq	.LC241(%rip), %rax
	movq	%rax, -96(%rbp)
	movq	-88(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -88(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-96(%rbp), %rdx
	movq	-88(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2372
	leaq	.LC258(%rip), %rax
	movq	%rax, -112(%rbp)
	movq	-104(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -104(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-112(%rbp), %rdx
	movq	-104(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2372
	leaq	.LC275(%rip), %rax
	movq	%rax, -128(%rbp)
	movq	-120(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -120(%rbp)
	movq	-120(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -120(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-128(%rbp), %rdx
	movq	-120(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2372
	leaq	.LC290(%rip), %rax
	movq	%rax, -144(%rbp)
	movq	-136(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -136(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-144(%rbp), %rdx
	movq	-136(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2373
.L2372:
	movb	$0, -56(%rbp)
	movzbl	-56(%rbp), %eax
	jmp	.L2374
.L2373:
	leaq	.LC233(%rip), %rax
	movq	%rax, -160(%rbp)
	movq	-152(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -152(%rbp)
	movq	-152(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -152(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-160(%rbp), %rdx
	movq	-152(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2375
	leaq	.LC250(%rip), %rax
	movq	%rax, -176(%rbp)
	movq	-168(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -168(%rbp)
	movq	-168(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -168(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-176(%rbp), %rdx
	movq	-168(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2375
	leaq	.LC267(%rip), %rax
	movq	%rax, -192(%rbp)
	movq	-184(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, -184(%rbp)
	movq	-184(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -184(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-192(%rbp), %rdx
	movq	-184(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2375
	leaq	.LC226(%rip), %rax
	movq	%rax, -208(%rbp)
	movq	-200(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, -200(%rbp)
	movq	-200(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -200(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-208(%rbp), %rdx
	movq	-200(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2375
	leaq	.LC242(%rip), %rax
	movq	%rax, -224(%rbp)
	movq	-216(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, -216(%rbp)
	movq	-216(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -216(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-224(%rbp), %rdx
	movq	-216(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2375
	leaq	.LC259(%rip), %rax
	movq	%rax, -240(%rbp)
	movq	-232(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -232(%rbp)
	movq	-232(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -232(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-240(%rbp), %rdx
	movq	-232(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2375
	leaq	.LC276(%rip), %rax
	movq	%rax, -256(%rbp)
	movq	-248(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -248(%rbp)
	movq	-248(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -248(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-256(%rbp), %rdx
	movq	-248(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2375
	leaq	.LC291(%rip), %rax
	movq	%rax, -272(%rbp)
	movq	-264(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -264(%rbp)
	movq	-264(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -264(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-272(%rbp), %rdx
	movq	-264(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2376
.L2375:
	movb	$1, -55(%rbp)
	movzbl	-55(%rbp), %eax
	jmp	.L2374
.L2376:
	leaq	.LC234(%rip), %rax
	movq	%rax, -288(%rbp)
	movq	-280(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -280(%rbp)
	movq	-280(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -280(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-288(%rbp), %rdx
	movq	-280(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2378
	leaq	.LC251(%rip), %rax
	movq	%rax, -304(%rbp)
	movq	-296(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -296(%rbp)
	movq	-296(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -296(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-304(%rbp), %rdx
	movq	-296(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2378
	leaq	.LC268(%rip), %rax
	movq	%rax, -320(%rbp)
	movq	-312(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, -312(%rbp)
	movq	-312(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -312(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-320(%rbp), %rdx
	movq	-312(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2378
	leaq	.LC284(%rip), %rax
	movq	%rax, -336(%rbp)
	movq	-328(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, -328(%rbp)
	movq	-328(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -328(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-336(%rbp), %rdx
	movq	-328(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2378
	leaq	.LC243(%rip), %rax
	movq	%rax, -352(%rbp)
	movq	-344(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -344(%rbp)
	movq	-344(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -344(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-352(%rbp), %rdx
	movq	-344(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2378
	leaq	.LC260(%rip), %rax
	movq	%rax, -368(%rbp)
	movq	-360(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -360(%rbp)
	movq	-360(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -360(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-368(%rbp), %rdx
	movq	-360(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2378
	leaq	.LC277(%rip), %rax
	movq	%rax, -384(%rbp)
	movq	-376(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -376(%rbp)
	movq	-376(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -376(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-384(%rbp), %rdx
	movq	-376(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2378
	leaq	.LC292(%rip), %rax
	movq	%rax, -400(%rbp)
	movq	-392(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -392(%rbp)
	movq	-392(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -392(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-400(%rbp), %rdx
	movq	-392(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2379
.L2378:
	movb	$2, -54(%rbp)
	movzbl	-54(%rbp), %eax
	jmp	.L2374
.L2379:
	leaq	.LC235(%rip), %rax
	movq	%rax, -416(%rbp)
	movq	-408(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -408(%rbp)
	movq	-408(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -408(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-416(%rbp), %rdx
	movq	-408(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2381
	leaq	.LC252(%rip), %rax
	movq	%rax, -432(%rbp)
	movq	-424(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -424(%rbp)
	movq	-424(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -424(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-432(%rbp), %rdx
	movq	-424(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2381
	leaq	.LC269(%rip), %rax
	movq	%rax, -448(%rbp)
	movq	-440(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, -440(%rbp)
	movq	-440(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -440(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-448(%rbp), %rdx
	movq	-440(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2381
	leaq	.LC285(%rip), %rax
	movq	%rax, -464(%rbp)
	movq	-456(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, -456(%rbp)
	movq	-456(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -456(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-464(%rbp), %rdx
	movq	-456(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2381
	leaq	.LC244(%rip), %rax
	movq	%rax, -480(%rbp)
	movq	-472(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -472(%rbp)
	movq	-472(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -472(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-480(%rbp), %rdx
	movq	-472(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2381
	leaq	.LC261(%rip), %rax
	movq	%rax, -496(%rbp)
	movq	-488(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -488(%rbp)
	movq	-488(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -488(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-496(%rbp), %rdx
	movq	-488(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2381
	leaq	.LC278(%rip), %rax
	movq	%rax, -512(%rbp)
	movq	-504(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -504(%rbp)
	movq	-504(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -504(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-512(%rbp), %rdx
	movq	-504(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2381
	leaq	.LC293(%rip), %rax
	movq	%rax, -528(%rbp)
	movq	-520(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -520(%rbp)
	movq	-520(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -520(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-528(%rbp), %rdx
	movq	-520(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2382
.L2381:
	movb	$3, -53(%rbp)
	movzbl	-53(%rbp), %eax
	jmp	.L2374
.L2382:
	leaq	.LC236(%rip), %rax
	movq	%rax, -544(%rbp)
	movq	-536(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -536(%rbp)
	movq	-536(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -536(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-544(%rbp), %rdx
	movq	-536(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2384
	leaq	.LC253(%rip), %rax
	movq	%rax, -560(%rbp)
	movq	-552(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -552(%rbp)
	movq	-552(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -552(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-560(%rbp), %rdx
	movq	-552(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2384
	leaq	.LC270(%rip), %rax
	movq	%rax, -576(%rbp)
	movq	-568(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, -568(%rbp)
	movq	-568(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -568(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-576(%rbp), %rdx
	movq	-568(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2384
	leaq	.LC220(%rip), %rax
	movq	%rax, -592(%rbp)
	movq	-584(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, -584(%rbp)
	movq	-584(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -584(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-592(%rbp), %rdx
	movq	-584(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2384
	leaq	.LC288(%rip), %rax
	movq	%rax, -608(%rbp)
	movq	-600(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -600(%rbp)
	movq	-600(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -600(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-608(%rbp), %rdx
	movq	-600(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2384
	leaq	.LC245(%rip), %rax
	movq	%rax, -624(%rbp)
	movq	-616(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -616(%rbp)
	movq	-616(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -616(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-624(%rbp), %rdx
	movq	-616(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2384
	leaq	.LC262(%rip), %rax
	movq	%rax, -640(%rbp)
	movq	-632(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -632(%rbp)
	movq	-632(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -632(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-640(%rbp), %rdx
	movq	-632(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2384
	leaq	.LC279(%rip), %rax
	movq	%rax, -656(%rbp)
	movq	-648(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -648(%rbp)
	movq	-648(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -648(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-656(%rbp), %rdx
	movq	-648(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2384
	leaq	.LC294(%rip), %rax
	movq	%rax, -672(%rbp)
	movq	-664(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -664(%rbp)
	movq	-664(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -664(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-672(%rbp), %rdx
	movq	-664(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2385
.L2384:
	movb	$4, -52(%rbp)
	movzbl	-52(%rbp), %eax
	jmp	.L2374
.L2385:
	leaq	.LC237(%rip), %rax
	movq	%rax, -688(%rbp)
	movq	-680(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -680(%rbp)
	movq	-680(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -680(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-688(%rbp), %rdx
	movq	-680(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2387
	leaq	.LC254(%rip), %rax
	movq	%rax, -704(%rbp)
	movq	-696(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -696(%rbp)
	movq	-696(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -696(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-704(%rbp), %rdx
	movq	-696(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2387
	leaq	.LC271(%rip), %rax
	movq	%rax, -720(%rbp)
	movq	-712(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, -712(%rbp)
	movq	-712(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -712(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-720(%rbp), %rdx
	movq	-712(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2387
	leaq	.LC221(%rip), %rax
	movq	%rax, -736(%rbp)
	movq	-728(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, -728(%rbp)
	movq	-728(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -728(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-736(%rbp), %rdx
	movq	-728(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2387
	leaq	.LC289(%rip), %rax
	movq	%rax, -752(%rbp)
	movq	-744(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -744(%rbp)
	movq	-744(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -744(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-752(%rbp), %rdx
	movq	-744(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2387
	leaq	.LC246(%rip), %rax
	movq	%rax, -768(%rbp)
	movq	-760(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -760(%rbp)
	movq	-760(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -760(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-768(%rbp), %rdx
	movq	-760(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2387
	leaq	.LC263(%rip), %rax
	movq	%rax, -784(%rbp)
	movq	-776(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -776(%rbp)
	movq	-776(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -776(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-784(%rbp), %rdx
	movq	-776(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2387
	leaq	.LC280(%rip), %rax
	movq	%rax, -800(%rbp)
	movq	-792(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -792(%rbp)
	movq	-792(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -792(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-800(%rbp), %rdx
	movq	-792(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2387
	leaq	.LC295(%rip), %rax
	movq	%rax, -816(%rbp)
	movq	-808(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -808(%rbp)
	movq	-808(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -808(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-816(%rbp), %rdx
	movq	-808(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2388
.L2387:
	movb	$5, -51(%rbp)
	movzbl	-51(%rbp), %eax
	jmp	.L2374
.L2388:
	leaq	.LC238(%rip), %rax
	movq	%rax, -832(%rbp)
	movq	-824(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -824(%rbp)
	movq	-824(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -824(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-832(%rbp), %rdx
	movq	-824(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2390
	leaq	.LC255(%rip), %rax
	movq	%rax, -848(%rbp)
	movq	-840(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -840(%rbp)
	movq	-840(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -840(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-848(%rbp), %rdx
	movq	-840(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2390
	leaq	.LC272(%rip), %rax
	movq	%rax, -864(%rbp)
	movq	-856(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, -856(%rbp)
	movq	-856(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -856(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-864(%rbp), %rdx
	movq	-856(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2390
	leaq	.LC222(%rip), %rax
	movq	%rax, -880(%rbp)
	movq	-872(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, -872(%rbp)
	movq	-872(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -872(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-880(%rbp), %rdx
	movq	-872(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2390
	leaq	.LC286(%rip), %rax
	movq	%rax, -896(%rbp)
	movq	-888(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -888(%rbp)
	movq	-888(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -888(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-896(%rbp), %rdx
	movq	-888(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2390
	leaq	.LC247(%rip), %rax
	movq	%rax, -912(%rbp)
	movq	-904(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -904(%rbp)
	movq	-904(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -904(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-912(%rbp), %rdx
	movq	-904(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2390
	leaq	.LC264(%rip), %rax
	movq	%rax, -928(%rbp)
	movq	-920(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -920(%rbp)
	movq	-920(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -920(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-928(%rbp), %rdx
	movq	-920(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2390
	leaq	.LC281(%rip), %rax
	movq	%rax, -944(%rbp)
	movq	-936(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -936(%rbp)
	movq	-936(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -936(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-944(%rbp), %rdx
	movq	-936(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2390
	leaq	.LC296(%rip), %rax
	movq	%rax, -960(%rbp)
	movq	-952(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -952(%rbp)
	movq	-952(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -952(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-960(%rbp), %rdx
	movq	-952(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2391
.L2390:
	movb	$6, -50(%rbp)
	movzbl	-50(%rbp), %eax
	jmp	.L2374
.L2391:
	leaq	.LC239(%rip), %rax
	movq	%rax, -976(%rbp)
	movq	-968(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -968(%rbp)
	movq	-968(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -968(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-976(%rbp), %rdx
	movq	-968(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2393
	leaq	.LC256(%rip), %rax
	movq	%rax, -992(%rbp)
	movq	-984(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -984(%rbp)
	movq	-984(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -984(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-992(%rbp), %rdx
	movq	-984(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2393
	leaq	.LC273(%rip), %rax
	movq	%rax, -1008(%rbp)
	movq	-1000(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, -1000(%rbp)
	movq	-1000(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -1000(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-1008(%rbp), %rdx
	movq	-1000(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2393
	leaq	.LC223(%rip), %rax
	movq	%rax, -1024(%rbp)
	movq	-1016(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, -1016(%rbp)
	movq	-1016(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -1016(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-1024(%rbp), %rdx
	movq	-1016(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2393
	leaq	.LC287(%rip), %rax
	movq	%rax, -1040(%rbp)
	movq	-1032(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -1032(%rbp)
	movq	-1032(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -1032(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-1040(%rbp), %rdx
	movq	-1032(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2393
	leaq	.LC248(%rip), %rax
	movq	%rax, -1056(%rbp)
	movq	-1048(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -1048(%rbp)
	movq	-1048(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -1048(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-1056(%rbp), %rdx
	movq	-1048(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2393
	leaq	.LC265(%rip), %rax
	movq	%rax, -1072(%rbp)
	movq	-1064(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -1064(%rbp)
	movq	-1064(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -1064(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-1072(%rbp), %rdx
	movq	-1064(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2393
	leaq	.LC282(%rip), %rax
	movq	%rax, -1088(%rbp)
	movq	-1080(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -1080(%rbp)
	movq	-1080(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -1080(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-1088(%rbp), %rdx
	movq	-1080(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2393
	leaq	.LC297(%rip), %rax
	movq	%rax, -1104(%rbp)
	movq	-1096(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -1096(%rbp)
	movq	-1096(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -1096(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-1104(%rbp), %rdx
	movq	-1096(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2394
.L2393:
	movb	$7, -49(%rbp)
	movzbl	-49(%rbp), %eax
	jmp	.L2374
.L2394:
	leaq	.LC215(%rip), %rax
	movq	%rax, -1120(%rbp)
	movq	-1112(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$11, %rax
	movq	%rax, -1112(%rbp)
	movq	-1112(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -1112(%rbp)
	movq	-1120(%rbp), %rax
	movq	-1112(%rbp), %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	_v_panic
.L2374:
	addq	$1080, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
	.section	.rodata, "a"
.LC304:
	.string	"XMM0"
.LC305:
	.string	"XMM8"
.LC306:
	.string	"XMM1"
.LC307:
	.string	"XMM9"
.LC308:
	.string	"XMM2"
.LC309:
	.string	"XMM10"
.LC310:
	.string	"XMM3"
.LC311:
	.string	"XMM11"
.LC312:
	.string	"XMM4"
.LC313:
	.string	"XMM12"
.LC314:
	.string	"XMM5"
.LC315:
	.string	"XMM13"
.LC316:
	.string	"XMM6"
.LC317:
	.string	"XMM14"
.LC318:
	.string	"XMM7"
.LC319:
	.string	"XMM15"
	.text
	.globl	encoder__Xmm_xmm_bits
	.hidden	encoder__Xmm_xmm_bits
encoder__Xmm_xmm_bits:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$248, %rsp
	leaq	.LC304(%rip), %rcx
	movq	%rbx, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, %rbx
	movq	%rbx, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %rbx
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	%rcx, %rdx
	movq	%rbx, %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2397
	leaq	.LC305(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	%r12, %rdx
	movq	%r13, %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2398
.L2397:
	movb	$0, -56(%rbp)
	movzbl	-56(%rbp), %eax
	jmp	.L2399
.L2398:
	leaq	.LC306(%rip), %r14
	movq	%r15, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, %r15
	movq	%r15, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r15
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	%r14, %rdx
	movq	%r15, %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2400
	leaq	.LC307(%rip), %rax
	movq	%rax, -80(%rbp)
	movq	-72(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -72(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-80(%rbp), %rdx
	movq	-72(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2401
.L2400:
	movb	$1, -55(%rbp)
	movzbl	-55(%rbp), %eax
	jmp	.L2399
.L2401:
	leaq	.LC308(%rip), %rax
	movq	%rax, -96(%rbp)
	movq	-88(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -88(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-96(%rbp), %rdx
	movq	-88(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2403
	leaq	.LC309(%rip), %rax
	movq	%rax, -112(%rbp)
	movq	-104(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$5, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -104(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-112(%rbp), %rdx
	movq	-104(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2404
.L2403:
	movb	$2, -54(%rbp)
	movzbl	-54(%rbp), %eax
	jmp	.L2399
.L2404:
	leaq	.LC310(%rip), %rax
	movq	%rax, -128(%rbp)
	movq	-120(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -120(%rbp)
	movq	-120(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -120(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-128(%rbp), %rdx
	movq	-120(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2406
	leaq	.LC311(%rip), %rax
	movq	%rax, -144(%rbp)
	movq	-136(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$5, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -136(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-144(%rbp), %rdx
	movq	-136(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2407
.L2406:
	movb	$3, -53(%rbp)
	movzbl	-53(%rbp), %eax
	jmp	.L2399
.L2407:
	leaq	.LC312(%rip), %rax
	movq	%rax, -160(%rbp)
	movq	-152(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -152(%rbp)
	movq	-152(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -152(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-160(%rbp), %rdx
	movq	-152(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2409
	leaq	.LC313(%rip), %rax
	movq	%rax, -176(%rbp)
	movq	-168(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$5, %rax
	movq	%rax, -168(%rbp)
	movq	-168(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -168(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-176(%rbp), %rdx
	movq	-168(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2410
.L2409:
	movb	$4, -52(%rbp)
	movzbl	-52(%rbp), %eax
	jmp	.L2399
.L2410:
	leaq	.LC314(%rip), %rax
	movq	%rax, -192(%rbp)
	movq	-184(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -184(%rbp)
	movq	-184(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -184(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-192(%rbp), %rdx
	movq	-184(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2412
	leaq	.LC315(%rip), %rax
	movq	%rax, -208(%rbp)
	movq	-200(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$5, %rax
	movq	%rax, -200(%rbp)
	movq	-200(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -200(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-208(%rbp), %rdx
	movq	-200(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2413
.L2412:
	movb	$5, -51(%rbp)
	movzbl	-51(%rbp), %eax
	jmp	.L2399
.L2413:
	leaq	.LC316(%rip), %rax
	movq	%rax, -224(%rbp)
	movq	-216(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -216(%rbp)
	movq	-216(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -216(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-224(%rbp), %rdx
	movq	-216(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2415
	leaq	.LC317(%rip), %rax
	movq	%rax, -240(%rbp)
	movq	-232(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$5, %rax
	movq	%rax, -232(%rbp)
	movq	-232(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -232(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-240(%rbp), %rdx
	movq	-232(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2416
.L2415:
	movb	$6, -50(%rbp)
	movzbl	-50(%rbp), %eax
	jmp	.L2399
.L2416:
	leaq	.LC318(%rip), %rax
	movq	%rax, -256(%rbp)
	movq	-248(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -248(%rbp)
	movq	-248(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -248(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-256(%rbp), %rdx
	movq	-248(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2418
	leaq	.LC319(%rip), %rax
	movq	%rax, -272(%rbp)
	movq	-264(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$5, %rax
	movq	%rax, -264(%rbp)
	movq	-264(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -264(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-272(%rbp), %rdx
	movq	-264(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2419
.L2418:
	movb	$7, -49(%rbp)
	movzbl	-49(%rbp), %eax
	jmp	.L2399
.L2419:
	leaq	.LC215(%rip), %rax
	movq	%rax, -288(%rbp)
	movq	-280(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$11, %rax
	movq	%rax, -280(%rbp)
	movq	-280(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -280(%rbp)
	movq	-288(%rbp), %rax
	movq	-280(%rbp), %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	_v_panic
.L2399:
	addq	$248, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
	.section	.rodata, "a"
.LC320:
	.string	"invalid size of register for instruction."
	.text
	.globl	encoder__Register_check_regi_size
	.hidden	encoder__Register_check_regi_size
encoder__Register_check_regi_size:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$24, %rsp
	movl	%edi, -20(%rbp)
	movl	32(%rbp), %ecx
	cmpl	%ecx, -20(%rbp)
	je	.L2423
	leaq	.LC320(%rip), %rax
	movq	%rdx, %rsi
	movabsq	$-4294967296, %rcx
	andq	%rsi, %rcx
	orq	$41, %rcx
	movq	%rcx, %rdx
	movq	%rdx, %rcx
	movl	%ecx, %esi
	movabsq	$4294967296, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %rdi
	movq	%rdx, %rsi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rcx
	movq	40(%rbp), %rax
	movq	48(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	56(%rbp), %rax
	movq	%rax, 16(%rcx)
	call	error__print
	addq	$32, %rsp
	movl	$0, %edi
	call	_v_exit
.L2423:
	nop
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	encoder__rex
	.hidden	encoder__rex
encoder__rex:
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%ecx, %eax
	movl	%edi, %ecx
	movb	%cl, -20(%rbp)
	movl	%esi, %ecx
	movb	%cl, -24(%rbp)
	movb	%dl, -28(%rbp)
	movb	%al, -32(%rbp)
	movzbl	-20(%rbp), %eax
	sall	$3, %eax
	orl	$64, %eax
	movl	%eax, %edx
	movzbl	-24(%rbp), %eax
	sall	$2, %eax
	orl	%eax, %edx
	movzbl	-28(%rbp), %eax
	addl	%eax, %eax
	orl	%eax, %edx
	movzbl	-32(%rbp), %eax
	orl	%edx, %eax
	movb	%al, -1(%rbp)
	movzbl	-1(%rbp), %eax
	popq	%rbp
	ret
	.globl	encoder__Encoder_add_rex_prefix
	.hidden	encoder__Encoder_add_rex_prefix
encoder__Encoder_add_rex_prefix:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	subq	$160, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, %rax
	movq	%rdx, %rsi
	movq	%rsi, %rdx
	movq	%rax, -80(%rbp)
	movq	%rdx, -72(%rbp)
	movq	%rcx, %rax
	movq	%r8, %rcx
	movq	%rcx, %rdx
	movq	%rax, -96(%rbp)
	movq	%rdx, -88(%rbp)
	movb	$0, -33(%rbp)
	movb	$0, -34(%rbp)
	movb	$0, -35(%rbp)
	movb	$0, -36(%rbp)
	movq	-80(%rbp), %rdi
	movq	-72(%rbp), %rsi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	_const_encoder__regi_base_code_offset_over_8(%rip), %rax
	movq	8+_const_encoder__regi_base_code_offset_over_8(%rip), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	16+_const_encoder__regi_base_code_offset_over_8(%rip), %rax
	movq	24+_const_encoder__regi_base_code_offset_over_8(%rip), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	call	Array_string_contains
	addq	$32, %rsp
	testb	%al, %al
	je	.L2427
	movb	$1, -34(%rbp)
.L2427:
	movq	-96(%rbp), %rdi
	movq	-88(%rbp), %rsi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	_const_encoder__regi_base_code_offset_over_8(%rip), %rax
	movq	8+_const_encoder__regi_base_code_offset_over_8(%rip), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	16+_const_encoder__regi_base_code_offset_over_8(%rip), %rax
	movq	24+_const_encoder__regi_base_code_offset_over_8(%rip), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	call	Array_string_contains
	addq	$32, %rsp
	testb	%al, %al
	je	.L2428
	movb	$1, -35(%rbp)
.L2428:
	movq	16(%rbp), %rdi
	movq	24(%rbp), %rsi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	_const_encoder__regi_base_code_offset_over_8(%rip), %rax
	movq	8+_const_encoder__regi_base_code_offset_over_8(%rip), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	16+_const_encoder__regi_base_code_offset_over_8(%rip), %rax
	movq	24+_const_encoder__regi_base_code_offset_over_8(%rip), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	call	Array_string_contains
	addq	$32, %rsp
	testb	%al, %al
	je	.L2429
	movb	$1, -36(%rbp)
.L2429:
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	32(%rbp), %rax
	movq	40(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	48(%rbp), %rax
	movq	56(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$1, %edi
	call	Array_encoder__DataSize_contains
	addq	$32, %rsp
	testb	%al, %al
	je	.L2430
	movl	$102, %eax
	movb	%al, -37(%rbp)
	movq	-56(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-37(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
.L2430:
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	32(%rbp), %rax
	movq	40(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	48(%rbp), %rax
	movq	56(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$4, %edi
	call	Array_encoder__DataSize_contains
	addq	$32, %rsp
	testb	%al, %al
	je	.L2431
	movb	$-13, -38(%rbp)
	movq	-56(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-38(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
.L2431:
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	32(%rbp), %rax
	movq	40(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	48(%rbp), %rax
	movq	56(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$5, %edi
	call	Array_encoder__DataSize_contains
	addq	$32, %rsp
	testb	%al, %al
	je	.L2432
	movb	$-14, -39(%rbp)
	movq	-56(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-39(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
.L2432:
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	32(%rbp), %rax
	movq	40(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	48(%rbp), %rax
	movq	56(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$3, %edi
	call	Array_encoder__DataSize_contains
	addq	$32, %rsp
	testb	%al, %al
	je	.L2433
	movb	$1, -33(%rbp)
.L2433:
	cmpb	$0, -33(%rbp)
	jne	.L2434
	cmpb	$0, -34(%rbp)
	jne	.L2434
	cmpb	$0, -36(%rbp)
	jne	.L2434
	cmpb	$0, -35(%rbp)
	jne	.L2434
	leaq	.LC286(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	%r12, %rdx
	movq	%r13, %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2434
	leaq	.LC287(%rip), %r14
	movq	%r15, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, %r15
	movq	%r15, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r15
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	%r14, %rdx
	movq	%r15, %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2434
	leaq	.LC289(%rip), %r15
	movq	%r15, -112(%rbp)
	movq	-104(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -104(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-112(%rbp), %rdx
	movq	-104(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2434
	leaq	.LC288(%rip), %r14
	movq	%r14, -128(%rbp)
	movq	-120(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -120(%rbp)
	movq	-120(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -120(%rbp)
	movq	16(%rbp), %rsi
	movq	24(%rbp), %rax
	movq	-128(%rbp), %rdx
	movq	-120(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2434
	leaq	.LC286(%rip), %rax
	movq	%rax, -144(%rbp)
	movq	-136(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -136(%rbp)
	movq	-80(%rbp), %rsi
	movq	-72(%rbp), %rax
	movq	-144(%rbp), %rdx
	movq	-136(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2434
	leaq	.LC287(%rip), %rax
	movq	%rax, -160(%rbp)
	movq	-152(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -152(%rbp)
	movq	-152(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -152(%rbp)
	movq	-80(%rbp), %rsi
	movq	-72(%rbp), %rax
	movq	-160(%rbp), %rdx
	movq	-152(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2434
	movq	%r15, -176(%rbp)
	movq	-168(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -168(%rbp)
	movq	-168(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -168(%rbp)
	movq	-80(%rbp), %rsi
	movq	-72(%rbp), %rax
	movq	-176(%rbp), %rdx
	movq	-168(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2434
	movq	%r14, -192(%rbp)
	movq	-184(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -184(%rbp)
	movq	-184(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -184(%rbp)
	movq	-80(%rbp), %rsi
	movq	-72(%rbp), %rax
	movq	-192(%rbp), %rdx
	movq	-184(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2436
.L2434:
	movzbl	-36(%rbp), %ecx
	movzbl	-35(%rbp), %edx
	movzbl	-34(%rbp), %esi
	movzbl	-33(%rbp), %eax
	movl	%eax, %edi
	call	encoder__rex
	movb	%al, -40(%rbp)
	movq	-56(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-40(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
.L2436:
	nop
	leaq	-32(%rbp), %rsp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
	.globl	encoder__is_in_i8_range
	.hidden	encoder__is_in_i8_range
encoder__is_in_i8_range:
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edi, -20(%rbp)
	cmpl	$-128, -20(%rbp)
	jl	.L2438
	cmpl	$127, -20(%rbp)
	jg	.L2438
	movl	$1, %eax
	jmp	.L2439
.L2438:
	movl	$0, %eax
.L2439:
	movb	%al, -1(%rbp)
	movzbl	-1(%rbp), %eax
	popq	%rbp
	ret
	.globl	encoder__is_in_i32_range
	.hidden	encoder__is_in_i32_range
encoder__is_in_i32_range:
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edi, -20(%rbp)
	movb	$1, -1(%rbp)
	movzbl	-1(%rbp), %eax
	popq	%rbp
	ret
	.globl	encoder__compose_mod_rm
	.hidden	encoder__compose_mod_rm
encoder__compose_mod_rm:
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%esi, %ecx
	movl	%edx, %eax
	movl	%edi, %edx
	movb	%dl, -20(%rbp)
	movl	%ecx, %edx
	movb	%dl, -24(%rbp)
	movb	%al, -28(%rbp)
	movzbl	-20(%rbp), %eax
	sall	$6, %eax
	movl	%eax, %edx
	movzbl	-24(%rbp), %eax
	sall	$3, %eax
	addl	%eax, %edx
	movzbl	-28(%rbp), %eax
	addl	%edx, %eax
	movb	%al, -1(%rbp)
	movzbl	-1(%rbp), %eax
	popq	%rbp
	ret
	.section	.rodata, "a"
.LC321:
	.string	".SECTION"
.LC322:
	.string	".TEXT"
.LC323:
	.string	".DATA"
.LC324:
	.string	"wa"
.LC325:
	.string	".data"
.LC326:
	.string	".BSS"
.LC327:
	.string	".bss"
.LC328:
	.string	".GLOBAL"
.LC329:
	.string	".GLOBL"
.LC330:
	.string	".LOCAL"
.LC331:
	.string	".HIDDEN"
.LC332:
	.string	".INTERNAL"
.LC333:
	.string	".PROTECTED"
.LC334:
	.string	".STRING"
.LC335:
	.string	".BYTE"
.LC336:
	.string	".WORD"
.LC337:
	.string	".LONG"
.LC338:
	.string	".QUAD"
.LC339:
	.string	".ZERO"
.LC340:
	.string	"POP"
.LC341:
	.string	"POPQ"
.LC342:
	.string	"PUSHQ"
.LC343:
	.string	"PUSH"
.LC344:
	.string	"CALLQ"
.LC345:
	.string	"CALL"
.LC346:
	.string	"LEAQ"
.LC347:
	.string	"LEAL"
.LC348:
	.string	"LEAW"
.LC349:
	.string	"NOTQ"
.LC350:
	.string	"NOTL"
.LC351:
	.string	"NOTW"
.LC352:
	.string	"NOTB"
.LC353:
	.string	"NEGQ"
.LC354:
	.string	"NEGL"
.LC355:
	.string	"NEGW"
.LC356:
	.string	"NEGB"
.LC357:
	.string	"DIVQ"
.LC358:
	.string	"DIVL"
.LC359:
	.string	"DIVW"
.LC360:
	.string	"DIVB"
.LC361:
	.string	"IDIVQ"
.LC362:
	.string	"IDIVL"
.LC363:
	.string	"IDIVW"
.LC364:
	.string	"IDIVB"
.LC365:
	.string	"IMULQ"
.LC366:
	.string	"IMULL"
.LC367:
	.string	"IMULW"
.LC368:
	.string	"MULQ"
.LC369:
	.string	"MULL"
.LC370:
	.string	"MULW"
.LC371:
	.string	"MULB"
.LC372:
	.string	"MOVQ"
.LC373:
	.string	"MOVL"
.LC374:
	.string	"MOVW"
.LC375:
	.string	"MOVB"
.LC376:
	.string	"MOVZBW"
.LC377:
	.string	"MOVZBL"
.LC378:
	.string	"MOVZBQ"
.LC379:
	.string	"MOVZWQ"
.LC380:
	.string	"MOVZWL"
.LC381:
	.string	"MOVSBL"
.LC382:
	.string	"MOVSBW"
.LC383:
	.string	"MOVSBQ"
.LC384:
	.string	"MOVSWL"
.LC385:
	.string	"MOVSWQ"
.LC386:
	.string	"MOVSLQ"
.LC387:
	.string	"MOVABSQ"
.LC388:
	.string	"TESTQ"
.LC389:
	.string	"TESTL"
.LC390:
	.string	"TESTW"
.LC391:
	.string	"TESTB"
.LC392:
	.string	"ADDQ"
.LC393:
	.string	"ADDL"
.LC394:
	.string	"ADDW"
.LC395:
	.string	"ADDB"
.LC396:
	.string	"ORQ"
.LC397:
	.string	"ORL"
.LC398:
	.string	"ORW"
.LC399:
	.string	"ORB"
.LC400:
	.string	"ADCQ"
.LC401:
	.string	"ADCL"
.LC402:
	.string	"ADCW"
.LC403:
	.string	"ADCB"
.LC404:
	.string	"SBBQ"
.LC405:
	.string	"SBBL"
.LC406:
	.string	"SBBW"
.LC407:
	.string	"SBBB"
.LC408:
	.string	"ANDQ"
.LC409:
	.string	"ANDL"
.LC410:
	.string	"ANDW"
.LC411:
	.string	"ANDB"
.LC412:
	.string	"SUBQ"
.LC413:
	.string	"SUBL"
.LC414:
	.string	"SUBW"
.LC415:
	.string	"SUBB"
.LC416:
	.string	"XORQ"
.LC417:
	.string	"XORL"
.LC418:
	.string	"XORW"
.LC419:
	.string	"XORB"
.LC420:
	.string	"CMPQ"
.LC421:
	.string	"CMPL"
.LC422:
	.string	"CMPW"
.LC423:
	.string	"CMPB"
.LC424:
	.string	"SHLQ"
.LC425:
	.string	"SHLL"
.LC426:
	.string	"SHLW"
.LC427:
	.string	"SHLB"
.LC428:
	.string	"SHRQ"
.LC429:
	.string	"SHRL"
.LC430:
	.string	"SHRW"
.LC431:
	.string	"SHRB"
.LC432:
	.string	"SARQ"
.LC433:
	.string	"SARL"
.LC434:
	.string	"SARW"
.LC435:
	.string	"SARB"
.LC436:
	.string	"SALQ"
.LC437:
	.string	"SALL"
.LC438:
	.string	"SALW"
.LC439:
	.string	"SALB"
.LC440:
	.string	"SETO"
.LC441:
	.string	"SETNO"
.LC442:
	.string	"SETB"
.LC443:
	.string	"SETAE"
.LC444:
	.string	"SETE"
.LC445:
	.string	"SETNE"
.LC446:
	.string	"SETNB"
.LC447:
	.string	"SETBE"
.LC448:
	.string	"SETA"
.LC449:
	.string	"SETPO"
.LC450:
	.string	"SETL"
.LC451:
	.string	"SETG"
.LC452:
	.string	"SETLE"
.LC453:
	.string	"SETGE"
.LC454:
	.string	"JMP"
.LC455:
	.string	"JNE"
.LC456:
	.string	"JE"
.LC457:
	.string	"JL"
.LC458:
	.string	"JG"
.LC459:
	.string	"JLE"
.LC460:
	.string	"JGE"
.LC461:
	.string	"JNB"
.LC462:
	.string	"JBE"
.LC463:
	.string	"JNBE"
.LC464:
	.string	"JP"
.LC465:
	.string	"JA"
.LC466:
	.string	"JB"
.LC467:
	.string	"JS"
.LC468:
	.string	"JNS"
.LC469:
	.string	"REP"
.LC470:
	.string	"CVTTSS2SIL"
.LC471:
	.string	"CVTSI2SSQ"
.LC472:
	.string	"CVTSI2SDQ"
.LC473:
	.string	"MOVD"
.LC474:
	.string	"XORPD"
.LC475:
	.string	"XORPS"
.LC476:
	.string	"MOVSS"
.LC477:
	.string	"MOVSD"
.LC478:
	.string	"MOVAPS"
.LC479:
	.string	"MOVUPS"
.LC480:
	.string	"PXOR"
.LC481:
	.string	"CVTSD2SS"
.LC482:
	.string	"CVTSS2SD"
.LC483:
	.string	"UCOMISS"
.LC484:
	.string	"UCOMISD"
.LC485:
	.string	"COMISS"
.LC486:
	.string	"COMISD"
.LC487:
	.string	"SUBSS"
.LC488:
	.string	"SUBSD"
.LC489:
	.string	"ADDSS"
.LC490:
	.string	"ADDSD"
.LC491:
	.string	"MULSS"
.LC492:
	.string	"MULSD"
.LC493:
	.string	"DIVSS"
.LC494:
	.string	"DIVSD"
.LC495:
	.string	"CMOVSQ"
.LC496:
	.string	"CMOVSL"
.LC497:
	.string	"CMOVSW"
.LC498:
	.string	"CMOVNSQ"
.LC499:
	.string	"CMOVNSL"
.LC500:
	.string	"CMOVNSW"
.LC501:
	.string	"CMOVGEQ"
.LC502:
	.string	"CMOVGEL"
.LC503:
	.string	"CMOVGEW"
.LC504:
	.string	"RETQ"
.LC505:
	.string	"RET"
.LC506:
	.string	"SYSCALL"
.LC507:
	.string	"NOPQ"
.LC508:
	.string	"NOP"
.LC509:
	.string	"HLT"
.LC510:
	.string	"LEAVE"
.LC511:
	.string	"CLTQ"
.LC512:
	.string	"CLTD"
.LC513:
	.string	"CQTO"
.LC514:
	.string	"CWTL"
.LC515:
	.string	"unkwoun instruction `"
	.text
	.globl	encoder__Encoder_encode_instr
	.hidden	encoder__Encoder_encode_instr
encoder__Encoder_encode_instr:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$6600, %rsp
	movq	%rdi, -3496(%rbp)
	movq	-3496(%rbp), %rcx
	movq	8(%rcx), %rax
	movq	16(%rcx), %rdx
	movq	%rax, -2624(%rbp)
	movq	%rdx, -2616(%rbp)
	movq	24(%rcx), %rax
	movq	%rax, -2608(%rbp)
	movq	-3496(%rbp), %rax
	movq	40(%rax), %rdx
	movq	32(%rax), %rax
	movq	%rax, -2640(%rbp)
	movq	%rdx, -2632(%rbp)
	movq	-2640(%rbp), %rdx
	movq	-2632(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	string_to_upper
	movq	%rax, -2656(%rbp)
	movq	%rdx, -2648(%rbp)
	movq	-3496(%rbp), %rax
	movq	%rax, %rdi
	call	encoder__Encoder_next
	movq	-3496(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$4, %eax
	jne	.L2446
	leaq	-3280(%rbp), %rdx
	movl	$0, %eax
	movl	$17, %ecx
	movq	%rdx, %rdi
	rep stosq
	movl	$107, -3280(%rbp)
	leaq	-3272(%rbp), %rax
	movl	$0, %r8d
	movl	$1, %ecx
	movl	$16, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array_with_default
	movq	-2640(%rbp), %rax
	movq	-2632(%rbp), %rdx
	movq	%rax, -3240(%rbp)
	movq	%rdx, -3232(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -3224(%rbp)
	movl	$1, -3212(%rbp)
	movq	-3496(%rbp), %rax
	movq	112(%rax), %rdx
	movq	104(%rax), %rax
	movq	%rax, -3192(%rbp)
	movq	%rdx, -3184(%rbp)
	movq	-2624(%rbp), %rax
	movq	-2616(%rbp), %rdx
	movq	%rax, -3168(%rbp)
	movq	%rdx, -3160(%rbp)
	movq	-2608(%rbp), %rax
	movq	%rax, -3152(%rbp)
	leaq	-3280(%rbp), %rax
	movl	$136, %esi
	movq	%rax, %rdi
	call	memdup
	movq	%rax, -56(%rbp)
	movq	-3496(%rbp), %rax
	movl	$4, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_expect
	movq	-2640(%rbp), %rax
	movq	-2632(%rbp), %rdx
	movq	%rax, -2704(%rbp)
	movq	%rdx, -2696(%rbp)
	movq	-3496(%rbp), %rax
	movq	192(%rax), %rcx
	movq	200(%rax), %rbx
	movq	%rcx, -3408(%rbp)
	movq	%rbx, -3400(%rbp)
	movq	208(%rax), %rcx
	movq	216(%rax), %rbx
	movq	%rcx, -3392(%rbp)
	movq	%rbx, -3384(%rbp)
	movq	224(%rax), %rcx
	movq	232(%rax), %rbx
	movq	%rcx, -3376(%rbp)
	movq	%rbx, -3368(%rbp)
	movq	240(%rax), %rcx
	movq	248(%rax), %rbx
	movq	%rcx, -3360(%rbp)
	movq	%rbx, -3352(%rbp)
	movq	256(%rax), %rcx
	movq	264(%rax), %rbx
	movq	%rcx, -3344(%rbp)
	movq	%rbx, -3336(%rbp)
	movq	272(%rax), %rcx
	movq	280(%rax), %rbx
	movq	%rcx, -3328(%rbp)
	movq	%rbx, -3320(%rbp)
	movq	288(%rax), %rcx
	movq	296(%rax), %rbx
	movq	%rcx, -3312(%rbp)
	movq	%rbx, -3304(%rbp)
	movq	304(%rax), %rax
	movq	%rax, -3296(%rbp)
	leaq	-2704(%rbp), %rdx
	leaq	-3408(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	map_exists
	testb	%al, %al
	jne	.L2447
	leaq	.LC231(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$5, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	-2640(%rbp), %rsi
	movq	-2632(%rbp), %rax
	movq	%r12, %rdx
	movq	%r13, %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2448
.L2447:
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -3488(%rbp)
	movaps	%xmm0, -3472(%rbp)
	movaps	%xmm0, -3456(%rbp)
	movaps	%xmm0, -3440(%rbp)
	movaps	%xmm0, -3424(%rbp)
	leaq	.LC227(%rip), %rax
	movq	%rax, -3488(%rbp)
	movl	$8, -3480(%rbp)
	movl	$1, -3476(%rbp)
	movl	$65040, -3472(%rbp)
	movq	-2640(%rbp), %rax
	movq	-2632(%rbp), %rdx
	movq	%rax, -3464(%rbp)
	movq	%rdx, -3456(%rbp)
	leaq	.LC228(%rip), %rax
	movq	%rax, -3448(%rbp)
	movl	$20, -3440(%rbp)
	movl	$1, -3436(%rbp)
	leaq	-3488(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %rdi
	movq	%rdx, %rsi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rcx
	movq	-2624(%rbp), %rax
	movq	-2616(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-2608(%rbp), %rax
	movq	%rax, 16(%rcx)
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2448:
	movq	$0, -2680(%rbp)
	movq	-2640(%rbp), %rax
	movq	-2632(%rbp), %rdx
	movq	%rax, -2672(%rbp)
	movq	%rdx, -2664(%rbp)
	movq	-3496(%rbp), %rax
	leaq	192(%rax), %rcx
	leaq	-2680(%rbp), %rdx
	leaq	-2672(%rbp), %rax
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	map_get_and_set
	movq	-56(%rbp), %rdx
	movq	%rdx, (%rax)
	movq	-56(%rbp), %rax
	movq	%rax, -2688(%rbp)
	movq	-3496(%rbp), %rax
	leaq	128(%rax), %rdx
	leaq	-2688(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	jmp	.L2445
.L2446:
	leaq	.LC321(%rip), %rax
	movq	%rax, -3520(%rbp)
	movq	-3512(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$8, %rax
	movq	%rax, -3512(%rbp)
	movq	-3512(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -3512(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-3520(%rbp), %rdx
	movq	-3512(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2450
	movq	-3496(%rbp), %rax
	movq	%rax, %rdi
	call	encoder__Encoder_section
	jmp	.L2445
.L2450:
	leaq	.LC322(%rip), %rax
	movq	%rax, -3536(%rbp)
	movq	-3528(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$5, %rax
	movq	%rax, -3528(%rbp)
	movq	-3528(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -3528(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-3536(%rbp), %rdx
	movq	-3528(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2452
	leaq	.LC230(%rip), %r14
	movq	%r15, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, %r15
	movq	%r15, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r15
	leaq	.LC231(%rip), %rax
	movq	%rax, -3552(%rbp)
	movq	-3544(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$5, %rax
	movq	%rax, -3544(%rbp)
	movq	-3544(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -3544(%rbp)
	movq	%r14, %rcx
	movq	%r15, %rbx
	movq	%r14, %rax
	movq	%r15, %rdx
	movq	%rcx, %r8
	movq	%rdx, %r10
	movq	-3552(%rbp), %rax
	movq	-3544(%rbp), %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %rsi
	movq	%rdx, %r9
	movq	-3496(%rbp), %rdi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rcx
	movq	-2624(%rbp), %rax
	movq	-2616(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-2608(%rbp), %rax
	movq	%rax, 16(%rcx)
	movq	%r8, %rcx
	movq	%r10, %r8
	movq	%r9, %rdx
	call	encoder__Encoder_add_section
	addq	$32, %rsp
	jmp	.L2445
.L2452:
	leaq	.LC323(%rip), %rax
	movq	%rax, -3568(%rbp)
	movq	-3560(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$5, %rax
	movq	%rax, -3560(%rbp)
	movq	-3560(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -3560(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-3568(%rbp), %rdx
	movq	-3560(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2454
	leaq	.LC324(%rip), %rax
	movq	%rax, -3600(%rbp)
	movq	-3592(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, -3592(%rbp)
	movq	-3592(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -3592(%rbp)
	leaq	.LC325(%rip), %rax
	movq	%rax, -3584(%rbp)
	movq	-3576(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$5, %rax
	movq	%rax, -3576(%rbp)
	movq	-3576(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -3576(%rbp)
	movq	-3600(%rbp), %rax
	movq	-3592(%rbp), %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %r8
	movq	%rdx, %r10
	movq	-3584(%rbp), %rax
	movq	-3576(%rbp), %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %rsi
	movq	%rdx, %r9
	movq	-3496(%rbp), %rdi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rcx
	movq	-2624(%rbp), %rax
	movq	-2616(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-2608(%rbp), %rax
	movq	%rax, 16(%rcx)
	movq	%r8, %rcx
	movq	%r10, %r8
	movq	%r9, %rdx
	call	encoder__Encoder_add_section
	addq	$32, %rsp
	jmp	.L2445
.L2454:
	leaq	.LC326(%rip), %rax
	movq	%rax, -3616(%rbp)
	movq	-3608(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -3608(%rbp)
	movq	-3608(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -3608(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-3616(%rbp), %rdx
	movq	-3608(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2456
	leaq	.LC324(%rip), %rax
	movq	%rax, -3648(%rbp)
	movq	-3640(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, -3640(%rbp)
	movq	-3640(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -3640(%rbp)
	leaq	.LC327(%rip), %rax
	movq	%rax, -3632(%rbp)
	movq	-3624(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -3624(%rbp)
	movq	-3624(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -3624(%rbp)
	movq	-3648(%rbp), %rax
	movq	-3640(%rbp), %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %r8
	movq	%rdx, %r10
	movq	-3632(%rbp), %rax
	movq	-3624(%rbp), %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %rsi
	movq	%rdx, %r9
	movq	-3496(%rbp), %rdi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rcx
	movq	-2624(%rbp), %rax
	movq	-2616(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-2608(%rbp), %rax
	movq	%rax, 16(%rcx)
	movq	%r8, %rcx
	movq	%r10, %r8
	movq	%r9, %rdx
	call	encoder__Encoder_add_section
	addq	$32, %rsp
	jmp	.L2445
.L2456:
	leaq	.LC328(%rip), %rax
	movq	%rax, -3664(%rbp)
	movq	-3656(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$7, %rax
	movq	%rax, -3656(%rbp)
	movq	-3656(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -3656(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-3664(%rbp), %rdx
	movq	-3656(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2458
	leaq	.LC329(%rip), %rax
	movq	%rax, -3680(%rbp)
	movq	-3672(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$6, %rax
	movq	%rax, -3672(%rbp)
	movq	-3672(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -3672(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-3680(%rbp), %rdx
	movq	-3672(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2459
.L2458:
	leaq	-3280(%rbp), %rdx
	movl	$0, %eax
	movl	$17, %ecx
	movq	%rdx, %rdi
	rep stosq
	movl	$2, -3280(%rbp)
	leaq	-3272(%rbp), %rax
	movl	$0, %r8d
	movl	$1, %ecx
	movl	$16, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array_with_default
	movq	-3496(%rbp), %rax
	movq	40(%rax), %rdx
	movq	32(%rax), %rax
	movq	%rax, -3240(%rbp)
	movq	%rdx, -3232(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -3224(%rbp)
	movl	$1, -3212(%rbp)
	movq	-3496(%rbp), %rax
	movq	112(%rax), %rdx
	movq	104(%rax), %rax
	movq	%rax, -3192(%rbp)
	movq	%rdx, -3184(%rbp)
	movq	-2624(%rbp), %rax
	movq	-2616(%rbp), %rdx
	movq	%rax, -3168(%rbp)
	movq	%rdx, -3160(%rbp)
	movq	-2608(%rbp), %rax
	movq	%rax, -3152(%rbp)
	leaq	-3280(%rbp), %rax
	movl	$136, %esi
	movq	%rax, %rdi
	call	memdup
	movq	%rax, -2712(%rbp)
	movq	-3496(%rbp), %rax
	leaq	128(%rax), %rdx
	leaq	-2712(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	movq	-3496(%rbp), %rax
	movq	%rax, %rdi
	call	encoder__Encoder_next
	jmp	.L2445
.L2459:
	leaq	.LC330(%rip), %rax
	movq	%rax, -3696(%rbp)
	movq	-3688(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$6, %rax
	movq	%rax, -3688(%rbp)
	movq	-3688(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -3688(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-3696(%rbp), %rdx
	movq	-3688(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2461
	leaq	-3280(%rbp), %rdx
	movl	$0, %eax
	movl	$17, %ecx
	movq	%rdx, %rdi
	rep stosq
	movl	$3, -3280(%rbp)
	leaq	-3272(%rbp), %rax
	movl	$0, %r8d
	movl	$1, %ecx
	movl	$16, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array_with_default
	movq	-3496(%rbp), %rax
	movq	40(%rax), %rdx
	movq	32(%rax), %rax
	movq	%rax, -3240(%rbp)
	movq	%rdx, -3232(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -3224(%rbp)
	movl	$1, -3212(%rbp)
	movq	-3496(%rbp), %rax
	movq	112(%rax), %rdx
	movq	104(%rax), %rax
	movq	%rax, -3192(%rbp)
	movq	%rdx, -3184(%rbp)
	movq	-2624(%rbp), %rax
	movq	-2616(%rbp), %rdx
	movq	%rax, -3168(%rbp)
	movq	%rdx, -3160(%rbp)
	movq	-2608(%rbp), %rax
	movq	%rax, -3152(%rbp)
	leaq	-3280(%rbp), %rax
	movl	$136, %esi
	movq	%rax, %rdi
	call	memdup
	movq	%rax, -2720(%rbp)
	movq	-3496(%rbp), %rax
	leaq	128(%rax), %rdx
	leaq	-2720(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	movq	-3496(%rbp), %rax
	movq	%rax, %rdi
	call	encoder__Encoder_next
	jmp	.L2445
.L2461:
	leaq	.LC331(%rip), %rax
	movq	%rax, -3712(%rbp)
	movq	-3704(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$7, %rax
	movq	%rax, -3704(%rbp)
	movq	-3704(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -3704(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-3712(%rbp), %rdx
	movq	-3704(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2463
	leaq	-3280(%rbp), %rdx
	movl	$0, %eax
	movl	$17, %ecx
	movq	%rdx, %rdi
	rep stosq
	movl	$4, -3280(%rbp)
	leaq	-3272(%rbp), %rax
	movl	$0, %r8d
	movl	$1, %ecx
	movl	$16, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array_with_default
	movq	-3496(%rbp), %rax
	movq	40(%rax), %rdx
	movq	32(%rax), %rax
	movq	%rax, -3240(%rbp)
	movq	%rdx, -3232(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -3224(%rbp)
	movl	$1, -3212(%rbp)
	movq	-3496(%rbp), %rax
	movq	112(%rax), %rdx
	movq	104(%rax), %rax
	movq	%rax, -3192(%rbp)
	movq	%rdx, -3184(%rbp)
	movq	-2624(%rbp), %rax
	movq	-2616(%rbp), %rdx
	movq	%rax, -3168(%rbp)
	movq	%rdx, -3160(%rbp)
	movq	-2608(%rbp), %rax
	movq	%rax, -3152(%rbp)
	leaq	-3280(%rbp), %rax
	movl	$136, %esi
	movq	%rax, %rdi
	call	memdup
	movq	%rax, -2728(%rbp)
	movq	-3496(%rbp), %rax
	leaq	128(%rax), %rdx
	leaq	-2728(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	movq	-3496(%rbp), %rax
	movq	%rax, %rdi
	call	encoder__Encoder_next
	jmp	.L2445
.L2463:
	leaq	.LC332(%rip), %rax
	movq	%rax, -3728(%rbp)
	movq	-3720(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$9, %rax
	movq	%rax, -3720(%rbp)
	movq	-3720(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -3720(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-3728(%rbp), %rdx
	movq	-3720(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2465
	leaq	-3280(%rbp), %rdx
	movl	$0, %eax
	movl	$17, %ecx
	movq	%rdx, %rdi
	rep stosq
	movl	$5, -3280(%rbp)
	leaq	-3272(%rbp), %rax
	movl	$0, %r8d
	movl	$1, %ecx
	movl	$16, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array_with_default
	movq	-3496(%rbp), %rax
	movq	40(%rax), %rdx
	movq	32(%rax), %rax
	movq	%rax, -3240(%rbp)
	movq	%rdx, -3232(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -3224(%rbp)
	movl	$1, -3212(%rbp)
	movq	-3496(%rbp), %rax
	movq	112(%rax), %rdx
	movq	104(%rax), %rax
	movq	%rax, -3192(%rbp)
	movq	%rdx, -3184(%rbp)
	movq	-2624(%rbp), %rax
	movq	-2616(%rbp), %rdx
	movq	%rax, -3168(%rbp)
	movq	%rdx, -3160(%rbp)
	movq	-2608(%rbp), %rax
	movq	%rax, -3152(%rbp)
	leaq	-3280(%rbp), %rax
	movl	$136, %esi
	movq	%rax, %rdi
	call	memdup
	movq	%rax, -2736(%rbp)
	movq	-3496(%rbp), %rax
	leaq	128(%rax), %rdx
	leaq	-2736(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	movq	-3496(%rbp), %rax
	movq	%rax, %rdi
	call	encoder__Encoder_next
	jmp	.L2445
.L2465:
	leaq	.LC333(%rip), %rax
	movq	%rax, -3744(%rbp)
	movq	-3736(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$10, %rax
	movq	%rax, -3736(%rbp)
	movq	-3736(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -3736(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-3744(%rbp), %rdx
	movq	-3736(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2467
	leaq	-3280(%rbp), %rdx
	movl	$0, %eax
	movl	$17, %ecx
	movq	%rdx, %rdi
	rep stosq
	movl	$6, -3280(%rbp)
	leaq	-3272(%rbp), %rax
	movl	$0, %r8d
	movl	$1, %ecx
	movl	$16, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array_with_default
	movq	-3496(%rbp), %rax
	movq	40(%rax), %rdx
	movq	32(%rax), %rax
	movq	%rax, -3240(%rbp)
	movq	%rdx, -3232(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -3224(%rbp)
	movl	$1, -3212(%rbp)
	movq	-3496(%rbp), %rax
	movq	112(%rax), %rdx
	movq	104(%rax), %rax
	movq	%rax, -3192(%rbp)
	movq	%rdx, -3184(%rbp)
	movq	-2624(%rbp), %rax
	movq	-2616(%rbp), %rdx
	movq	%rax, -3168(%rbp)
	movq	%rdx, -3160(%rbp)
	movq	-2608(%rbp), %rax
	movq	%rax, -3152(%rbp)
	leaq	-3280(%rbp), %rax
	movl	$136, %esi
	movq	%rax, %rdi
	call	memdup
	movq	%rax, -2744(%rbp)
	movq	-3496(%rbp), %rax
	leaq	128(%rax), %rdx
	leaq	-2744(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	movq	-3496(%rbp), %rax
	movq	%rax, %rdi
	call	encoder__Encoder_next
	jmp	.L2445
.L2467:
	leaq	.LC334(%rip), %rax
	movq	%rax, -3760(%rbp)
	movq	-3752(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$7, %rax
	movq	%rax, -3752(%rbp)
	movq	-3752(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -3752(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-3760(%rbp), %rdx
	movq	-3752(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2469
	movq	-3496(%rbp), %rax
	movq	%rax, %rdi
	call	encoder__Encoder_string
	jmp	.L2445
.L2469:
	leaq	.LC335(%rip), %rax
	movq	%rax, -3776(%rbp)
	movq	-3768(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$5, %rax
	movq	%rax, -3768(%rbp)
	movq	-3768(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -3768(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-3776(%rbp), %rdx
	movq	-3768(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2471
	movq	-3496(%rbp), %rax
	movq	%rax, %rdi
	call	encoder__Encoder_byte
	jmp	.L2445
.L2471:
	leaq	.LC336(%rip), %rax
	movq	%rax, -3792(%rbp)
	movq	-3784(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$5, %rax
	movq	%rax, -3784(%rbp)
	movq	-3784(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -3784(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-3792(%rbp), %rdx
	movq	-3784(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2473
	movq	-3496(%rbp), %rax
	movq	%rax, %rdi
	call	encoder__Encoder_word
	jmp	.L2445
.L2473:
	leaq	.LC337(%rip), %rax
	movq	%rax, -3808(%rbp)
	movq	-3800(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$5, %rax
	movq	%rax, -3800(%rbp)
	movq	-3800(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -3800(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-3808(%rbp), %rdx
	movq	-3800(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2475
	movq	-3496(%rbp), %rax
	movq	%rax, %rdi
	call	encoder__Encoder_long
	jmp	.L2445
.L2475:
	leaq	.LC338(%rip), %rax
	movq	%rax, -3824(%rbp)
	movq	-3816(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$5, %rax
	movq	%rax, -3816(%rbp)
	movq	-3816(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -3816(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-3824(%rbp), %rdx
	movq	-3816(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2477
	movq	-3496(%rbp), %rax
	movq	%rax, %rdi
	call	encoder__Encoder_quad
	jmp	.L2445
.L2477:
	leaq	.LC339(%rip), %rax
	movq	%rax, -3840(%rbp)
	movq	-3832(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$5, %rax
	movq	%rax, -3832(%rbp)
	movq	-3832(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -3832(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-3840(%rbp), %rdx
	movq	-3832(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2479
	movq	-3496(%rbp), %rax
	movq	%rax, %rdi
	call	encoder__Encoder_zero
	jmp	.L2445
.L2479:
	leaq	.LC340(%rip), %rax
	movq	%rax, -3856(%rbp)
	movq	-3848(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -3848(%rbp)
	movq	-3848(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -3848(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-3856(%rbp), %rdx
	movq	-3848(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2481
	leaq	.LC341(%rip), %rax
	movq	%rax, -3872(%rbp)
	movq	-3864(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -3864(%rbp)
	movq	-3864(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -3864(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-3872(%rbp), %rdx
	movq	-3864(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2482
.L2481:
	movq	-3496(%rbp), %rax
	movq	%rax, %rdi
	call	encoder__Encoder_pop
	jmp	.L2445
.L2482:
	leaq	.LC342(%rip), %rax
	movq	%rax, -3888(%rbp)
	movq	-3880(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$5, %rax
	movq	%rax, -3880(%rbp)
	movq	-3880(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -3880(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-3888(%rbp), %rdx
	movq	-3880(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2484
	leaq	.LC343(%rip), %rax
	movq	%rax, -3904(%rbp)
	movq	-3896(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -3896(%rbp)
	movq	-3896(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -3896(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-3904(%rbp), %rdx
	movq	-3896(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2485
.L2484:
	movq	-3496(%rbp), %rax
	movq	%rax, %rdi
	call	encoder__Encoder_push
	jmp	.L2445
.L2485:
	leaq	.LC344(%rip), %rax
	movq	%rax, -3920(%rbp)
	movq	-3912(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$5, %rax
	movq	%rax, -3912(%rbp)
	movq	-3912(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -3912(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-3920(%rbp), %rdx
	movq	-3912(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2487
	leaq	.LC345(%rip), %rax
	movq	%rax, -3936(%rbp)
	movq	-3928(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -3928(%rbp)
	movq	-3928(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -3928(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-3936(%rbp), %rdx
	movq	-3928(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2488
.L2487:
	movq	-3496(%rbp), %rax
	movq	%rax, %rdi
	call	encoder__Encoder_call
	jmp	.L2445
.L2488:
	leaq	.LC346(%rip), %rax
	movq	%rax, -3952(%rbp)
	movq	-3944(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -3944(%rbp)
	movq	-3944(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -3944(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-3952(%rbp), %rdx
	movq	-3944(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2490
	leaq	.LC347(%rip), %rax
	movq	%rax, -3968(%rbp)
	movq	-3960(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -3960(%rbp)
	movq	-3960(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -3960(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-3968(%rbp), %rdx
	movq	-3960(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2490
	leaq	.LC348(%rip), %rax
	movq	%rax, -3984(%rbp)
	movq	-3976(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -3976(%rbp)
	movq	-3976(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -3976(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-3984(%rbp), %rdx
	movq	-3976(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2491
.L2490:
	movq	-2656(%rbp), %rcx
	movq	-2648(%rbp), %rdx
	movq	-3496(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	encoder__Encoder_lea
	jmp	.L2445
.L2491:
	leaq	.LC349(%rip), %rax
	movq	%rax, -4000(%rbp)
	movq	-3992(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -3992(%rbp)
	movq	-3992(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -3992(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4000(%rbp), %rdx
	movq	-3992(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2493
	leaq	.LC350(%rip), %rax
	movq	%rax, -4016(%rbp)
	movq	-4008(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -4008(%rbp)
	movq	-4008(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4008(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4016(%rbp), %rdx
	movq	-4008(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2493
	leaq	.LC351(%rip), %rax
	movq	%rax, -4032(%rbp)
	movq	-4024(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -4024(%rbp)
	movq	-4024(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4024(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4032(%rbp), %rdx
	movq	-4024(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2493
	leaq	.LC352(%rip), %rax
	movq	%rax, -4048(%rbp)
	movq	-4040(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -4040(%rbp)
	movq	-4040(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4040(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4048(%rbp), %rdx
	movq	-4040(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2494
.L2493:
	movq	-2656(%rbp), %rdx
	movq	-2648(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	encoder__get_size_by_suffix
	movl	%eax, %edx
	movq	-3496(%rbp), %rax
	movl	%edx, %ecx
	movl	$2, %edx
	movl	$32, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_one_operand_arith
	jmp	.L2445
.L2494:
	leaq	.LC353(%rip), %rax
	movq	%rax, -4064(%rbp)
	movq	-4056(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -4056(%rbp)
	movq	-4056(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4056(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4064(%rbp), %rdx
	movq	-4056(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2496
	leaq	.LC354(%rip), %rax
	movq	%rax, -4080(%rbp)
	movq	-4072(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -4072(%rbp)
	movq	-4072(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4072(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4080(%rbp), %rdx
	movq	-4072(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2496
	leaq	.LC355(%rip), %rax
	movq	%rax, -4096(%rbp)
	movq	-4088(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -4088(%rbp)
	movq	-4088(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4088(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4096(%rbp), %rdx
	movq	-4088(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2496
	leaq	.LC356(%rip), %rax
	movq	%rax, -4112(%rbp)
	movq	-4104(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -4104(%rbp)
	movq	-4104(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4104(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4112(%rbp), %rdx
	movq	-4104(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2497
.L2496:
	movq	-2656(%rbp), %rdx
	movq	-2648(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	encoder__get_size_by_suffix
	movl	%eax, %edx
	movq	-3496(%rbp), %rax
	movl	%edx, %ecx
	movl	$3, %edx
	movl	$23, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_one_operand_arith
	jmp	.L2445
.L2497:
	leaq	.LC357(%rip), %rax
	movq	%rax, -4128(%rbp)
	movq	-4120(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -4120(%rbp)
	movq	-4120(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4120(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4128(%rbp), %rdx
	movq	-4120(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2499
	leaq	.LC358(%rip), %rax
	movq	%rax, -4144(%rbp)
	movq	-4136(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -4136(%rbp)
	movq	-4136(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4136(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4144(%rbp), %rdx
	movq	-4136(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2499
	leaq	.LC359(%rip), %rax
	movq	%rax, -4160(%rbp)
	movq	-4152(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -4152(%rbp)
	movq	-4152(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4152(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4160(%rbp), %rdx
	movq	-4152(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2499
	leaq	.LC360(%rip), %rax
	movq	%rax, -4176(%rbp)
	movq	-4168(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -4168(%rbp)
	movq	-4168(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4168(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4176(%rbp), %rdx
	movq	-4168(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2500
.L2499:
	movq	-2656(%rbp), %rdx
	movq	-2648(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	encoder__get_size_by_suffix
	movl	%eax, %edx
	movq	-3496(%rbp), %rax
	movl	%edx, %ecx
	movl	$6, %edx
	movl	$22, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_one_operand_arith
	jmp	.L2445
.L2500:
	leaq	.LC361(%rip), %rax
	movq	%rax, -4192(%rbp)
	movq	-4184(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$5, %rax
	movq	%rax, -4184(%rbp)
	movq	-4184(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4184(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4192(%rbp), %rdx
	movq	-4184(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2502
	leaq	.LC362(%rip), %rax
	movq	%rax, -4208(%rbp)
	movq	-4200(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$5, %rax
	movq	%rax, -4200(%rbp)
	movq	-4200(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4200(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4208(%rbp), %rdx
	movq	-4200(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2502
	leaq	.LC363(%rip), %rax
	movq	%rax, -4224(%rbp)
	movq	-4216(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$5, %rax
	movq	%rax, -4216(%rbp)
	movq	-4216(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4216(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4224(%rbp), %rdx
	movq	-4216(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2502
	leaq	.LC364(%rip), %rax
	movq	%rax, -4240(%rbp)
	movq	-4232(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$5, %rax
	movq	%rax, -4232(%rbp)
	movq	-4232(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4232(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4240(%rbp), %rdx
	movq	-4232(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2503
.L2502:
	movq	-2656(%rbp), %rdx
	movq	-2648(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	encoder__get_size_by_suffix
	movl	%eax, %edx
	movq	-3496(%rbp), %rax
	movl	%edx, %ecx
	movl	$7, %edx
	movl	$21, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_one_operand_arith
	jmp	.L2445
.L2503:
	leaq	.LC365(%rip), %rax
	movq	%rax, -4256(%rbp)
	movq	-4248(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$5, %rax
	movq	%rax, -4248(%rbp)
	movq	-4248(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4248(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4256(%rbp), %rdx
	movq	-4248(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2505
	leaq	.LC366(%rip), %rax
	movq	%rax, -4272(%rbp)
	movq	-4264(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$5, %rax
	movq	%rax, -4264(%rbp)
	movq	-4264(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4264(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4272(%rbp), %rdx
	movq	-4264(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2505
	leaq	.LC367(%rip), %rax
	movq	%rax, -4288(%rbp)
	movq	-4280(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$5, %rax
	movq	%rax, -4280(%rbp)
	movq	-4280(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4280(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4288(%rbp), %rdx
	movq	-4280(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2506
.L2505:
	movq	-2656(%rbp), %rdx
	movq	-2648(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	encoder__get_size_by_suffix
	movl	%eax, %edx
	movq	-3496(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_imul
	jmp	.L2445
.L2506:
	leaq	.LC368(%rip), %rax
	movq	%rax, -4304(%rbp)
	movq	-4296(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -4296(%rbp)
	movq	-4296(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4296(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4304(%rbp), %rdx
	movq	-4296(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2508
	leaq	.LC369(%rip), %rax
	movq	%rax, -4320(%rbp)
	movq	-4312(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -4312(%rbp)
	movq	-4312(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4312(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4320(%rbp), %rdx
	movq	-4312(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2508
	leaq	.LC370(%rip), %rax
	movq	%rax, -4336(%rbp)
	movq	-4328(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -4328(%rbp)
	movq	-4328(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4328(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4336(%rbp), %rdx
	movq	-4328(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2508
	leaq	.LC371(%rip), %rax
	movq	%rax, -4352(%rbp)
	movq	-4344(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -4344(%rbp)
	movq	-4344(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4344(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4352(%rbp), %rdx
	movq	-4344(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2509
.L2508:
	movq	-2656(%rbp), %rdx
	movq	-2648(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	encoder__get_size_by_suffix
	movl	%eax, %edx
	movq	-3496(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_mul
	jmp	.L2445
.L2509:
	leaq	.LC372(%rip), %rax
	movq	%rax, -4368(%rbp)
	movq	-4360(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -4360(%rbp)
	movq	-4360(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4360(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4368(%rbp), %rdx
	movq	-4360(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2511
	leaq	.LC373(%rip), %rax
	movq	%rax, -4384(%rbp)
	movq	-4376(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -4376(%rbp)
	movq	-4376(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4376(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4384(%rbp), %rdx
	movq	-4376(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2511
	leaq	.LC374(%rip), %rax
	movq	%rax, -4400(%rbp)
	movq	-4392(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -4392(%rbp)
	movq	-4392(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4392(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4400(%rbp), %rdx
	movq	-4392(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2511
	leaq	.LC375(%rip), %rax
	movq	%rax, -4416(%rbp)
	movq	-4408(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -4408(%rbp)
	movq	-4408(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4408(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4416(%rbp), %rdx
	movq	-4408(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2512
.L2511:
	movq	-2656(%rbp), %rdx
	movq	-2648(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	encoder__get_size_by_suffix
	movl	%eax, %edx
	movq	-3496(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_mov
	jmp	.L2445
.L2512:
	leaq	.LC376(%rip), %rax
	movq	%rax, -4432(%rbp)
	movq	-4424(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$6, %rax
	movq	%rax, -4424(%rbp)
	movq	-4424(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4424(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4432(%rbp), %rdx
	movq	-4424(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2514
	movb	$15, -2746(%rbp)
	movb	$-74, -2745(%rbp)
	leaq	-2592(%rbp), %rax
	leaq	-2746(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-2592(%rbp), %rax
	movq	-2584(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-2576(%rbp), %rax
	movq	-2568(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$1, %edx
	movl	$0, %esi
	call	encoder__Encoder_mov_zero_or_sign_extend
	addq	$32, %rsp
	jmp	.L2445
.L2514:
	leaq	.LC377(%rip), %rax
	movq	%rax, -4448(%rbp)
	movq	-4440(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$6, %rax
	movq	%rax, -4440(%rbp)
	movq	-4440(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4440(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4448(%rbp), %rdx
	movq	-4440(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2516
	movb	$15, -2748(%rbp)
	movb	$-74, -2747(%rbp)
	leaq	-2560(%rbp), %rax
	leaq	-2748(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-2560(%rbp), %rax
	movq	-2552(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-2544(%rbp), %rax
	movq	-2536(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$2, %edx
	movl	$0, %esi
	call	encoder__Encoder_mov_zero_or_sign_extend
	addq	$32, %rsp
	jmp	.L2445
.L2516:
	leaq	.LC378(%rip), %rax
	movq	%rax, -4464(%rbp)
	movq	-4456(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$6, %rax
	movq	%rax, -4456(%rbp)
	movq	-4456(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4456(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4464(%rbp), %rdx
	movq	-4456(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2518
	movb	$15, -2750(%rbp)
	movb	$-74, -2749(%rbp)
	leaq	-2528(%rbp), %rax
	leaq	-2750(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-2528(%rbp), %rax
	movq	-2520(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-2512(%rbp), %rax
	movq	-2504(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$3, %edx
	movl	$0, %esi
	call	encoder__Encoder_mov_zero_or_sign_extend
	addq	$32, %rsp
	jmp	.L2445
.L2518:
	leaq	.LC379(%rip), %rax
	movq	%rax, -4480(%rbp)
	movq	-4472(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$6, %rax
	movq	%rax, -4472(%rbp)
	movq	-4472(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4472(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4480(%rbp), %rdx
	movq	-4472(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2520
	movb	$15, -2752(%rbp)
	movb	$-73, -2751(%rbp)
	leaq	-2496(%rbp), %rax
	leaq	-2752(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-2496(%rbp), %rax
	movq	-2488(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-2480(%rbp), %rax
	movq	-2472(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$3, %edx
	movl	$1, %esi
	call	encoder__Encoder_mov_zero_or_sign_extend
	addq	$32, %rsp
	jmp	.L2445
.L2520:
	leaq	.LC380(%rip), %rax
	movq	%rax, -4496(%rbp)
	movq	-4488(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$6, %rax
	movq	%rax, -4488(%rbp)
	movq	-4488(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4488(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4496(%rbp), %rdx
	movq	-4488(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2522
	movb	$15, -2754(%rbp)
	movb	$-73, -2753(%rbp)
	leaq	-2464(%rbp), %rax
	leaq	-2754(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-2464(%rbp), %rax
	movq	-2456(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-2448(%rbp), %rax
	movq	-2440(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$2, %edx
	movl	$1, %esi
	call	encoder__Encoder_mov_zero_or_sign_extend
	addq	$32, %rsp
	jmp	.L2445
.L2522:
	leaq	.LC381(%rip), %rax
	movq	%rax, -4512(%rbp)
	movq	-4504(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$6, %rax
	movq	%rax, -4504(%rbp)
	movq	-4504(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4504(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4512(%rbp), %rdx
	movq	-4504(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2524
	movb	$15, -2756(%rbp)
	movb	$-66, -2755(%rbp)
	leaq	-2432(%rbp), %rax
	leaq	-2756(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-2432(%rbp), %rax
	movq	-2424(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-2416(%rbp), %rax
	movq	-2408(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$2, %edx
	movl	$0, %esi
	call	encoder__Encoder_mov_zero_or_sign_extend
	addq	$32, %rsp
	jmp	.L2445
.L2524:
	leaq	.LC382(%rip), %rax
	movq	%rax, -4528(%rbp)
	movq	-4520(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$6, %rax
	movq	%rax, -4520(%rbp)
	movq	-4520(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4520(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4528(%rbp), %rdx
	movq	-4520(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2526
	movb	$15, -2758(%rbp)
	movb	$-66, -2757(%rbp)
	leaq	-2400(%rbp), %rax
	leaq	-2758(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-2400(%rbp), %rax
	movq	-2392(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-2384(%rbp), %rax
	movq	-2376(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$1, %edx
	movl	$0, %esi
	call	encoder__Encoder_mov_zero_or_sign_extend
	addq	$32, %rsp
	jmp	.L2445
.L2526:
	leaq	.LC383(%rip), %rax
	movq	%rax, -4544(%rbp)
	movq	-4536(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$6, %rax
	movq	%rax, -4536(%rbp)
	movq	-4536(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4536(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4544(%rbp), %rdx
	movq	-4536(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2528
	movb	$15, -2760(%rbp)
	movb	$-66, -2759(%rbp)
	leaq	-2368(%rbp), %rax
	leaq	-2760(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-2368(%rbp), %rax
	movq	-2360(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-2352(%rbp), %rax
	movq	-2344(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$3, %edx
	movl	$0, %esi
	call	encoder__Encoder_mov_zero_or_sign_extend
	addq	$32, %rsp
	jmp	.L2445
.L2528:
	leaq	.LC384(%rip), %rax
	movq	%rax, -4560(%rbp)
	movq	-4552(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$6, %rax
	movq	%rax, -4552(%rbp)
	movq	-4552(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4552(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4560(%rbp), %rdx
	movq	-4552(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2530
	movb	$15, -2762(%rbp)
	movb	$-65, -2761(%rbp)
	leaq	-2336(%rbp), %rax
	leaq	-2762(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-2336(%rbp), %rax
	movq	-2328(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-2320(%rbp), %rax
	movq	-2312(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$2, %edx
	movl	$1, %esi
	call	encoder__Encoder_mov_zero_or_sign_extend
	addq	$32, %rsp
	jmp	.L2445
.L2530:
	leaq	.LC385(%rip), %rax
	movq	%rax, -4576(%rbp)
	movq	-4568(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$6, %rax
	movq	%rax, -4568(%rbp)
	movq	-4568(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4568(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4576(%rbp), %rdx
	movq	-4568(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2532
	movb	$15, -2764(%rbp)
	movb	$-65, -2763(%rbp)
	leaq	-2304(%rbp), %rax
	leaq	-2764(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-2304(%rbp), %rax
	movq	-2296(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-2288(%rbp), %rax
	movq	-2280(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$3, %edx
	movl	$1, %esi
	call	encoder__Encoder_mov_zero_or_sign_extend
	addq	$32, %rsp
	jmp	.L2445
.L2532:
	leaq	.LC386(%rip), %rax
	movq	%rax, -4592(%rbp)
	movq	-4584(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$6, %rax
	movq	%rax, -4584(%rbp)
	movq	-4584(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4584(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4592(%rbp), %rdx
	movq	-4584(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2534
	movb	$99, -2765(%rbp)
	leaq	-2272(%rbp), %rax
	leaq	-2765(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-2272(%rbp), %rax
	movq	-2264(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-2256(%rbp), %rax
	movq	-2248(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$3, %edx
	movl	$2, %esi
	call	encoder__Encoder_mov_zero_or_sign_extend
	addq	$32, %rsp
	jmp	.L2445
.L2534:
	leaq	.LC387(%rip), %rax
	movq	%rax, -4608(%rbp)
	movq	-4600(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$7, %rax
	movq	%rax, -4600(%rbp)
	movq	-4600(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4600(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4608(%rbp), %rdx
	movq	-4600(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2536
	movq	-3496(%rbp), %rax
	movq	%rax, %rdi
	call	encoder__Encoder_movabsq
	jmp	.L2445
.L2536:
	leaq	.LC388(%rip), %rax
	movq	%rax, -4624(%rbp)
	movq	-4616(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$5, %rax
	movq	%rax, -4616(%rbp)
	movq	-4616(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4616(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4624(%rbp), %rdx
	movq	-4616(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2538
	leaq	.LC389(%rip), %rax
	movq	%rax, -4640(%rbp)
	movq	-4632(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$5, %rax
	movq	%rax, -4632(%rbp)
	movq	-4632(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4632(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4640(%rbp), %rdx
	movq	-4632(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2538
	leaq	.LC390(%rip), %rax
	movq	%rax, -4656(%rbp)
	movq	-4648(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$5, %rax
	movq	%rax, -4648(%rbp)
	movq	-4648(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4648(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4656(%rbp), %rdx
	movq	-4648(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2538
	leaq	.LC391(%rip), %rax
	movq	%rax, -4672(%rbp)
	movq	-4664(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$5, %rax
	movq	%rax, -4664(%rbp)
	movq	-4664(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4664(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4672(%rbp), %rdx
	movq	-4664(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2539
.L2538:
	movq	-2656(%rbp), %rdx
	movq	-2648(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	encoder__get_size_by_suffix
	movl	%eax, %edx
	movq	-3496(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_test
	jmp	.L2445
.L2539:
	leaq	.LC392(%rip), %rax
	movq	%rax, -4688(%rbp)
	movq	-4680(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -4680(%rbp)
	movq	-4680(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4680(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4688(%rbp), %rdx
	movq	-4680(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2541
	leaq	.LC393(%rip), %rax
	movq	%rax, -4704(%rbp)
	movq	-4696(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -4696(%rbp)
	movq	-4696(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4696(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4704(%rbp), %rdx
	movq	-4696(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2541
	leaq	.LC394(%rip), %rax
	movq	%rax, -4720(%rbp)
	movq	-4712(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -4712(%rbp)
	movq	-4712(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4712(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4720(%rbp), %rdx
	movq	-4712(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2541
	leaq	.LC395(%rip), %rax
	movq	%rax, -4736(%rbp)
	movq	-4728(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -4728(%rbp)
	movq	-4728(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4728(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4736(%rbp), %rdx
	movq	-4728(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2542
.L2541:
	movq	-2656(%rbp), %rdx
	movq	-2648(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	encoder__get_size_by_suffix
	movl	%eax, %edx
	movq	-3496(%rbp), %rax
	movl	%edx, %r8d
	movl	$0, %ecx
	movl	$0, %edx
	movl	$13, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_arith_instr
	jmp	.L2445
.L2542:
	leaq	.LC396(%rip), %rax
	movq	%rax, -4752(%rbp)
	movq	-4744(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -4744(%rbp)
	movq	-4744(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4744(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4752(%rbp), %rdx
	movq	-4744(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2544
	leaq	.LC397(%rip), %rax
	movq	%rax, -4768(%rbp)
	movq	-4760(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -4760(%rbp)
	movq	-4760(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4760(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4768(%rbp), %rdx
	movq	-4760(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2544
	leaq	.LC398(%rip), %rax
	movq	%rax, -4784(%rbp)
	movq	-4776(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -4776(%rbp)
	movq	-4776(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4776(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4784(%rbp), %rdx
	movq	-4776(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2544
	leaq	.LC399(%rip), %rax
	movq	%rax, -4800(%rbp)
	movq	-4792(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -4792(%rbp)
	movq	-4792(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4792(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4800(%rbp), %rdx
	movq	-4792(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2545
.L2544:
	movq	-2656(%rbp), %rdx
	movq	-2648(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	encoder__get_size_by_suffix
	movl	%eax, %edx
	movq	-3496(%rbp), %rax
	movl	%edx, %r8d
	movl	$1, %ecx
	movl	$8, %edx
	movl	$15, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_arith_instr
	jmp	.L2445
.L2545:
	leaq	.LC400(%rip), %rax
	movq	%rax, -4816(%rbp)
	movq	-4808(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -4808(%rbp)
	movq	-4808(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4808(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4816(%rbp), %rdx
	movq	-4808(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2547
	leaq	.LC401(%rip), %rax
	movq	%rax, -4832(%rbp)
	movq	-4824(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -4824(%rbp)
	movq	-4824(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4824(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4832(%rbp), %rdx
	movq	-4824(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2547
	leaq	.LC402(%rip), %rax
	movq	%rax, -4848(%rbp)
	movq	-4840(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -4840(%rbp)
	movq	-4840(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4840(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4848(%rbp), %rdx
	movq	-4840(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2547
	leaq	.LC403(%rip), %rax
	movq	%rax, -4864(%rbp)
	movq	-4856(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -4856(%rbp)
	movq	-4856(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4856(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4864(%rbp), %rdx
	movq	-4856(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2548
.L2547:
	movq	-2656(%rbp), %rdx
	movq	-2648(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	encoder__get_size_by_suffix
	movl	%eax, %edx
	movq	-3496(%rbp), %rax
	movl	%edx, %r8d
	movl	$2, %ecx
	movl	$16, %edx
	movl	$16, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_arith_instr
	jmp	.L2445
.L2548:
	leaq	.LC404(%rip), %rax
	movq	%rax, -4880(%rbp)
	movq	-4872(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -4872(%rbp)
	movq	-4872(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4872(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4880(%rbp), %rdx
	movq	-4872(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2550
	leaq	.LC405(%rip), %rax
	movq	%rax, -4896(%rbp)
	movq	-4888(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -4888(%rbp)
	movq	-4888(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4888(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4896(%rbp), %rdx
	movq	-4888(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2550
	leaq	.LC406(%rip), %rax
	movq	%rax, -4912(%rbp)
	movq	-4904(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -4904(%rbp)
	movq	-4904(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4904(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4912(%rbp), %rdx
	movq	-4904(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2550
	leaq	.LC407(%rip), %rax
	movq	%rax, -4928(%rbp)
	movq	-4920(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -4920(%rbp)
	movq	-4920(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4920(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4928(%rbp), %rdx
	movq	-4920(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2551
.L2550:
	movq	-2656(%rbp), %rdx
	movq	-2648(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	encoder__get_size_by_suffix
	movl	%eax, %edx
	movq	-3496(%rbp), %rax
	movl	%edx, %r8d
	movl	$3, %ecx
	movl	$24, %edx
	movl	$17, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_arith_instr
	jmp	.L2445
.L2551:
	leaq	.LC408(%rip), %rax
	movq	%rax, -4944(%rbp)
	movq	-4936(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -4936(%rbp)
	movq	-4936(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4936(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4944(%rbp), %rdx
	movq	-4936(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2553
	leaq	.LC409(%rip), %rax
	movq	%rax, -4960(%rbp)
	movq	-4952(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -4952(%rbp)
	movq	-4952(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4952(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4960(%rbp), %rdx
	movq	-4952(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2553
	leaq	.LC410(%rip), %rax
	movq	%rax, -4976(%rbp)
	movq	-4968(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -4968(%rbp)
	movq	-4968(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4968(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4976(%rbp), %rdx
	movq	-4968(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2553
	leaq	.LC411(%rip), %rax
	movq	%rax, -4992(%rbp)
	movq	-4984(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -4984(%rbp)
	movq	-4984(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -4984(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-4992(%rbp), %rdx
	movq	-4984(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2554
.L2553:
	movq	-2656(%rbp), %rdx
	movq	-2648(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	encoder__get_size_by_suffix
	movl	%eax, %edx
	movq	-3496(%rbp), %rax
	movl	%edx, %r8d
	movl	$4, %ecx
	movl	$32, %edx
	movl	$19, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_arith_instr
	jmp	.L2445
.L2554:
	leaq	.LC412(%rip), %rax
	movq	%rax, -5008(%rbp)
	movq	-5000(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -5000(%rbp)
	movq	-5000(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5000(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5008(%rbp), %rdx
	movq	-5000(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2556
	leaq	.LC413(%rip), %rax
	movq	%rax, -5024(%rbp)
	movq	-5016(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -5016(%rbp)
	movq	-5016(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5016(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5024(%rbp), %rdx
	movq	-5016(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2556
	leaq	.LC414(%rip), %rax
	movq	%rax, -5040(%rbp)
	movq	-5032(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -5032(%rbp)
	movq	-5032(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5032(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5040(%rbp), %rdx
	movq	-5032(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2556
	leaq	.LC415(%rip), %rax
	movq	%rax, -5056(%rbp)
	movq	-5048(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -5048(%rbp)
	movq	-5048(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5048(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5056(%rbp), %rdx
	movq	-5048(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2557
.L2556:
	movq	-2656(%rbp), %rdx
	movq	-2648(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	encoder__get_size_by_suffix
	movl	%eax, %edx
	movq	-3496(%rbp), %rax
	movl	%edx, %r8d
	movl	$5, %ecx
	movl	$40, %edx
	movl	$14, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_arith_instr
	jmp	.L2445
.L2557:
	leaq	.LC416(%rip), %rax
	movq	%rax, -5072(%rbp)
	movq	-5064(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -5064(%rbp)
	movq	-5064(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5064(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5072(%rbp), %rdx
	movq	-5064(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2559
	leaq	.LC417(%rip), %rax
	movq	%rax, -5088(%rbp)
	movq	-5080(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -5080(%rbp)
	movq	-5080(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5080(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5088(%rbp), %rdx
	movq	-5080(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2559
	leaq	.LC418(%rip), %rax
	movq	%rax, -5104(%rbp)
	movq	-5096(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -5096(%rbp)
	movq	-5096(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5096(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5104(%rbp), %rdx
	movq	-5096(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2559
	leaq	.LC419(%rip), %rax
	movq	%rax, -5120(%rbp)
	movq	-5112(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -5112(%rbp)
	movq	-5112(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5112(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5120(%rbp), %rdx
	movq	-5112(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2560
.L2559:
	movq	-2656(%rbp), %rdx
	movq	-2648(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	encoder__get_size_by_suffix
	movl	%eax, %edx
	movq	-3496(%rbp), %rax
	movl	%edx, %r8d
	movl	$6, %ecx
	movl	$48, %edx
	movl	$18, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_arith_instr
	jmp	.L2445
.L2560:
	leaq	.LC420(%rip), %rax
	movq	%rax, -5136(%rbp)
	movq	-5128(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -5128(%rbp)
	movq	-5128(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5128(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5136(%rbp), %rdx
	movq	-5128(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2562
	leaq	.LC421(%rip), %rax
	movq	%rax, -5152(%rbp)
	movq	-5144(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -5144(%rbp)
	movq	-5144(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5144(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5152(%rbp), %rdx
	movq	-5144(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2562
	leaq	.LC422(%rip), %rax
	movq	%rax, -5168(%rbp)
	movq	-5160(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -5160(%rbp)
	movq	-5160(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5160(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5168(%rbp), %rdx
	movq	-5160(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2562
	leaq	.LC423(%rip), %rax
	movq	%rax, -5184(%rbp)
	movq	-5176(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -5176(%rbp)
	movq	-5176(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5176(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5184(%rbp), %rdx
	movq	-5176(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2563
.L2562:
	movq	-2656(%rbp), %rdx
	movq	-2648(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	encoder__get_size_by_suffix
	movl	%eax, %edx
	movq	-3496(%rbp), %rax
	movl	%edx, %r8d
	movl	$7, %ecx
	movl	$56, %edx
	movl	$37, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_arith_instr
	jmp	.L2445
.L2563:
	leaq	.LC424(%rip), %rax
	movq	%rax, -5200(%rbp)
	movq	-5192(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -5192(%rbp)
	movq	-5192(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5192(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5200(%rbp), %rdx
	movq	-5192(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2565
	leaq	.LC425(%rip), %rax
	movq	%rax, -5216(%rbp)
	movq	-5208(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -5208(%rbp)
	movq	-5208(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5208(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5216(%rbp), %rdx
	movq	-5208(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2565
	leaq	.LC426(%rip), %rax
	movq	%rax, -5232(%rbp)
	movq	-5224(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -5224(%rbp)
	movq	-5224(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5224(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5232(%rbp), %rdx
	movq	-5224(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2565
	leaq	.LC427(%rip), %rax
	movq	%rax, -5248(%rbp)
	movq	-5240(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -5240(%rbp)
	movq	-5240(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5240(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5248(%rbp), %rdx
	movq	-5240(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2566
.L2565:
	movq	-2656(%rbp), %rdx
	movq	-2648(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	encoder__get_size_by_suffix
	movl	%eax, %edx
	movq	-3496(%rbp), %rax
	movl	%edx, %ecx
	movl	$4, %edx
	movl	$38, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_shift
	jmp	.L2445
.L2566:
	leaq	.LC428(%rip), %rax
	movq	%rax, -5264(%rbp)
	movq	-5256(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -5256(%rbp)
	movq	-5256(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5256(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5264(%rbp), %rdx
	movq	-5256(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2568
	leaq	.LC429(%rip), %rax
	movq	%rax, -5280(%rbp)
	movq	-5272(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -5272(%rbp)
	movq	-5272(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5272(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5280(%rbp), %rdx
	movq	-5272(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2568
	leaq	.LC430(%rip), %rax
	movq	%rax, -5296(%rbp)
	movq	-5288(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -5288(%rbp)
	movq	-5288(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5288(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5296(%rbp), %rdx
	movq	-5288(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2568
	leaq	.LC431(%rip), %rax
	movq	%rax, -5312(%rbp)
	movq	-5304(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -5304(%rbp)
	movq	-5304(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5304(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5312(%rbp), %rdx
	movq	-5304(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2569
.L2568:
	movq	-2656(%rbp), %rdx
	movq	-2648(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	encoder__get_size_by_suffix
	movl	%eax, %edx
	movq	-3496(%rbp), %rax
	movl	%edx, %ecx
	movl	$5, %edx
	movl	$39, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_shift
	jmp	.L2445
.L2569:
	leaq	.LC432(%rip), %rax
	movq	%rax, -5328(%rbp)
	movq	-5320(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -5320(%rbp)
	movq	-5320(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5320(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5328(%rbp), %rdx
	movq	-5320(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2571
	leaq	.LC433(%rip), %rax
	movq	%rax, -5344(%rbp)
	movq	-5336(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -5336(%rbp)
	movq	-5336(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5336(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5344(%rbp), %rdx
	movq	-5336(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2571
	leaq	.LC434(%rip), %rax
	movq	%rax, -5360(%rbp)
	movq	-5352(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -5352(%rbp)
	movq	-5352(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5352(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5360(%rbp), %rdx
	movq	-5352(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2571
	leaq	.LC435(%rip), %rax
	movq	%rax, -5376(%rbp)
	movq	-5368(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -5368(%rbp)
	movq	-5368(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5368(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5376(%rbp), %rdx
	movq	-5368(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2572
.L2571:
	movq	-2656(%rbp), %rdx
	movq	-2648(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	encoder__get_size_by_suffix
	movl	%eax, %edx
	movq	-3496(%rbp), %rax
	movl	%edx, %ecx
	movl	$7, %edx
	movl	$40, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_shift
	jmp	.L2445
.L2572:
	leaq	.LC436(%rip), %rax
	movq	%rax, -5392(%rbp)
	movq	-5384(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -5384(%rbp)
	movq	-5384(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5384(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5392(%rbp), %rdx
	movq	-5384(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2574
	leaq	.LC437(%rip), %rax
	movq	%rax, -5408(%rbp)
	movq	-5400(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -5400(%rbp)
	movq	-5400(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5400(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5408(%rbp), %rdx
	movq	-5400(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2574
	leaq	.LC438(%rip), %rax
	movq	%rax, -5424(%rbp)
	movq	-5416(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -5416(%rbp)
	movq	-5416(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5416(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5424(%rbp), %rdx
	movq	-5416(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2574
	leaq	.LC439(%rip), %rax
	movq	%rax, -5440(%rbp)
	movq	-5432(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -5432(%rbp)
	movq	-5432(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5432(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5440(%rbp), %rdx
	movq	-5432(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2575
.L2574:
	movq	-2656(%rbp), %rdx
	movq	-2648(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	encoder__get_size_by_suffix
	movl	%eax, %edx
	movq	-3496(%rbp), %rax
	movl	%edx, %ecx
	movl	$4, %edx
	movl	$41, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_shift
	jmp	.L2445
.L2575:
	leaq	.LC440(%rip), %rax
	movq	%rax, -5456(%rbp)
	movq	-5448(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -5448(%rbp)
	movq	-5448(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5448(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5456(%rbp), %rdx
	movq	-5448(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2577
	movb	$15, -2767(%rbp)
	movb	$-112, -2766(%rbp)
	leaq	-2240(%rbp), %rax
	leaq	-2767(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-2240(%rbp), %rax
	movq	-2232(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-2224(%rbp), %rax
	movq	-2216(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$45, %esi
	call	encoder__Encoder_set
	addq	$32, %rsp
	jmp	.L2445
.L2577:
	leaq	.LC441(%rip), %rax
	movq	%rax, -5472(%rbp)
	movq	-5464(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$5, %rax
	movq	%rax, -5464(%rbp)
	movq	-5464(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5464(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5472(%rbp), %rdx
	movq	-5464(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2579
	movb	$15, -2769(%rbp)
	movb	$-111, -2768(%rbp)
	leaq	-2208(%rbp), %rax
	leaq	-2769(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-2208(%rbp), %rax
	movq	-2200(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-2192(%rbp), %rax
	movq	-2184(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$46, %esi
	call	encoder__Encoder_set
	addq	$32, %rsp
	jmp	.L2445
.L2579:
	leaq	.LC442(%rip), %rax
	movq	%rax, -5488(%rbp)
	movq	-5480(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -5480(%rbp)
	movq	-5480(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5480(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5488(%rbp), %rdx
	movq	-5480(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2581
	movb	$15, -2771(%rbp)
	movb	$-110, -2770(%rbp)
	leaq	-2176(%rbp), %rax
	leaq	-2771(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-2176(%rbp), %rax
	movq	-2168(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-2160(%rbp), %rax
	movq	-2152(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$47, %esi
	call	encoder__Encoder_set
	addq	$32, %rsp
	jmp	.L2445
.L2581:
	leaq	.LC443(%rip), %rax
	movq	%rax, -5504(%rbp)
	movq	-5496(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$5, %rax
	movq	%rax, -5496(%rbp)
	movq	-5496(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5496(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5504(%rbp), %rdx
	movq	-5496(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2583
	movb	$15, -2773(%rbp)
	movb	$-109, -2772(%rbp)
	leaq	-2144(%rbp), %rax
	leaq	-2773(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-2144(%rbp), %rax
	movq	-2136(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-2128(%rbp), %rax
	movq	-2120(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$49, %esi
	call	encoder__Encoder_set
	addq	$32, %rsp
	jmp	.L2445
.L2583:
	leaq	.LC444(%rip), %rax
	movq	%rax, -5520(%rbp)
	movq	-5512(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -5512(%rbp)
	movq	-5512(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5512(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5520(%rbp), %rdx
	movq	-5512(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2585
	movb	$15, -2775(%rbp)
	movb	$-108, -2774(%rbp)
	leaq	-2112(%rbp), %rax
	leaq	-2775(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-2112(%rbp), %rax
	movq	-2104(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-2096(%rbp), %rax
	movq	-2088(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$57, %esi
	call	encoder__Encoder_set
	addq	$32, %rsp
	jmp	.L2445
.L2585:
	leaq	.LC445(%rip), %rax
	movq	%rax, -5536(%rbp)
	movq	-5528(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$5, %rax
	movq	%rax, -5528(%rbp)
	movq	-5528(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5528(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5536(%rbp), %rdx
	movq	-5528(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2587
	movb	$15, -2777(%rbp)
	movb	$-107, -2776(%rbp)
	leaq	-2080(%rbp), %rax
	leaq	-2777(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-2080(%rbp), %rax
	movq	-2072(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-2064(%rbp), %rax
	movq	-2056(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$58, %esi
	call	encoder__Encoder_set
	addq	$32, %rsp
	jmp	.L2445
.L2587:
	leaq	.LC446(%rip), %rax
	movq	%rax, -5552(%rbp)
	movq	-5544(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$5, %rax
	movq	%rax, -5544(%rbp)
	movq	-5544(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5544(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5552(%rbp), %rdx
	movq	-5544(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2589
	movb	$15, -2779(%rbp)
	movb	$-109, -2778(%rbp)
	leaq	-2048(%rbp), %rax
	leaq	-2779(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-2048(%rbp), %rax
	movq	-2040(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-2032(%rbp), %rax
	movq	-2024(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$48, %esi
	call	encoder__Encoder_set
	addq	$32, %rsp
	jmp	.L2445
.L2589:
	leaq	.LC447(%rip), %rax
	movq	%rax, -5568(%rbp)
	movq	-5560(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$5, %rax
	movq	%rax, -5560(%rbp)
	movq	-5560(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5560(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5568(%rbp), %rdx
	movq	-5560(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2591
	movb	$15, -2781(%rbp)
	movb	$-106, -2780(%rbp)
	leaq	-2016(%rbp), %rax
	leaq	-2781(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-2016(%rbp), %rax
	movq	-2008(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-2000(%rbp), %rax
	movq	-1992(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$50, %esi
	call	encoder__Encoder_set
	addq	$32, %rsp
	jmp	.L2445
.L2591:
	leaq	.LC448(%rip), %rax
	movq	%rax, -5584(%rbp)
	movq	-5576(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -5576(%rbp)
	movq	-5576(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5576(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5584(%rbp), %rdx
	movq	-5576(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2593
	movb	$15, -2783(%rbp)
	movb	$-105, -2782(%rbp)
	leaq	-1984(%rbp), %rax
	leaq	-2783(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-1984(%rbp), %rax
	movq	-1976(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-1968(%rbp), %rax
	movq	-1960(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$51, %esi
	call	encoder__Encoder_set
	addq	$32, %rsp
	jmp	.L2445
.L2593:
	leaq	.LC449(%rip), %rax
	movq	%rax, -5600(%rbp)
	movq	-5592(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$5, %rax
	movq	%rax, -5592(%rbp)
	movq	-5592(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5592(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5600(%rbp), %rdx
	movq	-5592(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2595
	movb	$15, -2785(%rbp)
	movb	$-101, -2784(%rbp)
	leaq	-1952(%rbp), %rax
	leaq	-2785(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-1952(%rbp), %rax
	movq	-1944(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-1936(%rbp), %rax
	movq	-1928(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$52, %esi
	call	encoder__Encoder_set
	addq	$32, %rsp
	jmp	.L2445
.L2595:
	leaq	.LC450(%rip), %rax
	movq	%rax, -5616(%rbp)
	movq	-5608(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -5608(%rbp)
	movq	-5608(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5608(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5616(%rbp), %rdx
	movq	-5608(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2597
	movb	$15, -2787(%rbp)
	movb	$-100, -2786(%rbp)
	leaq	-1920(%rbp), %rax
	leaq	-2787(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-1920(%rbp), %rax
	movq	-1912(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-1904(%rbp), %rax
	movq	-1896(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$53, %esi
	call	encoder__Encoder_set
	addq	$32, %rsp
	jmp	.L2445
.L2597:
	leaq	.LC451(%rip), %rax
	movq	%rax, -5632(%rbp)
	movq	-5624(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -5624(%rbp)
	movq	-5624(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5624(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5632(%rbp), %rdx
	movq	-5624(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2599
	movb	$15, -2789(%rbp)
	movb	$-97, -2788(%rbp)
	leaq	-1888(%rbp), %rax
	leaq	-2789(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-1888(%rbp), %rax
	movq	-1880(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-1872(%rbp), %rax
	movq	-1864(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$54, %esi
	call	encoder__Encoder_set
	addq	$32, %rsp
	jmp	.L2445
.L2599:
	leaq	.LC452(%rip), %rax
	movq	%rax, -5648(%rbp)
	movq	-5640(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$5, %rax
	movq	%rax, -5640(%rbp)
	movq	-5640(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5640(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5648(%rbp), %rdx
	movq	-5640(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2601
	movb	$15, -2791(%rbp)
	movb	$-98, -2790(%rbp)
	leaq	-1856(%rbp), %rax
	leaq	-2791(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-1856(%rbp), %rax
	movq	-1848(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-1840(%rbp), %rax
	movq	-1832(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$55, %esi
	call	encoder__Encoder_set
	addq	$32, %rsp
	jmp	.L2445
.L2601:
	leaq	.LC453(%rip), %rax
	movq	%rax, -5664(%rbp)
	movq	-5656(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$5, %rax
	movq	%rax, -5656(%rbp)
	movq	-5656(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5656(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5664(%rbp), %rdx
	movq	-5656(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2603
	movb	$15, -2793(%rbp)
	movb	$-99, -2792(%rbp)
	leaq	-1824(%rbp), %rax
	leaq	-2793(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-1824(%rbp), %rax
	movq	-1816(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-1808(%rbp), %rax
	movq	-1800(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$56, %esi
	call	encoder__Encoder_set
	addq	$32, %rsp
	jmp	.L2445
.L2603:
	leaq	.LC454(%rip), %rax
	movq	%rax, -5680(%rbp)
	movq	-5672(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -5672(%rbp)
	movq	-5672(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5672(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5680(%rbp), %rdx
	movq	-5672(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2605
	movb	$-23, -2798(%rbp)
	movb	$0, -2797(%rbp)
	movb	$0, -2796(%rbp)
	movb	$0, -2795(%rbp)
	movb	$0, -2794(%rbp)
	leaq	-1792(%rbp), %rax
	leaq	-2798(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$5, %edx
	movl	$5, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-1792(%rbp), %rax
	movq	-1784(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-1776(%rbp), %rax
	movq	-1768(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$1, %edx
	movl	$59, %esi
	call	encoder__Encoder_jmp_instr
	addq	$32, %rsp
	jmp	.L2445
.L2605:
	leaq	.LC455(%rip), %rax
	movq	%rax, -5696(%rbp)
	movq	-5688(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -5688(%rbp)
	movq	-5688(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5688(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5696(%rbp), %rdx
	movq	-5688(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2607
	movb	$15, -2804(%rbp)
	movb	$-123, -2803(%rbp)
	movb	$0, -2802(%rbp)
	movb	$0, -2801(%rbp)
	movb	$0, -2800(%rbp)
	movb	$0, -2799(%rbp)
	leaq	-1760(%rbp), %rax
	leaq	-2804(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$6, %edx
	movl	$6, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-1760(%rbp), %rax
	movq	-1752(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-1744(%rbp), %rax
	movq	-1736(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$2, %edx
	movl	$60, %esi
	call	encoder__Encoder_jmp_instr
	addq	$32, %rsp
	jmp	.L2445
.L2607:
	leaq	.LC456(%rip), %rax
	movq	%rax, -5712(%rbp)
	movq	-5704(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, -5704(%rbp)
	movq	-5704(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5704(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5712(%rbp), %rdx
	movq	-5704(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2609
	movb	$15, -2810(%rbp)
	movb	$-124, -2809(%rbp)
	movb	$0, -2808(%rbp)
	movb	$0, -2807(%rbp)
	movb	$0, -2806(%rbp)
	movb	$0, -2805(%rbp)
	leaq	-1728(%rbp), %rax
	leaq	-2810(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$6, %edx
	movl	$6, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-1728(%rbp), %rax
	movq	-1720(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-1712(%rbp), %rax
	movq	-1704(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$2, %edx
	movl	$61, %esi
	call	encoder__Encoder_jmp_instr
	addq	$32, %rsp
	jmp	.L2445
.L2609:
	leaq	.LC457(%rip), %rax
	movq	%rax, -5728(%rbp)
	movq	-5720(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, -5720(%rbp)
	movq	-5720(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5720(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5728(%rbp), %rdx
	movq	-5720(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2611
	movb	$15, -2816(%rbp)
	movb	$-116, -2815(%rbp)
	movb	$0, -2814(%rbp)
	movb	$0, -2813(%rbp)
	movb	$0, -2812(%rbp)
	movb	$0, -2811(%rbp)
	leaq	-1696(%rbp), %rax
	leaq	-2816(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$6, %edx
	movl	$6, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-1696(%rbp), %rax
	movq	-1688(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-1680(%rbp), %rax
	movq	-1672(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$2, %edx
	movl	$62, %esi
	call	encoder__Encoder_jmp_instr
	addq	$32, %rsp
	jmp	.L2445
.L2611:
	leaq	.LC458(%rip), %rax
	movq	%rax, -5744(%rbp)
	movq	-5736(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, -5736(%rbp)
	movq	-5736(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5736(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5744(%rbp), %rdx
	movq	-5736(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2613
	movb	$15, -2822(%rbp)
	movb	$-113, -2821(%rbp)
	movb	$0, -2820(%rbp)
	movb	$0, -2819(%rbp)
	movb	$0, -2818(%rbp)
	movb	$0, -2817(%rbp)
	leaq	-1664(%rbp), %rax
	leaq	-2822(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$6, %edx
	movl	$6, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-1664(%rbp), %rax
	movq	-1656(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-1648(%rbp), %rax
	movq	-1640(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$2, %edx
	movl	$63, %esi
	call	encoder__Encoder_jmp_instr
	addq	$32, %rsp
	jmp	.L2445
.L2613:
	leaq	.LC459(%rip), %rax
	movq	%rax, -5760(%rbp)
	movq	-5752(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -5752(%rbp)
	movq	-5752(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5752(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5760(%rbp), %rdx
	movq	-5752(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2615
	movb	$15, -2828(%rbp)
	movb	$-114, -2827(%rbp)
	movb	$0, -2826(%rbp)
	movb	$0, -2825(%rbp)
	movb	$0, -2824(%rbp)
	movb	$0, -2823(%rbp)
	leaq	-1632(%rbp), %rax
	leaq	-2828(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$6, %edx
	movl	$6, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-1632(%rbp), %rax
	movq	-1624(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-1616(%rbp), %rax
	movq	-1608(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$2, %edx
	movl	$64, %esi
	call	encoder__Encoder_jmp_instr
	addq	$32, %rsp
	jmp	.L2445
.L2615:
	leaq	.LC460(%rip), %rax
	movq	%rax, -5776(%rbp)
	movq	-5768(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -5768(%rbp)
	movq	-5768(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5768(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5776(%rbp), %rdx
	movq	-5768(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2617
	movb	$15, -2834(%rbp)
	movb	$-115, -2833(%rbp)
	movb	$0, -2832(%rbp)
	movb	$0, -2831(%rbp)
	movb	$0, -2830(%rbp)
	movb	$0, -2829(%rbp)
	leaq	-1600(%rbp), %rax
	leaq	-2834(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$6, %edx
	movl	$6, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-1600(%rbp), %rax
	movq	-1592(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-1584(%rbp), %rax
	movq	-1576(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$2, %edx
	movl	$65, %esi
	call	encoder__Encoder_jmp_instr
	addq	$32, %rsp
	jmp	.L2445
.L2617:
	leaq	.LC461(%rip), %rax
	movq	%rax, -5792(%rbp)
	movq	-5784(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -5784(%rbp)
	movq	-5784(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5784(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5792(%rbp), %rdx
	movq	-5784(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2619
	movb	$15, -2840(%rbp)
	movb	$-125, -2839(%rbp)
	movb	$0, -2838(%rbp)
	movb	$0, -2837(%rbp)
	movb	$0, -2836(%rbp)
	movb	$0, -2835(%rbp)
	leaq	-1568(%rbp), %rax
	leaq	-2840(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$6, %edx
	movl	$6, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-1568(%rbp), %rax
	movq	-1560(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-1552(%rbp), %rax
	movq	-1544(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$2, %edx
	movl	$67, %esi
	call	encoder__Encoder_jmp_instr
	addq	$32, %rsp
	jmp	.L2445
.L2619:
	leaq	.LC462(%rip), %rax
	movq	%rax, -5808(%rbp)
	movq	-5800(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -5800(%rbp)
	movq	-5800(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5800(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5808(%rbp), %rdx
	movq	-5800(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2621
	movb	$15, -2846(%rbp)
	movb	$-122, -2845(%rbp)
	movb	$0, -2844(%rbp)
	movb	$0, -2843(%rbp)
	movb	$0, -2842(%rbp)
	movb	$0, -2841(%rbp)
	leaq	-1536(%rbp), %rax
	leaq	-2846(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$6, %edx
	movl	$6, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-1536(%rbp), %rax
	movq	-1528(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-1520(%rbp), %rax
	movq	-1512(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$2, %edx
	movl	$66, %esi
	call	encoder__Encoder_jmp_instr
	addq	$32, %rsp
	jmp	.L2445
.L2621:
	leaq	.LC463(%rip), %rax
	movq	%rax, -5824(%rbp)
	movq	-5816(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -5816(%rbp)
	movq	-5816(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5816(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5824(%rbp), %rdx
	movq	-5816(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2623
	movb	$15, -2852(%rbp)
	movb	$-121, -2851(%rbp)
	movb	$0, -2850(%rbp)
	movb	$0, -2849(%rbp)
	movb	$0, -2848(%rbp)
	movb	$0, -2847(%rbp)
	leaq	-1504(%rbp), %rax
	leaq	-2852(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$6, %edx
	movl	$6, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-1504(%rbp), %rax
	movq	-1496(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-1488(%rbp), %rax
	movq	-1480(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$2, %edx
	movl	$68, %esi
	call	encoder__Encoder_jmp_instr
	addq	$32, %rsp
	jmp	.L2445
.L2623:
	leaq	.LC464(%rip), %rax
	movq	%rax, -5840(%rbp)
	movq	-5832(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, -5832(%rbp)
	movq	-5832(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5832(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5840(%rbp), %rdx
	movq	-5832(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2625
	movb	$15, -2858(%rbp)
	movb	$-118, -2857(%rbp)
	movb	$0, -2856(%rbp)
	movb	$0, -2855(%rbp)
	movb	$0, -2854(%rbp)
	movb	$0, -2853(%rbp)
	leaq	-1472(%rbp), %rax
	leaq	-2858(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$6, %edx
	movl	$6, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-1472(%rbp), %rax
	movq	-1464(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-1456(%rbp), %rax
	movq	-1448(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$2, %edx
	movl	$69, %esi
	call	encoder__Encoder_jmp_instr
	addq	$32, %rsp
	jmp	.L2445
.L2625:
	leaq	.LC465(%rip), %rax
	movq	%rax, -5856(%rbp)
	movq	-5848(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, -5848(%rbp)
	movq	-5848(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5848(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5856(%rbp), %rdx
	movq	-5848(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2627
	movb	$15, -2864(%rbp)
	movb	$-121, -2863(%rbp)
	movb	$0, -2862(%rbp)
	movb	$0, -2861(%rbp)
	movb	$0, -2860(%rbp)
	movb	$0, -2859(%rbp)
	leaq	-1440(%rbp), %rax
	leaq	-2864(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$6, %edx
	movl	$6, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-1440(%rbp), %rax
	movq	-1432(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-1424(%rbp), %rax
	movq	-1416(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$2, %edx
	movl	$70, %esi
	call	encoder__Encoder_jmp_instr
	addq	$32, %rsp
	jmp	.L2445
.L2627:
	leaq	.LC466(%rip), %rax
	movq	%rax, -5872(%rbp)
	movq	-5864(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, -5864(%rbp)
	movq	-5864(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5864(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5872(%rbp), %rdx
	movq	-5864(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2629
	movb	$15, -2870(%rbp)
	movb	$-126, -2869(%rbp)
	movb	$0, -2868(%rbp)
	movb	$0, -2867(%rbp)
	movb	$0, -2866(%rbp)
	movb	$0, -2865(%rbp)
	leaq	-1408(%rbp), %rax
	leaq	-2870(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$6, %edx
	movl	$6, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-1408(%rbp), %rax
	movq	-1400(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-1392(%rbp), %rax
	movq	-1384(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$2, %edx
	movl	$72, %esi
	call	encoder__Encoder_jmp_instr
	addq	$32, %rsp
	jmp	.L2445
.L2629:
	leaq	.LC467(%rip), %rax
	movq	%rax, -5888(%rbp)
	movq	-5880(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, -5880(%rbp)
	movq	-5880(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5880(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5888(%rbp), %rdx
	movq	-5880(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2631
	movb	$15, -2876(%rbp)
	movb	$-120, -2875(%rbp)
	movb	$0, -2874(%rbp)
	movb	$0, -2873(%rbp)
	movb	$0, -2872(%rbp)
	movb	$0, -2871(%rbp)
	leaq	-1376(%rbp), %rax
	leaq	-2876(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$6, %edx
	movl	$6, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-1376(%rbp), %rax
	movq	-1368(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-1360(%rbp), %rax
	movq	-1352(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$2, %edx
	movl	$71, %esi
	call	encoder__Encoder_jmp_instr
	addq	$32, %rsp
	jmp	.L2445
.L2631:
	leaq	.LC468(%rip), %rax
	movq	%rax, -5904(%rbp)
	movq	-5896(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -5896(%rbp)
	movq	-5896(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5896(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5904(%rbp), %rdx
	movq	-5896(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2633
	movb	$15, -2882(%rbp)
	movb	$-119, -2881(%rbp)
	movb	$0, -2880(%rbp)
	movb	$0, -2879(%rbp)
	movb	$0, -2878(%rbp)
	movb	$0, -2877(%rbp)
	leaq	-1344(%rbp), %rax
	leaq	-2882(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$6, %edx
	movl	$6, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-1344(%rbp), %rax
	movq	-1336(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-1328(%rbp), %rax
	movq	-1320(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$2, %edx
	movl	$73, %esi
	call	encoder__Encoder_jmp_instr
	addq	$32, %rsp
	jmp	.L2445
.L2633:
	leaq	.LC469(%rip), %rax
	movq	%rax, -5920(%rbp)
	movq	-5912(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -5912(%rbp)
	movq	-5912(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5912(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5920(%rbp), %rdx
	movq	-5912(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2635
	movq	-3496(%rbp), %rax
	movq	%rax, %rdi
	call	encoder__Encoder_rep
	jmp	.L2445
.L2635:
	leaq	.LC470(%rip), %rax
	movq	%rax, -5936(%rbp)
	movq	-5928(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$10, %rax
	movq	%rax, -5928(%rbp)
	movq	-5928(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5928(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5936(%rbp), %rdx
	movq	-5928(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2637
	movq	-3496(%rbp), %rax
	movq	%rax, %rdi
	call	encoder__Encoder_cvttss2sil
	jmp	.L2445
.L2637:
	leaq	.LC471(%rip), %rax
	movq	%rax, -5952(%rbp)
	movq	-5944(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$9, %rax
	movq	%rax, -5944(%rbp)
	movq	-5944(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5944(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5952(%rbp), %rdx
	movq	-5944(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2639
	movq	-3496(%rbp), %rax
	movq	%rax, %rdi
	call	encoder__Encoder_cvtsi2ssq
	jmp	.L2445
.L2639:
	leaq	.LC472(%rip), %rax
	movq	%rax, -5968(%rbp)
	movq	-5960(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$9, %rax
	movq	%rax, -5960(%rbp)
	movq	-5960(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5960(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5968(%rbp), %rdx
	movq	-5960(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2641
	movq	-3496(%rbp), %rax
	movq	%rax, %rdi
	call	encoder__Encoder_cvtsi2sdq
	jmp	.L2445
.L2641:
	leaq	.LC473(%rip), %rax
	movq	%rax, -5984(%rbp)
	movq	-5976(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -5976(%rbp)
	movq	-5976(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5976(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-5984(%rbp), %rdx
	movq	-5976(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2643
	movq	-3496(%rbp), %rax
	movq	%rax, %rdi
	call	encoder__Encoder_movd
	jmp	.L2445
.L2643:
	leaq	.LC474(%rip), %rax
	movq	%rax, -6000(%rbp)
	movq	-5992(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$5, %rax
	movq	%rax, -5992(%rbp)
	movq	-5992(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -5992(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-6000(%rbp), %rdx
	movq	-5992(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2645
	movl	$1, -2888(%rbp)
	leaq	-1312(%rbp), %rax
	leaq	-2888(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-1312(%rbp), %rax
	movq	-1304(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-1296(%rbp), %rax
	movq	-1288(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$104, %esi
	call	encoder__Encoder_xorp
	addq	$32, %rsp
	jmp	.L2445
.L2645:
	leaq	.LC475(%rip), %rax
	movq	%rax, -6016(%rbp)
	movq	-6008(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$5, %rax
	movq	%rax, -6008(%rbp)
	movq	-6008(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -6008(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-6016(%rbp), %rdx
	movq	-6008(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2647
	leaq	-1280(%rbp), %rax
	movl	$0, %r8d
	movl	$4, %ecx
	movl	$0, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array_with_default
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-1280(%rbp), %rax
	movq	-1272(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-1264(%rbp), %rax
	movq	-1256(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$105, %esi
	call	encoder__Encoder_xorp
	addq	$32, %rsp
	jmp	.L2445
.L2647:
	leaq	.LC476(%rip), %rax
	movq	%rax, -6032(%rbp)
	movq	-6024(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$5, %rax
	movq	%rax, -6024(%rbp)
	movq	-6024(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -6024(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-6032(%rbp), %rdx
	movq	-6024(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2649
	movl	$4, -2892(%rbp)
	leaq	-1248(%rbp), %rax
	leaq	-2892(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-1248(%rbp), %rax
	movq	-1240(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-1232(%rbp), %rax
	movq	-1224(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$16, %edx
	movl	$87, %esi
	call	encoder__Encoder_sse_data_transfer_instr
	addq	$32, %rsp
	jmp	.L2445
.L2649:
	leaq	.LC477(%rip), %rax
	movq	%rax, -6048(%rbp)
	movq	-6040(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$5, %rax
	movq	%rax, -6040(%rbp)
	movq	-6040(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -6040(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-6048(%rbp), %rdx
	movq	-6040(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2651
	movl	$5, -2896(%rbp)
	leaq	-1216(%rbp), %rax
	leaq	-2896(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-1216(%rbp), %rax
	movq	-1208(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-1200(%rbp), %rax
	movq	-1192(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$16, %edx
	movl	$87, %esi
	call	encoder__Encoder_sse_data_transfer_instr
	addq	$32, %rsp
	jmp	.L2445
.L2651:
	leaq	.LC478(%rip), %rax
	movq	%rax, -6064(%rbp)
	movq	-6056(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$6, %rax
	movq	%rax, -6056(%rbp)
	movq	-6056(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -6056(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-6064(%rbp), %rdx
	movq	-6056(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2653
	leaq	-1184(%rbp), %rax
	movl	$0, %r8d
	movl	$4, %ecx
	movl	$0, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array_with_default
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-1184(%rbp), %rax
	movq	-1176(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-1168(%rbp), %rax
	movq	-1160(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$40, %edx
	movl	$102, %esi
	call	encoder__Encoder_sse_data_transfer_instr
	addq	$32, %rsp
	jmp	.L2445
.L2653:
	leaq	.LC479(%rip), %rax
	movq	%rax, -6080(%rbp)
	movq	-6072(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$6, %rax
	movq	%rax, -6072(%rbp)
	movq	-6072(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -6072(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-6080(%rbp), %rdx
	movq	-6072(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2655
	leaq	-1152(%rbp), %rax
	movl	$0, %r8d
	movl	$4, %ecx
	movl	$0, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array_with_default
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-1152(%rbp), %rax
	movq	-1144(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-1136(%rbp), %rax
	movq	-1128(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$16, %edx
	movl	$103, %esi
	call	encoder__Encoder_sse_data_transfer_instr
	addq	$32, %rsp
	jmp	.L2445
.L2655:
	leaq	.LC480(%rip), %rax
	movq	%rax, -6096(%rbp)
	movq	-6088(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -6088(%rbp)
	movq	-6088(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -6088(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-6096(%rbp), %rdx
	movq	-6088(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2657
	movl	$1, -2904(%rbp)
	leaq	-1120(%rbp), %rax
	leaq	-2904(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movb	$15, -2898(%rbp)
	movb	$-17, -2897(%rbp)
	leaq	-1088(%rbp), %rax
	leaq	-2898(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-1120(%rbp), %rax
	movq	-1112(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-1104(%rbp), %rax
	movq	-1096(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-1088(%rbp), %rax
	movq	-1080(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-1072(%rbp), %rax
	movq	-1064(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$106, %esi
	call	encoder__Encoder_sse_arith_instr
	addq	$64, %rsp
	jmp	.L2445
.L2657:
	leaq	.LC481(%rip), %rax
	movq	%rax, -6112(%rbp)
	movq	-6104(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$8, %rax
	movq	%rax, -6104(%rbp)
	movq	-6104(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -6104(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-6112(%rbp), %rdx
	movq	-6104(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2659
	movl	$5, -2912(%rbp)
	leaq	-1056(%rbp), %rax
	leaq	-2912(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movb	$15, -2906(%rbp)
	movb	$90, -2905(%rbp)
	leaq	-1024(%rbp), %rax
	leaq	-2906(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-1056(%rbp), %rax
	movq	-1048(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-1040(%rbp), %rax
	movq	-1032(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-1024(%rbp), %rax
	movq	-1016(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-1008(%rbp), %rax
	movq	-1000(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$85, %esi
	call	encoder__Encoder_sse_arith_instr
	addq	$64, %rsp
	jmp	.L2445
.L2659:
	leaq	.LC482(%rip), %rax
	movq	%rax, -6128(%rbp)
	movq	-6120(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$8, %rax
	movq	%rax, -6120(%rbp)
	movq	-6120(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -6120(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-6128(%rbp), %rdx
	movq	-6120(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2661
	movl	$4, -2920(%rbp)
	leaq	-992(%rbp), %rax
	leaq	-2920(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movb	$15, -2914(%rbp)
	movb	$90, -2913(%rbp)
	leaq	-960(%rbp), %rax
	leaq	-2914(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-992(%rbp), %rax
	movq	-984(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-976(%rbp), %rax
	movq	-968(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-960(%rbp), %rax
	movq	-952(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-944(%rbp), %rax
	movq	-936(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$86, %esi
	call	encoder__Encoder_sse_arith_instr
	addq	$64, %rsp
	jmp	.L2445
.L2661:
	leaq	.LC483(%rip), %rax
	movq	%rax, -6144(%rbp)
	movq	-6136(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$7, %rax
	movq	%rax, -6136(%rbp)
	movq	-6136(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -6136(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-6144(%rbp), %rdx
	movq	-6136(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2663
	leaq	-928(%rbp), %rax
	movl	$0, %r8d
	movl	$4, %ecx
	movl	$0, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array_with_default
	movb	$15, -2922(%rbp)
	movb	$46, -2921(%rbp)
	leaq	-896(%rbp), %rax
	leaq	-2922(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-928(%rbp), %rax
	movq	-920(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-912(%rbp), %rax
	movq	-904(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-896(%rbp), %rax
	movq	-888(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-880(%rbp), %rax
	movq	-872(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$90, %esi
	call	encoder__Encoder_sse_arith_instr
	addq	$64, %rsp
	jmp	.L2445
.L2663:
	leaq	.LC484(%rip), %rax
	movq	%rax, -6160(%rbp)
	movq	-6152(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$7, %rax
	movq	%rax, -6152(%rbp)
	movq	-6152(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -6152(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-6160(%rbp), %rdx
	movq	-6152(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2665
	movl	$1, -2928(%rbp)
	leaq	-864(%rbp), %rax
	leaq	-2928(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movb	$15, -2924(%rbp)
	movb	$46, -2923(%rbp)
	leaq	-832(%rbp), %rax
	leaq	-2924(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-864(%rbp), %rax
	movq	-856(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-848(%rbp), %rax
	movq	-840(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-832(%rbp), %rax
	movq	-824(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-816(%rbp), %rax
	movq	-808(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$91, %esi
	call	encoder__Encoder_sse_arith_instr
	addq	$64, %rsp
	jmp	.L2445
.L2665:
	leaq	.LC485(%rip), %rax
	movq	%rax, -6176(%rbp)
	movq	-6168(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$6, %rax
	movq	%rax, -6168(%rbp)
	movq	-6168(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -6168(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-6176(%rbp), %rdx
	movq	-6168(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2667
	leaq	-800(%rbp), %rax
	movl	$0, %r8d
	movl	$4, %ecx
	movl	$0, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array_with_default
	movb	$15, -2930(%rbp)
	movb	$47, -2929(%rbp)
	leaq	-768(%rbp), %rax
	leaq	-2930(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-800(%rbp), %rax
	movq	-792(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-784(%rbp), %rax
	movq	-776(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-768(%rbp), %rax
	movq	-760(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-752(%rbp), %rax
	movq	-744(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$93, %esi
	call	encoder__Encoder_sse_arith_instr
	addq	$64, %rsp
	jmp	.L2445
.L2667:
	leaq	.LC486(%rip), %rax
	movq	%rax, -6192(%rbp)
	movq	-6184(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$6, %rax
	movq	%rax, -6184(%rbp)
	movq	-6184(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -6184(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-6192(%rbp), %rdx
	movq	-6184(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2669
	movl	$1, -2936(%rbp)
	leaq	-736(%rbp), %rax
	leaq	-2936(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movb	$15, -2932(%rbp)
	movb	$47, -2931(%rbp)
	leaq	-704(%rbp), %rax
	leaq	-2932(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-736(%rbp), %rax
	movq	-728(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-720(%rbp), %rax
	movq	-712(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-704(%rbp), %rax
	movq	-696(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-688(%rbp), %rax
	movq	-680(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$91, %esi
	call	encoder__Encoder_sse_arith_instr
	addq	$64, %rsp
	jmp	.L2445
.L2669:
	leaq	.LC487(%rip), %rax
	movq	%rax, -6208(%rbp)
	movq	-6200(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$5, %rax
	movq	%rax, -6200(%rbp)
	movq	-6200(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -6200(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-6208(%rbp), %rdx
	movq	-6200(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2671
	movl	$4, -2944(%rbp)
	leaq	-672(%rbp), %rax
	leaq	-2944(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movb	$15, -2938(%rbp)
	movb	$92, -2937(%rbp)
	leaq	-640(%rbp), %rax
	leaq	-2938(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-672(%rbp), %rax
	movq	-664(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-656(%rbp), %rax
	movq	-648(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-640(%rbp), %rax
	movq	-632(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-624(%rbp), %rax
	movq	-616(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$94, %esi
	call	encoder__Encoder_sse_arith_instr
	addq	$64, %rsp
	jmp	.L2445
.L2671:
	leaq	.LC488(%rip), %rax
	movq	%rax, -6224(%rbp)
	movq	-6216(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$5, %rax
	movq	%rax, -6216(%rbp)
	movq	-6216(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -6216(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-6224(%rbp), %rdx
	movq	-6216(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2673
	movl	$5, -2952(%rbp)
	leaq	-608(%rbp), %rax
	leaq	-2952(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movb	$15, -2946(%rbp)
	movb	$92, -2945(%rbp)
	leaq	-576(%rbp), %rax
	leaq	-2946(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-608(%rbp), %rax
	movq	-600(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-592(%rbp), %rax
	movq	-584(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-576(%rbp), %rax
	movq	-568(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-560(%rbp), %rax
	movq	-552(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$94, %esi
	call	encoder__Encoder_sse_arith_instr
	addq	$64, %rsp
	jmp	.L2445
.L2673:
	leaq	.LC489(%rip), %rax
	movq	%rax, -6240(%rbp)
	movq	-6232(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$5, %rax
	movq	%rax, -6232(%rbp)
	movq	-6232(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -6232(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-6240(%rbp), %rdx
	movq	-6232(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2675
	movl	$4, -2960(%rbp)
	leaq	-544(%rbp), %rax
	leaq	-2960(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movb	$15, -2954(%rbp)
	movb	$88, -2953(%rbp)
	leaq	-512(%rbp), %rax
	leaq	-2954(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-544(%rbp), %rax
	movq	-536(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-528(%rbp), %rax
	movq	-520(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-512(%rbp), %rax
	movq	-504(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-496(%rbp), %rax
	movq	-488(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$96, %esi
	call	encoder__Encoder_sse_arith_instr
	addq	$64, %rsp
	jmp	.L2445
.L2675:
	leaq	.LC490(%rip), %rax
	movq	%rax, -6256(%rbp)
	movq	-6248(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$5, %rax
	movq	%rax, -6248(%rbp)
	movq	-6248(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -6248(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-6256(%rbp), %rdx
	movq	-6248(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2677
	movl	$5, -2968(%rbp)
	leaq	-480(%rbp), %rax
	leaq	-2968(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movb	$15, -2962(%rbp)
	movb	$88, -2961(%rbp)
	leaq	-448(%rbp), %rax
	leaq	-2962(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-480(%rbp), %rax
	movq	-472(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-464(%rbp), %rax
	movq	-456(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-448(%rbp), %rax
	movq	-440(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-432(%rbp), %rax
	movq	-424(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$97, %esi
	call	encoder__Encoder_sse_arith_instr
	addq	$64, %rsp
	jmp	.L2445
.L2677:
	leaq	.LC491(%rip), %rax
	movq	%rax, -6272(%rbp)
	movq	-6264(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$5, %rax
	movq	%rax, -6264(%rbp)
	movq	-6264(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -6264(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-6272(%rbp), %rdx
	movq	-6264(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2679
	movl	$4, -2976(%rbp)
	leaq	-416(%rbp), %rax
	leaq	-2976(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movb	$15, -2970(%rbp)
	movb	$89, -2969(%rbp)
	leaq	-384(%rbp), %rax
	leaq	-2970(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-416(%rbp), %rax
	movq	-408(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-400(%rbp), %rax
	movq	-392(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-384(%rbp), %rax
	movq	-376(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-368(%rbp), %rax
	movq	-360(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$98, %esi
	call	encoder__Encoder_sse_arith_instr
	addq	$64, %rsp
	jmp	.L2445
.L2679:
	leaq	.LC492(%rip), %rax
	movq	%rax, -6288(%rbp)
	movq	-6280(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$5, %rax
	movq	%rax, -6280(%rbp)
	movq	-6280(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -6280(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-6288(%rbp), %rdx
	movq	-6280(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2681
	movl	$5, -2984(%rbp)
	leaq	-352(%rbp), %rax
	leaq	-2984(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movb	$15, -2978(%rbp)
	movb	$89, -2977(%rbp)
	leaq	-320(%rbp), %rax
	leaq	-2978(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-352(%rbp), %rax
	movq	-344(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-336(%rbp), %rax
	movq	-328(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-320(%rbp), %rax
	movq	-312(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-304(%rbp), %rax
	movq	-296(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$99, %esi
	call	encoder__Encoder_sse_arith_instr
	addq	$64, %rsp
	jmp	.L2445
.L2681:
	leaq	.LC493(%rip), %rax
	movq	%rax, -6304(%rbp)
	movq	-6296(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$5, %rax
	movq	%rax, -6296(%rbp)
	movq	-6296(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -6296(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-6304(%rbp), %rdx
	movq	-6296(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2683
	movl	$4, -2992(%rbp)
	leaq	-288(%rbp), %rax
	leaq	-2992(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movb	$15, -2986(%rbp)
	movb	$94, -2985(%rbp)
	leaq	-256(%rbp), %rax
	leaq	-2986(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-288(%rbp), %rax
	movq	-280(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-272(%rbp), %rax
	movq	-264(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-256(%rbp), %rax
	movq	-248(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-240(%rbp), %rax
	movq	-232(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$100, %esi
	call	encoder__Encoder_sse_arith_instr
	addq	$64, %rsp
	jmp	.L2445
.L2683:
	leaq	.LC494(%rip), %rax
	movq	%rax, -6320(%rbp)
	movq	-6312(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$5, %rax
	movq	%rax, -6312(%rbp)
	movq	-6312(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -6312(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-6320(%rbp), %rdx
	movq	-6312(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2685
	movl	$5, -3000(%rbp)
	leaq	-224(%rbp), %rax
	leaq	-3000(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movb	$15, -2994(%rbp)
	movb	$94, -2993(%rbp)
	leaq	-192(%rbp), %rax
	leaq	-2994(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-224(%rbp), %rax
	movq	-216(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-208(%rbp), %rax
	movq	-200(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-192(%rbp), %rax
	movq	-184(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-176(%rbp), %rax
	movq	-168(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$101, %esi
	call	encoder__Encoder_sse_arith_instr
	addq	$64, %rsp
	jmp	.L2445
.L2685:
	leaq	.LC495(%rip), %rax
	movq	%rax, -6336(%rbp)
	movq	-6328(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$6, %rax
	movq	%rax, -6328(%rbp)
	movq	-6328(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -6328(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-6336(%rbp), %rdx
	movq	-6328(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2687
	leaq	.LC496(%rip), %rax
	movq	%rax, -6352(%rbp)
	movq	-6344(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$6, %rax
	movq	%rax, -6344(%rbp)
	movq	-6344(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -6344(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-6352(%rbp), %rdx
	movq	-6344(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2687
	leaq	.LC497(%rip), %rax
	movq	%rax, -6368(%rbp)
	movq	-6360(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$6, %rax
	movq	%rax, -6360(%rbp)
	movq	-6360(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -6360(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-6368(%rbp), %rdx
	movq	-6360(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2688
.L2687:
	movq	-2656(%rbp), %rdx
	movq	-2648(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	encoder__get_size_by_suffix
	movl	%eax, %ebx
	movb	$15, -3002(%rbp)
	movb	$72, -3001(%rbp)
	leaq	-160(%rbp), %rax
	leaq	-3002(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-160(%rbp), %rax
	movq	-152(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-144(%rbp), %rax
	movq	-136(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	%ebx, %edx
	movl	$79, %esi
	call	encoder__Encoder_cmov
	addq	$32, %rsp
	jmp	.L2445
.L2688:
	leaq	.LC498(%rip), %rax
	movq	%rax, -6384(%rbp)
	movq	-6376(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$7, %rax
	movq	%rax, -6376(%rbp)
	movq	-6376(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -6376(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-6384(%rbp), %rdx
	movq	-6376(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2690
	leaq	.LC499(%rip), %rax
	movq	%rax, -6400(%rbp)
	movq	-6392(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$7, %rax
	movq	%rax, -6392(%rbp)
	movq	-6392(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -6392(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-6400(%rbp), %rdx
	movq	-6392(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2690
	leaq	.LC500(%rip), %rax
	movq	%rax, -6416(%rbp)
	movq	-6408(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$7, %rax
	movq	%rax, -6408(%rbp)
	movq	-6408(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -6408(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-6416(%rbp), %rdx
	movq	-6408(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2691
.L2690:
	movq	-2656(%rbp), %rdx
	movq	-2648(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	encoder__get_size_by_suffix
	movl	%eax, %ebx
	movb	$15, -3004(%rbp)
	movb	$73, -3003(%rbp)
	leaq	-128(%rbp), %rax
	leaq	-3004(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-128(%rbp), %rax
	movq	-120(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-112(%rbp), %rax
	movq	-104(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	%ebx, %edx
	movl	$80, %esi
	call	encoder__Encoder_cmov
	addq	$32, %rsp
	jmp	.L2445
.L2691:
	leaq	.LC501(%rip), %rax
	movq	%rax, -6432(%rbp)
	movq	-6424(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$7, %rax
	movq	%rax, -6424(%rbp)
	movq	-6424(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -6424(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-6432(%rbp), %rdx
	movq	-6424(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2693
	leaq	.LC502(%rip), %rax
	movq	%rax, -6448(%rbp)
	movq	-6440(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$7, %rax
	movq	%rax, -6440(%rbp)
	movq	-6440(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -6440(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-6448(%rbp), %rdx
	movq	-6440(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2693
	leaq	.LC503(%rip), %rax
	movq	%rax, -6464(%rbp)
	movq	-6456(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$7, %rax
	movq	%rax, -6456(%rbp)
	movq	-6456(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -6456(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-6464(%rbp), %rdx
	movq	-6456(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2694
.L2693:
	movq	-2656(%rbp), %rdx
	movq	-2648(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	encoder__get_size_by_suffix
	movl	%eax, %ebx
	movb	$15, -3006(%rbp)
	movb	$77, -3005(%rbp)
	leaq	-96(%rbp), %rax
	leaq	-3006(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-3496(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-96(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	%ebx, %edx
	movl	$81, %esi
	call	encoder__Encoder_cmov
	addq	$32, %rsp
	jmp	.L2445
.L2694:
	leaq	.LC504(%rip), %rax
	movq	%rax, -6480(%rbp)
	movq	-6472(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -6472(%rbp)
	movq	-6472(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -6472(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-6480(%rbp), %rdx
	movq	-6472(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2696
	leaq	.LC505(%rip), %rax
	movq	%rax, -6496(%rbp)
	movq	-6488(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -6488(%rbp)
	movq	-6488(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -6488(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-6496(%rbp), %rdx
	movq	-6488(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2697
.L2696:
	leaq	-3280(%rbp), %rdx
	movl	$0, %eax
	movl	$17, %ecx
	movq	%rdx, %rdi
	rep stosq
	movl	$74, -3280(%rbp)
	movb	$-61, -3007(%rbp)
	leaq	-3272(%rbp), %rax
	leaq	-3007(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	leaq	.LC30(%rip), %rax
	movq	%rax, -3240(%rbp)
	movl	$1, -3228(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -3224(%rbp)
	movl	$1, -3212(%rbp)
	movq	-3496(%rbp), %rax
	movq	112(%rax), %rdx
	movq	104(%rax), %rax
	movq	%rax, -3192(%rbp)
	movq	%rdx, -3184(%rbp)
	movq	-2624(%rbp), %rax
	movq	-2616(%rbp), %rdx
	movq	%rax, -3168(%rbp)
	movq	%rdx, -3160(%rbp)
	movq	-2608(%rbp), %rax
	movq	%rax, -3152(%rbp)
	leaq	-3280(%rbp), %rax
	movl	$136, %esi
	movq	%rax, %rdi
	call	memdup
	movq	%rax, -3016(%rbp)
	movq	-3496(%rbp), %rax
	leaq	128(%rax), %rdx
	leaq	-3016(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	jmp	.L2445
.L2697:
	leaq	.LC506(%rip), %rax
	movq	%rax, -6512(%rbp)
	movq	-6504(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$7, %rax
	movq	%rax, -6504(%rbp)
	movq	-6504(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -6504(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-6512(%rbp), %rdx
	movq	-6504(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2699
	leaq	-3280(%rbp), %rdx
	movl	$0, %eax
	movl	$17, %ecx
	movq	%rdx, %rdi
	rep stosq
	movl	$75, -3280(%rbp)
	movb	$15, -3018(%rbp)
	movb	$5, -3017(%rbp)
	leaq	-3272(%rbp), %rax
	leaq	-3018(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	leaq	.LC30(%rip), %rax
	movq	%rax, -3240(%rbp)
	movl	$1, -3228(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -3224(%rbp)
	movl	$1, -3212(%rbp)
	movq	-3496(%rbp), %rax
	movq	112(%rax), %rdx
	movq	104(%rax), %rax
	movq	%rax, -3192(%rbp)
	movq	%rdx, -3184(%rbp)
	movq	-2624(%rbp), %rax
	movq	-2616(%rbp), %rdx
	movq	%rax, -3168(%rbp)
	movq	%rdx, -3160(%rbp)
	movq	-2608(%rbp), %rax
	movq	%rax, -3152(%rbp)
	leaq	-3280(%rbp), %rax
	movl	$136, %esi
	movq	%rax, %rdi
	call	memdup
	movq	%rax, -3032(%rbp)
	movq	-3496(%rbp), %rax
	leaq	128(%rax), %rdx
	leaq	-3032(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	jmp	.L2445
.L2699:
	leaq	.LC507(%rip), %rax
	movq	%rax, -6528(%rbp)
	movq	-6520(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -6520(%rbp)
	movq	-6520(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -6520(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-6528(%rbp), %rdx
	movq	-6520(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2701
	leaq	.LC508(%rip), %rax
	movq	%rax, -6544(%rbp)
	movq	-6536(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -6536(%rbp)
	movq	-6536(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -6536(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-6544(%rbp), %rdx
	movq	-6536(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2702
.L2701:
	leaq	-3280(%rbp), %rdx
	movl	$0, %eax
	movl	$17, %ecx
	movq	%rdx, %rdi
	rep stosq
	movl	$76, -3280(%rbp)
	movb	$-112, -3033(%rbp)
	leaq	-3272(%rbp), %rax
	leaq	-3033(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	leaq	.LC30(%rip), %rax
	movq	%rax, -3240(%rbp)
	movl	$1, -3228(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -3224(%rbp)
	movl	$1, -3212(%rbp)
	movq	-3496(%rbp), %rax
	movq	112(%rax), %rdx
	movq	104(%rax), %rax
	movq	%rax, -3192(%rbp)
	movq	%rdx, -3184(%rbp)
	movq	-2624(%rbp), %rax
	movq	-2616(%rbp), %rdx
	movq	%rax, -3168(%rbp)
	movq	%rdx, -3160(%rbp)
	movq	-2608(%rbp), %rax
	movq	%rax, -3152(%rbp)
	leaq	-3280(%rbp), %rax
	movl	$136, %esi
	movq	%rax, %rdi
	call	memdup
	movq	%rax, -3048(%rbp)
	movq	-3496(%rbp), %rax
	leaq	128(%rax), %rdx
	leaq	-3048(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	jmp	.L2445
.L2702:
	leaq	.LC509(%rip), %rax
	movq	%rax, -6560(%rbp)
	movq	-6552(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -6552(%rbp)
	movq	-6552(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -6552(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-6560(%rbp), %rdx
	movq	-6552(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2704
	leaq	-3280(%rbp), %rdx
	movl	$0, %eax
	movl	$17, %ecx
	movq	%rdx, %rdi
	rep stosq
	movl	$77, -3280(%rbp)
	movb	$-12, -3049(%rbp)
	leaq	-3272(%rbp), %rax
	leaq	-3049(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	leaq	.LC30(%rip), %rax
	movq	%rax, -3240(%rbp)
	movl	$1, -3228(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -3224(%rbp)
	movl	$1, -3212(%rbp)
	movq	-3496(%rbp), %rax
	movq	112(%rax), %rdx
	movq	104(%rax), %rax
	movq	%rax, -3192(%rbp)
	movq	%rdx, -3184(%rbp)
	movq	-2624(%rbp), %rax
	movq	-2616(%rbp), %rdx
	movq	%rax, -3168(%rbp)
	movq	%rdx, -3160(%rbp)
	movq	-2608(%rbp), %rax
	movq	%rax, -3152(%rbp)
	leaq	-3280(%rbp), %rax
	movl	$136, %esi
	movq	%rax, %rdi
	call	memdup
	movq	%rax, -3064(%rbp)
	movq	-3496(%rbp), %rax
	leaq	128(%rax), %rdx
	leaq	-3064(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	jmp	.L2445
.L2704:
	leaq	.LC510(%rip), %rax
	movq	%rax, -6576(%rbp)
	movq	-6568(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$5, %rax
	movq	%rax, -6568(%rbp)
	movq	-6568(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -6568(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-6576(%rbp), %rdx
	movq	-6568(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2706
	leaq	-3280(%rbp), %rdx
	movl	$0, %eax
	movl	$17, %ecx
	movq	%rdx, %rdi
	rep stosq
	movl	$78, -3280(%rbp)
	movb	$-55, -3065(%rbp)
	leaq	-3272(%rbp), %rax
	leaq	-3065(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	leaq	.LC30(%rip), %rax
	movq	%rax, -3240(%rbp)
	movl	$1, -3228(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -3224(%rbp)
	movl	$1, -3212(%rbp)
	movq	-3496(%rbp), %rax
	movq	112(%rax), %rdx
	movq	104(%rax), %rax
	movq	%rax, -3192(%rbp)
	movq	%rdx, -3184(%rbp)
	movq	-2624(%rbp), %rax
	movq	-2616(%rbp), %rdx
	movq	%rax, -3168(%rbp)
	movq	%rdx, -3160(%rbp)
	movq	-2608(%rbp), %rax
	movq	%rax, -3152(%rbp)
	leaq	-3280(%rbp), %rax
	movl	$136, %esi
	movq	%rax, %rdi
	call	memdup
	movq	%rax, -3080(%rbp)
	movq	-3496(%rbp), %rax
	leaq	128(%rax), %rdx
	leaq	-3080(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	jmp	.L2445
.L2706:
	leaq	.LC511(%rip), %rax
	movq	%rax, -6592(%rbp)
	movq	-6584(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -6584(%rbp)
	movq	-6584(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -6584(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-6592(%rbp), %rdx
	movq	-6584(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2708
	leaq	-3280(%rbp), %rdx
	movl	$0, %eax
	movl	$17, %ecx
	movq	%rdx, %rdi
	rep stosq
	movl	$34, -3280(%rbp)
	movb	$72, -3082(%rbp)
	movb	$-104, -3081(%rbp)
	leaq	-3272(%rbp), %rax
	leaq	-3082(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	leaq	.LC30(%rip), %rax
	movq	%rax, -3240(%rbp)
	movl	$1, -3228(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -3224(%rbp)
	movl	$1, -3212(%rbp)
	movq	-3496(%rbp), %rax
	movq	112(%rax), %rdx
	movq	104(%rax), %rax
	movq	%rax, -3192(%rbp)
	movq	%rdx, -3184(%rbp)
	movq	-2624(%rbp), %rax
	movq	-2616(%rbp), %rdx
	movq	%rax, -3168(%rbp)
	movq	%rdx, -3160(%rbp)
	movq	-2608(%rbp), %rax
	movq	%rax, -3152(%rbp)
	leaq	-3280(%rbp), %rax
	movl	$136, %esi
	movq	%rax, %rdi
	call	memdup
	movq	%rax, -3096(%rbp)
	movq	-3496(%rbp), %rax
	leaq	128(%rax), %rdx
	leaq	-3096(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	jmp	.L2445
.L2708:
	leaq	.LC512(%rip), %rax
	movq	%rax, -6608(%rbp)
	movq	-6600(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -6600(%rbp)
	movq	-6600(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -6600(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-6608(%rbp), %rdx
	movq	-6600(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2710
	leaq	-3280(%rbp), %rdx
	movl	$0, %eax
	movl	$17, %ecx
	movq	%rdx, %rdi
	rep stosq
	movl	$35, -3280(%rbp)
	movb	$-103, -3097(%rbp)
	leaq	-3272(%rbp), %rax
	leaq	-3097(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	leaq	.LC30(%rip), %rax
	movq	%rax, -3240(%rbp)
	movl	$1, -3228(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -3224(%rbp)
	movl	$1, -3212(%rbp)
	movq	-3496(%rbp), %rax
	movq	112(%rax), %rdx
	movq	104(%rax), %rax
	movq	%rax, -3192(%rbp)
	movq	%rdx, -3184(%rbp)
	movq	-2624(%rbp), %rax
	movq	-2616(%rbp), %rdx
	movq	%rax, -3168(%rbp)
	movq	%rdx, -3160(%rbp)
	movq	-2608(%rbp), %rax
	movq	%rax, -3152(%rbp)
	leaq	-3280(%rbp), %rax
	movl	$136, %esi
	movq	%rax, %rdi
	call	memdup
	movq	%rax, -3112(%rbp)
	movq	-3496(%rbp), %rax
	leaq	128(%rax), %rdx
	leaq	-3112(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	jmp	.L2445
.L2710:
	leaq	.LC513(%rip), %rax
	movq	%rax, -6624(%rbp)
	movq	-6616(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -6616(%rbp)
	movq	-6616(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -6616(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-6624(%rbp), %rdx
	movq	-6616(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2712
	leaq	-3280(%rbp), %rdx
	movl	$0, %eax
	movl	$17, %ecx
	movq	%rdx, %rdi
	rep stosq
	movl	$33, -3280(%rbp)
	movb	$72, -3114(%rbp)
	movb	$-103, -3113(%rbp)
	leaq	-3272(%rbp), %rax
	leaq	-3114(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	leaq	.LC30(%rip), %rax
	movq	%rax, -3240(%rbp)
	movl	$1, -3228(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -3224(%rbp)
	movl	$1, -3212(%rbp)
	movq	-3496(%rbp), %rax
	movq	112(%rax), %rdx
	movq	104(%rax), %rax
	movq	%rax, -3192(%rbp)
	movq	%rdx, -3184(%rbp)
	movq	-2624(%rbp), %rax
	movq	-2616(%rbp), %rdx
	movq	%rax, -3168(%rbp)
	movq	%rdx, -3160(%rbp)
	movq	-2608(%rbp), %rax
	movq	%rax, -3152(%rbp)
	leaq	-3280(%rbp), %rax
	movl	$136, %esi
	movq	%rax, %rdi
	call	memdup
	movq	%rax, -3128(%rbp)
	movq	-3496(%rbp), %rax
	leaq	128(%rax), %rdx
	leaq	-3128(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	jmp	.L2445
.L2712:
	leaq	.LC514(%rip), %rax
	movq	%rax, -6640(%rbp)
	movq	-6632(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$4, %rax
	movq	%rax, -6632(%rbp)
	movq	-6632(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -6632(%rbp)
	movq	-2656(%rbp), %rsi
	movq	-2648(%rbp), %rax
	movq	-6640(%rbp), %rdx
	movq	-6632(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2714
	leaq	-3280(%rbp), %rdx
	movl	$0, %eax
	movl	$17, %ecx
	movq	%rdx, %rdi
	rep stosq
	movl	$36, -3280(%rbp)
	movb	$-104, -3129(%rbp)
	leaq	-3272(%rbp), %rax
	leaq	-3129(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	leaq	.LC30(%rip), %rax
	movq	%rax, -3240(%rbp)
	movl	$1, -3228(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -3224(%rbp)
	movl	$1, -3212(%rbp)
	movq	-3496(%rbp), %rax
	movq	112(%rax), %rdx
	movq	104(%rax), %rax
	movq	%rax, -3192(%rbp)
	movq	%rdx, -3184(%rbp)
	movq	-2624(%rbp), %rax
	movq	-2616(%rbp), %rdx
	movq	%rax, -3168(%rbp)
	movq	%rdx, -3160(%rbp)
	movq	-2608(%rbp), %rax
	movq	%rax, -3152(%rbp)
	leaq	-3280(%rbp), %rax
	movl	$136, %esi
	movq	%rax, %rdi
	call	memdup
	movq	%rax, -3144(%rbp)
	movq	-3496(%rbp), %rax
	leaq	128(%rax), %rdx
	leaq	-3144(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	jmp	.L2445
.L2714:
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -3280(%rbp)
	movaps	%xmm0, -3264(%rbp)
	movaps	%xmm0, -3248(%rbp)
	movaps	%xmm0, -3232(%rbp)
	movaps	%xmm0, -3216(%rbp)
	leaq	.LC515(%rip), %rax
	movq	%rax, -3280(%rbp)
	movl	$21, -3272(%rbp)
	movl	$1, -3268(%rbp)
	movl	$65040, -3264(%rbp)
	movq	-2640(%rbp), %rax
	movq	-2632(%rbp), %rdx
	movq	%rax, -3256(%rbp)
	movq	%rdx, -3248(%rbp)
	leaq	.LC85(%rip), %rax
	movq	%rax, -3240(%rbp)
	movl	$1, -3232(%rbp)
	movl	$1, -3228(%rbp)
	leaq	-3280(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %rdi
	movq	%rdx, %rsi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rcx
	movq	-2624(%rbp), %rax
	movq	-2616(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-2608(%rbp), %rax
	movq	%rax, 16(%rcx)
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2445:
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
	.globl	encoder__Encoder_encode
encoder__Encoder_encode:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
.L2718:
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$14, %eax
	je	.L2720
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	encoder__Encoder_encode_instr
	jmp	.L2718
.L2720:
	nop
	nop
	leave
	ret
	.globl	encoder__Encoder_add_segment_override_prefix
	.hidden	encoder__Encoder_add_segment_override_prefix
encoder__Encoder_add_segment_override_prefix:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	56(%rbp), %eax
	cmpl	$2, %eax
	je	.L2722
	movl	104(%rbp), %eax
	cmpl	$2, %eax
	jne	.L2724
.L2722:
	movb	$103, -1(%rbp)
	movq	-24(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-1(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
.L2724:
	nop
	leave
	ret
	.section	.rodata, "a"
.LC516:
	.string	"scale unreachable"
	.text
	.globl	encoder__scale
	.hidden	encoder__scale
encoder__scale:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$40, %rsp
	movl	%edi, %ecx
	movb	%cl, -36(%rbp)
	movzbl	-36(%rbp), %ecx
	cmpl	$8, %ecx
	je	.L2726
	cmpl	$8, %ecx
	jg	.L2727
	cmpl	$4, %ecx
	je	.L2728
	cmpl	$4, %ecx
	jg	.L2727
	cmpl	$1, %ecx
	je	.L2729
	cmpl	$2, %ecx
	je	.L2730
	jmp	.L2727
.L2729:
	movb	$0, -20(%rbp)
	movzbl	-20(%rbp), %eax
	jmp	.L2731
.L2730:
	movb	$1, -19(%rbp)
	movzbl	-19(%rbp), %eax
	jmp	.L2731
.L2728:
	movb	$2, -18(%rbp)
	movzbl	-18(%rbp), %eax
	jmp	.L2731
.L2726:
	movb	$3, -17(%rbp)
	movzbl	-17(%rbp), %eax
	jmp	.L2731
.L2727:
	leaq	.LC516(%rip), %rax
	movq	%rdx, %rsi
	movabsq	$-4294967296, %rcx
	andq	%rsi, %rcx
	orq	$17, %rcx
	movq	%rcx, %rdx
	movq	%rdx, %rcx
	movl	%ecx, %esi
	movabsq	$4294967296, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	_v_panic
.L2731:
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	encoder__Indirection_check_base_register
	.hidden	encoder__Indirection_check_base_register
encoder__Indirection_check_base_register:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$88, %rsp
	movzbl	184(%rbp), %ecx
	testb	%cl, %cl
	jne	.L2733
	movb	$0, -52(%rbp)
	movb	$0, -51(%rbp)
	movb	$0, -50(%rbp)
	jmp	.L2750
.L2733:
	movb	$1, -49(%rbp)
	movzbl	-49(%rbp), %ebx
	leaq	.LC240(%rip), %rax
	movq	%rdx, %rsi
	movabsq	$-4294967296, %rcx
	andq	%rsi, %rcx
	orq	$3, %rcx
	movq	%rcx, %rdx
	movq	%rdx, %rcx
	movl	%ecx, %esi
	movabsq	$4294967296, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	movq	40(%rbp), %rsi
	movq	48(%rbp), %r8
	movq	%rdx, %rcx
	movq	%rax, %rdx
	movq	%rsi, %rdi
	movq	%r8, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2735
	leaq	.LC257(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	40(%rbp), %rsi
	movq	48(%rbp), %rax
	movq	%r12, %rdx
	movq	%r13, %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2736
.L2735:
	movl	$1, %eax
	jmp	.L2737
.L2736:
	movl	$0, %eax
.L2737:
	cmpl	%ebx, %eax
	jne	.L2738
	movb	$1, -52(%rbp)
	movb	$0, -51(%rbp)
	movb	$0, -50(%rbp)
	jmp	.L2750
.L2738:
	movzbl	-49(%rbp), %ebx
	leaq	.LC236(%rip), %rax
	movq	%rax, -96(%rbp)
	movq	-88(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -88(%rbp)
	movq	40(%rbp), %rsi
	movq	48(%rbp), %rax
	movq	-96(%rbp), %rdx
	movq	-88(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2740
	leaq	.LC253(%rip), %r14
	movq	%r15, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, %r15
	movq	%r15, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r15
	movq	40(%rbp), %rsi
	movq	48(%rbp), %rax
	movq	%r14, %rdx
	movq	%r15, %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2741
.L2740:
	movl	$1, %eax
	jmp	.L2742
.L2741:
	movl	$0, %eax
.L2742:
	cmpl	%ebx, %eax
	jne	.L2743
	movb	$0, -52(%rbp)
	movb	$1, -51(%rbp)
	movb	$0, -50(%rbp)
	jmp	.L2750
.L2743:
	movzbl	-49(%rbp), %ebx
	leaq	.LC237(%rip), %rax
	movq	%rax, -112(%rbp)
	movq	-104(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -104(%rbp)
	movq	40(%rbp), %rsi
	movq	48(%rbp), %rax
	movq	-112(%rbp), %rdx
	movq	-104(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	jne	.L2745
	leaq	.LC254(%rip), %rax
	movq	%rax, -128(%rbp)
	movq	-120(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, -120(%rbp)
	movq	-120(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -120(%rbp)
	movq	40(%rbp), %rsi
	movq	48(%rbp), %rax
	movq	-128(%rbp), %rdx
	movq	-120(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2746
.L2745:
	movl	$1, %eax
	jmp	.L2747
.L2746:
	movl	$0, %eax
.L2747:
	cmpl	%ebx, %eax
	jne	.L2748
	movb	$0, -52(%rbp)
	movb	$0, -51(%rbp)
	movb	$1, -50(%rbp)
	jmp	.L2750
.L2748:
	movb	$0, -52(%rbp)
	movb	$0, -51(%rbp)
	movb	$0, -50(%rbp)
.L2750:
	movl	$0, %eax
	movzwl	-52(%rbp), %edx
	movzwl	%dx, %edx
	movw	$0, %ax
	orq	%rdx, %rax
	movzbl	-50(%rbp), %edx
	movzbl	%dl, %edx
	salq	$16, %rdx
	andq	$-16711681, %rax
	orq	%rdx, %rax
	addq	$88, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
	.section	.rodata, "a"
.LC517:
	.string	"syntax not supported yet. `disp(,,)`"
.LC518:
	.string	" as base register can not have an index register"
.LC519:
	.string	"base register is "
.LC520:
	.string	"-bit, but index register is not"
.LC521:
	.string	"disp out range!"
.LC522:
	.string	"scale factor in address must be 1, 2, 4 or 8"
	.text
	.globl	encoder__Encoder_add_modrm_sib_disp
	.hidden	encoder__Encoder_add_modrm_sib_disp
encoder__Encoder_add_modrm_sib_disp:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$312, %rsp
	movq	%rdi, -312(%rbp)
	movl	%esi, %ecx
	movb	%cl, -316(%rbp)
	movzbl	184(%rbp), %ecx
	testb	%cl, %cl
	jne	.L2752
	movzbl	185(%rbp), %ecx
	testb	%cl, %cl
	jne	.L2752
	leaq	.LC517(%rip), %rax
	movq	%rdx, %rsi
	movabsq	$-4294967296, %rcx
	andq	%rsi, %rcx
	orq	$36, %rcx
	movq	%rcx, %rdx
	movq	%rdx, %rcx
	movl	%ecx, %esi
	movabsq	$4294967296, %rcx
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %rdi
	movq	%rdx, %rsi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rcx
	movq	160(%rbp), %rax
	movq	168(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	176(%rbp), %rax
	movq	%rax, 16(%rcx)
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2752:
	subq	$176, %rsp
	movq	%rsp, %rax
	movq	16(%rbp), %rcx
	movq	24(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	32(%rbp), %rcx
	movq	40(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	48(%rbp), %rcx
	movq	56(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	movq	64(%rbp), %rcx
	movq	72(%rbp), %rbx
	movq	%rcx, 48(%rax)
	movq	%rbx, 56(%rax)
	movq	80(%rbp), %rcx
	movq	88(%rbp), %rbx
	movq	%rcx, 64(%rax)
	movq	%rbx, 72(%rax)
	movq	96(%rbp), %rcx
	movq	104(%rbp), %rbx
	movq	%rcx, 80(%rax)
	movq	%rbx, 88(%rax)
	movq	112(%rbp), %rcx
	movq	120(%rbp), %rbx
	movq	%rcx, 96(%rax)
	movq	%rbx, 104(%rax)
	movq	128(%rbp), %rcx
	movq	136(%rbp), %rbx
	movq	%rcx, 112(%rax)
	movq	%rbx, 120(%rax)
	movq	144(%rbp), %rcx
	movq	152(%rbp), %rbx
	movq	%rcx, 128(%rax)
	movq	%rbx, 136(%rax)
	movq	160(%rbp), %rcx
	movq	168(%rbp), %rbx
	movq	%rcx, 144(%rax)
	movq	%rbx, 152(%rax)
	movq	176(%rbp), %rcx
	movq	184(%rbp), %rbx
	movq	%rcx, 160(%rax)
	movq	%rbx, 168(%rax)
	call	encoder__Indirection_check_base_register
	addq	$176, %rsp
	cltq
	movb	%al, -75(%rbp)
	movzbl	%ah, %edx
	movb	%dl, -74(%rbp)
	shrq	$16, %rax
	andb	$-1, %ah
	movb	%al, -73(%rbp)
	movzbl	-75(%rbp), %eax
	movb	%al, -49(%rbp)
	movzbl	-74(%rbp), %eax
	movb	%al, -50(%rbp)
	movzbl	-73(%rbp), %eax
	movb	%al, -51(%rbp)
	leaq	-112(%rbp), %rax
	movl	$0, %r8d
	movl	$16, %ecx
	movl	$0, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array_with_default
	leaq	-112(%rbp), %rsi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rcx
	movq	16(%rbp), %rax
	movq	24(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rcx)
	movq	%rsi, %rdi
	call	encoder__eval_expr_get_symbol
	addq	$32, %rsp
	movl	%eax, -56(%rbp)
	movl	-92(%rbp), %eax
	cmpl	$1, %eax
	jle	.L2753
	leaq	.LC229(%rip), %rax
	movq	%rax, -336(%rbp)
	movq	-328(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$15, %rax
	movq	%rax, -328(%rbp)
	movq	-328(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -328(%rbp)
	movq	32(%rbp), %rcx
	movq	-336(%rbp), %rax
	movq	-328(%rbp), %rdx
	movq	%rax, %rsi
	movq	%rdx, %rdi
	movq	%rsi, %rdi
	movq	%rdx, %r8
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	movq	%r8, %rsi
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2753:
	movl	-92(%rbp), %eax
	cmpl	$1, %eax
	sete	%al
	movb	%al, -57(%rbp)
	movzbl	185(%rbp), %eax
	testb	%al, %al
	je	.L2754
	cmpb	$0, -49(%rbp)
	je	.L2755
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -224(%rbp)
	movaps	%xmm0, -208(%rbp)
	movaps	%xmm0, -192(%rbp)
	movaps	%xmm0, -176(%rbp)
	movaps	%xmm0, -160(%rbp)
	leaq	.LC207(%rip), %rax
	movq	%rax, -224(%rbp)
	movl	$1, -216(%rbp)
	movl	$1, -212(%rbp)
	movl	$65040, -208(%rbp)
	movq	40(%rbp), %rdx
	movq	48(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	string_to_lower
	movq	%rax, -200(%rbp)
	movq	%rdx, -192(%rbp)
	leaq	.LC518(%rip), %rax
	movq	%rax, -184(%rbp)
	movl	$48, -176(%rbp)
	movl	$1, -172(%rbp)
	leaq	-224(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %rdi
	movq	%rdx, %rsi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rcx
	movq	112(%rbp), %rax
	movq	120(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	128(%rbp), %rax
	movq	%rax, 16(%rcx)
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2755:
	movl	56(%rbp), %edx
	movl	104(%rbp), %eax
	cmpl	%eax, %edx
	je	.L2756
	movzbl	184(%rbp), %eax
	testb	%al, %al
	je	.L2756
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -224(%rbp)
	movaps	%xmm0, -208(%rbp)
	movaps	%xmm0, -192(%rbp)
	movaps	%xmm0, -176(%rbp)
	movaps	%xmm0, -160(%rbp)
	leaq	.LC519(%rip), %rax
	movq	%rax, -224(%rbp)
	movl	$17, -216(%rbp)
	movl	$1, -212(%rbp)
	movl	$65040, -208(%rbp)
	movl	56(%rbp), %eax
	movl	%eax, %edi
	call	encoder__DataSize_str
	movq	%rax, -200(%rbp)
	movq	%rdx, -192(%rbp)
	leaq	.LC520(%rip), %rax
	movq	%rax, -184(%rbp)
	movl	$31, -176(%rbp)
	movl	$1, -172(%rbp)
	leaq	-224(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %rdi
	movq	%rdx, %rsi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rcx
	movq	64(%rbp), %rax
	movq	72(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	80(%rbp), %rax
	movq	%rax, 16(%rcx)
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2756:
	movzbl	184(%rbp), %eax
	testb	%al, %al
	jne	.L2757
	movzbl	-316(%rbp), %ecx
	movl	$0, %eax
	movzbl	%al, %eax
	movl	$4, %edx
	movl	%ecx, %esi
	movl	%eax, %edi
	call	encoder__compose_mod_rm
	movb	%al, -113(%rbp)
	movq	-312(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-113(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	jmp	.L2763
.L2757:
	cmpb	$0, -57(%rbp)
	je	.L2759
	movzbl	-316(%rbp), %ecx
	movl	$2, %eax
	movzbl	%al, %eax
	movl	$4, %edx
	movl	%ecx, %esi
	movl	%eax, %edi
	call	encoder__compose_mod_rm
	movb	%al, -114(%rbp)
	movq	-312(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-114(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	jmp	.L2763
.L2759:
	cmpl	$0, -56(%rbp)
	jne	.L2760
	cmpb	$0, -51(%rbp)
	jne	.L2760
	movzbl	-316(%rbp), %ecx
	movl	$0, %eax
	movzbl	%al, %eax
	movl	$4, %edx
	movl	%ecx, %esi
	movl	%eax, %edi
	call	encoder__compose_mod_rm
	movb	%al, -115(%rbp)
	movq	-312(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-115(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	jmp	.L2763
.L2760:
	movl	-56(%rbp), %eax
	movl	%eax, %edi
	call	encoder__is_in_i8_range
	testb	%al, %al
	je	.L2761
	movzbl	-316(%rbp), %ecx
	movl	$1, %eax
	movzbl	%al, %eax
	movl	$4, %edx
	movl	%ecx, %esi
	movl	%eax, %edi
	call	encoder__compose_mod_rm
	movb	%al, -116(%rbp)
	movq	-312(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-116(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	jmp	.L2763
.L2761:
	movl	-56(%rbp), %eax
	movl	%eax, %edi
	call	encoder__is_in_i32_range
	testb	%al, %al
	je	.L2762
	movzbl	-316(%rbp), %ecx
	movl	$2, %eax
	movzbl	%al, %eax
	movl	$4, %edx
	movl	%ecx, %esi
	movl	%eax, %edi
	call	encoder__compose_mod_rm
	movb	%al, -117(%rbp)
	movq	-312(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-117(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	jmp	.L2763
.L2762:
	leaq	.LC521(%rip), %rax
	movq	%rax, -352(%rbp)
	movq	-344(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$15, %rax
	movq	%rax, -344(%rbp)
	movq	-344(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -344(%rbp)
	movq	-352(%rbp), %rax
	movq	-344(%rbp), %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	_v_panic
.L2754:
	cmpb	$0, -49(%rbp)
	je	.L2764
	movzbl	-316(%rbp), %ecx
	movl	$0, %eax
	movzbl	%al, %eax
	movl	$5, %edx
	movl	%ecx, %esi
	movl	%eax, %edi
	call	encoder__compose_mod_rm
	movb	%al, -118(%rbp)
	movq	-312(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-118(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	jmp	.L2763
.L2764:
	cmpb	$0, -57(%rbp)
	je	.L2765
	subq	$48, %rsp
	movq	%rsp, %rax
	movq	40(%rbp), %rcx
	movq	48(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	56(%rbp), %rcx
	movq	64(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	72(%rbp), %rcx
	movq	80(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	call	encoder__Register_regi_bits
	addq	$48, %rsp
	movzbl	%al, %edx
	movzbl	-316(%rbp), %ecx
	movl	$2, %eax
	movzbl	%al, %eax
	movl	%ecx, %esi
	movl	%eax, %edi
	call	encoder__compose_mod_rm
	movb	%al, -119(%rbp)
	movq	-312(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-119(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	jmp	.L2763
.L2765:
	cmpl	$0, -56(%rbp)
	jne	.L2766
	cmpb	$0, -51(%rbp)
	jne	.L2766
	subq	$48, %rsp
	movq	%rsp, %rax
	movq	40(%rbp), %rcx
	movq	48(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	56(%rbp), %rcx
	movq	64(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	72(%rbp), %rcx
	movq	80(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	call	encoder__Register_regi_bits
	addq	$48, %rsp
	movzbl	%al, %edx
	movzbl	-316(%rbp), %ecx
	movl	$0, %eax
	movzbl	%al, %eax
	movl	%ecx, %esi
	movl	%eax, %edi
	call	encoder__compose_mod_rm
	movb	%al, -120(%rbp)
	movq	-312(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-120(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	jmp	.L2763
.L2766:
	movl	-56(%rbp), %eax
	movl	%eax, %edi
	call	encoder__is_in_i8_range
	testb	%al, %al
	je	.L2767
	subq	$48, %rsp
	movq	%rsp, %rax
	movq	40(%rbp), %rcx
	movq	48(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	56(%rbp), %rcx
	movq	64(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	72(%rbp), %rcx
	movq	80(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	call	encoder__Register_regi_bits
	addq	$48, %rsp
	movzbl	%al, %edx
	movzbl	-316(%rbp), %ecx
	movl	$1, %eax
	movzbl	%al, %eax
	movl	%ecx, %esi
	movl	%eax, %edi
	call	encoder__compose_mod_rm
	movb	%al, -121(%rbp)
	movq	-312(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-121(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	jmp	.L2763
.L2767:
	movl	-56(%rbp), %eax
	movl	%eax, %edi
	call	encoder__is_in_i32_range
	testb	%al, %al
	je	.L2768
	subq	$48, %rsp
	movq	%rsp, %rax
	movq	40(%rbp), %rcx
	movq	48(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	56(%rbp), %rcx
	movq	64(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	72(%rbp), %rcx
	movq	80(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	call	encoder__Register_regi_bits
	addq	$48, %rsp
	movzbl	%al, %edx
	movzbl	-316(%rbp), %ecx
	movl	$2, %eax
	movzbl	%al, %eax
	movl	%ecx, %esi
	movl	%eax, %edi
	call	encoder__compose_mod_rm
	movb	%al, -122(%rbp)
	movq	-312(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-122(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	jmp	.L2763
.L2768:
	leaq	.LC521(%rip), %r14
	movq	%r15, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$15, %rax
	movq	%rax, %r15
	movq	%r15, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r15
	movq	%r14, %rcx
	movq	%r15, %rbx
	movq	%r14, %rax
	movq	%r15, %rdx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	_v_panic
.L2763:
	movzbl	185(%rbp), %eax
	testb	%al, %al
	je	.L2769
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rcx
	movq	136(%rbp), %rax
	movq	144(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	152(%rbp), %rax
	movq	%rax, 16(%rcx)
	call	encoder__eval_expr
	addq	$32, %rsp
	movb	%al, -58(%rbp)
	cmpb	$1, -58(%rbp)
	je	.L2770
	cmpb	$2, -58(%rbp)
	je	.L2770
	cmpb	$4, -58(%rbp)
	je	.L2770
	cmpb	$8, -58(%rbp)
	je	.L2770
	leaq	.LC522(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$44, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	152(%rbp), %rcx
	movq	%r12, %rsi
	movq	%r13, %rdi
	movq	%r12, %rax
	movq	%r13, %rdx
	movq	%rsi, %rdi
	movq	%rdx, %r8
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	movq	%r8, %rsi
	call	error__print
	addq	$32, %rsp
	movl	$0, %edi
	call	_v_exit
.L2770:
	movzbl	184(%rbp), %eax
	testb	%al, %al
	je	.L2771
	subq	$48, %rsp
	movq	%rsp, %rax
	movq	40(%rbp), %rcx
	movq	48(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	56(%rbp), %rcx
	movq	64(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	72(%rbp), %rcx
	movq	80(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	call	encoder__Register_regi_bits
	addq	$48, %rsp
	movl	%eax, %r12d
	subq	$48, %rsp
	movq	%rsp, %rax
	movq	88(%rbp), %rcx
	movq	96(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	104(%rbp), %rcx
	movq	112(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	120(%rbp), %rcx
	movq	128(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	call	encoder__Register_regi_bits
	addq	$48, %rsp
	sall	$3, %eax
	leal	(%r12,%rax), %ebx
	movzbl	-58(%rbp), %eax
	movl	%eax, %edi
	call	encoder__scale
	sall	$6, %eax
	addl	%ebx, %eax
	movb	%al, -123(%rbp)
	movq	-312(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-123(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	jmp	.L2772
.L2771:
	subq	$48, %rsp
	movq	%rsp, %rax
	movq	88(%rbp), %rcx
	movq	96(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	104(%rbp), %rcx
	movq	112(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	120(%rbp), %rcx
	movq	128(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	call	encoder__Register_regi_bits
	addq	$48, %rsp
	leal	0(,%rax,8), %ebx
	movzbl	-58(%rbp), %eax
	movl	%eax, %edi
	call	encoder__scale
	sall	$6, %eax
	addl	%ebx, %eax
	addl	$5, %eax
	movb	%al, -124(%rbp)
	movq	-312(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-124(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	jmp	.L2772
.L2769:
	cmpb	$0, -50(%rbp)
	je	.L2772
	movb	$36, -125(%rbp)
	movq	-312(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-125(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
.L2772:
	cmpb	$0, -57(%rbp)
	je	.L2773
	cmpb	$0, -49(%rbp)
	jne	.L2774
	movl	56(%rbp), %eax
	cmpl	$3, %eax
	jne	.L2775
	movl	$11, %eax
	jmp	.L2777
.L2775:
	movl	$10, %eax
	jmp	.L2777
.L2774:
	movl	$2, %eax
.L2777:
	movq	%rax, -72(%rbp)
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-112(%rbp), %rax
	movq	-104(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-96(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$0, %edi
	call	array_get
	addq	$32, %rsp
	movq	8(%rax), %rdx
	movq	(%rax), %rax
	movq	%rax, -272(%rbp)
	movq	%rdx, -264(%rbp)
	movq	-312(%rbp), %rax
	movq	120(%rax), %rax
	movq	%rax, -256(%rbp)
	movq	-312(%rbp), %rax
	movq	120(%rax), %rax
	movl	28(%rax), %eax
	cltq
	movq	%rax, -248(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, -240(%rbp)
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rcx
	movq	16(%rbp), %rax
	movq	24(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rcx)
	call	encoder__eval_expr
	addq	$32, %rsp
	movl	%eax, -232(%rbp)
	movb	$0, -228(%rbp)
	movq	-272(%rbp), %rax
	movq	-264(%rbp), %rdx
	movq	%rax, -224(%rbp)
	movq	%rdx, -216(%rbp)
	movq	-256(%rbp), %rax
	movq	-248(%rbp), %rdx
	movq	%rax, -208(%rbp)
	movq	%rdx, -200(%rbp)
	movq	-240(%rbp), %rax
	movq	-232(%rbp), %rdx
	movq	%rax, -192(%rbp)
	movq	%rdx, -184(%rbp)
	movq	-312(%rbp), %rax
	leaq	160(%rax), %rdx
	leaq	-224(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	movb	$0, -129(%rbp)
	movb	$0, -128(%rbp)
	movb	$0, -127(%rbp)
	movb	$0, -126(%rbp)
	leaq	-304(%rbp), %rax
	leaq	-129(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$4, %edx
	movl	$4, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movl	-284(%rbp), %edx
	movq	-296(%rbp), %rax
	movq	-312(%rbp), %rcx
	movq	120(%rcx), %rcx
	addq	$8, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	jmp	.L2783
.L2773:
	movzbl	184(%rbp), %eax
	testb	%al, %al
	jne	.L2779
	movb	$0, -133(%rbp)
	movb	$0, -132(%rbp)
	movb	$0, -131(%rbp)
	movb	$0, -130(%rbp)
	leaq	-272(%rbp), %rax
	leaq	-133(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$4, %edx
	movl	$4, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movl	-56(%rbp), %edx
	leaq	-272(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	encoding__binary__little_endian_put_u32
	movq	-272(%rbp), %rax
	movq	-264(%rbp), %rdx
	movq	%rax, -224(%rbp)
	movq	%rdx, -216(%rbp)
	movq	-256(%rbp), %rax
	movq	-248(%rbp), %rdx
	movq	%rax, -208(%rbp)
	movq	%rdx, -200(%rbp)
	movl	-204(%rbp), %edx
	movq	-216(%rbp), %rax
	movq	-312(%rbp), %rcx
	movq	120(%rcx), %rcx
	addq	$8, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	jmp	.L2783
.L2779:
	cmpl	$0, -56(%rbp)
	jne	.L2780
	cmpb	$0, -49(%rbp)
	jne	.L2780
	cmpb	$0, -51(%rbp)
	je	.L2783
.L2780:
	cmpb	$0, -49(%rbp)
	je	.L2781
	movb	$0, -137(%rbp)
	movb	$0, -136(%rbp)
	movb	$0, -135(%rbp)
	movb	$0, -134(%rbp)
	leaq	-272(%rbp), %rax
	leaq	-137(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$4, %edx
	movl	$4, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movl	-56(%rbp), %edx
	leaq	-272(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	encoding__binary__little_endian_put_u32
	movq	-272(%rbp), %rax
	movq	-264(%rbp), %rdx
	movq	%rax, -224(%rbp)
	movq	%rdx, -216(%rbp)
	movq	-256(%rbp), %rax
	movq	-248(%rbp), %rdx
	movq	%rax, -208(%rbp)
	movq	%rdx, -200(%rbp)
	movl	-204(%rbp), %edx
	movq	-216(%rbp), %rax
	movq	-312(%rbp), %rcx
	movq	120(%rcx), %rcx
	addq	$8, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	jmp	.L2783
.L2781:
	movl	-56(%rbp), %eax
	movl	%eax, %edi
	call	encoder__is_in_i8_range
	testb	%al, %al
	je	.L2782
	movl	-56(%rbp), %eax
	movb	%al, -138(%rbp)
	movq	-312(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-138(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	jmp	.L2783
.L2782:
	movl	-56(%rbp), %eax
	movl	%eax, %edi
	call	encoder__is_in_i32_range
	testb	%al, %al
	je	.L2783
	movb	$0, -142(%rbp)
	movb	$0, -141(%rbp)
	movb	$0, -140(%rbp)
	movb	$0, -139(%rbp)
	leaq	-272(%rbp), %rax
	leaq	-142(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$4, %edx
	movl	$4, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movl	-56(%rbp), %edx
	leaq	-272(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	encoding__binary__little_endian_put_u32
	movq	-272(%rbp), %rax
	movq	-264(%rbp), %rdx
	movq	%rax, -224(%rbp)
	movq	%rdx, -216(%rbp)
	movq	-256(%rbp), %rax
	movq	-248(%rbp), %rdx
	movq	%rax, -208(%rbp)
	movq	%rdx, -200(%rbp)
	movl	-204(%rbp), %edx
	movq	-216(%rbp), %rax
	movq	-312(%rbp), %rcx
	movq	120(%rcx), %rcx
	addq	$8, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
.L2783:
	nop
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
	.globl	encoder__Encoder_cvttss2sil
	.hidden	encoder__Encoder_cvttss2sil
encoder__Encoder_cvttss2sil:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$216, %rsp
	movq	%rdi, -248(%rbp)
	movq	-248(%rbp), %rax
	movl	$82, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_set_current_instr
	leaq	-128(%rbp), %rax
	movq	-248(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	encoder__Encoder_parse_two_operand
	movq	-128(%rbp), %rax
	movq	-120(%rbp), %rdx
	movq	%rax, -160(%rbp)
	movq	%rdx, -152(%rbp)
	movq	-112(%rbp), %rax
	movq	%rax, -144(%rbp)
	movq	-104(%rbp), %rax
	movq	-96(%rbp), %rdx
	movq	%rax, -192(%rbp)
	movq	%rdx, -184(%rbp)
	movq	-88(%rbp), %rax
	movq	%rax, -176(%rbp)
	movl	-152(%rbp), %eax
	cmpl	$166, %eax
	jne	.L2785
	movl	-184(%rbp), %eax
	cmpl	$165, %eax
	jne	.L2785
	movq	-192(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movl	$2, %edi
	call	encoder__Register_check_regi_size
	addq	$48, %rsp
	movl	$4, -196(%rbp)
	leaq	-80(%rbp), %rax
	leaq	-196(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-160(%rbp), %r8
	leaq	.LC30(%rip), %r14
	movq	%r15, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, %r15
	movq	%r15, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r15
	movq	-192(%rbp), %rax
	movq	%r14, %rsi
	movq	%r15, %rdi
	movq	%r14, %rcx
	movq	%r15, %rbx
	movq	%rsi, %r10
	movq	%rbx, %r11
	movq	(%rax), %rsi
	movq	8(%rax), %r9
	movq	-248(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	8(%r8)
	pushq	(%r8)
	movq	%r10, %rcx
	movq	%r11, %r8
	movq	%r9, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movb	$15, -199(%rbp)
	movb	$44, -198(%rbp)
	leaq	-240(%rbp), %rax
	leaq	-199(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movl	-220(%rbp), %edx
	movq	-232(%rbp), %rax
	movq	-248(%rbp), %rcx
	movq	120(%rcx), %rcx
	addq	$8, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	movq	-160(%rbp), %rax
	subq	$8, %rsp
	subq	$40, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rax
	movq	%rax, 32(%rdx)
	call	encoder__Xmm_xmm_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %r12d
	movq	-192(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	call	encoder__Register_regi_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %ecx
	movl	$3, %eax
	movzbl	%al, %eax
	movl	%r12d, %edx
	movl	%ecx, %esi
	movl	%eax, %edi
	call	encoder__compose_mod_rm
	movb	%al, -197(%rbp)
	movq	-248(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-197(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	jmp	.L2787
.L2785:
	leaq	.LC216(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$31, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	-144(%rbp), %rcx
	movq	%r12, %rsi
	movq	%r13, %rdi
	movq	%r12, %rax
	movq	%r13, %rdx
	movq	%rsi, %rdi
	movq	%rdx, %r8
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	movq	%r8, %rsi
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2787:
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
	.globl	encoder__Encoder_cvtsi2ssq
	.hidden	encoder__Encoder_cvtsi2ssq
encoder__Encoder_cvtsi2ssq:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$216, %rsp
	movq	%rdi, -248(%rbp)
	movq	-248(%rbp), %rax
	movl	$83, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_set_current_instr
	leaq	-128(%rbp), %rax
	movq	-248(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	encoder__Encoder_parse_two_operand
	movq	-128(%rbp), %rax
	movq	-120(%rbp), %rdx
	movq	%rax, -160(%rbp)
	movq	%rdx, -152(%rbp)
	movq	-112(%rbp), %rax
	movq	%rax, -144(%rbp)
	movq	-104(%rbp), %rax
	movq	-96(%rbp), %rdx
	movq	%rax, -192(%rbp)
	movq	%rdx, -184(%rbp)
	movq	-88(%rbp), %rax
	movq	%rax, -176(%rbp)
	movl	-152(%rbp), %eax
	cmpl	$165, %eax
	jne	.L2789
	movl	-184(%rbp), %eax
	cmpl	$166, %eax
	jne	.L2789
	movq	-160(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movl	$3, %edi
	call	encoder__Register_check_regi_size
	addq	$48, %rsp
	movl	$4, -200(%rbp)
	movl	$3, -196(%rbp)
	leaq	-80(%rbp), %rax
	leaq	-200(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-160(%rbp), %r8
	leaq	.LC30(%rip), %r14
	movq	%r15, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, %r15
	movq	%r15, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r15
	movq	-192(%rbp), %rax
	movq	%r14, %rsi
	movq	%r15, %rdi
	movq	%r14, %rcx
	movq	%r15, %rbx
	movq	%rsi, %r10
	movq	%rbx, %r11
	movq	(%rax), %rsi
	movq	8(%rax), %r9
	movq	-248(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	8(%r8)
	pushq	(%r8)
	movq	%r10, %rcx
	movq	%r11, %r8
	movq	%r9, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movb	$15, -203(%rbp)
	movb	$42, -202(%rbp)
	leaq	-240(%rbp), %rax
	leaq	-203(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movl	-220(%rbp), %edx
	movq	-232(%rbp), %rax
	movq	-248(%rbp), %rcx
	movq	120(%rcx), %rcx
	addq	$8, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	movq	-160(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	call	encoder__Register_regi_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %r12d
	movq	-192(%rbp), %rax
	subq	$8, %rsp
	subq	$40, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rax
	movq	%rax, 32(%rdx)
	call	encoder__Xmm_xmm_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %ecx
	movl	$3, %eax
	movzbl	%al, %eax
	movl	%r12d, %edx
	movl	%ecx, %esi
	movl	%eax, %edi
	call	encoder__compose_mod_rm
	movb	%al, -201(%rbp)
	movq	-248(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-201(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	jmp	.L2791
.L2789:
	leaq	.LC216(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$31, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	-144(%rbp), %rcx
	movq	%r12, %rsi
	movq	%r13, %rdi
	movq	%r12, %rax
	movq	%r13, %rdx
	movq	%rsi, %rdi
	movq	%rdx, %r8
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	movq	%r8, %rsi
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2791:
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
	.globl	encoder__Encoder_cvtsi2sdq
	.hidden	encoder__Encoder_cvtsi2sdq
encoder__Encoder_cvtsi2sdq:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$216, %rsp
	movq	%rdi, -248(%rbp)
	movq	-248(%rbp), %rax
	movl	$84, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_set_current_instr
	leaq	-128(%rbp), %rax
	movq	-248(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	encoder__Encoder_parse_two_operand
	movq	-128(%rbp), %rax
	movq	-120(%rbp), %rdx
	movq	%rax, -160(%rbp)
	movq	%rdx, -152(%rbp)
	movq	-112(%rbp), %rax
	movq	%rax, -144(%rbp)
	movq	-104(%rbp), %rax
	movq	-96(%rbp), %rdx
	movq	%rax, -192(%rbp)
	movq	%rdx, -184(%rbp)
	movq	-88(%rbp), %rax
	movq	%rax, -176(%rbp)
	movl	-152(%rbp), %eax
	cmpl	$165, %eax
	jne	.L2793
	movl	-184(%rbp), %eax
	cmpl	$166, %eax
	jne	.L2793
	movq	-160(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movl	$3, %edi
	call	encoder__Register_check_regi_size
	addq	$48, %rsp
	movl	$5, -200(%rbp)
	movl	$3, -196(%rbp)
	leaq	-80(%rbp), %rax
	leaq	-200(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-160(%rbp), %r8
	leaq	.LC30(%rip), %r14
	movq	%r15, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, %r15
	movq	%r15, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r15
	movq	-192(%rbp), %rax
	movq	%r14, %rsi
	movq	%r15, %rdi
	movq	%r14, %rcx
	movq	%r15, %rbx
	movq	%rsi, %r10
	movq	%rbx, %r11
	movq	(%rax), %rsi
	movq	8(%rax), %r9
	movq	-248(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	8(%r8)
	pushq	(%r8)
	movq	%r10, %rcx
	movq	%r11, %r8
	movq	%r9, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movb	$15, -203(%rbp)
	movb	$42, -202(%rbp)
	leaq	-240(%rbp), %rax
	leaq	-203(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movl	-220(%rbp), %edx
	movq	-232(%rbp), %rax
	movq	-248(%rbp), %rcx
	movq	120(%rcx), %rcx
	addq	$8, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	movq	-160(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	call	encoder__Register_regi_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %r12d
	movq	-192(%rbp), %rax
	subq	$8, %rsp
	subq	$40, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rax
	movq	%rax, 32(%rdx)
	call	encoder__Xmm_xmm_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %ecx
	movl	$3, %eax
	movzbl	%al, %eax
	movl	%r12d, %edx
	movl	%ecx, %esi
	movl	%eax, %edi
	call	encoder__compose_mod_rm
	movb	%al, -201(%rbp)
	movq	-248(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-201(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	jmp	.L2795
.L2793:
	leaq	.LC216(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$31, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	-144(%rbp), %rcx
	movq	%r12, %rsi
	movq	%r13, %rdi
	movq	%r12, %rax
	movq	%r13, %rdx
	movq	%rsi, %rdi
	movq	%rdx, %r8
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	movq	%r8, %rsi
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2795:
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
	.globl	encoder__Encoder_xorp
	.hidden	encoder__Encoder_xorp
encoder__Encoder_xorp:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$184, %rsp
	movq	%rdi, -216(%rbp)
	movl	%esi, -220(%rbp)
	movl	-220(%rbp), %edx
	movq	-216(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_set_current_instr
	leaq	-96(%rbp), %rax
	movq	-216(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	encoder__Encoder_parse_two_operand
	movq	-96(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rax, -128(%rbp)
	movq	%rdx, -120(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, -112(%rbp)
	movq	-72(%rbp), %rax
	movq	-64(%rbp), %rdx
	movq	%rax, -160(%rbp)
	movq	%rdx, -152(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -144(%rbp)
	movl	-120(%rbp), %eax
	cmpl	$166, %eax
	jne	.L2797
	movl	-152(%rbp), %eax
	cmpl	$166, %eax
	jne	.L2797
	movq	-128(%rbp), %r8
	leaq	.LC30(%rip), %r14
	movq	%r15, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, %r15
	movq	%r15, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r15
	movq	-160(%rbp), %rax
	movq	%r14, %rsi
	movq	%r15, %rdi
	movq	%r14, %rcx
	movq	%r15, %rbx
	movq	%rsi, %r10
	movq	%rbx, %r11
	movq	(%rax), %rsi
	movq	8(%rax), %r9
	movq	-216(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	16(%rbp), %rax
	movq	24(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	32(%rbp), %rax
	movq	40(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	8(%r8)
	pushq	(%r8)
	movq	%r10, %rcx
	movq	%r11, %r8
	movq	%r9, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movb	$15, -163(%rbp)
	movb	$87, -162(%rbp)
	leaq	-208(%rbp), %rax
	leaq	-163(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movl	-188(%rbp), %edx
	movq	-200(%rbp), %rax
	movq	-216(%rbp), %rcx
	movq	120(%rcx), %rcx
	addq	$8, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	movq	-128(%rbp), %rax
	subq	$8, %rsp
	subq	$40, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rax
	movq	%rax, 32(%rdx)
	call	encoder__Xmm_xmm_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %r12d
	movq	-160(%rbp), %rax
	subq	$8, %rsp
	subq	$40, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rax
	movq	%rax, 32(%rdx)
	call	encoder__Xmm_xmm_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %ecx
	movl	$3, %eax
	movzbl	%al, %eax
	movl	%r12d, %edx
	movl	%ecx, %esi
	movl	%eax, %edi
	call	encoder__compose_mod_rm
	movb	%al, -161(%rbp)
	movq	-216(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-161(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	jmp	.L2799
.L2797:
	leaq	.LC216(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$31, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	-112(%rbp), %rcx
	movq	%r12, %rsi
	movq	%r13, %rdi
	movq	%r12, %rax
	movq	%r13, %rdx
	movq	%rsi, %rdi
	movq	%rdx, %r8
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	movq	%r8, %rsi
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2799:
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
	.globl	encoder__Encoder_sse_arith_instr
	.hidden	encoder__Encoder_sse_arith_instr
encoder__Encoder_sse_arith_instr:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$184, %rsp
	movq	%rdi, -216(%rbp)
	movl	%esi, -220(%rbp)
	movl	-220(%rbp), %edx
	movq	-216(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_set_current_instr
	leaq	-96(%rbp), %rax
	movq	-216(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	encoder__Encoder_parse_two_operand
	movq	-96(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rax, -128(%rbp)
	movq	%rdx, -120(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, -112(%rbp)
	movq	-72(%rbp), %rax
	movq	-64(%rbp), %rdx
	movq	%rax, -160(%rbp)
	movq	%rdx, -152(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -144(%rbp)
	movl	-120(%rbp), %eax
	cmpl	$166, %eax
	jne	.L2801
	movl	-152(%rbp), %eax
	cmpl	$166, %eax
	jne	.L2801
	movq	-128(%rbp), %r8
	leaq	.LC30(%rip), %r14
	movq	%r15, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, %r15
	movq	%r15, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r15
	movq	-160(%rbp), %rax
	movq	%r14, %rsi
	movq	%r15, %rdi
	movq	%r14, %rcx
	movq	%r15, %rbx
	movq	%rsi, %r10
	movq	%rbx, %r11
	movq	(%rax), %rsi
	movq	8(%rax), %r9
	movq	-216(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	48(%rbp), %rax
	movq	56(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	64(%rbp), %rax
	movq	72(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	8(%r8)
	pushq	(%r8)
	movq	%r10, %rcx
	movq	%r11, %r8
	movq	%r9, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movq	16(%rbp), %rax
	movq	24(%rbp), %rdx
	movq	%rax, -208(%rbp)
	movq	%rdx, -200(%rbp)
	movq	32(%rbp), %rax
	movq	40(%rbp), %rdx
	movq	%rax, -192(%rbp)
	movq	%rdx, -184(%rbp)
	movl	-188(%rbp), %edx
	movq	-200(%rbp), %rax
	movq	-216(%rbp), %rcx
	movq	120(%rcx), %rcx
	addq	$8, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	movq	-128(%rbp), %rax
	subq	$8, %rsp
	subq	$40, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rax
	movq	%rax, 32(%rdx)
	call	encoder__Xmm_xmm_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %r12d
	movq	-160(%rbp), %rax
	subq	$8, %rsp
	subq	$40, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rax
	movq	%rax, 32(%rdx)
	call	encoder__Xmm_xmm_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %ecx
	movl	$3, %eax
	movzbl	%al, %eax
	movl	%r12d, %edx
	movl	%ecx, %esi
	movl	%eax, %edi
	call	encoder__compose_mod_rm
	movb	%al, -161(%rbp)
	movq	-216(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-161(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	jmp	.L2802
.L2801:
	movl	-120(%rbp), %eax
	cmpl	$167, %eax
	jne	.L2803
	movl	-152(%rbp), %eax
	cmpl	$166, %eax
	jne	.L2803
	movq	-128(%rbp), %rax
	movq	-216(%rbp), %rsi
	subq	$176, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, 128(%rdx)
	movq	%rbx, 136(%rdx)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, 144(%rdx)
	movq	%rbx, 152(%rdx)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, 160(%rdx)
	movq	%rbx, 168(%rdx)
	movq	%rsi, %rdi
	call	encoder__Encoder_add_segment_override_prefix
	addq	$176, %rsp
	movq	-128(%rbp), %r10
	movq	-128(%rbp), %rdx
	movq	-160(%rbp), %rax
	movq	72(%rdx), %r8
	movq	80(%rdx), %r11
	movq	(%rax), %rsi
	movq	8(%rax), %r9
	movq	-216(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	48(%rbp), %rax
	movq	56(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	64(%rbp), %rax
	movq	72(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	32(%r10)
	pushq	24(%r10)
	movq	%r8, %rcx
	movq	%r11, %r8
	movq	%r9, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movq	16(%rbp), %rax
	movq	24(%rbp), %rdx
	movq	%rax, -208(%rbp)
	movq	%rdx, -200(%rbp)
	movq	32(%rbp), %rax
	movq	40(%rbp), %rdx
	movq	%rax, -192(%rbp)
	movq	%rdx, -184(%rbp)
	movl	-188(%rbp), %edx
	movq	-200(%rbp), %rax
	movq	-216(%rbp), %rcx
	movq	120(%rcx), %rcx
	addq	$8, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	movq	-160(%rbp), %rax
	subq	$8, %rsp
	subq	$40, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rax
	movq	%rax, 32(%rdx)
	call	encoder__Xmm_xmm_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %esi
	movq	-128(%rbp), %rax
	movq	-216(%rbp), %rdi
	subq	$176, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, 128(%rdx)
	movq	%rbx, 136(%rdx)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, 144(%rdx)
	movq	%rbx, 152(%rdx)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, 160(%rdx)
	movq	%rbx, 168(%rdx)
	call	encoder__Encoder_add_modrm_sib_disp
	addq	$176, %rsp
	jmp	.L2802
.L2803:
	leaq	.LC216(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$31, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	-112(%rbp), %rcx
	movq	%r12, %rsi
	movq	%r13, %rdi
	movq	%r12, %rax
	movq	%r13, %rdx
	movq	%rsi, %rdi
	movq	%rdx, %r8
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	movq	%r8, %rsi
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2802:
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
	.globl	encoder__Encoder_sse_data_transfer_instr
	.hidden	encoder__Encoder_sse_data_transfer_instr
encoder__Encoder_sse_data_transfer_instr:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$168, %rsp
	movq	%rdi, -200(%rbp)
	movl	%esi, -204(%rbp)
	movl	%edx, %eax
	movb	%al, -208(%rbp)
	movl	-204(%rbp), %edx
	movq	-200(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_set_current_instr
	leaq	-112(%rbp), %rax
	movq	-200(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	encoder__Encoder_parse_two_operand
	movq	-112(%rbp), %rax
	movq	-104(%rbp), %rdx
	movq	%rax, -144(%rbp)
	movq	%rdx, -136(%rbp)
	movq	-96(%rbp), %rax
	movq	%rax, -128(%rbp)
	movq	-88(%rbp), %rax
	movq	-80(%rbp), %rdx
	movq	%rax, -176(%rbp)
	movq	%rdx, -168(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, -160(%rbp)
	movl	-136(%rbp), %eax
	cmpl	$166, %eax
	jne	.L2806
	movl	-168(%rbp), %eax
	cmpl	$166, %eax
	jne	.L2806
	movq	-144(%rbp), %r8
	leaq	.LC30(%rip), %r14
	movq	%r15, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, %r15
	movq	%r15, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r15
	movq	-176(%rbp), %rax
	movq	%r14, %rsi
	movq	%r15, %rdi
	movq	%r14, %rcx
	movq	%r15, %rbx
	movq	%rsi, %r10
	movq	%rbx, %r11
	movq	(%rax), %rsi
	movq	8(%rax), %r9
	movq	-200(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	16(%rbp), %rax
	movq	24(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	32(%rbp), %rax
	movq	40(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	8(%r8)
	pushq	(%r8)
	movq	%r10, %rcx
	movq	%r11, %r8
	movq	%r9, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movq	-144(%rbp), %rax
	subq	$8, %rsp
	subq	$40, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rax
	movq	%rax, 32(%rdx)
	call	encoder__Xmm_xmm_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %r12d
	movq	-176(%rbp), %rax
	subq	$8, %rsp
	subq	$40, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rax
	movq	%rax, 32(%rdx)
	call	encoder__Xmm_xmm_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %ecx
	movl	$3, %eax
	movzbl	%al, %eax
	movl	%r12d, %edx
	movl	%ecx, %esi
	movl	%eax, %edi
	call	encoder__compose_mod_rm
	movb	%al, -49(%rbp)
	movb	$15, -177(%rbp)
	movq	-200(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-177(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	movzbl	-208(%rbp), %eax
	movb	%al, -178(%rbp)
	movq	-200(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-178(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	movzbl	-49(%rbp), %eax
	movb	%al, -179(%rbp)
	movq	-200(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-179(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	jmp	.L2807
.L2806:
	movl	-136(%rbp), %eax
	cmpl	$167, %eax
	jne	.L2808
	movl	-168(%rbp), %eax
	cmpl	$166, %eax
	jne	.L2808
	movq	-144(%rbp), %rax
	movq	-200(%rbp), %rsi
	subq	$176, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, 128(%rdx)
	movq	%rbx, 136(%rdx)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, 144(%rdx)
	movq	%rbx, 152(%rdx)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, 160(%rdx)
	movq	%rbx, 168(%rdx)
	movq	%rsi, %rdi
	call	encoder__Encoder_add_segment_override_prefix
	addq	$176, %rsp
	movq	-144(%rbp), %r10
	movq	-144(%rbp), %rdx
	movq	-176(%rbp), %rax
	movq	72(%rdx), %r8
	movq	80(%rdx), %r11
	movq	(%rax), %rsi
	movq	8(%rax), %r9
	movq	-200(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	16(%rbp), %rax
	movq	24(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	32(%rbp), %rax
	movq	40(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	32(%r10)
	pushq	24(%r10)
	movq	%r8, %rcx
	movq	%r11, %r8
	movq	%r9, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movb	$15, -180(%rbp)
	movq	-200(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-180(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	movzbl	-208(%rbp), %eax
	movb	%al, -181(%rbp)
	movq	-200(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-181(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	movq	-176(%rbp), %rax
	subq	$8, %rsp
	subq	$40, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rax
	movq	%rax, 32(%rdx)
	call	encoder__Xmm_xmm_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %esi
	movq	-144(%rbp), %rax
	movq	-200(%rbp), %rdi
	subq	$176, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, 128(%rdx)
	movq	%rbx, 136(%rdx)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, 144(%rdx)
	movq	%rbx, 152(%rdx)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, 160(%rdx)
	movq	%rbx, 168(%rdx)
	call	encoder__Encoder_add_modrm_sib_disp
	addq	$176, %rsp
	jmp	.L2807
.L2808:
	movl	-136(%rbp), %eax
	cmpl	$166, %eax
	jne	.L2809
	movl	-168(%rbp), %eax
	cmpl	$167, %eax
	jne	.L2809
	movq	-176(%rbp), %rax
	movq	-200(%rbp), %rsi
	subq	$176, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, 128(%rdx)
	movq	%rbx, 136(%rdx)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, 144(%rdx)
	movq	%rbx, 152(%rdx)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, 160(%rdx)
	movq	%rbx, 168(%rdx)
	movq	%rsi, %rdi
	call	encoder__Encoder_add_segment_override_prefix
	addq	$176, %rsp
	movq	-176(%rbp), %r10
	movq	-176(%rbp), %rdx
	movq	-144(%rbp), %rax
	movq	72(%rdx), %r8
	movq	80(%rdx), %r11
	movq	(%rax), %rsi
	movq	8(%rax), %r9
	movq	-200(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	16(%rbp), %rax
	movq	24(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	32(%rbp), %rax
	movq	40(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	32(%r10)
	pushq	24(%r10)
	movq	%r8, %rcx
	movq	%r11, %r8
	movq	%r9, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movb	$15, -182(%rbp)
	movq	-200(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-182(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	movzbl	-208(%rbp), %eax
	addl	$1, %eax
	movb	%al, -183(%rbp)
	movq	-200(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-183(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	movq	-144(%rbp), %rax
	subq	$8, %rsp
	subq	$40, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rax
	movq	%rax, 32(%rdx)
	call	encoder__Xmm_xmm_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %esi
	movq	-176(%rbp), %rax
	movq	-200(%rbp), %rdi
	subq	$176, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, 128(%rdx)
	movq	%rbx, 136(%rdx)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, 144(%rdx)
	movq	%rbx, 152(%rdx)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, 160(%rdx)
	movq	%rbx, 168(%rdx)
	call	encoder__Encoder_add_modrm_sib_disp
	addq	$176, %rsp
	jmp	.L2807
.L2809:
	leaq	.LC216(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$31, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	-128(%rbp), %rcx
	movq	%r12, %rsi
	movq	%r13, %rdi
	movq	%r12, %rax
	movq	%r13, %rdx
	movq	%rsi, %rdi
	movq	%rdx, %r8
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	movq	%r8, %rsi
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2807:
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
	.globl	encoder__Encoder_movd
	.hidden	encoder__Encoder_movd
encoder__Encoder_movd:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$360, %rsp
	movq	%rdi, -376(%rbp)
	movq	-376(%rbp), %rax
	movl	$89, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_set_current_instr
	leaq	-240(%rbp), %rax
	movq	-376(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	encoder__Encoder_parse_two_operand
	movq	-240(%rbp), %rax
	movq	-232(%rbp), %rdx
	movq	%rax, -272(%rbp)
	movq	%rdx, -264(%rbp)
	movq	-224(%rbp), %rax
	movq	%rax, -256(%rbp)
	movq	-216(%rbp), %rax
	movq	-208(%rbp), %rdx
	movq	%rax, -304(%rbp)
	movq	%rdx, -296(%rbp)
	movq	-200(%rbp), %rax
	movq	%rax, -288(%rbp)
	movl	-264(%rbp), %eax
	cmpl	$165, %eax
	jne	.L2812
	movl	-296(%rbp), %eax
	cmpl	$166, %eax
	jne	.L2812
	movq	-272(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movl	$2, %edi
	call	encoder__Register_check_regi_size
	addq	$48, %rsp
	movl	$1, -308(%rbp)
	leaq	-192(%rbp), %rax
	leaq	-308(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-272(%rbp), %r8
	leaq	.LC30(%rip), %rax
	movq	%rax, -400(%rbp)
	movq	-392(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, -392(%rbp)
	movq	-392(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -392(%rbp)
	movq	-304(%rbp), %rax
	movq	-400(%rbp), %rcx
	movq	-392(%rbp), %rbx
	movq	%rcx, %rsi
	movq	%rbx, %rdi
	movq	%rsi, %r10
	movq	%rbx, %r11
	movq	(%rax), %rsi
	movq	8(%rax), %r9
	movq	-376(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-192(%rbp), %rax
	movq	-184(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-176(%rbp), %rax
	movq	-168(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	8(%r8)
	pushq	(%r8)
	movq	%r10, %rcx
	movq	%r11, %r8
	movq	%r9, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movq	-272(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	call	encoder__Register_regi_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %r12d
	movq	-304(%rbp), %rax
	subq	$8, %rsp
	subq	$40, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rax
	movq	%rax, 32(%rdx)
	call	encoder__Xmm_xmm_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %ecx
	movl	$3, %eax
	movzbl	%al, %eax
	movl	%r12d, %edx
	movl	%ecx, %esi
	movl	%eax, %edi
	call	encoder__compose_mod_rm
	movb	%al, -49(%rbp)
	movb	$15, -311(%rbp)
	movb	$110, -310(%rbp)
	leaq	-368(%rbp), %rax
	leaq	-311(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movl	-348(%rbp), %edx
	movq	-360(%rbp), %rax
	movq	-376(%rbp), %rcx
	movq	120(%rcx), %rcx
	addq	$8, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	movzbl	-49(%rbp), %eax
	movb	%al, -309(%rbp)
	movq	-376(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-309(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	jmp	.L2813
.L2812:
	movl	-264(%rbp), %eax
	cmpl	$166, %eax
	jne	.L2814
	movl	-296(%rbp), %eax
	cmpl	$165, %eax
	jne	.L2814
	movq	-304(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movl	$2, %edi
	call	encoder__Register_check_regi_size
	addq	$48, %rsp
	movl	$1, -316(%rbp)
	leaq	-160(%rbp), %rax
	leaq	-316(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-304(%rbp), %r8
	leaq	.LC30(%rip), %r14
	movq	%r15, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, %r15
	movq	%r15, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r15
	movq	-272(%rbp), %rax
	movq	%r14, %rsi
	movq	%r15, %rdi
	movq	%r14, %rcx
	movq	%r15, %rbx
	movq	%rsi, %r10
	movq	%rbx, %r11
	movq	(%rax), %rsi
	movq	8(%rax), %r9
	movq	-376(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-160(%rbp), %rax
	movq	-152(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-144(%rbp), %rax
	movq	-136(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	8(%r8)
	pushq	(%r8)
	movq	%r10, %rcx
	movq	%r11, %r8
	movq	%r9, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movq	-304(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	call	encoder__Register_regi_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %r12d
	movq	-272(%rbp), %rax
	subq	$8, %rsp
	subq	$40, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rax
	movq	%rax, 32(%rdx)
	call	encoder__Xmm_xmm_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %ecx
	movl	$3, %eax
	movzbl	%al, %eax
	movl	%r12d, %edx
	movl	%ecx, %esi
	movl	%eax, %edi
	call	encoder__compose_mod_rm
	movb	%al, -50(%rbp)
	movb	$15, -319(%rbp)
	movb	$126, -318(%rbp)
	leaq	-368(%rbp), %rax
	leaq	-319(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movl	-348(%rbp), %edx
	movq	-360(%rbp), %rax
	movq	-376(%rbp), %rcx
	movq	120(%rcx), %rcx
	addq	$8, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	movzbl	-50(%rbp), %eax
	movb	%al, -317(%rbp)
	movq	-376(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-317(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	jmp	.L2813
.L2814:
	movl	-264(%rbp), %eax
	cmpl	$167, %eax
	jne	.L2815
	movl	-296(%rbp), %eax
	cmpl	$166, %eax
	jne	.L2815
	movq	-272(%rbp), %rax
	movq	-376(%rbp), %rsi
	subq	$176, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, 128(%rdx)
	movq	%rbx, 136(%rdx)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, 144(%rdx)
	movq	%rbx, 152(%rdx)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, 160(%rdx)
	movq	%rbx, 168(%rdx)
	movq	%rsi, %rdi
	call	encoder__Encoder_add_segment_override_prefix
	addq	$176, %rsp
	movl	$1, -324(%rbp)
	leaq	-128(%rbp), %rax
	leaq	-324(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-272(%rbp), %r10
	movq	-272(%rbp), %rdx
	movq	-304(%rbp), %rax
	movq	72(%rdx), %r8
	movq	80(%rdx), %r11
	movq	(%rax), %rsi
	movq	8(%rax), %r9
	movq	-376(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-128(%rbp), %rax
	movq	-120(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-112(%rbp), %rax
	movq	-104(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	32(%r10)
	pushq	24(%r10)
	movq	%r8, %rcx
	movq	%r11, %r8
	movq	%r9, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movb	$15, -326(%rbp)
	movb	$110, -325(%rbp)
	leaq	-368(%rbp), %rax
	leaq	-326(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movl	-348(%rbp), %edx
	movq	-360(%rbp), %rax
	movq	-376(%rbp), %rcx
	movq	120(%rcx), %rcx
	addq	$8, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	movq	-304(%rbp), %rax
	subq	$8, %rsp
	subq	$40, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rax
	movq	%rax, 32(%rdx)
	call	encoder__Xmm_xmm_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %esi
	movq	-272(%rbp), %rax
	movq	-376(%rbp), %rdi
	subq	$176, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, 128(%rdx)
	movq	%rbx, 136(%rdx)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, 144(%rdx)
	movq	%rbx, 152(%rdx)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, 160(%rdx)
	movq	%rbx, 168(%rdx)
	call	encoder__Encoder_add_modrm_sib_disp
	addq	$176, %rsp
	jmp	.L2813
.L2815:
	movl	-264(%rbp), %eax
	cmpl	$166, %eax
	jne	.L2816
	movl	-296(%rbp), %eax
	cmpl	$167, %eax
	jne	.L2816
	movq	-304(%rbp), %rax
	movq	-376(%rbp), %rsi
	subq	$176, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, 128(%rdx)
	movq	%rbx, 136(%rdx)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, 144(%rdx)
	movq	%rbx, 152(%rdx)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, 160(%rdx)
	movq	%rbx, 168(%rdx)
	movq	%rsi, %rdi
	call	encoder__Encoder_add_segment_override_prefix
	addq	$176, %rsp
	movl	$1, -332(%rbp)
	leaq	-96(%rbp), %rax
	leaq	-332(%rbp), %rdx
	movq	%rdx, %r8
	movl	$4, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-304(%rbp), %r10
	movq	-304(%rbp), %rdx
	movq	-272(%rbp), %rax
	movq	72(%rdx), %r8
	movq	80(%rdx), %r11
	movq	(%rax), %rsi
	movq	8(%rax), %r9
	movq	-376(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-96(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	32(%r10)
	pushq	24(%r10)
	movq	%r8, %rcx
	movq	%r11, %r8
	movq	%r9, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movb	$15, -334(%rbp)
	movb	$126, -333(%rbp)
	leaq	-368(%rbp), %rax
	leaq	-334(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movl	-348(%rbp), %edx
	movq	-360(%rbp), %rax
	movq	-376(%rbp), %rcx
	movq	120(%rcx), %rcx
	addq	$8, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	movq	-272(%rbp), %rax
	subq	$8, %rsp
	subq	$40, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rax
	movq	%rax, 32(%rdx)
	call	encoder__Xmm_xmm_bits
	addq	$48, %rsp
	movzbl	%al, %eax
	andl	$7, %eax
	movl	%eax, %esi
	movq	-304(%rbp), %rax
	movq	-376(%rbp), %rdi
	subq	$176, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, 128(%rdx)
	movq	%rbx, 136(%rdx)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, 144(%rdx)
	movq	%rbx, 152(%rdx)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, 160(%rdx)
	movq	%rbx, 168(%rdx)
	call	encoder__Encoder_add_modrm_sib_disp
	addq	$176, %rsp
	jmp	.L2813
.L2816:
	leaq	.LC216(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$31, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	-256(%rbp), %rcx
	movq	%r12, %rsi
	movq	%r13, %rdi
	movq	%r12, %rax
	movq	%r13, %rdx
	movq	%rsi, %rdi
	movq	%rdx, %r8
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	movq	%r8, %rsi
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2813:
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
	.globl	encoder__Encoder_pop
	.hidden	encoder__Encoder_pop
encoder__Encoder_pop:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$200, %rsp
	movq	%rdi, -200(%rbp)
	movq	-200(%rbp), %rax
	movl	$42, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_set_current_instr
	leaq	-144(%rbp), %rax
	movq	-200(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	encoder__Encoder_parse_operand
	movl	-136(%rbp), %eax
	cmpl	$165, %eax
	jne	.L2819
	movq	-144(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movl	$3, %edi
	call	encoder__Register_check_regi_size
	addq	$48, %rsp
	leaq	-112(%rbp), %rax
	movl	$0, %r8d
	movl	$4, %ecx
	movl	$0, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array_with_default
	movq	-144(%rbp), %rsi
	leaq	.LC30(%rip), %rbx
	movq	%rbx, -240(%rbp)
	movq	-232(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, -232(%rbp)
	movq	-232(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -232(%rbp)
	movq	%rbx, -224(%rbp)
	movq	-216(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, -216(%rbp)
	movq	-216(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -216(%rbp)
	movq	-240(%rbp), %rax
	movq	-232(%rbp), %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %r8
	movq	%rdx, %r11
	movq	-224(%rbp), %rax
	movq	-216(%rbp), %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %r10
	movq	%rdx, %r9
	movq	-200(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-112(%rbp), %rax
	movq	-104(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-96(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	8(%rsi)
	pushq	(%rsi)
	movq	%r8, %rcx
	movq	%r11, %r8
	movq	%r10, %rsi
	movq	%r9, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movq	-144(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	call	encoder__Register_regi_bits
	addq	$48, %rsp
	andl	$7, %eax
	addl	$88, %eax
	movb	%al, -145(%rbp)
	leaq	-192(%rbp), %rax
	leaq	-145(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movl	-172(%rbp), %edx
	movq	-184(%rbp), %rax
	movq	-200(%rbp), %rcx
	movq	120(%rcx), %rcx
	addq	$8, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	jmp	.L2820
.L2819:
	movl	-136(%rbp), %eax
	cmpl	$167, %eax
	jne	.L2821
	movq	-144(%rbp), %rax
	movq	-200(%rbp), %rsi
	subq	$176, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, 128(%rdx)
	movq	%rbx, 136(%rdx)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, 144(%rdx)
	movq	%rbx, 152(%rdx)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, 160(%rdx)
	movq	%rbx, 168(%rdx)
	movq	%rsi, %rdi
	call	encoder__Encoder_add_segment_override_prefix
	addq	$176, %rsp
	leaq	-80(%rbp), %rax
	movl	$0, %r8d
	movl	$4, %ecx
	movl	$0, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array_with_default
	movq	-144(%rbp), %r8
	movq	-144(%rbp), %rax
	leaq	.LC30(%rip), %r14
	movq	%r15, %rcx
	movabsq	$-4294967296, %rdx
	andq	%rcx, %rdx
	movq	%rdx, %r15
	movq	%r15, %rdx
	movl	%edx, %ecx
	movabsq	$4294967296, %rdx
	orq	%rcx, %rdx
	movq	%rdx, %r15
	movq	72(%rax), %rsi
	movq	80(%rax), %r9
	movq	%r14, %rcx
	movq	%r15, %rbx
	movq	%r14, %rax
	movq	%r15, %rdx
	movq	%rcx, %r11
	movq	%rdx, %r10
	movq	-200(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	32(%r8)
	pushq	24(%r8)
	movq	%rsi, %rcx
	movq	%r9, %r8
	movq	%r11, %rsi
	movq	%r10, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movb	$-113, -146(%rbp)
	movq	-200(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-146(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	movq	-144(%rbp), %rax
	movq	-200(%rbp), %rdi
	subq	$176, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, 128(%rdx)
	movq	%rbx, 136(%rdx)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, 144(%rdx)
	movq	%rbx, 152(%rdx)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, 160(%rdx)
	movq	%rbx, 168(%rdx)
	movl	$0, %esi
	call	encoder__Encoder_add_modrm_sib_disp
	addq	$176, %rsp
	jmp	.L2820
.L2821:
	leaq	.LC216(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$31, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	-128(%rbp), %rcx
	movq	%r12, %rsi
	movq	%r13, %rdi
	movq	%r12, %rax
	movq	%r13, %rdx
	movq	%rsi, %rdi
	movq	%rdx, %r8
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	movq	%r8, %rsi
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2820:
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
	.globl	encoder__Encoder_push
	.hidden	encoder__Encoder_push
encoder__Encoder_push:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$232, %rsp
	movq	%rdi, -216(%rbp)
	movq	-216(%rbp), %rax
	movl	$43, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_set_current_instr
	leaq	-160(%rbp), %rax
	movq	-216(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	encoder__Encoder_parse_operand
	movl	-152(%rbp), %eax
	cmpl	$165, %eax
	jne	.L2824
	movq	-160(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movl	$3, %edi
	call	encoder__Register_check_regi_size
	addq	$48, %rsp
	leaq	-128(%rbp), %rax
	movl	$0, %r8d
	movl	$4, %ecx
	movl	$0, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array_with_default
	movq	-160(%rbp), %rsi
	leaq	.LC30(%rip), %rbx
	movq	%rbx, -256(%rbp)
	movq	-248(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, -248(%rbp)
	movq	-248(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -248(%rbp)
	movq	%rbx, -240(%rbp)
	movq	-232(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, -232(%rbp)
	movq	-232(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -232(%rbp)
	movq	-256(%rbp), %rax
	movq	-248(%rbp), %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %r8
	movq	%rdx, %r11
	movq	-240(%rbp), %rax
	movq	-232(%rbp), %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %r10
	movq	%rdx, %r9
	movq	-216(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-128(%rbp), %rax
	movq	-120(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-112(%rbp), %rax
	movq	-104(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	8(%rsi)
	pushq	(%rsi)
	movq	%r8, %rcx
	movq	%r11, %r8
	movq	%r10, %rsi
	movq	%r9, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movq	-160(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movl	$3, %edi
	call	encoder__Register_check_regi_size
	addq	$48, %rsp
	movq	-160(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	call	encoder__Register_regi_bits
	addq	$48, %rsp
	andl	$7, %eax
	addl	$80, %eax
	movb	%al, -161(%rbp)
	leaq	-208(%rbp), %rax
	leaq	-161(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movl	-188(%rbp), %edx
	movq	-200(%rbp), %rax
	movq	-216(%rbp), %rcx
	movq	120(%rcx), %rcx
	addq	$8, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	jmp	.L2825
.L2824:
	movl	-152(%rbp), %eax
	cmpl	$167, %eax
	jne	.L2826
	movq	-160(%rbp), %rax
	movq	-216(%rbp), %rsi
	subq	$176, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, 128(%rdx)
	movq	%rbx, 136(%rdx)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, 144(%rdx)
	movq	%rbx, 152(%rdx)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, 160(%rdx)
	movq	%rbx, 168(%rdx)
	movq	%rsi, %rdi
	call	encoder__Encoder_add_segment_override_prefix
	addq	$176, %rsp
	leaq	-96(%rbp), %rax
	movl	$0, %r8d
	movl	$4, %ecx
	movl	$0, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array_with_default
	movq	-160(%rbp), %r8
	movq	-160(%rbp), %rax
	leaq	.LC30(%rip), %r14
	movq	%r15, %rcx
	movabsq	$-4294967296, %rdx
	andq	%rcx, %rdx
	movq	%rdx, %r15
	movq	%r15, %rdx
	movl	%edx, %ecx
	movabsq	$4294967296, %rdx
	orq	%rcx, %rdx
	movq	%rdx, %r15
	movq	72(%rax), %rsi
	movq	80(%rax), %r9
	movq	%r14, %rcx
	movq	%r15, %rbx
	movq	%r14, %rax
	movq	%r15, %rdx
	movq	%rcx, %r11
	movq	%rdx, %r10
	movq	-216(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-96(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	32(%r8)
	pushq	24(%r8)
	movq	%rsi, %rcx
	movq	%r9, %r8
	movq	%r11, %rsi
	movq	%r10, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movb	$-1, -162(%rbp)
	movq	-216(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-162(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	movq	-160(%rbp), %rax
	movq	-216(%rbp), %rdi
	subq	$176, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112(%rdx)
	movq	%rbx, 120(%rdx)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, 128(%rdx)
	movq	%rbx, 136(%rdx)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, 144(%rdx)
	movq	%rbx, 152(%rdx)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, 160(%rdx)
	movq	%rbx, 168(%rdx)
	movl	$6, %esi
	call	encoder__Encoder_add_modrm_sib_disp
	addq	$176, %rsp
	jmp	.L2825
.L2826:
	movl	-152(%rbp), %eax
	cmpl	$168, %eax
	jne	.L2827
	leaq	-208(%rbp), %rax
	movl	$0, %r8d
	movl	$16, %ecx
	movl	$0, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array_with_default
	leaq	-208(%rbp), %rsi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rcx
	movq	-160(%rbp), %rax
	movq	-152(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-144(%rbp), %rax
	movq	%rax, 16(%rcx)
	movq	%rsi, %rdi
	call	encoder__eval_expr_get_symbol
	addq	$32, %rsp
	movl	%eax, -52(%rbp)
	movl	-188(%rbp), %eax
	cmpl	$1, %eax
	jle	.L2828
	leaq	.LC217(%rip), %rax
	movq	%rax, -272(%rbp)
	movq	-264(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$25, %rax
	movq	%rax, -264(%rbp)
	movq	-264(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -264(%rbp)
	movq	-160(%rbp), %rcx
	movq	-272(%rbp), %rax
	movq	-264(%rbp), %rdx
	movq	%rax, %rsi
	movq	%rdx, %rdi
	movq	%rsi, %rdi
	movq	%rdx, %r8
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	24(%rcx), %rax
	movq	32(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	40(%rcx), %rax
	movq	%rax, 16(%rsi)
	movq	%r8, %rsi
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2828:
	movl	-52(%rbp), %eax
	movl	%eax, %edi
	call	encoder__is_in_i8_range
	testb	%al, %al
	je	.L2829
	movl	$106, %eax
	jmp	.L2830
.L2829:
	movl	$104, %eax
.L2830:
	movb	%al, -163(%rbp)
	movq	-216(%rbp), %rax
	movq	120(%rax), %rax
	leaq	8(%rax), %rdx
	leaq	-163(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	movl	-188(%rbp), %eax
	cmpl	$1, %eax
	sete	%al
	movb	%al, -53(%rbp)
	cmpb	$0, -53(%rbp)
	je	.L2831
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-208(%rbp), %rax
	movq	-200(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-192(%rbp), %rax
	movq	-184(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$0, %edi
	call	array_get
	addq	$32, %rsp
	movl	-52(%rbp), %ecx
	movq	(%rax), %rsi
	movq	8(%rax), %rdx
	movq	-216(%rbp), %rax
	movl	$3, %r8d
	movq	%rax, %rdi
	call	encoder__Encoder_add_imm_rela
	jmp	.L2825
.L2831:
	movl	-52(%rbp), %ecx
	movq	-216(%rbp), %rax
	movl	$3, %edx
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_add_imm_value
	jmp	.L2825
.L2827:
	leaq	.LC216(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$31, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	-144(%rbp), %rcx
	movq	%r12, %rsi
	movq	%r13, %rdi
	movq	%r12, %rax
	movq	%r13, %rdx
	movq	%rsi, %rdi
	movq	%rdx, %r8
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	movq	%r8, %rsi
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2825:
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
	.globl	encoder__Encoder_jmp_instr
	.hidden	encoder__Encoder_jmp_instr
encoder__Encoder_jmp_instr:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$232, %rsp
	movq	%rdi, -232(%rbp)
	movl	%esi, -236(%rbp)
	movq	%rdx, -248(%rbp)
	movl	-236(%rbp), %edx
	movq	-232(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_set_current_instr
	movq	-232(%rbp), %rax
	movq	120(%rax), %rax
	movb	$1, 104(%rax)
	leaq	-112(%rbp), %rax
	movq	-232(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	encoder__Encoder_parse_operand
	movl	-104(%rbp), %eax
	cmpl	$169, %eax
	jne	.L2835
	movq	16(%rbp), %rax
	movq	24(%rbp), %rdx
	movq	%rax, -176(%rbp)
	movq	%rdx, -168(%rbp)
	movq	32(%rbp), %rax
	movq	40(%rbp), %rdx
	movq	%rax, -160(%rbp)
	movq	%rdx, -152(%rbp)
	movl	-156(%rbp), %edx
	movq	-168(%rbp), %rax
	movq	-232(%rbp), %rcx
	movq	120(%rcx), %rcx
	addq	$8, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	movq	-112(%rbp), %rax
	movq	8(%rax), %rdx
	movq	(%rax), %rax
	movq	%rax, -224(%rbp)
	movq	%rdx, -216(%rbp)
	movq	-232(%rbp), %rax
	movq	120(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	-248(%rbp), %rax
	movq	%rax, -200(%rbp)
	movl	$11, %eax
	movq	%rax, -192(%rbp)
	movl	$0, -184(%rbp)
	movb	$0, -180(%rbp)
	leaq	-224(%rbp), %rax
	movl	$48, %esi
	movq	%rax, %rdi
	call	memdup
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, -176(%rbp)
	movq	%rbx, -168(%rbp)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, -160(%rbp)
	movq	%rbx, -152(%rbp)
	movq	40(%rax), %rdx
	movq	32(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	%rdx, -136(%rbp)
	movq	-232(%rbp), %rax
	leaq	160(%rax), %rdx
	leaq	-176(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	jmp	.L2836
.L2835:
	movl	-104(%rbp), %eax
	cmpl	$177, %eax
	jne	.L2837
	movq	-112(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movl	$3, %edi
	call	encoder__Register_check_regi_size
	addq	$48, %rsp
	leaq	-80(%rbp), %rax
	movl	$0, %r8d
	movl	$4, %ecx
	movl	$0, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array_with_default
	movq	-112(%rbp), %rsi
	leaq	.LC30(%rip), %r14
	movq	%r15, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, %r15
	movq	%r15, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r15
	leaq	.LC30(%rip), %rax
	movq	%rax, -272(%rbp)
	movq	-264(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, -264(%rbp)
	movq	-264(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -264(%rbp)
	movq	%r14, %rcx
	movq	%r15, %rbx
	movq	%r14, %rax
	movq	%r15, %rdx
	movq	%rcx, %r8
	movq	%rdx, %r11
	movq	-272(%rbp), %rax
	movq	-264(%rbp), %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %r10
	movq	%rdx, %r9
	movq	-232(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	8(%rsi)
	pushq	(%rsi)
	movq	%r8, %rcx
	movq	%r11, %r8
	movq	%r10, %rsi
	movq	%r9, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movb	$-1, -114(%rbp)
	movq	-112(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	call	encoder__Register_regi_bits
	addq	$48, %rsp
	andl	$7, %eax
	subl	$32, %eax
	movb	%al, -113(%rbp)
	leaq	-176(%rbp), %rax
	leaq	-114(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movl	-156(%rbp), %edx
	movq	-168(%rbp), %rax
	movq	-232(%rbp), %rcx
	movq	120(%rcx), %rcx
	addq	$8, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	jmp	.L2836
.L2837:
	leaq	.LC216(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$31, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	-96(%rbp), %rcx
	movq	%r12, %rsi
	movq	%r13, %rdi
	movq	%r12, %rax
	movq	%r13, %rdx
	movq	%rsi, %rdi
	movq	%rdx, %r8
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	movq	%r8, %rsi
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2836:
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
	.globl	encoder__Encoder_call
	.hidden	encoder__Encoder_call
encoder__Encoder_call:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$216, %rsp
	movq	%rdi, -232(%rbp)
	movq	-232(%rbp), %rax
	movl	$44, %esi
	movq	%rax, %rdi
	call	encoder__Encoder_set_current_instr
	movq	-232(%rbp), %rax
	movq	120(%rax), %rax
	movb	$1, 104(%rax)
	leaq	-128(%rbp), %rax
	movq	-232(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	encoder__Encoder_parse_operand
	movl	-120(%rbp), %eax
	cmpl	$177, %eax
	jne	.L2840
	movq	-128(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movl	$3, %edi
	call	encoder__Register_check_regi_size
	addq	$48, %rsp
	leaq	-96(%rbp), %rax
	movl	$0, %r8d
	movl	$4, %ecx
	movl	$0, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array_with_default
	movq	-128(%rbp), %rsi
	leaq	.LC30(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	leaq	.LC30(%rip), %r14
	movq	%r15, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	movq	%rax, %r15
	movq	%r15, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r15
	movq	%r12, %rcx
	movq	%r13, %rbx
	movq	%r12, %rax
	movq	%r13, %rdx
	movq	%rcx, %r8
	movq	%rdx, %r11
	movq	%r14, %rcx
	movq	%r15, %rbx
	movq	%r14, %rax
	movq	%r15, %rdx
	movq	%rcx, %r10
	movq	%rdx, %r9
	movq	-232(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-96(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	pushq	8(%rsi)
	pushq	(%rsi)
	movq	%r8, %rcx
	movq	%r11, %r8
	movq	%r10, %rsi
	movq	%r9, %rdx
	call	encoder__Encoder_add_rex_prefix
	addq	$48, %rsp
	movb	$-1, -130(%rbp)
	movq	-128(%rbp), %rax
	subq	$48, %rsp
	movq	%rsp, %rdx
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	call	encoder__Register_regi_bits
	addq	$48, %rsp
	andl	$7, %eax
	subl	$48, %eax
	movb	%al, -129(%rbp)
	leaq	-192(%rbp), %rax
	leaq	-130(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movl	-172(%rbp), %edx
	movq	-184(%rbp), %rax
	movq	-232(%rbp), %rcx
	movq	120(%rcx), %rcx
	addq	$8, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	jmp	.L2843
.L2840:
	movb	$-24, -135(%rbp)
	movb	$0, -134(%rbp)
	movb	$0, -133(%rbp)
	movb	$0, -132(%rbp)
	movb	$0, -131(%rbp)
	leaq	-192(%rbp), %rax
	leaq	-135(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$5, %edx
	movl	$5, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movl	-172(%rbp), %edx
	movq	-184(%rbp), %rax
	movq	-232(%rbp), %rcx
	movq	120(%rcx), %rcx
	addq	$8, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	leaq	-224(%rbp), %rax
	movl	$0, %r8d
	movl	$16, %ecx
	movl	$0, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array_with_default
	leaq	-224(%rbp), %rsi
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rcx
	movq	-128(%rbp), %rax
	movq	-120(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-112(%rbp), %rax
	movq	%rax, 16(%rcx)
	movq	%rsi, %rdi
	call	encoder__eval_expr_get_symbol
	addq	$32, %rsp
	movl	%eax, -52(%rbp)
	movl	-204(%rbp), %eax
	cmpl	$1, %eax
	jle	.L2842
	leaq	.LC216(%rip), %rax
	movq	%rax, -256(%rbp)
	movq	-248(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$31, %rax
	movq	%rax, -248(%rbp)
	movq	-248(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -248(%rbp)
	movq	-112(%rbp), %rcx
	movq	-256(%rbp), %rax
	movq	-248(%rbp), %rdx
	movq	%rax, %rsi
	movq	%rdx, %rdi
	movq	%rsi, %rdi
	movq	%rdx, %r8
	subq	$8, %rsp
	subq	$24, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsi)
	movq	%r8, %rsi
	call	error__print
	addq	$32, %rsp
	movl	$1, %edi
	call	_v_exit
.L2842:
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-224(%rbp), %rax
	movq	-216(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-208(%rbp), %rax
	movq	-200(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$0, %edi
	call	array_get
	addq	$32, %rsp
	movq	8(%rax), %rdx
	movq	(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	%rdx, -184(%rbp)
	movq	-232(%rbp), %rax
	movq	120(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	$1, -168(%rbp)
	movl	$4, %eax
	movq	%rax, -160(%rbp)
	movl	-52(%rbp), %eax
	movl	%eax, -152(%rbp)
	movb	$0, -148(%rbp)
	movq	-232(%rbp), %rax
	leaq	160(%rax), %rdx
	leaq	-192(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
.L2843:
	nop
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
	.globl	elf__new
elf__new:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$1400, %rsp
	movq	%rdi, %rcx
	movq	%rsi, %rax
	movq	%rax, %rbx
	movq	%rcx, -1392(%rbp)
	movq	%rbx, -1384(%rbp)
	movl	%edx, %eax
	movb	%al, -1396(%rbp)
	leaq	-1184(%rbp), %rdx
	movl	$0, %eax
	movl	$134, %ecx
	movq	%rdx, %rdi
	rep stosq
	movq	-1392(%rbp), %rax
	movq	-1384(%rbp), %rdx
	movq	%rax, -1184(%rbp)
	movq	%rdx, -1176(%rbp)
	movq	16(%rbp), %rax
	movq	24(%rbp), %rdx
	movq	%rax, -1168(%rbp)
	movq	%rdx, -1160(%rbp)
	movq	32(%rbp), %rax
	movq	40(%rbp), %rdx
	movq	%rax, -1152(%rbp)
	movq	%rdx, -1144(%rbp)
	movq	168(%rbp), %rax
	movq	176(%rbp), %rdx
	movq	%rax, -1136(%rbp)
	movq	%rdx, -1128(%rbp)
	movq	184(%rbp), %rax
	movq	192(%rbp), %rdx
	movq	%rax, -1120(%rbp)
	movq	%rdx, -1112(%rbp)
	movq	200(%rbp), %rax
	movq	208(%rbp), %rdx
	movq	%rax, -1104(%rbp)
	movq	%rdx, -1096(%rbp)
	movq	216(%rbp), %rax
	movq	224(%rbp), %rdx
	movq	%rax, -1088(%rbp)
	movq	%rdx, -1080(%rbp)
	movq	232(%rbp), %rax
	movq	240(%rbp), %rdx
	movq	%rax, -1072(%rbp)
	movq	%rdx, -1064(%rbp)
	movq	248(%rbp), %rax
	movq	256(%rbp), %rdx
	movq	%rax, -1056(%rbp)
	movq	%rdx, -1048(%rbp)
	movq	264(%rbp), %rax
	movq	272(%rbp), %rdx
	movq	%rax, -1040(%rbp)
	movq	%rdx, -1032(%rbp)
	movq	280(%rbp), %rax
	movq	%rax, -1024(%rbp)
	movq	48(%rbp), %rax
	movq	56(%rbp), %rdx
	movq	%rax, -1016(%rbp)
	movq	%rdx, -1008(%rbp)
	movq	64(%rbp), %rax
	movq	72(%rbp), %rdx
	movq	%rax, -1000(%rbp)
	movq	%rdx, -992(%rbp)
	movq	80(%rbp), %rax
	movq	88(%rbp), %rdx
	movq	%rax, -984(%rbp)
	movq	%rdx, -976(%rbp)
	movq	96(%rbp), %rax
	movq	104(%rbp), %rdx
	movq	%rax, -968(%rbp)
	movq	%rdx, -960(%rbp)
	movq	112(%rbp), %rax
	movq	120(%rbp), %rdx
	movq	%rax, -952(%rbp)
	movq	%rdx, -944(%rbp)
	movq	128(%rbp), %rax
	movq	136(%rbp), %rdx
	movq	%rax, -936(%rbp)
	movq	%rdx, -928(%rbp)
	movq	144(%rbp), %rax
	movq	152(%rbp), %rdx
	movq	%rax, -920(%rbp)
	movq	%rdx, -912(%rbp)
	movq	160(%rbp), %rax
	movq	%rax, -904(%rbp)
	movzbl	-1396(%rbp), %eax
	movb	%al, -896(%rbp)
	leaq	-824(%rbp), %rax
	subq	$8, %rsp
	leaq	map_free_string(%rip), %rdx
	pushq	%rdx
	leaq	map_clone_string(%rip), %r9
	leaq	map_eq_string(%rip), %r8
	leaq	map_hash_string(%rip), %rdx
	movq	%rdx, %rcx
	movl	$4, %edx
	movl	$16, %esi
	movq	%rax, %rdi
	call	new_map
	addq	$16, %rsp
	leaq	-696(%rbp), %rax
	movl	$16, %ecx
	movl	$0, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array
	leaq	-664(%rbp), %rax
	movl	$16, %ecx
	movl	$0, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array
	leaq	-632(%rbp), %rax
	subq	$8, %rsp
	leaq	map_free_string(%rip), %rdx
	pushq	%rdx
	leaq	map_clone_string(%rip), %r9
	leaq	map_eq_string(%rip), %r8
	leaq	map_hash_string(%rip), %rdx
	movq	%rdx, %rcx
	movl	$4, %edx
	movl	$16, %esi
	movq	%rax, %rdi
	call	new_map
	addq	$16, %rsp
	leaq	-512(%rbp), %rax
	subq	$8, %rsp
	leaq	map_free_string(%rip), %rdx
	pushq	%rdx
	leaq	map_clone_string(%rip), %r9
	leaq	map_eq_string(%rip), %r8
	leaq	map_hash_string(%rip), %rdx
	movq	%rdx, %rcx
	movl	$4, %edx
	movl	$16, %esi
	movq	%rax, %rdi
	call	new_map
	addq	$16, %rsp
	leaq	-392(%rbp), %rax
	movl	$1, %ecx
	movl	$0, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array
	leaq	-360(%rbp), %rax
	movl	$24, %ecx
	movl	$0, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array
	leaq	-328(%rbp), %rax
	movl	$16, %ecx
	movl	$0, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array
	leaq	-296(%rbp), %rax
	subq	$8, %rsp
	leaq	map_free_string(%rip), %rdx
	pushq	%rdx
	leaq	map_clone_string(%rip), %r9
	leaq	map_eq_string(%rip), %r8
	leaq	map_hash_string(%rip), %rdx
	movq	%rdx, %rcx
	movl	$32, %edx
	movl	$16, %esi
	movq	%rax, %rdi
	call	new_map
	addq	$16, %rsp
	leaq	-176(%rbp), %rax
	movl	$1, %ecx
	movl	$0, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array
	leaq	-144(%rbp), %rax
	movl	$64, %ecx
	movl	$0, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array
	leaq	-1184(%rbp), %rax
	movl	$1072, %esi
	movq	%rax, %rdi
	call	memdup
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	168(%rax), %rcx
	movq	176(%rax), %rbx
	movq	%rcx, -1312(%rbp)
	movq	%rbx, -1304(%rbp)
	movq	184(%rax), %rcx
	movq	192(%rax), %rbx
	movq	%rcx, -1296(%rbp)
	movq	%rbx, -1288(%rbp)
	movq	200(%rax), %rcx
	movq	208(%rax), %rbx
	movq	%rcx, -1280(%rbp)
	movq	%rbx, -1272(%rbp)
	movq	216(%rax), %rcx
	movq	224(%rax), %rbx
	movq	%rcx, -1264(%rbp)
	movq	%rbx, -1256(%rbp)
	movq	232(%rax), %rcx
	movq	240(%rax), %rbx
	movq	%rcx, -1248(%rbp)
	movq	%rbx, -1240(%rbp)
	movq	248(%rax), %rcx
	movq	256(%rax), %rbx
	movq	%rcx, -1232(%rbp)
	movq	%rbx, -1224(%rbp)
	movq	264(%rax), %rcx
	movq	272(%rax), %rbx
	movq	%rcx, -1216(%rbp)
	movq	%rbx, -1208(%rbp)
	movq	280(%rax), %rax
	movq	%rax, -1200(%rbp)
	movl	-1284(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	$0, -24(%rbp)
	jmp	.L2845
.L2850:
	movl	-1284(%rbp), %eax
	subl	-20(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-1284(%rbp), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -36(%rbp)
	jns	.L2846
	movl	$-1, -24(%rbp)
	jmp	.L2849
.L2846:
	movl	-24(%rbp), %eax
	leaq	-1312(%rbp), %rdx
	addq	$16, %rdx
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	DenseArray_has_index
	testb	%al, %al
	je	.L2852
	movl	-24(%rbp), %eax
	leaq	-1312(%rbp), %rdx
	addq	$16, %rdx
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	DenseArray_key
	movq	8(%rax), %rdx
	movq	(%rax), %rax
	movq	%rax, -1328(%rbp)
	movq	%rdx, -1320(%rbp)
	movq	-1328(%rbp), %rdx
	movq	-1320(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	string_clone
	movq	%rax, -1328(%rbp)
	movq	%rdx, -1320(%rbp)
	movq	-1328(%rbp), %rdx
	movq	-1320(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	string_clone
	movq	%rax, -1344(%rbp)
	movq	%rdx, -1336(%rbp)
	movq	-32(%rbp), %rax
	leaq	520(%rax), %rdx
	leaq	-1344(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	movq	-32(%rbp), %rax
	movl	664(%rax), %eax
	addl	$1, %eax
	movl	%eax, -1364(%rbp)
	movq	-1328(%rbp), %rax
	movq	-1320(%rbp), %rdx
	movq	%rax, -1360(%rbp)
	movq	%rdx, -1352(%rbp)
	movq	-32(%rbp), %rax
	leaq	552(%rax), %rcx
	leaq	-1364(%rbp), %rdx
	leaq	-1360(%rbp), %rax
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	map_set
	jmp	.L2849
.L2852:
	nop
.L2849:
	addl	$1, -24(%rbp)
.L2845:
	movl	-24(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jl	.L2850
	movq	-32(%rbp), %rax
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	elf__align_to
elf__align_to:
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edi, -20(%rbp)
	movl	%esi, -24(%rbp)
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %eax
	addl	%edx, %eax
	subl	$1, %eax
	cltd
	idivl	-24(%rbp)
	movl	%eax, %edx
	movl	-24(%rbp), %eax
	imull	%edx, %eax
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	popq	%rbp
	ret
	.globl	elf__add_padding
	.hidden	elf__add_padding
elf__add_padding:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	20(%rax), %eax
	movl	$16, %esi
	movl	%eax, %edi
	call	elf__align_to
	movl	%eax, %edx
	movq	-24(%rbp), %rax
	movl	20(%rax), %eax
	subl	%eax, %edx
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
	jmp	.L2856
.L2857:
	movb	$0, -9(%rbp)
	leaq	-9(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	array_push
	addl	$1, -4(%rbp)
.L2856:
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jl	.L2857
	nop
	nop
	leave
	ret
	.section	.rodata, "a"
.LC523:
	.string	".L"
	.text
	.globl	elf__Elf_elf_symbol
	.hidden	elf__Elf_elf_symbol
elf__Elf_elf_symbol:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$488, %rsp
	movq	%rdi, -488(%rbp)
	movl	%esi, -492(%rbp)
	movq	%rdx, -504(%rbp)
	movq	%rcx, -512(%rbp)
	movq	-488(%rbp), %rax
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, -192(%rbp)
	movq	%rbx, -184(%rbp)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, -176(%rbp)
	movq	%rbx, -168(%rbp)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, -160(%rbp)
	movq	%rbx, -152(%rbp)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, -144(%rbp)
	movq	%rbx, -136(%rbp)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, -128(%rbp)
	movq	%rbx, -120(%rbp)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, -112(%rbp)
	movq	%rbx, -104(%rbp)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, -96(%rbp)
	movq	%rbx, -88(%rbp)
	movq	160(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	-164(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -40(%rbp)
	jmp	.L2859
.L2869:
	movl	-164(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-164(%rbp), %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -48(%rbp)
	jns	.L2860
	movl	$-1, -40(%rbp)
	jmp	.L2868
.L2860:
	movl	-40(%rbp), %eax
	leaq	-192(%rbp), %rdx
	addq	$16, %rdx
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	DenseArray_has_index
	testb	%al, %al
	je	.L2870
	movl	-40(%rbp), %eax
	leaq	-192(%rbp), %rdx
	addq	$16, %rdx
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	DenseArray_key
	movq	8(%rax), %rdx
	movq	(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	%rdx, -200(%rbp)
	movq	-208(%rbp), %rdx
	movq	-200(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	string_clone
	movq	%rax, -208(%rbp)
	movq	%rdx, -200(%rbp)
	movl	-40(%rbp), %eax
	leaq	-192(%rbp), %rdx
	addq	$16, %rdx
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	DenseArray_value
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rax
	movzbl	80(%rax), %eax
	movzbl	%al, %eax
	cmpl	%eax, -492(%rbp)
	jne	.L2871
	movq	-56(%rbp), %rax
	movzbl	80(%rax), %eax
	testb	%al, %al
	jne	.L2864
	movq	-488(%rbp), %rax
	movzbl	288(%rax), %eax
	testb	%al, %al
	jne	.L2865
	movq	-56(%rbp), %rax
	movzbl	80(%rax), %eax
	testb	%al, %al
	jne	.L2865
	leaq	.LC523(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	-208(%rbp), %rdx
	movq	-200(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	string_to_upper
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %rsi
	movq	%rdx, %rax
	movq	%r12, %rdx
	movq	%r13, %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string_starts_with
	testb	%al, %al
	je	.L2865
	jmp	.L2868
.L2865:
	movq	-488(%rbp), %rax
	movl	480(%rax), %eax
	leal	1(%rax), %edx
	movq	-488(%rbp), %rax
	movl	%edx, 480(%rax)
.L2864:
	movq	-488(%rbp), %rax
	movl	472(%rax), %eax
	movl	%eax, -228(%rbp)
	movq	-208(%rbp), %rax
	movq	-200(%rbp), %rdx
	movq	%rax, -224(%rbp)
	movq	%rdx, -216(%rbp)
	movq	-488(%rbp), %rax
	leaq	360(%rax), %rcx
	leaq	-228(%rbp), %rdx
	leaq	-224(%rbp), %rax
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	map_set
	movq	-504(%rbp), %rax
	movl	(%rax), %edx
	movq	-512(%rbp), %rax
	movl	8(%rax), %eax
	addl	$1, %eax
	addl	%eax, %edx
	movq	-504(%rbp), %rax
	movl	%edx, (%rax)
	movl	$0, -260(%rbp)
	movq	-56(%rbp), %rax
	movq	96(%rax), %rdx
	movq	88(%rax), %rax
	movq	%rax, -256(%rbp)
	movq	%rdx, -248(%rbp)
	movq	-488(%rbp), %rax
	movq	552(%rax), %rcx
	movq	560(%rax), %rbx
	movq	%rcx, -448(%rbp)
	movq	%rbx, -440(%rbp)
	movq	568(%rax), %rcx
	movq	576(%rax), %rbx
	movq	%rcx, -432(%rbp)
	movq	%rbx, -424(%rbp)
	movq	584(%rax), %rcx
	movq	592(%rax), %rbx
	movq	%rcx, -416(%rbp)
	movq	%rbx, -408(%rbp)
	movq	600(%rax), %rcx
	movq	608(%rax), %rbx
	movq	%rcx, -400(%rbp)
	movq	%rbx, -392(%rbp)
	movq	616(%rax), %rcx
	movq	624(%rax), %rbx
	movq	%rcx, -384(%rbp)
	movq	%rbx, -376(%rbp)
	movq	632(%rax), %rcx
	movq	640(%rax), %rbx
	movq	%rcx, -368(%rbp)
	movq	%rbx, -360(%rbp)
	movq	648(%rax), %rcx
	movq	656(%rax), %rbx
	movq	%rcx, -352(%rbp)
	movq	%rbx, -344(%rbp)
	movq	664(%rax), %rax
	movq	%rax, -336(%rbp)
	leaq	-260(%rbp), %rdx
	leaq	-256(%rbp), %rcx
	leaq	-448(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	map_get
	movl	(%rax), %eax
	movw	%ax, -58(%rbp)
	movl	$0, -44(%rbp)
	movq	-56(%rbp), %rax
	movzbl	82(%rax), %eax
	cmpb	$3, %al
	jne	.L2866
	movl	$0, -44(%rbp)
	jmp	.L2867
.L2866:
	movq	-504(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -44(%rbp)
.L2867:
	movl	-44(%rbp), %eax
	movl	%eax, -320(%rbp)
	movq	-56(%rbp), %rax
	movzbl	80(%rax), %eax
	sall	$4, %eax
	movl	%eax, %edx
	movq	-56(%rbp), %rax
	movzbl	82(%rax), %eax
	andl	$15, %eax
	addl	%edx, %eax
	movb	%al, -316(%rbp)
	movq	-56(%rbp), %rax
	movzbl	81(%rax), %eax
	movb	%al, -315(%rbp)
	movzwl	-58(%rbp), %eax
	movw	%ax, -314(%rbp)
	movq	-56(%rbp), %rax
	movq	72(%rax), %rax
	movq	%rax, -312(%rbp)
	movq	$0, -304(%rbp)
	movq	-488(%rbp), %rax
	leaq	824(%rax), %rdx
	leaq	-320(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	leaq	-480(%rbp), %rax
	movq	-208(%rbp), %rcx
	movq	-200(%rbp), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	string_bytes
	movl	-460(%rbp), %edx
	movq	-472(%rbp), %rax
	movq	-488(%rbp), %rcx
	addq	$792, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	movb	$0, -321(%rbp)
	movq	-488(%rbp), %rax
	leaq	792(%rax), %rdx
	leaq	-321(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	movq	-512(%rbp), %rcx
	movq	-208(%rbp), %rax
	movq	-200(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	jmp	.L2868
.L2870:
	nop
	jmp	.L2868
.L2871:
	nop
.L2868:
	addl	$1, -40(%rbp)
.L2859:
	movl	-40(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jl	.L2869
	nop
	nop
	addq	$488, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%rbp
	ret
	.globl	elf__Elf_elf_rela_symbol
	.hidden	elf__Elf_elf_rela_symbol
elf__Elf_elf_rela_symbol:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$192, %rsp
	movq	%rdi, -168(%rbp)
	movq	%rsi, -176(%rbp)
	movq	%rdx, -184(%rbp)
	movl	$0, -4(%rbp)
	jmp	.L2873
.L2874:
	movq	-168(%rbp), %rax
	movq	496(%rax), %rax
	movl	-4(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	movq	8(%rax), %rdx
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-176(%rbp), %rax
	movl	(%rax), %edx
	movq	-184(%rbp), %rax
	movl	8(%rax), %eax
	addl	$1, %eax
	addl	%eax, %edx
	movq	-176(%rbp), %rax
	movl	%edx, (%rax)
	movq	-168(%rbp), %rax
	movl	472(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdx
	movq	%rax, -48(%rbp)
	movq	%rdx, -40(%rbp)
	movq	-168(%rbp), %rax
	leaq	360(%rax), %rcx
	leaq	-52(%rbp), %rdx
	leaq	-48(%rbp), %rax
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	map_set
	movq	-176(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -112(%rbp)
	movb	$16, -108(%rbp)
	movb	$0, -107(%rbp)
	movw	$0, -106(%rbp)
	movq	$0, -104(%rbp)
	movq	$0, -96(%rbp)
	movq	-168(%rbp), %rax
	leaq	824(%rax), %rdx
	leaq	-112(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	leaq	-160(%rbp), %rax
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	string_bytes
	movl	-140(%rbp), %edx
	movq	-152(%rbp), %rax
	movq	-168(%rbp), %rcx
	addq	$792, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	movb	$0, -113(%rbp)
	movq	-168(%rbp), %rax
	leaq	792(%rax), %rdx
	leaq	-113(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	movq	-184(%rbp), %rcx
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	addl	$1, -4(%rbp)
.L2873:
	movq	-168(%rbp), %rax
	movl	508(%rax), %eax
	cmpl	%eax, -4(%rbp)
	jl	.L2874
	nop
	nop
	leave
	ret
	.section	.rodata, "a"
.LC524:
	.string	".rela"
	.text
	.globl	elf__Elf_rela_text_users
elf__Elf_rela_text_users:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$696, %rsp
	movq	%rdi, -696(%rbp)
	movl	$0, -52(%rbp)
	jmp	.L2876
.L2889:
	movq	-696(%rbp), %rax
	movq	24(%rax), %rcx
	movl	-52(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$4, %rax
	addq	%rcx, %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, -656(%rbp)
	movq	%rbx, -648(%rbp)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, -640(%rbp)
	movq	%rbx, -632(%rbp)
	movq	40(%rax), %rdx
	movq	32(%rax), %rax
	movq	%rax, -624(%rbp)
	movq	%rdx, -616(%rbp)
	movl	$0, -56(%rbp)
	movq	-624(%rbp), %rax
	movl	$11, %edx
	cmpq	%rdx, %rax
	je	.L2877
	movq	-624(%rbp), %rax
	movl	$10, %edx
	cmpq	%rdx, %rax
	je	.L2877
	movq	-624(%rbp), %rax
	movl	$1, %edx
	cmpq	%rdx, %rax
	je	.L2877
	movq	-624(%rbp), %rax
	movl	$10, %edx
	cmpq	%rdx, %rax
	je	.L2877
	movq	-624(%rbp), %rax
	movl	$12, %edx
	cmpq	%rdx, %rax
	je	.L2877
	movq	-624(%rbp), %rax
	movl	$14, %edx
	cmpq	%rdx, %rax
	je	.L2877
	movq	-624(%rbp), %rax
	movl	$2, %edx
	cmpq	%rdx, %rax
	jne	.L2878
	movq	-632(%rbp), %rcx
	movq	-640(%rbp), %rax
	movl	28(%rax), %eax
	movslq	%eax, %rdx
	movq	%rcx, %rax
	subq	%rdx, %rax
	jmp	.L2880
.L2878:
	movq	$-4, %rax
	jmp	.L2880
.L2877:
	movl	$0, %eax
.L2880:
	movq	%rax, -64(%rbp)
	movzbl	-612(%rbp), %eax
	testb	%al, %al
	je	.L2881
	jmp	.L2882
.L2881:
	movq	-656(%rbp), %rax
	movq	-648(%rbp), %rdx
	movq	%rax, -96(%rbp)
	movq	%rdx, -88(%rbp)
	movq	-696(%rbp), %rax
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, -560(%rbp)
	movq	%rbx, -552(%rbp)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, -544(%rbp)
	movq	%rbx, -536(%rbp)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, -528(%rbp)
	movq	%rbx, -520(%rbp)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, -512(%rbp)
	movq	%rbx, -504(%rbp)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, -496(%rbp)
	movq	%rbx, -488(%rbp)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, -480(%rbp)
	movq	%rbx, -472(%rbp)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, -464(%rbp)
	movq	%rbx, -456(%rbp)
	movq	160(%rax), %rax
	movq	%rax, -448(%rbp)
	leaq	-96(%rbp), %rdx
	leaq	-560(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	map_get_check
	movq	%rax, -72(%rbp)
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -608(%rbp)
	movaps	%xmm0, -592(%rbp)
	movaps	%xmm0, -576(%rbp)
	cmpq	$0, -72(%rbp)
	je	.L2883
	leaq	-608(%rbp), %rax
	leaq	40(%rax), %rdx
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, (%rdx)
	jmp	.L2884
.L2883:
	movb	$2, -608(%rbp)
	leaq	.LC211(%rip), %r14
	movq	%r15, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$24, %rax
	movq	%rax, %r15
	movq	%r15, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r15
	leaq	-736(%rbp), %rax
	movq	%r14, %rsi
	movq	%r15, %rdi
	movq	%r14, %rcx
	movq	%r15, %rbx
	movq	%rbx, %rdx
	movq	%rax, %rdi
	call	_v_error
	movq	-736(%rbp), %rax
	movq	-728(%rbp), %rdx
	movq	%rax, -600(%rbp)
	movq	%rdx, -592(%rbp)
	movq	-720(%rbp), %rax
	movq	-712(%rbp), %rdx
	movq	%rax, -584(%rbp)
	movq	%rdx, -576(%rbp)
.L2884:
	movzbl	-608(%rbp), %eax
	testb	%al, %al
	jne	.L2885
	leaq	-608(%rbp), %rax
	addq	$40, %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movzbl	80(%rax), %eax
	cmpb	$1, %al
	jne	.L2886
	movl	$0, -212(%rbp)
	movq	-656(%rbp), %rax
	movq	-648(%rbp), %rdx
	movq	%rax, -208(%rbp)
	movq	%rdx, -200(%rbp)
	movq	-696(%rbp), %rax
	movq	360(%rax), %rcx
	movq	368(%rax), %rbx
	movq	%rcx, -432(%rbp)
	movq	%rbx, -424(%rbp)
	movq	376(%rax), %rcx
	movq	384(%rax), %rbx
	movq	%rcx, -416(%rbp)
	movq	%rbx, -408(%rbp)
	movq	392(%rax), %rcx
	movq	400(%rax), %rbx
	movq	%rcx, -400(%rbp)
	movq	%rbx, -392(%rbp)
	movq	408(%rax), %rcx
	movq	416(%rax), %rbx
	movq	%rcx, -384(%rbp)
	movq	%rbx, -376(%rbp)
	movq	424(%rax), %rcx
	movq	432(%rax), %rbx
	movq	%rcx, -368(%rbp)
	movq	%rbx, -360(%rbp)
	movq	440(%rax), %rcx
	movq	448(%rax), %rbx
	movq	%rcx, -352(%rbp)
	movq	%rbx, -344(%rbp)
	movq	456(%rax), %rcx
	movq	464(%rax), %rbx
	movq	%rcx, -336(%rbp)
	movq	%rbx, -328(%rbp)
	movq	472(%rax), %rax
	movq	%rax, -320(%rbp)
	leaq	-212(%rbp), %rdx
	leaq	-208(%rbp), %rcx
	leaq	-432(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	map_get
	movl	(%rax), %eax
	movl	%eax, -56(%rbp)
	jmp	.L2887
.L2886:
	movq	-80(%rbp), %rax
	movq	72(%rax), %rax
	addq	%rax, -64(%rbp)
	movl	$0, -244(%rbp)
	movq	-80(%rbp), %rax
	movq	96(%rax), %rdx
	movq	88(%rax), %rax
	movq	%rax, -240(%rbp)
	movq	%rdx, -232(%rbp)
	movq	-696(%rbp), %rax
	movq	360(%rax), %rcx
	movq	368(%rax), %rbx
	movq	%rcx, -432(%rbp)
	movq	%rbx, -424(%rbp)
	movq	376(%rax), %rcx
	movq	384(%rax), %rbx
	movq	%rcx, -416(%rbp)
	movq	%rbx, -408(%rbp)
	movq	392(%rax), %rcx
	movq	400(%rax), %rbx
	movq	%rcx, -400(%rbp)
	movq	%rbx, -392(%rbp)
	movq	408(%rax), %rcx
	movq	416(%rax), %rbx
	movq	%rcx, -384(%rbp)
	movq	%rbx, -376(%rbp)
	movq	424(%rax), %rcx
	movq	432(%rax), %rbx
	movq	%rcx, -368(%rbp)
	movq	%rbx, -360(%rbp)
	movq	440(%rax), %rcx
	movq	448(%rax), %rbx
	movq	%rcx, -352(%rbp)
	movq	%rbx, -344(%rbp)
	movq	456(%rax), %rcx
	movq	464(%rax), %rbx
	movq	%rcx, -336(%rbp)
	movq	%rbx, -328(%rbp)
	movq	472(%rax), %rax
	movq	%rax, -320(%rbp)
	leaq	-244(%rbp), %rdx
	leaq	-240(%rbp), %rcx
	leaq	-432(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	map_get
	movl	(%rax), %eax
	movl	%eax, -56(%rbp)
	jmp	.L2887
.L2885:
	movq	-600(%rbp), %rax
	movq	-592(%rbp), %rdx
	movq	%rax, -688(%rbp)
	movq	%rdx, -680(%rbp)
	movq	-584(%rbp), %rax
	movq	-576(%rbp), %rdx
	movq	%rax, -672(%rbp)
	movq	%rdx, -664(%rbp)
	movl	$0, -276(%rbp)
	movq	-656(%rbp), %rax
	movq	-648(%rbp), %rdx
	movq	%rax, -272(%rbp)
	movq	%rdx, -264(%rbp)
	movq	-696(%rbp), %rax
	movq	360(%rax), %rcx
	movq	368(%rax), %rbx
	movq	%rcx, -432(%rbp)
	movq	%rbx, -424(%rbp)
	movq	376(%rax), %rcx
	movq	384(%rax), %rbx
	movq	%rcx, -416(%rbp)
	movq	%rbx, -408(%rbp)
	movq	392(%rax), %rcx
	movq	400(%rax), %rbx
	movq	%rcx, -400(%rbp)
	movq	%rbx, -392(%rbp)
	movq	408(%rax), %rcx
	movq	416(%rax), %rbx
	movq	%rcx, -384(%rbp)
	movq	%rbx, -376(%rbp)
	movq	424(%rax), %rcx
	movq	432(%rax), %rbx
	movq	%rcx, -368(%rbp)
	movq	%rbx, -360(%rbp)
	movq	440(%rax), %rcx
	movq	448(%rax), %rbx
	movq	%rcx, -352(%rbp)
	movq	%rbx, -344(%rbp)
	movq	456(%rax), %rcx
	movq	464(%rax), %rbx
	movq	%rcx, -336(%rbp)
	movq	%rbx, -328(%rbp)
	movq	472(%rax), %rax
	movq	%rax, -320(%rbp)
	leaq	-276(%rbp), %rdx
	leaq	-272(%rbp), %rcx
	leaq	-432(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	map_get
	movl	(%rax), %eax
	movl	%eax, -56(%rbp)
.L2887:
	movq	-640(%rbp), %rax
	leaq	.LC524(%rip), %r12
	movq	%r13, %rcx
	movabsq	$-4294967296, %rdx
	andq	%rcx, %rdx
	orq	$5, %rdx
	movq	%rdx, %r13
	movq	%r13, %rdx
	movl	%edx, %ecx
	movabsq	$4294967296, %rdx
	orq	%rcx, %rdx
	movq	%rdx, %r13
	movq	96(%rax), %rdx
	movq	88(%rax), %rax
	movq	%r12, %rsi
	movq	%r13, %rdi
	movq	%r12, %rcx
	movq	%r13, %rbx
	movq	%rsi, %rdi
	movq	%rbx, %rsi
	movq	%rdx, %rcx
	movq	%rax, %rdx
	call	string__plus
	movq	%rax, -112(%rbp)
	movq	%rdx, -104(%rbp)
	movq	-640(%rbp), %rax
	movq	72(%rax), %rdx
	movq	-632(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -192(%rbp)
	movl	-56(%rbp), %eax
	cltq
	salq	$32, %rax
	movq	%rax, %rdx
	movq	-624(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -184(%rbp)
	movl	-616(%rbp), %eax
	movslq	%eax, %rdx
	movq	-64(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -176(%rbp)
	leaq	-432(%rbp), %rax
	movl	$24, %ecx
	movl	$0, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array
	movq	-112(%rbp), %rax
	movq	-104(%rbp), %rdx
	movq	%rax, -128(%rbp)
	movq	%rdx, -120(%rbp)
	movq	-696(%rbp), %rax
	leaq	888(%rax), %rcx
	leaq	-432(%rbp), %rdx
	leaq	-128(%rbp), %rax
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	map_get_and_set
	movq	%rax, %rdx
	leaq	-192(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	movq	-112(%rbp), %rdi
	movq	-104(%rbp), %r8
	movq	-696(%rbp), %rcx
	subq	$32, %rsp
	movq	%rsp, %rsi
	movq	856(%rcx), %rax
	movq	864(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	872(%rcx), %rax
	movq	880(%rcx), %rdx
	movq	%rax, 16(%rsi)
	movq	%rdx, 24(%rsi)
	movq	%r8, %rsi
	call	Array_string_contains
	addq	$32, %rsp
	testb	%al, %al
	jne	.L2882
	movq	-112(%rbp), %rdx
	movq	-104(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	string_clone
	movq	%rax, -304(%rbp)
	movq	%rdx, -296(%rbp)
	movq	-696(%rbp), %rax
	leaq	856(%rax), %rdx
	leaq	-304(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
.L2882:
	addl	$1, -52(%rbp)
.L2876:
	movq	-696(%rbp), %rax
	movl	36(%rax), %eax
	cmpl	%eax, -52(%rbp)
	jl	.L2889
	nop
	nop
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
	.globl	elf__Elf_collect_rela_symbols
elf__Elf_collect_rela_symbols:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$248, %rsp
	movq	%rdi, -248(%rbp)
	movl	$0, -20(%rbp)
	jmp	.L2891
.L2895:
	movq	-248(%rbp), %rax
	movq	24(%rax), %rcx
	movl	-20(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$4, %rax
	addq	%rcx, %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, -240(%rbp)
	movq	%rbx, -232(%rbp)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, -224(%rbp)
	movq	%rbx, -216(%rbp)
	movq	40(%rax), %rdx
	movq	32(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	%rdx, -200(%rbp)
	movq	-240(%rbp), %rdi
	movq	-232(%rbp), %r8
	movq	-248(%rbp), %rcx
	subq	$32, %rsp
	movq	%rsp, %rsi
	movq	488(%rcx), %rax
	movq	496(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	504(%rcx), %rax
	movq	512(%rcx), %rdx
	movq	%rax, 16(%rsi)
	movq	%rdx, 24(%rsi)
	movq	%r8, %rsi
	call	Array_string_contains
	addq	$32, %rsp
	testb	%al, %al
	jne	.L2894
	movq	-240(%rbp), %rax
	movq	-232(%rbp), %rdx
	movq	%rax, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-248(%rbp), %rax
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, -192(%rbp)
	movq	%rbx, -184(%rbp)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, -176(%rbp)
	movq	%rbx, -168(%rbp)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, -160(%rbp)
	movq	%rbx, -152(%rbp)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, -144(%rbp)
	movq	%rbx, -136(%rbp)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, -128(%rbp)
	movq	%rbx, -120(%rbp)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, -112(%rbp)
	movq	%rbx, -104(%rbp)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, -96(%rbp)
	movq	%rbx, -88(%rbp)
	movq	160(%rax), %rax
	movq	%rax, -80(%rbp)
	leaq	-64(%rbp), %rdx
	leaq	-192(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	map_exists
	testb	%al, %al
	jne	.L2894
	movq	-240(%rbp), %rdx
	movq	-232(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	string_clone
	movq	%rax, -48(%rbp)
	movq	%rdx, -40(%rbp)
	movq	-248(%rbp), %rax
	leaq	488(%rax), %rdx
	leaq	-48(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
.L2894:
	addl	$1, -20(%rbp)
.L2891:
	movq	-248(%rbp), %rax
	movl	36(%rax), %eax
	cmpl	%eax, -20(%rbp)
	jl	.L2895
	nop
	nop
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	elf__Elf_build_symtab_strtab
elf__Elf_build_symtab_strtab:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$176, %rsp
	movq	%rdi, -168(%rbp)
	movb	$0, -113(%rbp)
	leaq	-160(%rbp), %rax
	leaq	-113(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movl	-140(%rbp), %edx
	movq	-152(%rbp), %rax
	movq	-168(%rbp), %rcx
	addq	$792, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	movl	$0, -64(%rbp)
	movb	$0, -60(%rbp)
	movb	$0, -59(%rbp)
	movw	$0, -58(%rbp)
	movq	$0, -56(%rbp)
	movq	$0, -48(%rbp)
	movq	-168(%rbp), %rax
	leaq	824(%rax), %rdx
	leaq	-64(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	movq	-168(%rbp), %rax
	movl	472(%rax), %eax
	movl	%eax, -84(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -72(%rbp)
	movl	$1, -68(%rbp)
	movq	-168(%rbp), %rax
	leaq	360(%rax), %rcx
	leaq	-84(%rbp), %rdx
	leaq	-80(%rbp), %rax
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	map_set
	movq	-168(%rbp), %rax
	movl	480(%rax), %eax
	leal	1(%rax), %edx
	movq	-168(%rbp), %rax
	movl	%edx, 480(%rax)
	movl	$0, -88(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -104(%rbp)
	movl	$1, -100(%rbp)
	leaq	-112(%rbp), %rcx
	leaq	-88(%rbp), %rdx
	movq	-168(%rbp), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	elf__Elf_elf_symbol
	leaq	-112(%rbp), %rdx
	leaq	-88(%rbp), %rcx
	movq	-168(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	elf__Elf_elf_rela_symbol
	leaq	-112(%rbp), %rcx
	leaq	-88(%rbp), %rdx
	movq	-168(%rbp), %rax
	movl	$1, %esi
	movq	%rax, %rdi
	call	elf__Elf_elf_symbol
	movq	-168(%rbp), %rax
	addq	$792, %rax
	movq	%rax, %rdi
	call	elf__add_padding
	nop
	leave
	ret
	.section	.rodata, "a"
.LC525:
	.string	".strtab"
.LC526:
	.string	".symtab"
.LC527:
	.string	".shstrtab"
	.text
	.globl	elf__Elf_build_shstrtab
elf__Elf_build_shstrtab:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$368, %rsp
	movq	%rdi, -360(%rbp)
	movb	$0, -161(%rbp)
	leaq	-352(%rbp), %rax
	leaq	-161(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movl	-332(%rbp), %edx
	movq	-344(%rbp), %rax
	movq	-360(%rbp), %rcx
	addq	$1008, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	movl	$0, -36(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -32(%rbp)
	movl	$0, -24(%rbp)
	movl	$1, -20(%rbp)
	movq	-360(%rbp), %rax
	leaq	672(%rax), %rcx
	leaq	-36(%rbp), %rdx
	leaq	-32(%rbp), %rax
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	map_set
	movl	$1, -4(%rbp)
	movl	$0, -8(%rbp)
	jmp	.L2898
.L2899:
	movq	-360(%rbp), %rax
	movq	528(%rax), %rax
	movl	-8(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	movq	8(%rax), %rdx
	movq	(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	%rdx, -184(%rbp)
	movl	-4(%rbp), %eax
	movl	%eax, -212(%rbp)
	movq	-192(%rbp), %rax
	movq	-184(%rbp), %rdx
	movq	%rax, -208(%rbp)
	movq	%rdx, -200(%rbp)
	movq	-360(%rbp), %rax
	leaq	672(%rax), %rcx
	leaq	-212(%rbp), %rdx
	leaq	-208(%rbp), %rax
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	map_set
	movl	-184(%rbp), %eax
	addl	$1, %eax
	addl	%eax, -4(%rbp)
	leaq	-352(%rbp), %rax
	movq	-192(%rbp), %rcx
	movq	-184(%rbp), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	string_bytes
	movl	-332(%rbp), %edx
	movq	-344(%rbp), %rax
	movq	-360(%rbp), %rcx
	addq	$1008, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	movb	$0, -213(%rbp)
	movq	-360(%rbp), %rax
	leaq	1008(%rax), %rdx
	leaq	-213(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	addl	$1, -8(%rbp)
.L2898:
	movq	-360(%rbp), %rax
	movl	540(%rax), %eax
	cmpl	%eax, -8(%rbp)
	jl	.L2899
	leaq	.LC525(%rip), %rax
	movq	%rax, -128(%rbp)
	movl	$7, -120(%rbp)
	movl	$1, -116(%rbp)
	leaq	.LC526(%rip), %rax
	movq	%rax, -112(%rbp)
	movl	$7, -104(%rbp)
	movl	$1, -100(%rbp)
	leaq	.LC527(%rip), %rax
	movq	%rax, -96(%rbp)
	movl	$9, -88(%rbp)
	movl	$1, -84(%rbp)
	leaq	-80(%rbp), %rax
	leaq	-128(%rbp), %rdx
	movq	%rdx, %r8
	movl	$16, %ecx
	movl	$3, %edx
	movl	$3, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movl	$0, -12(%rbp)
	jmp	.L2900
.L2901:
	movq	-72(%rbp), %rax
	movl	-12(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	movq	8(%rax), %rdx
	movq	(%rax), %rax
	movq	%rax, -240(%rbp)
	movq	%rdx, -232(%rbp)
	movl	-4(%rbp), %eax
	movl	%eax, -260(%rbp)
	movq	-240(%rbp), %rax
	movq	-232(%rbp), %rdx
	movq	%rax, -256(%rbp)
	movq	%rdx, -248(%rbp)
	movq	-360(%rbp), %rax
	leaq	672(%rax), %rcx
	leaq	-260(%rbp), %rdx
	leaq	-256(%rbp), %rax
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	map_set
	movl	-232(%rbp), %eax
	addl	$1, %eax
	addl	%eax, -4(%rbp)
	leaq	-352(%rbp), %rax
	movq	-240(%rbp), %rcx
	movq	-232(%rbp), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	string_bytes
	movl	-332(%rbp), %edx
	movq	-344(%rbp), %rax
	movq	-360(%rbp), %rcx
	addq	$1008, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	movb	$0, -261(%rbp)
	movq	-360(%rbp), %rax
	leaq	1008(%rax), %rdx
	leaq	-261(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	addl	$1, -12(%rbp)
.L2900:
	movl	-60(%rbp), %eax
	cmpl	%eax, -12(%rbp)
	jl	.L2901
	movq	-360(%rbp), %rax
	leaq	888(%rax), %rdx
	leaq	-160(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	map_keys
	movl	$0, -16(%rbp)
	jmp	.L2902
.L2903:
	movq	-152(%rbp), %rax
	movl	-16(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	movq	8(%rax), %rdx
	movq	(%rax), %rax
	movq	%rax, -288(%rbp)
	movq	%rdx, -280(%rbp)
	movl	-4(%rbp), %eax
	movl	%eax, -308(%rbp)
	movq	-288(%rbp), %rax
	movq	-280(%rbp), %rdx
	movq	%rax, -304(%rbp)
	movq	%rdx, -296(%rbp)
	movq	-360(%rbp), %rax
	leaq	672(%rax), %rcx
	leaq	-308(%rbp), %rdx
	leaq	-304(%rbp), %rax
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	map_set
	movl	-280(%rbp), %eax
	addl	$1, %eax
	addl	%eax, -4(%rbp)
	leaq	-352(%rbp), %rax
	movq	-288(%rbp), %rcx
	movq	-280(%rbp), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	string_bytes
	movl	-332(%rbp), %edx
	movq	-344(%rbp), %rax
	movq	-360(%rbp), %rcx
	addq	$1008, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	movb	$0, -309(%rbp)
	movq	-360(%rbp), %rax
	leaq	1008(%rax), %rdx
	leaq	-309(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	addl	$1, -16(%rbp)
.L2902:
	movl	-140(%rbp), %eax
	cmpl	%eax, -16(%rbp)
	jl	.L2903
	movq	-360(%rbp), %rax
	addq	$1008, %rax
	movq	%rax, %rdi
	call	elf__add_padding
	nop
	leave
	ret
	.section	.rodata, "a"
.LC528:
	.string	"[internal error] unkown section `"
	.text
	.globl	elf__Elf_build_headers
elf__Elf_build_headers:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$1320, %rsp
	movq	%rdi, -1304(%rbp)
	movl	$64, -36(%rbp)
	movl	$0, -228(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -224(%rbp)
	movl	$0, -216(%rbp)
	movl	$1, -212(%rbp)
	leaq	-208(%rbp), %rax
	leaq	-228(%rbp), %rdx
	pushq	%rdx
	leaq	-224(%rbp), %rdx
	pushq	%rdx
	pushq	$4
	pushq	$16
	movl	$1, %r9d
	leaq	map_free_string(%rip), %r8
	leaq	map_clone_string(%rip), %rdx
	movq	%rdx, %rcx
	leaq	map_eq_string(%rip), %rdx
	leaq	map_hash_string(%rip), %rsi
	movq	%rax, %rdi
	call	new_map_init
	addq	$32, %rsp
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -400(%rbp)
	movaps	%xmm0, -384(%rbp)
	movaps	%xmm0, -368(%rbp)
	movaps	%xmm0, -352(%rbp)
	movl	$0, -260(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -256(%rbp)
	movl	$0, -248(%rbp)
	movl	$1, -244(%rbp)
	movq	-1304(%rbp), %rax
	leaq	672(%rax), %rcx
	leaq	-260(%rbp), %rdx
	leaq	-256(%rbp), %rax
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	map_get
	movl	(%rax), %eax
	movl	%eax, -400(%rbp)
	movq	-1304(%rbp), %rax
	leaq	1040(%rax), %rdx
	leaq	-400(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	movl	$0, -40(%rbp)
	jmp	.L2905
.L2909:
	movq	-1304(%rbp), %rax
	movq	528(%rax), %rax
	movl	-40(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	movq	8(%rax), %rdx
	movq	(%rax), %rax
	movq	%rax, -704(%rbp)
	movq	%rdx, -696(%rbp)
	movq	-704(%rbp), %rax
	movq	-696(%rbp), %rdx
	movq	%rax, -720(%rbp)
	movq	%rdx, -712(%rbp)
	movq	-1304(%rbp), %rax
	movq	168(%rax), %rcx
	movq	176(%rax), %rbx
	movq	%rcx, -1136(%rbp)
	movq	%rbx, -1128(%rbp)
	movq	184(%rax), %rcx
	movq	192(%rax), %rbx
	movq	%rcx, -1120(%rbp)
	movq	%rbx, -1112(%rbp)
	movq	200(%rax), %rcx
	movq	208(%rax), %rbx
	movq	%rcx, -1104(%rbp)
	movq	%rbx, -1096(%rbp)
	movq	216(%rax), %rcx
	movq	224(%rax), %rbx
	movq	%rcx, -1088(%rbp)
	movq	%rbx, -1080(%rbp)
	movq	232(%rax), %rcx
	movq	240(%rax), %rbx
	movq	%rcx, -1072(%rbp)
	movq	%rbx, -1064(%rbp)
	movq	248(%rax), %rcx
	movq	256(%rax), %rbx
	movq	%rcx, -1056(%rbp)
	movq	%rbx, -1048(%rbp)
	movq	264(%rax), %rcx
	movq	272(%rax), %rbx
	movq	%rcx, -1040(%rbp)
	movq	%rbx, -1032(%rbp)
	movq	280(%rax), %rax
	movq	%rax, -1024(%rbp)
	leaq	-720(%rbp), %rdx
	leaq	-1136(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	map_get_check
	movq	%rax, -80(%rbp)
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -1264(%rbp)
	movaps	%xmm0, -1248(%rbp)
	movaps	%xmm0, -1232(%rbp)
	cmpq	$0, -80(%rbp)
	je	.L2906
	leaq	-1264(%rbp), %rax
	leaq	40(%rax), %rdx
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, (%rdx)
	jmp	.L2907
.L2906:
	movb	$2, -1264(%rbp)
	leaq	.LC211(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$24, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	leaq	-1344(%rbp), %rax
	movq	%r12, %rsi
	movq	%r13, %rdi
	movq	%r12, %rcx
	movq	%r13, %rbx
	movq	%rbx, %rdx
	movq	%rax, %rdi
	call	_v_error
	movq	-1344(%rbp), %rax
	movq	-1336(%rbp), %rdx
	movq	%rax, -1256(%rbp)
	movq	%rdx, -1248(%rbp)
	movq	-1328(%rbp), %rax
	movq	-1320(%rbp), %rdx
	movq	%rax, -1240(%rbp)
	movq	%rdx, -1232(%rbp)
.L2907:
	movzbl	-1264(%rbp), %eax
	testb	%al, %al
	je	.L2908
	movq	-1256(%rbp), %rax
	movq	-1248(%rbp), %rdx
	movq	%rax, -1296(%rbp)
	movq	%rdx, -1288(%rbp)
	movq	-1240(%rbp), %rax
	movq	-1232(%rbp), %rdx
	movq	%rax, -1280(%rbp)
	movq	%rdx, -1272(%rbp)
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -1216(%rbp)
	movaps	%xmm0, -1200(%rbp)
	movaps	%xmm0, -1184(%rbp)
	movaps	%xmm0, -1168(%rbp)
	movaps	%xmm0, -1152(%rbp)
	leaq	.LC528(%rip), %rax
	movq	%rax, -1216(%rbp)
	movl	$33, -1208(%rbp)
	movl	$1, -1204(%rbp)
	movl	$65040, -1200(%rbp)
	movq	-704(%rbp), %rax
	movq	-696(%rbp), %rdx
	movq	%rax, -1192(%rbp)
	movq	%rdx, -1184(%rbp)
	leaq	.LC85(%rip), %rax
	movq	%rax, -1176(%rbp)
	movl	$1, -1168(%rbp)
	movl	$1, -1164(%rbp)
	leaq	-1216(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	_v_panic
.L2908:
	leaq	-1264(%rbp), %rax
	addq	$40, %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movl	$0, -740(%rbp)
	movq	-704(%rbp), %rax
	movq	-696(%rbp), %rdx
	movq	%rax, -736(%rbp)
	movq	%rdx, -728(%rbp)
	movq	-1304(%rbp), %rax
	leaq	672(%rax), %rcx
	leaq	-740(%rbp), %rdx
	leaq	-736(%rbp), %rax
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	map_get
	movl	(%rax), %eax
	movl	%eax, -1216(%rbp)
	movl	$1, -1212(%rbp)
	movq	-88(%rbp), %rax
	movl	36(%rax), %eax
	cltq
	movq	%rax, -1208(%rbp)
	movq	$0, -1200(%rbp)
	movl	-36(%rbp), %eax
	movq	%rax, -1192(%rbp)
	movq	-88(%rbp), %rax
	movl	20(%rax), %eax
	cltq
	movq	%rax, -1184(%rbp)
	movl	$0, -1176(%rbp)
	movl	$0, -1172(%rbp)
	movq	$1, -1168(%rbp)
	movq	$0, -1160(%rbp)
	movq	-1304(%rbp), %rax
	leaq	1040(%rax), %rdx
	leaq	-1216(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	movq	-88(%rbp), %rax
	movl	20(%rax), %eax
	addl	%eax, -36(%rbp)
	movl	-96(%rbp), %eax
	movl	%eax, -772(%rbp)
	movq	-704(%rbp), %rax
	movq	-696(%rbp), %rdx
	movq	%rax, -768(%rbp)
	movq	%rdx, -760(%rbp)
	leaq	-772(%rbp), %rdx
	leaq	-768(%rbp), %rcx
	leaq	-208(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	map_set
	addl	$1, -40(%rbp)
.L2905:
	movq	-1304(%rbp), %rax
	movl	540(%rax), %eax
	cmpl	%eax, -40(%rbp)
	jl	.L2909
	movl	-36(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	-1304(%rbp), %rax
	movl	812(%rax), %eax
	movl	%eax, -52(%rbp)
	movl	-96(%rbp), %eax
	movl	%eax, -420(%rbp)
	leaq	.LC525(%rip), %rax
	movq	%rax, -416(%rbp)
	movl	$7, -408(%rbp)
	movl	$1, -404(%rbp)
	leaq	-420(%rbp), %rdx
	leaq	-416(%rbp), %rcx
	leaq	-208(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	map_set
	movl	-48(%rbp), %edx
	movl	-52(%rbp), %eax
	addl	%edx, %eax
	movl	%eax, -56(%rbp)
	movq	-1304(%rbp), %rax
	movl	844(%rax), %eax
	movl	%eax, %edx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	sall	$3, %eax
	movl	%eax, -60(%rbp)
	movl	-96(%rbp), %eax
	movl	%eax, -452(%rbp)
	leaq	.LC526(%rip), %rax
	movq	%rax, -448(%rbp)
	movl	$7, -440(%rbp)
	movl	$1, -436(%rbp)
	leaq	-452(%rbp), %rdx
	leaq	-448(%rbp), %rcx
	leaq	-208(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	map_set
	movl	$0, -804(%rbp)
	leaq	.LC525(%rip), %rax
	movq	%rax, -800(%rbp)
	movl	$7, -792(%rbp)
	movl	$1, -788(%rbp)
	movq	-1304(%rbp), %rax
	leaq	672(%rax), %rcx
	leaq	-804(%rbp), %rdx
	leaq	-800(%rbp), %rax
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	map_get
	movl	(%rax), %eax
	movl	%eax, -1136(%rbp)
	movl	$3, -1132(%rbp)
	movq	$0, -1128(%rbp)
	movq	$0, -1120(%rbp)
	movl	-48(%rbp), %eax
	movq	%rax, -1112(%rbp)
	movl	-52(%rbp), %eax
	movq	%rax, -1104(%rbp)
	movl	$0, -1096(%rbp)
	movl	$0, -1092(%rbp)
	movq	$1, -1088(%rbp)
	movq	$0, -1080(%rbp)
	movl	$0, -836(%rbp)
	leaq	.LC526(%rip), %rax
	movq	%rax, -832(%rbp)
	movl	$7, -824(%rbp)
	movl	$1, -820(%rbp)
	movq	-1304(%rbp), %rax
	leaq	672(%rax), %rcx
	leaq	-836(%rbp), %rdx
	leaq	-832(%rbp), %rax
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	map_get
	movl	(%rax), %eax
	movl	%eax, -1072(%rbp)
	movl	$2, -1068(%rbp)
	movq	$0, -1064(%rbp)
	movq	$0, -1056(%rbp)
	movl	-56(%rbp), %eax
	movq	%rax, -1048(%rbp)
	movl	-60(%rbp), %eax
	movq	%rax, -1040(%rbp)
	movl	$0, -868(%rbp)
	leaq	.LC525(%rip), %rax
	movq	%rax, -864(%rbp)
	movl	$7, -856(%rbp)
	movl	$1, -852(%rbp)
	leaq	-868(%rbp), %rdx
	leaq	-864(%rbp), %rcx
	leaq	-208(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	map_get
	movl	(%rax), %eax
	movl	%eax, -1032(%rbp)
	movq	-1304(%rbp), %rax
	movl	480(%rax), %eax
	movl	%eax, -1028(%rbp)
	movq	$8, -1024(%rbp)
	movq	$24, -1016(%rbp)
	leaq	-1216(%rbp), %rax
	leaq	-1136(%rbp), %rdx
	movq	%rdx, %r8
	movl	$64, %ecx
	movl	$2, %edx
	movl	$2, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movl	-1196(%rbp), %edx
	movq	-1208(%rbp), %rax
	movq	-1304(%rbp), %rcx
	addq	$1040, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	array_push_many
	movl	-56(%rbp), %edx
	movl	-60(%rbp), %eax
	addl	%edx, %eax
	movl	%eax, -36(%rbp)
	movl	$0, -44(%rbp)
	jmp	.L2910
.L2911:
	movq	-1304(%rbp), %rax
	movq	864(%rax), %rax
	movl	-44(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	movq	8(%rax), %rdx
	movq	(%rax), %rax
	movq	%rax, -896(%rbp)
	movq	%rdx, -888(%rbp)
	leaq	-1264(%rbp), %rax
	movl	$24, %ecx
	movl	$0, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array
	movq	-896(%rbp), %rax
	movq	-888(%rbp), %rdx
	movq	%rax, -912(%rbp)
	movq	%rdx, -904(%rbp)
	movq	-1304(%rbp), %rax
	movq	888(%rax), %rcx
	movq	896(%rax), %rbx
	movq	%rcx, -1136(%rbp)
	movq	%rbx, -1128(%rbp)
	movq	904(%rax), %rcx
	movq	912(%rax), %rbx
	movq	%rcx, -1120(%rbp)
	movq	%rbx, -1112(%rbp)
	movq	920(%rax), %rcx
	movq	928(%rax), %rbx
	movq	%rcx, -1104(%rbp)
	movq	%rbx, -1096(%rbp)
	movq	936(%rax), %rcx
	movq	944(%rax), %rbx
	movq	%rcx, -1088(%rbp)
	movq	%rbx, -1080(%rbp)
	movq	952(%rax), %rcx
	movq	960(%rax), %rbx
	movq	%rcx, -1072(%rbp)
	movq	%rbx, -1064(%rbp)
	movq	968(%rax), %rcx
	movq	976(%rax), %rbx
	movq	%rcx, -1056(%rbp)
	movq	%rbx, -1048(%rbp)
	movq	984(%rax), %rcx
	movq	992(%rax), %rbx
	movq	%rcx, -1040(%rbp)
	movq	%rbx, -1032(%rbp)
	movq	1000(%rax), %rax
	movq	%rax, -1024(%rbp)
	leaq	-1264(%rbp), %rdx
	leaq	-912(%rbp), %rcx
	leaq	-1136(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	map_get
	movl	20(%rax), %eax
	movl	%eax, %edx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	sall	$3, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -932(%rbp)
	movq	-896(%rbp), %rax
	movq	-888(%rbp), %rdx
	movq	%rax, -928(%rbp)
	movq	%rdx, -920(%rbp)
	movq	-1304(%rbp), %rax
	leaq	672(%rax), %rcx
	leaq	-932(%rbp), %rdx
	leaq	-928(%rbp), %rax
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	map_get
	movl	(%rax), %eax
	movl	%eax, -1216(%rbp)
	movl	$4, -1212(%rbp)
	movq	$64, -1208(%rbp)
	movq	$0, -1200(%rbp)
	movl	-36(%rbp), %eax
	movq	%rax, -1192(%rbp)
	movl	-68(%rbp), %eax
	movq	%rax, -1184(%rbp)
	movl	$0, -964(%rbp)
	leaq	.LC526(%rip), %rax
	movq	%rax, -960(%rbp)
	movl	$7, -952(%rbp)
	movl	$1, -948(%rbp)
	leaq	-964(%rbp), %rdx
	leaq	-960(%rbp), %rcx
	leaq	-208(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	map_get
	movl	(%rax), %eax
	movl	%eax, -1176(%rbp)
	movl	$0, -996(%rbp)
	movl	-888(%rbp), %edx
	movq	-896(%rbp), %rsi
	movq	-888(%rbp), %rax
	movl	%edx, %ecx
	movl	$5, %edx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string_substr
	movq	%rax, -992(%rbp)
	movq	%rdx, -984(%rbp)
	leaq	-996(%rbp), %rdx
	leaq	-992(%rbp), %rcx
	leaq	-208(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	map_get
	movl	(%rax), %eax
	movl	%eax, -1172(%rbp)
	movq	$8, -1168(%rbp)
	movq	$24, -1160(%rbp)
	movq	-1304(%rbp), %rax
	leaq	1040(%rax), %rdx
	leaq	-1216(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	movl	-68(%rbp), %eax
	addl	%eax, -36(%rbp)
	addl	$1, -44(%rbp)
.L2910:
	movq	-1304(%rbp), %rax
	movl	876(%rax), %eax
	cmpl	%eax, -44(%rbp)
	jl	.L2911
	movl	$0, -484(%rbp)
	leaq	.LC527(%rip), %rax
	movq	%rax, -480(%rbp)
	movl	$9, -472(%rbp)
	movl	$1, -468(%rbp)
	movq	-1304(%rbp), %rax
	leaq	672(%rax), %rcx
	leaq	-484(%rbp), %rdx
	leaq	-480(%rbp), %rax
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	map_get
	movl	(%rax), %eax
	movl	%eax, -624(%rbp)
	movl	$3, -620(%rbp)
	movq	$0, -616(%rbp)
	movq	$0, -608(%rbp)
	movl	-36(%rbp), %eax
	movq	%rax, -600(%rbp)
	movq	-1304(%rbp), %rax
	movl	1028(%rax), %eax
	movl	%eax, %eax
	movq	%rax, -592(%rbp)
	movl	$0, -584(%rbp)
	movl	$0, -580(%rbp)
	movq	$1, -576(%rbp)
	movq	$0, -568(%rbp)
	movq	-1304(%rbp), %rax
	leaq	1040(%rax), %rdx
	leaq	-624(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	array_push
	movq	-1304(%rbp), %rax
	movl	1028(%rax), %eax
	movl	%eax, %edx
	movl	-36(%rbp), %eax
	addl	%edx, %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	movq	%rax, %rsi
	movq	-1304(%rbp), %rax
	movl	1060(%rax), %eax
	movl	%eax, %ecx
	movq	-1304(%rbp), %rax
	movl	1060(%rax), %eax
	leal	-1(%rax), %edx
	movq	-1304(%rbp), %rax
	movb	$127, 296(%rax)
	movq	-1304(%rbp), %rax
	movb	$69, 297(%rax)
	movq	-1304(%rbp), %rax
	movb	$76, 298(%rax)
	movq	-1304(%rbp), %rax
	movb	$70, 299(%rax)
	movq	-1304(%rbp), %rax
	movb	$2, 300(%rax)
	movq	-1304(%rbp), %rax
	movb	$1, 301(%rax)
	movq	-1304(%rbp), %rax
	movb	$1, 302(%rax)
	movq	-1304(%rbp), %rax
	movb	$0, 303(%rax)
	movq	-1304(%rbp), %rax
	movb	$0, 304(%rax)
	movq	-1304(%rbp), %rax
	movb	$0, 305(%rax)
	movq	-1304(%rbp), %rax
	movb	$0, 306(%rax)
	movq	-1304(%rbp), %rax
	movb	$0, 307(%rax)
	movq	-1304(%rbp), %rax
	movb	$0, 308(%rax)
	movq	-1304(%rbp), %rax
	movb	$0, 309(%rax)
	movq	-1304(%rbp), %rax
	movb	$0, 310(%rax)
	movq	-1304(%rbp), %rax
	movb	$0, 311(%rax)
	movq	-1304(%rbp), %rax
	movw	$1, 312(%rax)
	movq	-1304(%rbp), %rax
	movw	$62, 314(%rax)
	movq	-1304(%rbp), %rax
	movl	$1, 316(%rax)
	movq	-1304(%rbp), %rax
	movq	$0, 320(%rax)
	movq	-1304(%rbp), %rax
	movq	$0, 328(%rax)
	movq	-1304(%rbp), %rax
	movq	%rsi, 336(%rax)
	movq	-1304(%rbp), %rax
	movl	$0, 344(%rax)
	movq	-1304(%rbp), %rax
	movw	$64, 348(%rax)
	movq	-1304(%rbp), %rax
	movw	$56, 350(%rax)
	movq	-1304(%rbp), %rax
	movw	$0, 352(%rax)
	movq	-1304(%rbp), %rax
	movw	$64, 354(%rax)
	movq	-1304(%rbp), %rax
	movw	%cx, 356(%rax)
	movq	-1304(%rbp), %rax
	movw	%dx, 358(%rax)
	nop
	leaq	-24(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%rbp
	ret
	.section	.rodata, "a"
.LC529:
	.string	"w"
.LC530:
	.string	"error opening file `"
.LC531:
	.string	"error writing `elf header`"
.LC532:
	.string	"unkown section "
.LC533:
	.string	"error writing `"
.LC534:
	.string	"error writing `.strtab`"
.LC535:
	.string	"error writing `.symtab`"
.LC536:
	.string	"error writing `.rela.text`"
.LC537:
	.string	"error writing `.shstrtab`"
.LC538:
	.string	"error writing `section_headers`"
	.text
	.globl	elf__Elf_write_elf
elf__Elf_write_elf:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$920, %rsp
	movq	%rdi, -824(%rbp)
	movb	$0, -69(%rbp)
	leaq	-128(%rbp), %rax
	movl	$4, %ecx
	movl	$0, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array
	leaq	.LC529(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$1, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	leaq	-208(%rbp), %r9
	movq	%r12, %rcx
	movq	%r13, %rbx
	movq	%r12, %rax
	movq	%r13, %rdx
	movq	%rcx, %r8
	movq	%rdx, %r10
	movq	-824(%rbp), %rax
	movq	(%rax), %rsi
	movq	8(%rax), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-128(%rbp), %rax
	movq	-120(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-112(%rbp), %rax
	movq	-104(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movq	%r8, %rcx
	movq	%r10, %r8
	movq	%rdi, %rdx
	movq	%r9, %rdi
	call	os__open_file
	addq	$32, %rsp
	movzbl	-208(%rbp), %eax
	testb	%al, %al
	je	.L2913
	movq	-200(%rbp), %rax
	movq	-192(%rbp), %rdx
	movq	%rax, -688(%rbp)
	movq	%rdx, -680(%rbp)
	movq	-184(%rbp), %rax
	movq	-176(%rbp), %rdx
	movq	%rax, -672(%rbp)
	movq	%rdx, -664(%rbp)
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -608(%rbp)
	movaps	%xmm0, -592(%rbp)
	movaps	%xmm0, -576(%rbp)
	movaps	%xmm0, -560(%rbp)
	movaps	%xmm0, -544(%rbp)
	leaq	.LC530(%rip), %rax
	movq	%rax, -608(%rbp)
	movl	$20, -600(%rbp)
	movl	$1, -596(%rbp)
	movl	$65040, -592(%rbp)
	movq	-824(%rbp), %rax
	movq	8(%rax), %rdx
	movq	(%rax), %rax
	movq	%rax, -584(%rbp)
	movq	%rdx, -576(%rbp)
	leaq	.LC85(%rip), %rax
	movq	%rax, -568(%rbp)
	movl	$1, -560(%rbp)
	movl	$1, -556(%rbp)
	leaq	-608(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	_v_panic
.L2913:
	leaq	-208(%rbp), %rax
	addq	$40, %rax
	movq	8(%rax), %rdx
	movq	(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	%rdx, -136(%rbp)
	movb	$1, -69(%rbp)
	movq	-824(%rbp), %rax
	leaq	296(%rax), %rdx
	leaq	-256(%rbp), %rcx
	leaq	-144(%rbp), %rax
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	os__File_write_struct_T_elf__header__Elf64_Ehdr
	movzbl	-256(%rbp), %eax
	testb	%al, %al
	je	.L2914
	movq	-248(%rbp), %rax
	movq	-240(%rbp), %rdx
	movq	%rax, -608(%rbp)
	movq	%rdx, -600(%rbp)
	movq	-232(%rbp), %rax
	movq	-224(%rbp), %rdx
	movq	%rax, -592(%rbp)
	movq	%rdx, -584(%rbp)
	leaq	.LC531(%rip), %rax
	movq	%rax, -880(%rbp)
	movq	-872(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$26, %rax
	movq	%rax, -872(%rbp)
	movq	-872(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -872(%rbp)
	movq	-880(%rbp), %rax
	movq	-872(%rbp), %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	_v_panic
.L2914:
	movl	$0, -52(%rbp)
	jmp	.L2915
.L2920:
	movq	-824(%rbp), %rax
	movq	528(%rax), %rax
	movl	-52(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	movq	8(%rax), %rdx
	movq	(%rax), %rax
	movq	%rax, -368(%rbp)
	movq	%rdx, -360(%rbp)
	movq	-368(%rbp), %rax
	movq	-360(%rbp), %rdx
	movq	%rax, -384(%rbp)
	movq	%rdx, -376(%rbp)
	movq	-824(%rbp), %rcx
	movq	168(%rcx), %rax
	movq	176(%rcx), %rdx
	movq	%rax, -608(%rbp)
	movq	%rdx, -600(%rbp)
	movq	184(%rcx), %rax
	movq	192(%rcx), %rdx
	movq	%rax, -592(%rbp)
	movq	%rdx, -584(%rbp)
	movq	200(%rcx), %rax
	movq	208(%rcx), %rdx
	movq	%rax, -576(%rbp)
	movq	%rdx, -568(%rbp)
	movq	216(%rcx), %rax
	movq	224(%rcx), %rdx
	movq	%rax, -560(%rbp)
	movq	%rdx, -552(%rbp)
	movq	232(%rcx), %rax
	movq	240(%rcx), %rdx
	movq	%rax, -544(%rbp)
	movq	%rdx, -536(%rbp)
	movq	248(%rcx), %rax
	movq	256(%rcx), %rdx
	movq	%rax, -528(%rbp)
	movq	%rdx, -520(%rbp)
	movq	264(%rcx), %rax
	movq	272(%rcx), %rdx
	movq	%rax, -512(%rbp)
	movq	%rdx, -504(%rbp)
	movq	280(%rcx), %rax
	movq	%rax, -496(%rbp)
	leaq	-384(%rbp), %rdx
	leaq	-608(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	map_get_check
	movq	%rax, -80(%rbp)
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -784(%rbp)
	movaps	%xmm0, -768(%rbp)
	movaps	%xmm0, -752(%rbp)
	cmpq	$0, -80(%rbp)
	je	.L2916
	leaq	-784(%rbp), %rax
	leaq	40(%rax), %rdx
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, (%rdx)
	jmp	.L2917
.L2916:
	movb	$2, -784(%rbp)
	leaq	.LC211(%rip), %r14
	movq	%r15, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$24, %rax
	movq	%rax, %r15
	movq	%r15, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r15
	leaq	-864(%rbp), %rax
	movq	%r14, %rsi
	movq	%r15, %rdi
	movq	%r14, %rcx
	movq	%r15, %rbx
	movq	%rbx, %rdx
	movq	%rax, %rdi
	call	_v_error
	movq	-864(%rbp), %rax
	movq	-856(%rbp), %rdx
	movq	%rax, -776(%rbp)
	movq	%rdx, -768(%rbp)
	movq	-848(%rbp), %rax
	movq	-840(%rbp), %rdx
	movq	%rax, -760(%rbp)
	movq	%rdx, -752(%rbp)
.L2917:
	movzbl	-784(%rbp), %eax
	testb	%al, %al
	je	.L2918
	movq	-776(%rbp), %rax
	movq	-768(%rbp), %rdx
	movq	%rax, -736(%rbp)
	movq	%rdx, -728(%rbp)
	movq	-760(%rbp), %rax
	movq	-752(%rbp), %rdx
	movq	%rax, -720(%rbp)
	movq	%rdx, -712(%rbp)
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -688(%rbp)
	movaps	%xmm0, -672(%rbp)
	movaps	%xmm0, -656(%rbp)
	movaps	%xmm0, -640(%rbp)
	movaps	%xmm0, -624(%rbp)
	leaq	.LC532(%rip), %rax
	movq	%rax, -688(%rbp)
	movl	$15, -680(%rbp)
	movl	$1, -676(%rbp)
	movl	$65040, -672(%rbp)
	movq	-368(%rbp), %rax
	movq	-360(%rbp), %rdx
	movq	%rax, -664(%rbp)
	movq	%rdx, -656(%rbp)
	leaq	.LC30(%rip), %rax
	movq	%rax, -648(%rbp)
	movl	$1, -636(%rbp)
	leaq	-688(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	_v_panic
.L2918:
	leaq	-784(%rbp), %rax
	addq	$40, %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	leaq	-736(%rbp), %rdi
	leaq	-144(%rbp), %r8
	movq	-88(%rbp), %rsi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	(%rsi), %rax
	movq	8(%rsi), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	16(%rsi), %rax
	movq	24(%rsi), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movq	%r8, %rsi
	call	os__File_write
	addq	$32, %rsp
	movzbl	-736(%rbp), %eax
	testb	%al, %al
	je	.L2919
	movq	-728(%rbp), %rax
	movq	-720(%rbp), %rdx
	movq	%rax, -816(%rbp)
	movq	%rdx, -808(%rbp)
	movq	-712(%rbp), %rax
	movq	-704(%rbp), %rdx
	movq	%rax, -800(%rbp)
	movq	%rdx, -792(%rbp)
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -688(%rbp)
	movaps	%xmm0, -672(%rbp)
	movaps	%xmm0, -656(%rbp)
	movaps	%xmm0, -640(%rbp)
	movaps	%xmm0, -624(%rbp)
	leaq	.LC533(%rip), %rax
	movq	%rax, -688(%rbp)
	movl	$15, -680(%rbp)
	movl	$1, -676(%rbp)
	movl	$65040, -672(%rbp)
	movq	-368(%rbp), %rax
	movq	-360(%rbp), %rdx
	movq	%rax, -664(%rbp)
	movq	%rdx, -656(%rbp)
	leaq	.LC85(%rip), %rax
	movq	%rax, -648(%rbp)
	movl	$1, -640(%rbp)
	movl	$1, -636(%rbp)
	leaq	-688(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	_v_panic
.L2919:
	addl	$1, -52(%rbp)
.L2915:
	movq	-824(%rbp), %rax
	movl	540(%rax), %eax
	cmpl	%eax, -52(%rbp)
	jl	.L2920
	leaq	-304(%rbp), %rdi
	leaq	-144(%rbp), %r8
	movq	-824(%rbp), %rcx
	subq	$32, %rsp
	movq	%rsp, %rsi
	movq	792(%rcx), %rax
	movq	800(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	808(%rcx), %rax
	movq	816(%rcx), %rdx
	movq	%rax, 16(%rsi)
	movq	%rdx, 24(%rsi)
	movq	%r8, %rsi
	call	os__File_write
	addq	$32, %rsp
	movzbl	-304(%rbp), %eax
	testb	%al, %al
	je	.L2921
	movq	-296(%rbp), %rax
	movq	-288(%rbp), %rdx
	movq	%rax, -608(%rbp)
	movq	%rdx, -600(%rbp)
	movq	-280(%rbp), %rax
	movq	-272(%rbp), %rdx
	movq	%rax, -592(%rbp)
	movq	%rdx, -584(%rbp)
	leaq	.LC534(%rip), %rax
	movq	%rax, -896(%rbp)
	movq	-888(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$23, %rax
	movq	%rax, -888(%rbp)
	movq	-888(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -888(%rbp)
	movq	-896(%rbp), %rax
	movq	-888(%rbp), %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	_v_panic
.L2921:
	movl	$0, -56(%rbp)
	jmp	.L2922
.L2924:
	movq	-824(%rbp), %rax
	movq	832(%rax), %rcx
	movl	-56(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	addq	%rax, %rcx
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, -416(%rbp)
	movq	%rdx, -408(%rbp)
	movq	16(%rcx), %rax
	movq	%rax, -400(%rbp)
	leaq	-608(%rbp), %rax
	leaq	-416(%rbp), %rdx
	leaq	-144(%rbp), %rcx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	os__File_write_struct_T_elf__header__Elf64_Sym
	movzbl	-608(%rbp), %eax
	testb	%al, %al
	je	.L2923
	movq	-600(%rbp), %rax
	movq	-592(%rbp), %rdx
	movq	%rax, -688(%rbp)
	movq	%rdx, -680(%rbp)
	movq	-584(%rbp), %rax
	movq	-576(%rbp), %rdx
	movq	%rax, -672(%rbp)
	movq	%rdx, -664(%rbp)
	leaq	.LC535(%rip), %rax
	movq	%rax, -912(%rbp)
	movq	-904(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$23, %rax
	movq	%rax, -904(%rbp)
	movq	-904(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -904(%rbp)
	movq	-912(%rbp), %rax
	movq	-904(%rbp), %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	_v_panic
.L2923:
	addl	$1, -56(%rbp)
.L2922:
	movq	-824(%rbp), %rax
	movl	844(%rax), %eax
	cmpl	%eax, -56(%rbp)
	jl	.L2924
	movl	$0, -60(%rbp)
	jmp	.L2925
.L2929:
	movq	-824(%rbp), %rax
	movq	864(%rax), %rax
	movl	-60(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	movq	8(%rax), %rdx
	movq	(%rax), %rax
	movq	%rax, -432(%rbp)
	movq	%rdx, -424(%rbp)
	leaq	-784(%rbp), %rax
	movl	$24, %ecx
	movl	$0, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	__new_array
	movq	-432(%rbp), %rax
	movq	-424(%rbp), %rdx
	movq	%rax, -448(%rbp)
	movq	%rdx, -440(%rbp)
	movq	-824(%rbp), %rax
	movq	888(%rax), %rcx
	movq	896(%rax), %rbx
	movq	%rcx, -608(%rbp)
	movq	%rbx, -600(%rbp)
	movq	904(%rax), %rcx
	movq	912(%rax), %rbx
	movq	%rcx, -592(%rbp)
	movq	%rbx, -584(%rbp)
	movq	920(%rax), %rcx
	movq	928(%rax), %rbx
	movq	%rcx, -576(%rbp)
	movq	%rbx, -568(%rbp)
	movq	936(%rax), %rcx
	movq	944(%rax), %rbx
	movq	%rcx, -560(%rbp)
	movq	%rbx, -552(%rbp)
	movq	952(%rax), %rcx
	movq	960(%rax), %rbx
	movq	%rcx, -544(%rbp)
	movq	%rbx, -536(%rbp)
	movq	968(%rax), %rcx
	movq	976(%rax), %rbx
	movq	%rcx, -528(%rbp)
	movq	%rbx, -520(%rbp)
	movq	984(%rax), %rcx
	movq	992(%rax), %rbx
	movq	%rcx, -512(%rbp)
	movq	%rbx, -504(%rbp)
	movq	1000(%rax), %rax
	movq	%rax, -496(%rbp)
	leaq	-784(%rbp), %rdx
	leaq	-448(%rbp), %rcx
	leaq	-608(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	map_get
	movq	%rax, %rcx
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, -816(%rbp)
	movq	%rdx, -808(%rbp)
	movq	16(%rcx), %rax
	movq	24(%rcx), %rdx
	movq	%rax, -800(%rbp)
	movq	%rdx, -792(%rbp)
	movl	$0, -64(%rbp)
	jmp	.L2926
.L2928:
	movq	-808(%rbp), %rcx
	movl	-64(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	addq	%rax, %rcx
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, -480(%rbp)
	movq	%rdx, -472(%rbp)
	movq	16(%rcx), %rax
	movq	%rax, -464(%rbp)
	leaq	-688(%rbp), %rax
	leaq	-480(%rbp), %rdx
	leaq	-144(%rbp), %rcx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	os__File_write_struct_T_elf__header__Elf64_Rela
	movzbl	-688(%rbp), %eax
	testb	%al, %al
	je	.L2927
	movq	-680(%rbp), %rax
	movq	-672(%rbp), %rdx
	movq	%rax, -736(%rbp)
	movq	%rdx, -728(%rbp)
	movq	-664(%rbp), %rax
	movq	-656(%rbp), %rdx
	movq	%rax, -720(%rbp)
	movq	%rdx, -712(%rbp)
	leaq	.LC536(%rip), %rax
	movq	%rax, -928(%rbp)
	movq	-920(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$26, %rax
	movq	%rax, -920(%rbp)
	movq	-920(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -920(%rbp)
	movq	-928(%rbp), %rax
	movq	-920(%rbp), %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	_v_panic
.L2927:
	addl	$1, -64(%rbp)
.L2926:
	movl	-796(%rbp), %eax
	cmpl	%eax, -64(%rbp)
	jl	.L2928
	addl	$1, -60(%rbp)
.L2925:
	movq	-824(%rbp), %rax
	movl	876(%rax), %eax
	cmpl	%eax, -60(%rbp)
	jl	.L2929
	leaq	-352(%rbp), %rdi
	leaq	-144(%rbp), %r8
	movq	-824(%rbp), %rcx
	subq	$32, %rsp
	movq	%rsp, %rsi
	movq	1008(%rcx), %rax
	movq	1016(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	1024(%rcx), %rax
	movq	1032(%rcx), %rdx
	movq	%rax, 16(%rsi)
	movq	%rdx, 24(%rsi)
	movq	%r8, %rsi
	call	os__File_write
	addq	$32, %rsp
	movzbl	-352(%rbp), %eax
	testb	%al, %al
	je	.L2930
	movq	-344(%rbp), %rax
	movq	-336(%rbp), %rdx
	movq	%rax, -608(%rbp)
	movq	%rdx, -600(%rbp)
	movq	-328(%rbp), %rax
	movq	-320(%rbp), %rdx
	movq	%rax, -592(%rbp)
	movq	%rdx, -584(%rbp)
	leaq	.LC537(%rip), %rax
	movq	%rax, -944(%rbp)
	movq	-936(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$25, %rax
	movq	%rax, -936(%rbp)
	movq	-936(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -936(%rbp)
	movq	-944(%rbp), %rax
	movq	-936(%rbp), %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	_v_panic
.L2930:
	movl	$0, -68(%rbp)
	jmp	.L2931
.L2933:
	movq	-824(%rbp), %rax
	movq	1048(%rax), %rax
	movl	-68(%rbp), %edx
	movslq	%edx, %rdx
	salq	$6, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, -608(%rbp)
	movq	%rbx, -600(%rbp)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, -592(%rbp)
	movq	%rbx, -584(%rbp)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, -576(%rbp)
	movq	%rbx, -568(%rbp)
	movq	56(%rax), %rdx
	movq	48(%rax), %rax
	movq	%rax, -560(%rbp)
	movq	%rdx, -552(%rbp)
	leaq	-688(%rbp), %rax
	leaq	-608(%rbp), %rdx
	leaq	-144(%rbp), %rcx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	os__File_write_struct_T_elf__header__Elf64_Shdr
	movzbl	-688(%rbp), %eax
	testb	%al, %al
	je	.L2932
	movq	-680(%rbp), %rax
	movq	-672(%rbp), %rdx
	movq	%rax, -736(%rbp)
	movq	%rdx, -728(%rbp)
	movq	-664(%rbp), %rax
	movq	-656(%rbp), %rdx
	movq	%rax, -720(%rbp)
	movq	%rdx, -712(%rbp)
	leaq	.LC538(%rip), %rax
	movq	%rax, -960(%rbp)
	movq	-952(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$31, %rax
	movq	%rax, -952(%rbp)
	movq	-952(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -952(%rbp)
	movq	-960(%rbp), %rax
	movq	-952(%rbp), %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	_v_panic
.L2932:
	addl	$1, -68(%rbp)
.L2931:
	movq	-824(%rbp), %rax
	movl	1060(%rax), %eax
	cmpl	%eax, -68(%rbp)
	jl	.L2933
	cmpb	$0, -69(%rbp)
	je	.L2935
	leaq	-144(%rbp), %rax
	movq	%rax, %rdi
	call	os__File_close
.L2935:
	nop
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
	.section	.rodata, "a"
.LC539:
	.string	"main"
	.text
	.globl	main__file_name_without_ext
	.hidden	main__file_name_without_ext
main__file_name_without_ext:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r13
	pushq	%r12
	addq	$-128, %rsp
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movq	%rcx, %rdx
	movq	%rax, -144(%rbp)
	movq	%rdx, -136(%rbp)
	movq	-144(%rbp), %rdx
	movq	-136(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	os__file_ext
	movl	%edx, -20(%rbp)
	leaq	-96(%rbp), %rax
	movq	-144(%rbp), %rcx
	movq	-136(%rbp), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	string_bytes
	leaq	.LC40(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$1, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	-144(%rbp), %rsi
	movq	-136(%rbp), %rax
	movq	%r12, %rdx
	movq	%r13, %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2937
	leaq	.LC539(%rip), %rax
	movq	%rax, -112(%rbp)
	movl	$4, -104(%rbp)
	movl	$1, -100(%rbp)
	jmp	.L2938
.L2937:
	movl	-76(%rbp), %eax
	subl	-20(%rbp), %eax
	movl	%eax, %esi
	leaq	-64(%rbp), %rdi
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-96(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	%esi, %edx
	movl	$0, %esi
	call	array_slice
	addq	$32, %rsp
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	call	Array_u8_bytestr
	addq	$32, %rsp
	movq	%rax, -112(%rbp)
	movq	%rdx, -104(%rbp)
.L2938:
	movq	-112(%rbp), %rax
	movq	-104(%rbp), %rdx
	movq	%rax, -128(%rbp)
	movq	%rdx, -120(%rbp)
	movq	-128(%rbp), %rax
	movq	-120(%rbp), %rdx
	leaq	-16(%rbp), %rsp
	popq	%r12
	popq	%r13
	popq	%rbp
	ret
	.section	.rodata, "a"
.LC540:
	.string	"vas"
.LC541:
	.string	"v0.0.0"
.LC542:
	.string	"set output file name"
.LC543:
	.string	"out_file_none"
.LC544:
	.string	"o"
.LC545:
	.string	"keeps local symbols (e.g., those starting with `.L`)"
.LC546:
	.string	"keep-locals"
.LC547:
	.string	".o"
.LC548:
	.string	"error: reading file `"
	.text
	.globl	main__main
	.hidden	main__main
main__main:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$536, %rsp
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	_const_os__args(%rip), %rax
	movq	8+_const_os__args(%rip), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	16+_const_os__args(%rip), %rax
	movq	24+_const_os__args(%rip), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	call	flag__new_flag_parser
	addq	$32, %rsp
	movq	%rax, -56(%rbp)
	leaq	.LC540(%rip), %r12
	movq	%r13, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$3, %rax
	movq	%rax, %r13
	movq	%r13, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	%r12, %rcx
	movq	%r13, %rbx
	movq	%r12, %rax
	movq	%r13, %rdx
	movq	-56(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flag__FlagParser_application
	leaq	.LC541(%rip), %r14
	movq	%r15, %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$6, %rax
	movq	%rax, %r15
	movq	%r15, %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, %r15
	movq	%r14, %rcx
	movq	%r15, %rbx
	movq	%r14, %rax
	movq	%r15, %rdx
	movq	-56(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flag__FlagParser_version
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	flag__FlagParser_skip_executable
	leaq	.LC542(%rip), %rax
	movq	%rax, -496(%rbp)
	movq	-488(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$20, %rax
	movq	%rax, -488(%rbp)
	movq	-488(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -488(%rbp)
	leaq	.LC543(%rip), %rax
	movq	%rax, -480(%rbp)
	movq	-472(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$13, %rax
	movq	%rax, -472(%rbp)
	movq	-472(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -472(%rbp)
	leaq	.LC544(%rip), %rax
	movq	%rax, -464(%rbp)
	movq	-456(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$1, %rax
	movq	%rax, -456(%rbp)
	movq	-456(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -456(%rbp)
	movq	-464(%rbp), %rax
	movq	-456(%rbp), %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %rsi
	movq	-56(%rbp), %rax
	pushq	-488(%rbp)
	pushq	-496(%rbp)
	movq	-480(%rbp), %r8
	movq	-472(%rbp), %r9
	movl	$111, %ecx
	movq	%rax, %rdi
	call	flag__FlagParser_string
	addq	$16, %rsp
	movq	%rax, -112(%rbp)
	movq	%rdx, -104(%rbp)
	leaq	.LC545(%rip), %rax
	movq	%rax, -528(%rbp)
	movq	-520(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$52, %rax
	movq	%rax, -520(%rbp)
	movq	-520(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -520(%rbp)
	leaq	.LC546(%rip), %rax
	movq	%rax, -512(%rbp)
	movq	-504(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$11, %rax
	movq	%rax, -504(%rbp)
	movq	-504(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -504(%rbp)
	movq	-512(%rbp), %rax
	movq	-504(%rbp), %rdx
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %rsi
	movq	-56(%rbp), %rax
	pushq	-520(%rbp)
	pushq	-528(%rbp)
	movl	$0, %r8d
	movl	$0, %ecx
	movq	%rax, %rdi
	call	flag__FlagParser_bool
	addq	$16, %rsp
	movb	%al, -57(%rbp)
	leaq	-192(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flag__FlagParser_finalize
	movzbl	-192(%rbp), %eax
	testb	%al, %al
	je	.L2941
	movq	-184(%rbp), %rax
	movq	-176(%rbp), %rdx
	movq	%rax, -352(%rbp)
	movq	%rdx, -344(%rbp)
	movq	-168(%rbp), %rax
	movq	-160(%rbp), %rdx
	movq	%rax, -336(%rbp)
	movq	%rdx, -328(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	flag__FlagParser_usage
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	println
	jmp	.L2940
.L2941:
	leaq	-192(%rbp), %rax
	leaq	40(%rax), %rcx
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, -224(%rbp)
	movq	%rdx, -216(%rbp)
	movq	16(%rcx), %rax
	movq	24(%rcx), %rdx
	movq	%rax, -208(%rbp)
	movq	%rdx, -200(%rbp)
	movl	-204(%rbp), %eax
	testl	%eax, %eax
	jg	.L2943
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	flag__FlagParser_usage
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	println
	jmp	.L2940
.L2943:
	subq	$32, %rsp
	movq	%rsp, %rcx
	movq	-224(%rbp), %rax
	movq	-216(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-208(%rbp), %rax
	movq	-200(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movl	$0, %edi
	call	array_get
	addq	$32, %rsp
	movq	8(%rax), %rdx
	movq	(%rax), %rax
	movq	%rax, -240(%rbp)
	movq	%rdx, -232(%rbp)
	leaq	.LC543(%rip), %rax
	movq	%rax, -544(%rbp)
	movq	-536(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$13, %rax
	movq	%rax, -536(%rbp)
	movq	-536(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -536(%rbp)
	movq	-112(%rbp), %rsi
	movq	-104(%rbp), %rax
	movq	-544(%rbp), %rdx
	movq	-536(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2944
	leaq	.LC547(%rip), %rax
	movq	%rax, -560(%rbp)
	movq	-552(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$2, %rax
	movq	%rax, -552(%rbp)
	movq	-552(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -552(%rbp)
	movq	-240(%rbp), %rdx
	movq	-232(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	main__file_name_without_ext
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rcx, %rsi
	movq	%rdx, %rax
	movq	-560(%rbp), %rdx
	movq	-552(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__plus
	movq	%rax, -112(%rbp)
	movq	%rdx, -104(%rbp)
.L2944:
	leaq	.LC40(%rip), %rax
	movq	%rax, -576(%rbp)
	movq	-568(%rbp), %rdx
	movabsq	$-4294967296, %rax
	andq	%rdx, %rax
	orq	$1, %rax
	movq	%rax, -568(%rbp)
	movq	-568(%rbp), %rax
	movl	%eax, %edx
	movabsq	$4294967296, %rax
	orq	%rdx, %rax
	movq	%rax, -568(%rbp)
	movq	-240(%rbp), %rsi
	movq	-232(%rbp), %rax
	movq	-576(%rbp), %rdx
	movq	-568(%rbp), %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	call	string__eq
	testb	%al, %al
	je	.L2945
	call	os__get_raw_lines_joined
	movq	%rax, -256(%rbp)
	movq	%rdx, -248(%rbp)
	jmp	.L2946
.L2945:
	leaq	-416(%rbp), %rax
	movq	-240(%rbp), %rcx
	movq	-232(%rbp), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	os__read_file
	movzbl	-416(%rbp), %eax
	testb	%al, %al
	je	.L2947
	movq	-408(%rbp), %rax
	movq	-400(%rbp), %rdx
	movq	%rax, -448(%rbp)
	movq	%rdx, -440(%rbp)
	movq	-392(%rbp), %rax
	movq	-384(%rbp), %rdx
	movq	%rax, -432(%rbp)
	movq	%rdx, -424(%rbp)
	pxor	%xmm0, %xmm0
	movaps	%xmm0, -352(%rbp)
	movaps	%xmm0, -336(%rbp)
	movaps	%xmm0, -320(%rbp)
	movaps	%xmm0, -304(%rbp)
	movaps	%xmm0, -288(%rbp)
	leaq	.LC548(%rip), %rax
	movq	%rax, -352(%rbp)
	movl	$21, -344(%rbp)
	movl	$1, -340(%rbp)
	movl	$65040, -336(%rbp)
	movq	-240(%rbp), %rax
	movq	-232(%rbp), %rdx
	movq	%rax, -328(%rbp)
	movq	%rdx, -320(%rbp)
	leaq	.LC85(%rip), %rax
	movq	%rax, -312(%rbp)
	movl	$1, -304(%rbp)
	movl	$1, -300(%rbp)
	leaq	-352(%rbp), %rax
	movq	%rax, %rsi
	movl	$2, %edi
	call	str_intp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	movq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	call	eprintln
	movl	$1, %edi
	call	_v_exit
.L2947:
	leaq	-416(%rbp), %rax
	addq	$40, %rax
	movq	8(%rax), %rdx
	movq	(%rax), %rax
	movq	%rax, -256(%rbp)
	movq	%rdx, -248(%rbp)
.L2946:
	movq	-256(%rbp), %rax
	movq	-248(%rbp), %rdx
	movq	%rax, -272(%rbp)
	movq	%rdx, -264(%rbp)
	movq	-272(%rbp), %rax
	movq	-264(%rbp), %rdx
	movq	-240(%rbp), %rdi
	movq	-232(%rbp), %rsi
	movq	%rdx, %rcx
	movq	%rax, %rdx
	call	lexer__new
	movq	%rax, -72(%rbp)
	movq	-240(%rbp), %rcx
	movq	-232(%rbp), %rdx
	movq	-72(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	encoder__new
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rdi
	call	encoder__Encoder_encode
	movq	-80(%rbp), %rax
	movq	%rax, %rdi
	call	encoder__Encoder_assign_addresses
	movzbl	-57(%rbp), %r9d
	movq	-112(%rbp), %rdi
	movq	-104(%rbp), %r8
	movq	-80(%rbp), %rax
	subq	$120, %rsp
	movq	%rsp, %rdx
	movq	192(%rax), %rcx
	movq	200(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	208(%rax), %rcx
	movq	216(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	224(%rax), %rcx
	movq	232(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	240(%rax), %rcx
	movq	248(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	256(%rax), %rcx
	movq	264(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	272(%rax), %rcx
	movq	280(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	288(%rax), %rcx
	movq	296(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	304(%rax), %rax
	movq	%rax, 112(%rdx)
	movq	-80(%rbp), %rax
	subq	$120, %rsp
	movq	%rsp, %rdx
	movq	312(%rax), %rcx
	movq	320(%rax), %rbx
	movq	%rcx, (%rdx)
	movq	%rbx, 8(%rdx)
	movq	328(%rax), %rcx
	movq	336(%rax), %rbx
	movq	%rcx, 16(%rdx)
	movq	%rbx, 24(%rdx)
	movq	344(%rax), %rcx
	movq	352(%rax), %rbx
	movq	%rcx, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	360(%rax), %rcx
	movq	368(%rax), %rbx
	movq	%rcx, 48(%rdx)
	movq	%rbx, 56(%rdx)
	movq	376(%rax), %rcx
	movq	384(%rax), %rbx
	movq	%rcx, 64(%rdx)
	movq	%rbx, 72(%rdx)
	movq	392(%rax), %rcx
	movq	400(%rax), %rbx
	movq	%rcx, 80(%rdx)
	movq	%rbx, 88(%rdx)
	movq	408(%rax), %rcx
	movq	416(%rax), %rbx
	movq	%rcx, 96(%rdx)
	movq	%rbx, 104(%rdx)
	movq	424(%rax), %rax
	movq	%rax, 112(%rdx)
	movq	-80(%rbp), %rcx
	subq	$32, %rsp
	movq	%rsp, %rsi
	movq	160(%rcx), %rax
	movq	168(%rcx), %rdx
	movq	%rax, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	176(%rcx), %rax
	movq	184(%rcx), %rdx
	movq	%rax, 16(%rsi)
	movq	%rdx, 24(%rsi)
	movl	%r9d, %edx
	movq	%r8, %rsi
	call	elf__new
	addq	$272, %rsp
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rax
	movq	%rax, %rdi
	call	elf__Elf_collect_rela_symbols
	movq	-88(%rbp), %rax
	movq	%rax, %rdi
	call	elf__Elf_build_symtab_strtab
	movq	-88(%rbp), %rax
	movq	%rax, %rdi
	call	elf__Elf_rela_text_users
	movq	-88(%rbp), %rax
	movq	%rax, %rdi
	call	elf__Elf_build_shstrtab
	movq	-88(%rbp), %rax
	movq	%rax, %rdi
	call	elf__Elf_build_headers
	movq	-88(%rbp), %rax
	movq	%rax, %rdi
	call	elf__Elf_write_elf
.L2940:
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
	.section	.rodata, "a"
.LC549:
	.string	"unknown"
.LC550:
	.string	"00102030405060708090011121314151617181910212223242526272829203132333435363738393041424344454647484940515253545556575859506162636465666768696071727374757677787970818283848586878889809192939495969798999"
.LC551:
	.string	"0123456789abcdefghijklmnopqrstuvwxyz"
.LC552:
	.string	"                            "
.LC553:
	.string	"-----------------------------------------------"
.LC554:
	.string	"."
	.text
	.globl	_vinit
_vinit:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	subq	$11032, %rsp
	movl	%edi, -10996(%rbp)
	movq	%rsi, -11008(%rbp)
	leaq	v_segmentation_fault_handler(%rip), %rax
	movq	%rax, %rsi
	movl	$11, %edi
	call	signal
	movl	$0, -80(%rbp)
	leaq	.LC549(%rip), %rax
	movq	%rax, -72(%rbp)
	movl	$7, -64(%rbp)
	movl	$1, -60(%rbp)
	leaq	-11040(%rbp), %rax
	leaq	-80(%rbp), %rdx
	movq	%rdx, %r8
	movl	$24, %ecx
	movl	$1, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-11040(%rbp), %rax
	movq	-11032(%rbp), %rdx
	movq	%rax, as_cast_type_indexes(%rip)
	movq	%rdx, 8+as_cast_type_indexes(%rip)
	movq	-11024(%rbp), %rax
	movq	-11016(%rbp), %rdx
	movq	%rax, 16+as_cast_type_indexes(%rip)
	movq	%rdx, 24+as_cast_type_indexes(%rip)
	call	builtin_init
	movb	$0, -144(%rbp)
	movb	$1, -143(%rbp)
	movb	$56, -142(%rbp)
	movb	$2, -141(%rbp)
	movb	$57, -140(%rbp)
	movb	$49, -139(%rbp)
	movb	$28, -138(%rbp)
	movb	$3, -137(%rbp)
	movb	$61, -136(%rbp)
	movb	$58, -135(%rbp)
	movb	$42, -134(%rbp)
	movb	$50, -133(%rbp)
	movb	$38, -132(%rbp)
	movb	$29, -131(%rbp)
	movb	$17, -130(%rbp)
	movb	$4, -129(%rbp)
	movb	$62, -128(%rbp)
	movb	$47, -127(%rbp)
	movb	$59, -126(%rbp)
	movb	$36, -125(%rbp)
	movb	$45, -124(%rbp)
	movb	$43, -123(%rbp)
	movb	$51, -122(%rbp)
	movb	$22, -121(%rbp)
	movb	$53, -120(%rbp)
	movb	$39, -119(%rbp)
	movb	$33, -118(%rbp)
	movb	$30, -117(%rbp)
	movb	$24, -116(%rbp)
	movb	$18, -115(%rbp)
	movb	$12, -114(%rbp)
	movb	$5, -113(%rbp)
	movb	$63, -112(%rbp)
	movb	$55, -111(%rbp)
	movb	$48, -110(%rbp)
	movb	$27, -109(%rbp)
	movb	$60, -108(%rbp)
	movb	$41, -107(%rbp)
	movb	$37, -106(%rbp)
	movb	$16, -105(%rbp)
	movb	$46, -104(%rbp)
	movb	$35, -103(%rbp)
	movb	$44, -102(%rbp)
	movb	$21, -101(%rbp)
	movb	$52, -100(%rbp)
	movb	$32, -99(%rbp)
	movb	$23, -98(%rbp)
	movb	$11, -97(%rbp)
	movb	$54, -96(%rbp)
	movb	$26, -95(%rbp)
	movb	$40, -94(%rbp)
	movb	$15, -93(%rbp)
	movb	$34, -92(%rbp)
	movb	$20, -91(%rbp)
	movb	$31, -90(%rbp)
	movb	$10, -89(%rbp)
	movb	$25, -88(%rbp)
	movb	$14, -87(%rbp)
	movb	$19, -86(%rbp)
	movb	$9, -85(%rbp)
	movb	$13, -84(%rbp)
	movb	$8, -83(%rbp)
	movb	$7, -82(%rbp)
	movb	$6, -81(%rbp)
	leaq	-11040(%rbp), %rax
	leaq	-144(%rbp), %rdx
	movq	%rdx, %r8
	movl	$1, %ecx
	movl	$64, %edx
	movl	$64, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-11040(%rbp), %rax
	movq	-11032(%rbp), %rdx
	movq	%rax, _const_math__bits__de_bruijn64tab(%rip)
	movq	%rdx, 8+_const_math__bits__de_bruijn64tab(%rip)
	movq	-11024(%rbp), %rax
	movq	-11016(%rbp), %rdx
	movq	%rax, 16+_const_math__bits__de_bruijn64tab(%rip)
	movq	%rdx, 24+_const_math__bits__de_bruijn64tab(%rip)
	leaq	.LC550(%rip), %rax
	movq	%rax, _const_strconv__digit_pairs(%rip)
	movl	$200, 8+_const_strconv__digit_pairs(%rip)
	movl	$1, 12+_const_strconv__digit_pairs(%rip)
	leaq	.LC551(%rip), %rax
	movq	%rax, _const_strconv__base_digits(%rip)
	movl	$36, 8+_const_strconv__base_digits(%rip)
	movl	$1, 12+_const_strconv__base_digits(%rip)
	movq	$1, -304(%rbp)
	movq	$10, -296(%rbp)
	movq	$100, -288(%rbp)
	movq	$1000, -280(%rbp)
	movq	$10000, -272(%rbp)
	movq	$100000, -264(%rbp)
	movq	$1000000, -256(%rbp)
	movq	$10000000, -248(%rbp)
	movq	$100000000, -240(%rbp)
	movq	$1000000000, -232(%rbp)
	movabsq	$10000000000, %rax
	movq	%rax, -224(%rbp)
	movabsq	$100000000000, %rax
	movq	%rax, -216(%rbp)
	movabsq	$1000000000000, %rax
	movq	%rax, -208(%rbp)
	movabsq	$10000000000000, %rax
	movq	%rax, -200(%rbp)
	movabsq	$100000000000000, %rax
	movq	%rax, -192(%rbp)
	movabsq	$1000000000000000, %rax
	movq	%rax, -184(%rbp)
	movabsq	$10000000000000000, %rax
	movq	%rax, -176(%rbp)
	movabsq	$100000000000000000, %rbx
	movq	%rbx, -168(%rbp)
	movabsq	$1000000000000000000, %rax
	movq	%rax, -160(%rbp)
	movabsq	$-8446744073709551616, %rax
	movq	%rax, -152(%rbp)
	leaq	-11040(%rbp), %rax
	leaq	-304(%rbp), %rdx
	movq	%rdx, %r8
	movl	$8, %ecx
	movl	$20, %edx
	movl	$20, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-11040(%rbp), %rax
	movq	-11032(%rbp), %rdx
	movq	%rax, _const_strconv__ten_pow_table_64(%rip)
	movq	%rdx, 8+_const_strconv__ten_pow_table_64(%rip)
	movq	-11024(%rbp), %rax
	movq	-11016(%rbp), %rdx
	movq	%rax, 16+_const_strconv__ten_pow_table_64(%rip)
	movq	%rdx, 24+_const_strconv__ten_pow_table_64(%rip)
	leaq	-464(%rbp), %rdx
	movl	$0, %eax
	movl	$20, %ecx
	movq	%rdx, %rdi
	rep stosq
	leaq	-11040(%rbp), %rax
	leaq	-464(%rbp), %rdx
	movq	%rdx, %r8
	movl	$8, %ecx
	movl	$20, %edx
	movl	$20, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-11040(%rbp), %rax
	movq	-11032(%rbp), %rdx
	movq	%rax, _const_strconv__dec_round(%rip)
	movq	%rdx, 8+_const_strconv__dec_round(%rip)
	movq	-11024(%rbp), %rax
	movq	-11016(%rbp), %rdx
	movq	%rax, 16+_const_strconv__dec_round(%rip)
	movq	%rdx, 24+_const_strconv__dec_round(%rip)
	movq	$0, -5680(%rbp)
	movabsq	$72057594037927936, %rax
	movq	%rax, -5672(%rbp)
	movq	$0, -5664(%rbp)
	movabsq	$90071992547409920, %rax
	movq	%rax, -5656(%rbp)
	movq	$0, -5648(%rbp)
	movabsq	$112589990684262400, %rax
	movq	%rax, -5640(%rbp)
	movq	$0, -5632(%rbp)
	movabsq	$140737488355328000, %rax
	movq	%rax, -5624(%rbp)
	movq	$0, -5616(%rbp)
	movabsq	$87960930222080000, %rax
	movq	%rax, -5608(%rbp)
	movq	$0, -5600(%rbp)
	movabsq	$109951162777600000, %rax
	movq	%rax, -5592(%rbp)
	movq	$0, -5584(%rbp)
	movabsq	$137438953472000000, %rax
	movq	%rax, -5576(%rbp)
	movq	$0, -5568(%rbp)
	movabsq	$85899345920000000, %rax
	movq	%rax, -5560(%rbp)
	movq	$0, -5552(%rbp)
	movabsq	$107374182400000000, %rax
	movq	%rax, -5544(%rbp)
	movq	$0, -5536(%rbp)
	movabsq	$134217728000000000, %rax
	movq	%rax, -5528(%rbp)
	movq	$0, -5520(%rbp)
	movabsq	$83886080000000000, %rax
	movq	%rax, -5512(%rbp)
	movq	$0, -5504(%rbp)
	movabsq	$104857600000000000, %rax
	movq	%rax, -5496(%rbp)
	movq	$0, -5488(%rbp)
	movabsq	$131072000000000000, %rax
	movq	%rax, -5480(%rbp)
	movq	$0, -5472(%rbp)
	movabsq	$81920000000000000, %rax
	movq	%rax, -5464(%rbp)
	movq	$0, -5456(%rbp)
	movabsq	$102400000000000000, %rax
	movq	%rax, -5448(%rbp)
	movq	$0, -5440(%rbp)
	movabsq	$128000000000000000, %rax
	movq	%rax, -5432(%rbp)
	movq	$0, -5424(%rbp)
	movabsq	$80000000000000000, %rax
	movq	%rax, -5416(%rbp)
	movq	$0, -5408(%rbp)
	movq	%rbx, -5400(%rbp)
	movq	$0, -5392(%rbp)
	movabsq	$125000000000000000, %rax
	movq	%rax, -5384(%rbp)
	movq	$0, -5376(%rbp)
	movabsq	$78125000000000000, %rax
	movq	%rax, -5368(%rbp)
	movq	$0, -5360(%rbp)
	movabsq	$97656250000000000, %rax
	movq	%rax, -5352(%rbp)
	movq	$0, -5344(%rbp)
	movabsq	$122070312500000000, %rax
	movq	%rax, -5336(%rbp)
	movq	$0, -5328(%rbp)
	movabsq	$76293945312500000, %rax
	movq	%rax, -5320(%rbp)
	movq	$0, -5312(%rbp)
	movabsq	$95367431640625000, %rax
	movq	%rax, -5304(%rbp)
	movq	$0, -5296(%rbp)
	movabsq	$119209289550781250, %rax
	movq	%rax, -5288(%rbp)
	movabsq	$4611686018427387904, %rax
	movq	%rax, -5280(%rbp)
	movabsq	$74505805969238281, %rax
	movq	%rax, -5272(%rbp)
	movabsq	$-8070450532247928832, %rax
	movq	%rax, -5264(%rbp)
	movabsq	$93132257461547851, %rax
	movq	%rax, -5256(%rbp)
	movabsq	$8358680908399640576, %rax
	movq	%rax, -5248(%rbp)
	movabsq	$116415321826934814, %rax
	movq	%rax, -5240(%rbp)
	movabsq	$612489549322387456, %rax
	movq	%rax, -5232(%rbp)
	movabsq	$72759576141834259, %rax
	movq	%rax, -5224(%rbp)
	movabsq	$-3846074081774403584, %rax
	movq	%rax, -5216(%rbp)
	movabsq	$90949470177292823, %rax
	movq	%rax, -5208(%rbp)
	movabsq	$-4807592602218004480, %rax
	movq	%rax, -5200(%rbp)
	movabsq	$113686837721616029, %rax
	movq	%rax, -5192(%rbp)
	movabsq	$3213881284082270208, %rax
	movq	%rax, -5184(%rbp)
	movabsq	$142108547152020037, %rax
	movq	%rax, -5176(%rbp)
	movabsq	$4314518811765112832, %rax
	movq	%rax, -5168(%rbp)
	movabsq	$88817841970012523, %rax
	movq	%rax, -5160(%rbp)
	movabsq	$781462496279003136, %rax
	movq	%rax, -5152(%rbp)
	movabsq	$111022302462515654, %rax
	movq	%rax, -5144(%rbp)
	movabsq	$-8246543916506021888, %rax
	movq	%rax, -5136(%rbp)
	movabsq	$138777878078144567, %rax
	movq	%rax, -5128(%rbp)
	movabsq	$-5154089947816263680, %rax
	movq	%rax, -5120(%rbp)
	movabsq	$86736173798840354, %rax
	movq	%rax, -5112(%rbp)
	movabsq	$7392445620511834112, %rax
	movq	%rax, -5104(%rbp)
	movabsq	$108420217248550443, %rax
	movq	%rax, -5096(%rbp)
	movabsq	$4628871007212404736, %rax
	movq	%rax, -5088(%rbp)
	movabsq	$135525271560688054, %rax
	movq	%rax, -5080(%rbp)
	movabsq	$-1718641638919634944, %rax
	movq	%rax, -5072(%rbp)
	movabsq	$84703294725430033, %rax
	movq	%rax, -5064(%rbp)
	movabsq	$7075069988205232128, %rax
	movq	%rax, -5056(%rbp)
	movabsq	$105879118406787542, %rax
	movq	%rax, -5048(%rbp)
	movabsq	$-379534551598235648, %rax
	movq	%rax, -5040(%rbp)
	movabsq	$132348898008484427, %rax
	movq	%rax, -5032(%rbp)
	movabsq	$8986162942105878528, %rax
	movq	%rax, -5024(%rbp)
	movabsq	$82718061255302767, %rax
	movq	%rax, -5016(%rbp)
	movabsq	$6621017659204960256, %rax
	movq	%rax, -5008(%rbp)
	movabsq	$103397576569128459, %rax
	movq	%rax, -5000(%rbp)
	movabsq	$3664586055578812416, %rax
	movq	%rax, -4992(%rbp)
	movabsq	$129246970711410574, %rax
	movq	%rax, -4984(%rbp)
	movabsq	$-2321319733690630144, %rax
	movq	%rax, -4976(%rbp)
	movabsq	$80779356694631608, %rax
	movq	%rax, -4968(%rbp)
	movabsq	$1710036351314100224, %rax
	movq	%rax, -4960(%rbp)
	movabsq	$100974195868289511, %rax
	movq	%rax, -4952(%rbp)
	movabsq	$-2474140579284762624, %rax
	movq	%rax, -4944(%rbp)
	movabsq	$126217744835361888, %rax
	movq	%rax, -4936(%rbp)
	movabsq	$-8463866889694058496, %rax
	movq	%rax, -4928(%rbp)
	movabsq	$78886090522101180, %rax
	movq	%rax, -4920(%rbp)
	movabsq	$-5968147593690185216, %rax
	movq	%rax, -4912(%rbp)
	movabsq	$98607613152626475, %rax
	movq	%rax, -4904(%rbp)
	movabsq	$-7460184492112731520, %rax
	movq	%rax, -4896(%rbp)
	movabsq	$123259516440783094, %rax
	movq	%rax, -4888(%rbp)
	movabsq	$2254913720070624656, %rax
	movq	%rax, -4880(%rbp)
	movabsq	$77037197775489434, %rax
	movq	%rax, -4872(%rbp)
	movabsq	$-6404729886766494988, %rax
	movq	%rax, -4864(%rbp)
	movabsq	$96296497219361792, %rax
	movq	%rax, -4856(%rbp)
	movabsq	$-3394226340030730831, %rax
	movq	%rax, -4848(%rbp)
	movabsq	$120370621524202240, %rax
	movq	%rax, -4840(%rbp)
	movabsq	$-9038920490160288626, %rax
	movq	%rax, -4832(%rbp)
	movabsq	$75231638452626400, %rax
	movq	%rax, -4824(%rbp)
	movabsq	$-6686964594272972878, %rax
	movq	%rax, -4816(%rbp)
	movabsq	$94039548065783000, %rax
	movq	%rax, -4808(%rbp)
	movabsq	$-3747019724413828194, %rax
	movq	%rax, -4800(%rbp)
	movabsq	$117549435082228750, %rax
	movq	%rax, -4792(%rbp)
	movabsq	$4575641699882439235, %rax
	movq	%rax, -4784(%rbp)
	movabsq	$73468396926392969, %rax
	movq	%rax, -4776(%rbp)
	movabsq	$-8115505930429114668, %rax
	movq	%rax, -4768(%rbp)
	movabsq	$91835496157991211, %rax
	movq	%rax, -4760(%rbp)
	movabsq	$8302361660673158281, %rax
	movq	%rax, -4752(%rbp)
	movabsq	$114794370197489014, %rax
	movq	%rax, -4744(%rbp)
	movabsq	$1154580038986672043, %rax
	movq	%rax, -4736(%rbp)
	movabsq	$143492962746861268, %rax
	movq	%rax, -4728(%rbp)
	movabsq	$-8501759512488105781, %rax
	movq	%rax, -4720(%rbp)
	movabsq	$89683101716788292, %rax
	movq	%rax, -4712(%rbp)
	movabsq	$-6015513372182744323, %rax
	movq	%rax, -4704(%rbp)
	movabsq	$112103877145985365, %rax
	movq	%rax, -4696(%rbp)
	movabsq	$1703980321626345405, %rax
	movq	%rax, -4688(%rbp)
	movabsq	$140129846432481707, %rax
	movq	%rax, -4680(%rbp)
	movabsq	$-1240855308197228074, %rax
	movq	%rax, -4672(%rbp)
	movabsq	$87581154020301066, %rax
	movq	%rax, -4664(%rbp)
	movabsq	$-6162755153673922997, %rax
	movq	%rax, -4656(%rbp)
	movabsq	$109476442525376333, %rax
	movq	%rax, -4648(%rbp)
	movabsq	$1519928094762372062, %rax
	movq	%rax, -4640(%rbp)
	movabsq	$136845553156720417, %rax
	movq	%rax, -4632(%rbp)
	movabsq	$-5967573968414599317, %rax
	movq	%rax, -4624(%rbp)
	movabsq	$85528470722950260, %rax
	movq	%rax, -4616(%rbp)
	movabsq	$-2847781442090861242, %rax
	movq	%rax, -4608(%rbp)
	movabsq	$106910588403687825, %rax
	movq	%rax, -4600(%rbp)
	movabsq	$5663645234241199255, %rax
	movq	%rax, -4592(%rbp)
	movabsq	$133638235504609782, %rax
	movq	%rax, -4584(%rbp)
	movabsq	$-1071907747026638370, %rax
	movq	%rax, -4576(%rbp)
	movabsq	$83523897190381113, %rax
	movq	%rax, -4568(%rbp)
	movabsq	$7883487353071477846, %rax
	movq	%rax, -4560(%rbp)
	movabsq	$104404871487976392, %rax
	movq	%rax, -4552(%rbp)
	movabsq	$-8592384882370204308, %rax
	movq	%rax, -4544(%rbp)
	movabsq	$130506089359970490, %rax
	movq	%rax, -4536(%rbp)
	movabsq	$-7676083560695071645, %rax
	movq	%rax, -4528(%rbp)
	movabsq	$81566305849981556, %rax
	movq	%rax, -4520(%rbp)
	movabsq	$-4983418432441451652, %rax
	movq	%rax, -4512(%rbp)
	movabsq	$101957882312476945, %rax
	movq	%rax, -4504(%rbp)
	movabsq	$2994098996302961243, %rax
	movq	%rax, -4496(%rbp)
	movabsq	$127447352890596182, %rax
	movq	%rax, -4488(%rbp)
	movabsq	$-2740374145738037127, %rax
	movq	%rax, -4480(%rbp)
	movabsq	$79654595556622613, %rax
	movq	%rax, -4472(%rbp)
	movabsq	$5797904354682229399, %rax
	movq	%rax, -4464(%rbp)
	movabsq	$99568244445778267, %rax
	movq	%rax, -4456(%rbp)
	movabsq	$2635694424925398845, %rax
	movq	%rax, -4448(%rbp)
	movabsq	$124460305557222834, %rax
	movq	%rax, -4440(%rbp)
	movabsq	$6258995034005762182, %rax
	movq	%rax, -4432(%rbp)
	movabsq	$77787690973264271, %rax
	movq	%rax, -4424(%rbp)
	movabsq	$3212057774079814824, %rax
	movq	%rax, -4416(%rbp)
	movabsq	$97234613716580339, %rax
	movq	%rax, -4408(%rbp)
	movabsq	$-596613800827619374, %rax
	movq	%rax, -4400(%rbp)
	movabsq	$121543267145725423, %rax
	movq	%rax, -4392(%rbp)
	movabsq	$-372883625517262109, %rax
	movq	%rax, -4384(%rbp)
	movabsq	$75964541966078389, %rax
	movq	%rax, -4376(%rbp)
	movabsq	$8757267504958198172, %rax
	movq	%rax, -4368(%rbp)
	movabsq	$94955677457597987, %rax
	movq	%rax, -4360(%rbp)
	movabsq	$6334898362770359811, %rax
	movq	%rax, -4352(%rbp)
	movabsq	$118694596821997484, %rax
	movq	%rax, -4344(%rbp)
	movabsq	$-5264060560123300927, %rax
	movq	%rax, -4336(%rbp)
	movabsq	$74184123013748427, %rax
	movq	%rax, -4328(%rbp)
	movabsq	$-6580075700154126158, %rax
	movq	%rax, -4320(%rbp)
	movabsq	$92730153767185534, %rax
	movq	%rax, -4312(%rbp)
	movabsq	$5609963430089506015, %rax
	movq	%rax, -4304(%rbp)
	movabsq	$115912692208981918, %rax
	movq	%rax, -4296(%rbp)
	movabsq	$-1105458874621446645, %rax
	movq	%rax, -4288(%rbp)
	movabsq	$72445432630613698, %rax
	movq	%rax, -4280(%rbp)
	movabsq	$-5993509611704196210, %rax
	movq	%rax, -4272(%rbp)
	movabsq	$90556790788267123, %rax
	movq	%rax, -4264(%rbp)
	movabsq	$-7491887014630245263, %rax
	movq	%rax, -4256(%rbp)
	movabsq	$113195988485333904, %rax
	movq	%rax, -4248(%rbp)
	movabsq	$-4753172749860418674, %rax
	movq	%rax, -4240(%rbp)
	movabsq	$141494985606667380, %rax
	movq	%rax, -4232(%rbp)
	movabsq	$-664889959449067720, %rax
	movq	%rax, -4224(%rbp)
	movabsq	$88434366004167112, %rax
	movq	%rax, -4216(%rbp)
	movabsq	$3780573569116053255, %rax
	movq	%rax, -4208(%rbp)
	movabsq	$110542957505208891, %rax
	movq	%rax, -4200(%rbp)
	movabsq	$114030942967678664, %rax
	movq	%rax, -4192(%rbp)
	movabsq	$138178696881511114, %rax
	movq	%rax, -4184(%rbp)
	movabsq	$4682955357782187069, %rax
	movq	%rax, -4176(%rbp)
	movabsq	$86361685550944446, %rax
	movq	%rax, -4168(%rbp)
	movabsq	$-3369677839627041972, %rax
	movq	%rax, -4160(%rbp)
	movabsq	$107952106938680557, %rax
	movq	%rax, -4152(%rbp)
	movabsq	$5011274737320973344, %rax
	movq	%rax, -4144(%rbp)
	movabsq	$134940133673350697, %rax
	movq	%rax, -4136(%rbp)
	movabsq	$-3785482316815473516, %rax
	movq	%rax, -4128(%rbp)
	movabsq	$84337583545844185, %rax
	movq	%rax, -4120(%rbp)
	movabsq	$4491519140835433913, %rax
	movq	%rax, -4112(%rbp)
	movabsq	$105421979432305232, %rax
	movq	%rax, -4104(%rbp)
	movabsq	$5614398926044292391, %rax
	movq	%rax, -4096(%rbp)
	movabsq	$131777474290381540, %rax
	movq	%rax, -4088(%rbp)
	movabsq	$-5714372708077093064, %rax
	movq	%rax, -4080(%rbp)
	movabsq	$82360921431488462, %rax
	movq	%rax, -4072(%rbp)
	movabsq	$6692092170185797382, %rax
	movq	%rax, -4064(%rbp)
	movabsq	$102951151789360578, %rax
	movq	%rax, -4056(%rbp)
	movabsq	$-858256824122529080, %rax
	movq	%rax, -4048(%rbp)
	movabsq	$128688939736700722, %rax
	movq	%rax, -4040(%rbp)
	movabsq	$-2842253524290274627, %rax
	movq	%rax, -4032(%rbp)
	movabsq	$80430587335437951, %rax
	movq	%rax, -4024(%rbp)
	movabsq	$-3552816905362843284, %rax
	movq	%rax, -4016(%rbp)
	movabsq	$100538234169297439, %rax
	movq	%rax, -4008(%rbp)
	movabsq	$-4441021131703554105, %rax
	movq	%rax, -4000(%rbp)
	movabsq	$125672792711621799, %rax
	movq	%rax, -3992(%rbp)
	movabsq	$-2775638207314721316, %rax
	movq	%rax, -3984(%rbp)
	movabsq	$78545495444763624, %rax
	movq	%rax, -3976(%rbp)
	movabsq	$1142138259283986260, %rax
	movq	%rax, -3968(%rbp)
	movabsq	$98181869305954531, %rax
	movq	%rax, -3960(%rbp)
	movabsq	$-3184013194322405079, %rax
	movq	%rax, -3952(%rbp)
	movabsq	$122727336632443163, %rax
	movq	%rax, -3944(%rbp)
	movabsq	$7233363790403272633, %rax
	movq	%rax, -3936(%rbp)
	movabsq	$76704585395276977, %rax
	movq	%rax, -3928(%rbp)
	movabsq	$-4793353317278072920, %rax
	movq	%rax, -3920(%rbp)
	movabsq	$95880731744096221, %rax
	movq	%rax, -3912(%rbp)
	movabsq	$3231680390257184658, %rax
	movq	%rax, -3904(%rbp)
	movabsq	$119850914680120277, %rax
	movq	%rax, -3896(%rbp)
	movabsq	$4325643253124434363, %rax
	movq	%rax, -3888(%rbp)
	movabsq	$74906821675075173, %rax
	movq	%rax, -3880(%rbp)
	movabsq	$-8428003988876620758, %rax
	movq	%rax, -3872(%rbp)
	movabsq	$93633527093843966, %rax
	movq	%rax, -3864(%rbp)
	movabsq	$3300053069186387764, %rax
	movq	%rax, -3856(%rbp)
	movabsq	$117041908867304958, %rax
	movq	%rax, -3848(%rbp)
	movabsq	$-2549152850185895552, %rax
	movq	%rax, -3840(%rbp)
	movabsq	$73151193042065598, %rax
	movq	%rax, -3832(%rbp)
	movabsq	$-7798127081159757343, %rax
	movq	%rax, -3824(%rbp)
	movabsq	$91438991302581998, %rax
	movq	%rax, -3816(%rbp)
	movabsq	$4087399203832467033, %rax
	movq	%rax, -3808(%rbp)
	movabsq	$114298739128227498, %rax
	movq	%rax, -3800(%rbp)
	movabsq	$-4114123032064192017, %rax
	movq	%rax, -3792(%rbp)
	movabsq	$142873423910284372, %rax
	movq	%rax, -3784(%rbp)
	movabsq	$-265483885826426059, %rax
	movq	%rax, -3776(%rbp)
	movabsq	$89295889943927732, %rax
	movq	%rax, -3768(%rbp)
	movabsq	$4279831161144355331, %rax
	movq	%rax, -3760(%rbp)
	movabsq	$111619862429909666, %rax
	movq	%rax, -3752(%rbp)
	movabsq	$-3873583085424331644, %rax
	movq	%rax, -3744(%rbp)
	movabsq	$139524828037387082, %rax
	movq	%rax, -3736(%rbp)
	movabsq	$-4726832437603901230, %rax
	movq	%rax, -3728(%rbp)
	movabsq	$87203017523366926, %rax
	movq	%rax, -3720(%rbp)
	movabsq	$7926517508277287175, %rax
	movq	%rax, -3712(%rbp)
	movabsq	$109003771904208658, %rax
	movq	%rax, -3704(%rbp)
	movabsq	$684774848491833161, %rax
	movq	%rax, -3696(%rbp)
	movabsq	$136254714880260823, %rax
	movq	%rax, -3688(%rbp)
	movabsq	$7345513307948477581, %rax
	movq	%rax, -3680(%rbp)
	movabsq	$85159196800163014, %rax
	movq	%rax, -3672(%rbp)
	movabsq	$-41480401919178831, %rax
	movq	%rax, -3664(%rbp)
	movabsq	$106448996000203767, %rax
	movq	%rax, -3656(%rbp)
	movabsq	$-51850502398973539, %rax
	movq	%rax, -3648(%rbp)
	movabsq	$133061245000254709, %rax
	movq	%rax, -3640(%rbp)
	movabsq	$-4644092582426746366, %rax
	movq	%rax, -3632(%rbp)
	movabsq	$83163278125159193, %rax
	movq	%rax, -3624(%rbp)
	movabsq	$3418256308821342851, %rax
	movq	%rax, -3616(%rbp)
	movabsq	$103954097656448992, %rax
	movq	%rax, -3608(%rbp)
	movabsq	$4272820386026678563, %rax
	movq	%rax, -3600(%rbp)
	movabsq	$129942622070561240, %rax
	movq	%rax, -3592(%rbp)
	movabsq	$2670512741266674102, %rax
	movq	%rax, -3584(%rbp)
	movabsq	$81214138794100775, %rax
	movq	%rax, -3576(%rbp)
	movabsq	$-1273545091844045277, %rax
	movq	%rax, -3568(%rbp)
	movabsq	$101517673492625968, %rax
	movq	%rax, -3560(%rbp)
	movabsq	$3019754653622331308, %rax
	movq	%rax, -3552(%rbp)
	movabsq	$126897091865782461, %rax
	movq	%rax, -3544(%rbp)
	movabsq	$4193189667727651020, %rax
	movq	%rax, -3536(%rbp)
	movabsq	$79310682416114038, %rax
	movq	%rax, -3528(%rbp)
	movabsq	$-3981884952195212033, %rax
	movq	%rax, -3520(%rbp)
	movabsq	$99138353020142547, %rax
	movq	%rax, -3512(%rbp)
	movabsq	$-4977356190244015042, %rax
	movq	%rax, -3504(%rbp)
	movabsq	$123922941275178184, %rax
	movq	%rax, -3496(%rbp)
	movabsq	$8418367427165960359, %rax
	movq	%rax, -3488(%rbp)
	movabsq	$77451838296986365, %rax
	movq	%rax, -3480(%rbp)
	movabsq	$-3312098771324713263, %rax
	movq	%rax, -3472(%rbp)
	movabsq	$96814797871232956, %rax
	movq	%rax, -3464(%rbp)
	movabsq	$471562554271496325, %rax
	movq	%rax, -3456(%rbp)
	movabsq	$121018497339041196, %rax
	movq	%rax, -3448(%rbp)
	movabsq	$-8928645440435090605, %rax
	movq	%rax, -3440(%rbp)
	movabsq	$75636560836900747, %rax
	movq	%rax, -3432(%rbp)
	movabsq	$7285937273165688360, %rax
	movq	%rax, -3424(%rbp)
	movabsq	$94545701046125934, %rax
	movq	%rax, -3416(%rbp)
	movabsq	$-115950445397665358, %rax
	movq	%rax, -3408(%rbp)
	movabsq	$118182126307657417, %rax
	movq	%rax, -3400(%rbp)
	movabsq	$4539216990053847055, %rax
	movq	%rax, -3392(%rbp)
	movabsq	$73863828942285886, %rax
	movq	%rax, -3384(%rbp)
	movabsq	$-3549350799287466989, %rax
	movq	%rax, -3376(%rbp)
	movabsq	$92329786177857357, %rax
	movq	%rax, -3368(%rbp)
	movabsq	$4786683537745442072, %rax
	movq	%rax, -3360(%rbp)
	movabsq	$115412232722321697, %rax
	movq	%rax, -3352(%rbp)
	movabsq	$-3925851816550180561, %rax
	movq	%rax, -3344(%rbp)
	movabsq	$72132645451451060, %rax
	movq	%rax, -3336(%rbp)
	movabsq	$-295628752260337798, %rax
	movq	%rax, -3328(%rbp)
	movabsq	$90165806814313825, %rax
	movq	%rax, -3320(%rbp)
	movabsq	$8853836096529353561, %rax
	movq	%rax, -3312(%rbp)
	movabsq	$112707258517892282, %rax
	movq	%rax, -3304(%rbp)
	movabsq	$1843923083806916143, %rax
	movq	%rax, -3296(%rbp)
	movabsq	$140884073147365353, %rax
	movq	%rax, -3288(%rbp)
	movabsq	$-5765077100261759267, %rax
	movq	%rax, -3280(%rbp)
	movabsq	$88052545717103345, %rax
	movq	%rax, -3272(%rbp)
	movabsq	$2017025661527576725, %rax
	movq	%rax, -3264(%rbp)
	movabsq	$110065682146379182, %rax
	movq	%rax, -3256(%rbp)
	movabsq	$-6702089959945304902, %rax
	movq	%rax, -3248(%rbp)
	movabsq	$137582102682973977, %rax
	movq	%rax, -3240(%rbp)
	movabsq	$422879793461572340, %rax
	movq	%rax, -3232(%rbp)
	movabsq	$85988814176858736, %rax
	movq	%rax, -3224(%rbp)
	movabsq	$528599741826965425, %rax
	movq	%rax, -3216(%rbp)
	movabsq	$107486017721073420, %rax
	movq	%rax, -3208(%rbp)
	movabsq	$660749677283706782, %rax
	movq	%rax, -3200(%rbp)
	movabsq	$134357522151341775, %rax
	movq	%rax, -3192(%rbp)
	movabsq	$7330497575943398595, %rax
	movq	%rax, -3184(%rbp)
	movabsq	$83973451344588609, %rax
	movq	%rax, -3176(%rbp)
	movabsq	$-4671936085352915469, %rax
	movq	%rax, -3168(%rbp)
	movabsq	$104966814180735761, %rax
	movq	%rax, -3160(%rbp)
	movabsq	$3383451930163631472, %rax
	movq	%rax, -3152(%rbp)
	movabsq	$131208517725919702, %rax
	movq	%rax, -3144(%rbp)
	movabsq	$-2497028562075118234, %rax
	movq	%rax, -3136(%rbp)
	movabsq	$82005323578699813, %rax
	movq	%rax, -3128(%rbp)
	movabsq	$6102086334260878016, %rax
	movq	%rax, -3120(%rbp)
	movabsq	$102506654473374767, %rax
	movq	%rax, -3112(%rbp)
	movabsq	$3015921899398709616, %rax
	movq	%rax, -3104(%rbp)
	movabsq	$128133318091718459, %rax
	movq	%rax, -3096(%rbp)
	movabsq	$-420891822089500442, %rax
	movq	%rax, -3088(%rbp)
	movabsq	$80083323807324036, %rax
	movq	%rax, -3080(%rbp)
	movabsq	$4085571240815512351, %rax
	movq	%rax, -3072(%rbp)
	movabsq	$100104154759155046, %rax
	movq	%rax, -3064(%rbp)
	movabsq	$-4116407985835385369, %rax
	movq	%rax, -3056(%rbp)
	movabsq	$125130193448943807, %rax
	movq	%rax, -3048(%rbp)
	movabsq	$-2572754991147115856, %rax
	movq	%rax, -3040(%rbp)
	movabsq	$78206370905589879, %rax
	movq	%rax, -3032(%rbp)
	movabsq	$-3215943738933894820, %rax
	movq	%rax, -3024(%rbp)
	movabsq	$97757963631987349, %rax
	movq	%rax, -3016(%rbp)
	movabsq	$5203442363187407284, %rax
	movq	%rax, -3008(%rbp)
	movabsq	$122197454539984187, %rax
	movq	%rax, -3000(%rbp)
	movabsq	$946308467778435600, %rax
	movq	%rax, -2992(%rbp)
	movabsq	$76373409087490117, %rax
	movq	%rax, -2984(%rbp)
	movabsq	$5794571603150432404, %rax
	movq	%rax, -2976(%rbp)
	movabsq	$95466761359362646, %rax
	movq	%rax, -2968(%rbp)
	movabsq	$-1980157532916735303, %rax
	movq	%rax, -2960(%rbp)
	movabsq	$119333451699203307, %rax
	movq	%rax, -2952(%rbp)
	movabsq	$7985773578781816244, %rax
	movq	%rax, -2944(%rbp)
	movabsq	$74583407312002067, %rax
	movq	%rax, -2936(%rbp)
	movabsq	$5370530955049882401, %rax
	movq	%rax, -2928(%rbp)
	movabsq	$93229259140002584, %rax
	movq	%rax, -2920(%rbp)
	movabsq	$6713163693812353001, %rax
	movq	%rax, -2912(%rbp)
	movabsq	$116536573925003230, %rax
	movq	%rax, -2904(%rbp)
	movabsq	$-415958709794667279, %rax
	movq	%rax, -2896(%rbp)
	movabsq	$72835358703127018, %rax
	movq	%rax, -2888(%rbp)
	movabsq	$-5131634405670722002, %rax
	movq	%rax, -2880(%rbp)
	movabsq	$91044198378908773, %rax
	movq	%rax, -2872(%rbp)
	movabsq	$2808829029766373305, %rax
	movq	%rax, -2864(%rbp)
	movabsq	$113805247973635967, %rax
	movq	%rax, -2856(%rbp)
	movabsq	$-1100649731219421272, %rax
	movq	%rax, -2848(%rbp)
	movabsq	$142256559967044958, %rax
	movq	%rax, -2840(%rbp)
	movabsq	$6229622945628943561, %rax
	movq	%rax, -2832(%rbp)
	movabsq	$88910349979403099, %rax
	movq	%rax, -2824(%rbp)
	movabsq	$3175342663608791547, %rax
	movq	%rax, -2816(%rbp)
	movabsq	$111137937474253874, %rax
	movq	%rax, -2808(%rbp)
	movabsq	$-5254193707343786374, %rax
	movq	%rax, -2800(%rbp)
	movabsq	$138922421842817342, %rax
	movq	%rax, -2792(%rbp)
	movabsq	$3633657960551215372, %rax
	movq	%rax, -2784(%rbp)
	movabsq	$86826513651760839, %rax
	movq	%rax, -2776(%rbp)
	movabsq	$-69613567738368689, %rax
	movq	%rax, -2768(%rbp)
	movabsq	$108533142064701048, %rax
	movq	%rax, -2760(%rbp)
	movabsq	$4524669058754427043, %rax
	movq	%rax, -2752(%rbp)
	movabsq	$135666427580876311, %rax
	movq	%rax, -2744(%rbp)
	movabsq	$-8701296884346952858, %rax
	movq	%rax, -2736(%rbp)
	movabsq	$84791517238047694, %rax
	movq	%rax, -2728(%rbp)
	movabsq	$2958436949848472639, %rax
	movq	%rax, -2720(%rbp)
	movabsq	$105989396547559618, %rax
	movq	%rax, -2712(%rbp)
	movabsq	$-5525325849544185009, %rax
	movq	%rax, -2704(%rbp)
	movabsq	$132486745684449522, %rax
	movq	%rax, -2696(%rbp)
	movabsq	$-5759171665178809583, %rax
	movq	%rax, -2688(%rbp)
	movabsq	$82804216052780951, %rax
	movq	%rax, -2680(%rbp)
	movabsq	$-7198964581473511978, %rax
	movq	%rax, -2672(%rbp)
	movabsq	$103505270065976189, %rax
	movq	%rax, -2664(%rbp)
	movabsq	$224666310012885835, %rax
	movq	%rax, -2656(%rbp)
	movabsq	$129381587582470237, %rax
	movq	%rax, -2648(%rbp)
	movabsq	$2446259452971747599, %rax
	movq	%rax, -2640(%rbp)
	movabsq	$80863492239043898, %rax
	movq	%rax, -2632(%rbp)
	movabsq	$-6165547720640091309, %rax
	movq	%rax, -2624(%rbp)
	movabsq	$101079365298804872, %rax
	movq	%rax, -2616(%rbp)
	movabsq	$-3095248632372726232, %rax
	movq	%rax, -2608(%rbp)
	movabsq	$126349206623506090, %rax
	movq	%rax, -2600(%rbp)
	movabsq	$-4240373404446647847, %rax
	movq	%rax, -2592(%rbp)
	movabsq	$78968254139691306, %rax
	movq	%rax, -2584(%rbp)
	movabsq	$8534591299723853903, %rax
	movq	%rax, -2576(%rbp)
	movabsq	$98710317674614133, %rax
	movq	%rax, -2568(%rbp)
	movabsq	$-3166818930627346333, %rax
	movq	%rax, -2560(%rbp)
	movabsq	$123387897093267666, %rax
	movq	%rax, -2552(%rbp)
	movabsq	$-4285104840855785410, %rax
	movq	%rax, -2544(%rbp)
	movabsq	$77117435683292291, %rax
	movq	%rax, -2536(%rbp)
	movabsq	$-5356381051069731763, %rax
	movq	%rax, -2528(%rbp)
	movabsq	$96396794604115364, %rax
	movq	%rax, -2520(%rbp)
	movabsq	$-2083790295409776800, %rax
	movq	%rax, -2512(%rbp)
	movabsq	$120495993255144205, %rax
	movq	%rax, -2504(%rbp)
	movabsq	$-5914054953058498404, %rax
	movq	%rax, -2496(%rbp)
	movabsq	$75309995784465128, %rax
	movq	%rax, -2488(%rbp)
	movabsq	$-2780882672895735101, %rax
	movq	%rax, -2480(%rbp)
	movabsq	$94137494730581410, %rax
	movq	%rax, -2472(%rbp)
	movabsq	$-8087789359547056780, %rax
	movq	%rax, -2464(%rbp)
	movabsq	$117671868413226763, %rax
	movq	%rax, -2456(%rbp)
	movabsq	$4168503687137865320, %rax
	movq	%rax, -2448(%rbp)
	movabsq	$73544917758266727, %rax
	movq	%rax, -2440(%rbp)
	movabsq	$598943590494943747, %rax
	movq	%rax, -2432(%rbp)
	movabsq	$91931147197833409, %rax
	movq	%rax, -2424(%rbp)
	movabsq	$5360365506546067587, %rax
	movq	%rax, -2416(%rbp)
	movabsq	$114913933997291761, %rax
	movq	%rax, -2408(%rbp)
	movabsq	$-7134601172099579228, %rax
	movq	%rax, -2400(%rbp)
	movabsq	$143642417496614701, %rax
	movq	%rax, -2392(%rbp)
	movabsq	$-9070811750989624921, %rax
	movq	%rax, -2384(%rbp)
	movabsq	$89776510935384188, %rax
	movq	%rax, -2376(%rbp)
	movabsq	$-6726828670309643248, %rax
	movq	%rax, -2368(%rbp)
	movabsq	$112220638669230235, %rax
	movq	%rax, -2360(%rbp)
	movabsq	$-8408535837887054059, %rax
	movq	%rax, -2352(%rbp)
	movabsq	$140275798336537794, %rax
	movq	%rax, -2344(%rbp)
	movabsq	$-7561177907893102739, %rax
	movq	%rax, -2336(%rbp)
	movabsq	$87672373960336121, %rax
	movq	%rax, -2328(%rbp)
	movabsq	$-228100348011602616, %rax
	movq	%rax, -2320(%rbp)
	movabsq	$109590467450420151, %rax
	movq	%rax, -2312(%rbp)
	movabsq	$-285125435014503270, %rax
	movq	%rax, -2304(%rbp)
	movabsq	$136988084313025189, %rax
	movq	%rax, -2296(%rbp)
	movabsq	$-4789889415311452448, %rax
	movq	%rax, -2288(%rbp)
	movabsq	$85617552695640743, %rax
	movq	%rax, -2280(%rbp)
	movabsq	$-5987361769139315560, %rax
	movq	%rax, -2272(%rbp)
	movabsq	$107021940869550929, %rax
	movq	%rax, -2264(%rbp)
	movabsq	$1739169825430631358, %rax
	movq	%rax, -2256(%rbp)
	movabsq	$133777426086938662, %rax
	movq	%rax, -2248(%rbp)
	movabsq	$-3524704877533243305, %rax
	movq	%rax, -2240(%rbp)
	movabsq	$83610891304336663, %rax
	movq	%rax, -2232(%rbp)
	movabsq	$-4405881096916554131, %rax
	movq	%rax, -2224(%rbp)
	movabsq	$104513614130420829, %rax
	movq	%rax, -2216(%rbp)
	movabsq	$3716020665709083144, %rax
	movq	%rax, -2208(%rbp)
	movabsq	$130642017663026037, %rax
	movq	%rax, -2200(%rbp)
	movabsq	$4628355925281870917, %rax
	movq	%rax, -2192(%rbp)
	movabsq	$81651261039391273, %rax
	movq	%rax, -2184(%rbp)
	movabsq	$-8049613148679825066, %rax
	movq	%rax, -2176(%rbp)
	movabsq	$102064076299239091, %rax
	movq	%rax, -2168(%rbp)
	movabsq	$8384727637859770284, %rax
	movq	%rax, -2160(%rbp)
	movabsq	$127580095374048864, %rax
	movq	%rax, -2152(%rbp)
	movabsq	$5240454773662356427, %rax
	movq	%rax, -2144(%rbp)
	movabsq	$79737559608780540, %rax
	movq	%rax, -2136(%rbp)
	movabsq	$6550568467077945534, %rax
	movq	%rax, -2128(%rbp)
	movabsq	$99671949510975675, %rax
	movq	%rax, -2120(%rbp)
	movabsq	$3576524565420044014, %rax
	movq	%rax, -2112(%rbp)
	movabsq	$124589936888719594, %rax
	movq	%rax, -2104(%rbp)
	movabsq	$6847013871814915412, %rax
	movq	%rax, -2096(%rbp)
	movabsq	$77868710555449746, %rax
	movq	%rax, -2088(%rbp)
	movabsq	$-664604697086131542, %rax
	movq	%rax, -2080(%rbp)
	movabsq	$97335888194312182, %rax
	movq	%rax, -2072(%rbp)
	movabsq	$-5442441889785052332, %rax
	movq	%rax, -2064(%rbp)
	movabsq	$121669860242890228, %rax
	movq	%rax, -2056(%rbp)
	movabsq	$-1095683171901963756, %rax
	movq	%rax, -2048(%rbp)
	movabsq	$76043662651806392, %rax
	movq	%rax, -2040(%rbp)
	movabsq	$3242082053549933210, %rax
	movq	%rax, -2032(%rbp)
	movabsq	$95054578314757991, %rax
	movq	%rax, -2024(%rbp)
	movabsq	$-559083451489971392, %rax
	movq	%rax, -2016(%rbp)
	movabsq	$118818222893447488, %rax
	movq	%rax, -2008(%rbp)
	movabsq	$-7266956184822313976, %rax
	movq	%rax, -2000(%rbp)
	movabsq	$74261389308404680, %rax
	movq	%rax, -1992(%rbp)
	movabsq	$-4472009212600504566, %rax
	movq	%rax, -1984(%rbp)
	movabsq	$92826736635505850, %rax
	movq	%rax, -1976(%rbp)
	movabsq	$8245046539531533005, %rax
	movq	%rax, -1968(%rbp)
	movabsq	$116033420794382313, %rax
	movq	%rax, -1960(%rbp)
	movabsq	$-1764374940433873728, %rax
	movq	%rax, -1952(%rbp)
	movabsq	$72520887996488945, %rax
	movq	%rax, -1944(%rbp)
	movabsq	$7017903361312433648, %rax
	movq	%rax, -1936(%rbp)
	movabsq	$90651109995611182, %rax
	movq	%rax, -1928(%rbp)
	movabsq	$-450992835214233748, %rax
	movq	%rax, -1920(%rbp)
	movabsq	$113313887494513977, %rax
	movq	%rax, -1912(%rbp)
	movabsq	$8659630992836983623, %rax
	movq	%rax, -1904(%rbp)
	movabsq	$141642359368142472, %rax
	movq	%rax, -1896(%rbp)
	movabsq	$5412269370523114764, %rax
	movq	%rax, -1888(%rbp)
	movabsq	$88526474605089045, %rax
	movq	%rax, -1880(%rbp)
	movabsq	$-7069721342128270257, %rax
	movq	%rax, -1872(%rbp)
	movabsq	$110658093256361306, %rax
	movq	%rax, -1864(%rbp)
	movabsq	$4997906377621825891, %rax
	movq	%rax, -1856(%rbp)
	movabsq	$138322616570451633, %rax
	movq	%rax, -1848(%rbp)
	movabsq	$-3793837541627440674, %rax
	movq	%rax, -1840(%rbp)
	movabsq	$86451635356532270, %rax
	movq	%rax, -1832(%rbp)
	movabsq	$9092761128247862869, %rax
	movq	%rax, -1824(%rbp)
	movabsq	$108064544195665338, %rax
	movq	%rax, -1816(%rbp)
	movabsq	$2142579373455052779, %rax
	movq	%rax, -1808(%rbp)
	movabsq	$135080680244581673, %rax
	movq	%rax, -1800(%rbp)
	movabsq	$-5578416919231673869, %rax
	movq	%rax, -1792(%rbp)
	movabsq	$84425425152863545, %rax
	movq	%rax, -1784(%rbp)
	movabsq	$2250350887815183471, %rax
	movq	%rax, -1776(%rbp)
	movabsq	$105531781441079432, %rax
	movq	%rax, -1768(%rbp)
	movabsq	$2812938609768979339, %rax
	movq	%rax, -1760(%rbp)
	movabsq	$131914726801349290, %rax
	movq	%rax, -1752(%rbp)
	movabsq	$6369772649532999991, %rax
	movq	%rax, -1744(%rbp)
	movabsq	$82446704250843306, %rax
	movq	%rax, -1736(%rbp)
	movabsq	$-1261156224938525819, %rax
	movq	%rax, -1728(%rbp)
	movabsq	$103058380313554132, %rax
	movq	%rax, -1720(%rbp)
	movabsq	$3035240737254230630, %rax
	movq	%rax, -1712(%rbp)
	movabsq	$128822975391942666, %rax
	movq	%rax, -1704(%rbp)
	movabsq	$6508711479211282048, %rax
	movq	%rax, -1696(%rbp)
	movabsq	$80514359619964166, %rax
	movq	%rax, -1688(%rbp)
	movabsq	$-1087482687840673248, %rax
	movq	%rax, -1680(%rbp)
	movabsq	$100642949524955207, %rax
	movq	%rax, -1672(%rbp)
	movabsq	$-1359353359800841560, %rax
	movq	%rax, -1664(%rbp)
	movabsq	$125803686906194009, %rax
	movq	%rax, -1656(%rbp)
	movabsq	$3762090168551861929, %rax
	movq	%rax, -1648(%rbp)
	movabsq	$78627304316371256, %rax
	movq	%rax, -1640(%rbp)
	movabsq	$4702612710689827411, %rax
	movq	%rax, -1632(%rbp)
	movabsq	$98284130395464070, %rax
	movq	%rax, -1624(%rbp)
	movabsq	$-3345106148492491544, %rax
	movq	%rax, -1616(%rbp)
	movabsq	$122855162994330087, %rax
	movq	%rax, -1608(%rbp)
	movabsq	$-2090691342807807215, %rax
	movq	%rax, -1600(%rbp)
	movabsq	$76784476871456304, %rax
	movq	%rax, -1592(%rbp)
	movabsq	$1998321839917628885, %rax
	movq	%rax, -1584(%rbp)
	movabsq	$95980596089320381, %rax
	movq	%rax, -1576(%rbp)
	movabsq	$7109588318324424010, %rax
	movq	%rax, -1568(%rbp)
	movabsq	$119975745111650476, %rax
	movq	%rax, -1560(%rbp)
	movabsq	$-4779879337902010802, %rax
	movq	%rax, -1552(%rbp)
	movabsq	$74984840694781547, %rax
	movq	%rax, -1544(%rbp)
	movabsq	$-5974849172377513502, %rax
	movq	%rax, -1536(%rbp)
	movabsq	$93731050868476934, %rax
	movq	%rax, -1528(%rbp)
	movabsq	$6366496589810271835, %rax
	movq	%rax, -1520(%rbp)
	movabsq	$117163813585596168, %rax
	movq	%rax, -1512(%rbp)
	movabsq	$3979060368631419896, %rax
	movq	%rax, -1504(%rbp)
	movabsq	$73227383490997605, %rax
	movq	%rax, -1496(%rbp)
	movabsq	$-8861232594492888841, %rax
	movq	%rax, -1488(%rbp)
	movabsq	$91534229363747006, %rax
	movq	%rax, -1480(%rbp)
	movabsq	$2758517312166052660, %rax
	movq	%rax, -1472(%rbp)
	movabsq	$114417786704683758, %rax
	movq	%rax, -1464(%rbp)
	movabsq	$-5775225396647209982, %rax
	movq	%rax, -1456(%rbp)
	movabsq	$143022233380854697, %rax
	movq	%rax, -1448(%rbp)
	movabsq	$1002170145522881665, %rax
	movq	%rax, -1440(%rbp)
	movabsq	$89388895863034186, %rax
	movq	%rax, -1432(%rbp)
	movabsq	$-7970659354951173727, %rax
	movq	%rax, -1424(%rbp)
	movabsq	$111736119828792732, %rax
	movq	%rax, -1416(%rbp)
	movabsq	$-5351638175261579254, %rax
	movq	%rax, -1408(%rbp)
	movabsq	$139670149785990915, %rax
	movq	%rax, -1400(%rbp)
	movabsq	$5878598177316288774, %rax
	movq	%rax, -1392(%rbp)
	movabsq	$87293843616244322, %rax
	movq	%rax, -1384(%rbp)
	movabsq	$-1875124315209414841, %rax
	movq	%rax, -1376(%rbp)
	movabsq	$109117304520305402, %rax
	movq	%rax, -1368(%rbp)
	movabsq	$-6955591412439156455, %rax
	movq	%rax, -1360(%rbp)
	movabsq	$136396630650381753, %rax
	movq	%rax, -1352(%rbp)
	movabsq	$264441385652915120, %rax
	movq	%rax, -1344(%rbp)
	movabsq	$85247894156488596, %rax
	movq	%rax, -1336(%rbp)
	movabsq	$330551732066143900, %rax
	movq	%rax, -1328(%rbp)
	movabsq	$106559867695610745, %rax
	movq	%rax, -1320(%rbp)
	movabsq	$5024875683510067779, %rax
	movq	%rax, -1312(%rbp)
	movabsq	$133199834619513431, %rax
	movq	%rax, -1304(%rbp)
	movabsq	$-8388667743874677398, %rax
	movq	%rax, -1296(%rbp)
	movabsq	$83249896637195894, %rax
	movq	%rax, -1288(%rbp)
	movabsq	$3349223375438816964, %rax
	movq	%rax, -1280(%rbp)
	movabsq	$104062370796494868, %rax
	movq	%rax, -1272(%rbp)
	movabsq	$4186529219298521205, %rax
	movq	%rax, -1264(%rbp)
	movabsq	$130077963495618585, %rax
	movq	%rax, -1256(%rbp)
	movabsq	$-4300948265579506103, %rax
	movq	%rax, -1248(%rbp)
	movabsq	$81298727184761615, %rax
	movq	%rax, -1240(%rbp)
	movabsq	$-5376185331974382629, %rax
	movq	%rax, -1232(%rbp)
	movabsq	$101623408980952019, %rax
	movq	%rax, -1224(%rbp)
	movabsq	$-6720231664967978286, %rax
	movq	%rax, -1216(%rbp)
	movabsq	$127029261226190024, %rax
	movq	%rax, -1208(%rbp)
	movabsq	$7329070255463483331, %rax
	movq	%rax, -1200(%rbp)
	movabsq	$79393288266368765, %rax
	movq	%rax, -1192(%rbp)
	movabsq	$-4673720235952809548, %rax
	movq	%rax, -1184(%rbp)
	movabsq	$99241610332960956, %rax
	movq	%rax, -1176(%rbp)
	movabsq	$-1230464276513624031, %rax
	movq	%rax, -1168(%rbp)
	movabsq	$124052012916201195, %rax
	movq	%rax, -1160(%rbp)
	movabsq	$8454331864033760789, %rax
	movq	%rax, -1152(%rbp)
	movabsq	$77532508072625747, %rax
	movq	%rax, -1144(%rbp)
	movabsq	$5956228811614813082, %rax
	movq	%rax, -1136(%rbp)
	movabsq	$96915635090782184, %rax
	movq	%rax, -1128(%rbp)
	movabsq	$7445286014518516353, %rax
	movq	%rax, -1120(%rbp)
	movabsq	$121144543863477730, %rax
	movq	%rax, -1112(%rbp)
	movabsq	$-9181754296208090992, %rax
	movq	%rax, -1104(%rbp)
	movabsq	$75715339914673581, %rax
	movq	%rax, -1096(%rbp)
	movabsq	$-2253820833405337932, %rax
	movq	%rax, -1088(%rbp)
	movabsq	$94644174893341976, %rax
	movq	%rax, -1080(%rbp)
	movabsq	$1794409976670715490, %rax
	movq	%rax, -1072(%rbp)
	movabsq	$118305218616677471, %rax
	movq	%rax, -1064(%rbp)
	movabsq	$8039035263060279037, %rax
	movq	%rax, -1056(%rbp)
	movabsq	$73940761635423419, %rax
	movq	%rax, -1048(%rbp)
	movabsq	$5437108060397960892, %rax
	movq	%rax, -1040(%rbp)
	movabsq	$92425952044279274, %rax
	movq	%rax, -1032(%rbp)
	movabsq	$-2426986961357324693, %rax
	movq	%rax, -1024(%rbp)
	movabsq	$115532440055349092, %rax
	movq	%rax, -1016(%rbp)
	movabsq	$788976158365366019, %rax
	movq	%rax, -1008(%rbp)
	movabsq	$72207775034593183, %rax
	movq	%rax, -1000(%rbp)
	movabsq	$-3625465820470680380, %rax
	movq	%rax, -992(%rbp)
	movabsq	$90259718793241478, %rax
	movq	%rax, -984(%rbp)
	movabsq	$-9143518294015738379, %rax
	movq	%rax, -976(%rbp)
	movabsq	$112824648491551848, %rax
	movq	%rax, -968(%rbp)
	movabsq	$-6817711849092285070, %rax
	movq	%rax, -960(%rbp)
	movabsq	$141030810614439810, %rax
	movq	%rax, -952(%rbp)
	movabsq	$-6566912914896372121, %rax
	movq	%rax, -944(%rbp)
	movabsq	$88144256634024881, %rax
	movq	%rax, -936(%rbp)
	movabsq	$1014730893234310657, %rax
	movq	%rax, -928(%rbp)
	movabsq	$110180320792531102, %rax
	movq	%rax, -920(%rbp)
	movabsq	$-7954958420311887487, %rax
	movq	%rax, -912(%rbp)
	movabsq	$137725400990663877, %rax
	movq	%rax, -904(%rbp)
	movabsq	$8863209042587234033, %rax
	movq	%rax, -896(%rbp)
	movabsq	$86078375619164923, %rax
	movq	%rax, -888(%rbp)
	movabsq	$6467325284806654637, %rax
	movq	%rax, -880(%rbp)
	movabsq	$107597969523956154, %rax
	movq	%rax, -872(%rbp)
	movabsq	$-1139215430846457512, %rax
	movq	%rax, -864(%rbp)
	movabsq	$134497461904945192, %rax
	movq	%rax, -856(%rbp)
	movabsq	$-7629538671920117801, %rax
	movq	%rax, -848(%rbp)
	movabsq	$84060913690590745, %rax
	movq	%rax, -840(%rbp)
	movabsq	$-313551303045371443, %rax
	movq	%rax, -832(%rbp)
	movabsq	$105076142113238431, %rax
	movq	%rax, -824(%rbp)
	movabsq	$-391939128806714304, %rax
	movq	%rax, -816(%rbp)
	movabsq	$131345177641548039, %rax
	movq	%rax, -808(%rbp)
	movabsq	$-244961955504196440, %rax
	movq	%rax, -800(%rbp)
	movabsq	$82090736025967524, %rax
	movq	%rax, -792(%rbp)
	movabsq	$4305483574047142354, %rax
	movq	%rax, -784(%rbp)
	movabsq	$102613420032459406, %rax
	movq	%rax, -776(%rbp)
	movabsq	$-3841517569295847865, %rax
	movq	%rax, -768(%rbp)
	movabsq	$128266775040574257, %rax
	movq	%rax, -760(%rbp)
	movabsq	$2210737537617482988, %rax
	movq	%rax, -752(%rbp)
	movabsq	$80166734400358911, %rax
	movq	%rax, -744(%rbp)
	movabsq	$-1848264096405534169, %rax
	movq	%rax, -736(%rbp)
	movabsq	$100208418000448638, %rax
	movq	%rax, -728(%rbp)
	movabsq	$-6922016138934305615, %rax
	movq	%rax, -720(%rbp)
	movabsq	$125260522500560798, %rax
	movq	%rax, -712(%rbp)
	movabsq	$2591268940807140847, %rax
	movq	%rax, -704(%rbp)
	movabsq	$78287826562850499, %rax
	movq	%rax, -696(%rbp)
	movabsq	$-1372599842418461846, %rax
	movq	%rax, -688(%rbp)
	movabsq	$97859783203563123, %rax
	movq	%rax, -680(%rbp)
	movabsq	$-1715749803023077307, %rax
	movq	%rax, -672(%rbp)
	movabsq	$122324729004453904, %rax
	movq	%rax, -664(%rbp)
	movabsq	$-7989872654530505173, %rax
	movq	%rax, -656(%rbp)
	movabsq	$76452955627783690, %rax
	movq	%rax, -648(%rbp)
	movabsq	$3847717237119032246, %rax
	movq	%rax, -640(%rbp)
	movabsq	$95566194534729613, %rax
	movq	%rax, -632(%rbp)
	movabsq	$-9025411508883373405, %rax
	movq	%rax, -624(%rbp)
	movabsq	$119457743168412016, %rax
	movq	%rax, -616(%rbp)
	movabsq	$5888332853016361382, %rax
	movq	%rax, -608(%rbp)
	movabsq	$74661089480257510, %rax
	movq	%rax, -600(%rbp)
	movabsq	$-1862955970584324080, %rax
	movq	%rax, -592(%rbp)
	movabsq	$93326361850321887, %rax
	movq	%rax, -584(%rbp)
	movabsq	$-2328694963230405100, %rax
	movq	%rax, -576(%rbp)
	movabsq	$116657952312902359, %rax
	movq	%rax, -568(%rbp)
	movabsq	$-1455434352019003188, %rax
	movq	%rax, -560(%rbp)
	movabsq	$72911220195563974, %rax
	movq	%rax, -552(%rbp)
	movabsq	$-6430978958451141889, %rax
	movq	%rax, -544(%rbp)
	movabsq	$91139025244454968, %rax
	movq	%rax, -536(%rbp)
	movabsq	$-3427037679636539457, %rax
	movq	%rax, -528(%rbp)
	movabsq	$113923781555568710, %rax
	movq	%rax, -520(%rbp)
	movabsq	$-8895483117973062225, %rax
	movq	%rax, -512(%rbp)
	movabsq	$142404726944460888, %rax
	movq	%rax, -504(%rbp)
	movabsq	$5969538097335305869, %rax
	movq	%rax, -496(%rbp)
	movabsq	$89002954340288055, %rax
	movq	%rax, -488(%rbp)
	movabsq	$2850236603241744433, %rax
	movq	%rax, -480(%rbp)
	movabsq	$111253692925360069, %rax
	movq	%rax, -472(%rbp)
	leaq	-11040(%rbp), %rax
	leaq	-5680(%rbp), %rdx
	movq	%rdx, %r8
	movl	$16, %ecx
	movl	$326, %edx
	movl	$326, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-11040(%rbp), %rax
	movq	-11032(%rbp), %rdx
	movq	%rax, _const_strconv__pow5_split_64(%rip)
	movq	%rdx, 8+_const_strconv__pow5_split_64(%rip)
	movq	-11024(%rbp), %rax
	movq	-11016(%rbp), %rdx
	movq	%rax, 16+_const_strconv__pow5_split_64(%rip)
	movq	%rdx, 24+_const_strconv__pow5_split_64(%rip)
	movq	$1, -10352(%rbp)
	movabsq	$288230376151711744, %rax
	movq	%rax, -10344(%rbp)
	movabsq	$3689348814741910324, %rax
	movq	%rax, -10336(%rbp)
	movabsq	$230584300921369395, %rax
	movq	%rax, -10328(%rbp)
	movabsq	$2951479051793528259, %rax
	movq	%rax, -10320(%rbp)
	movabsq	$184467440737095516, %rax
	movq	%rax, -10312(%rbp)
	movabsq	$-1328165573307087716, %rax
	movq	%rax, -10304(%rbp)
	movabsq	$147573952589676412, %rax
	movq	%rax, -10296(%rbp)
	movabsq	$-5814413732033250669, %rax
	movq	%rax, -10288(%rbp)
	movabsq	$236118324143482260, %rax
	movq	%rax, -10280(%rbp)
	movabsq	$-8340879800368510858, %rax
	movq	%rax, -10272(%rbp)
	movabsq	$188894659314785808, %rax
	movq	%rax, -10264(%rbp)
	movabsq	$-2983355025552898363, %rax
	movq	%rax, -10256(%rbp)
	movabsq	$151115727451828646, %rax
	movq	%rax, -10248(%rbp)
	movabsq	$-1084019226142727058, %rax
	movq	%rax, -10240(%rbp)
	movabsq	$241785163922925834, %rax
	movq	%rax, -10232(%rbp)
	movabsq	$-867215380914181647, %rax
	movq	%rax, -10224(%rbp)
	movabsq	$193428131138340667, %rax
	movq	%rax, -10216(%rbp)
	movabsq	$6684925324752475329, %rax
	movq	%rax, -10208(%rbp)
	movabsq	$154742504910672534, %rax
	movq	%rax, -10200(%rbp)
	movabsq	$-372165924621770443, %rax
	movq	%rax, -10192(%rbp)
	movabsq	$247588007857076054, %rax
	movq	%rax, -10184(%rbp)
	movabsq	$-297732739697416354, %rax
	movq	%rax, -10176(%rbp)
	movabsq	$198070406285660843, %rax
	movq	%rax, -10168(%rbp)
	movabsq	$3451162622983977240, %rax
	movq	%rax, -10160(%rbp)
	movabsq	$158456325028528675, %rax
	movq	%rax, -10152(%rbp)
	movabsq	$5521860196774363583, %rax
	movq	%rax, -10144(%rbp)
	movabsq	$253530120045645880, %rax
	movq	%rax, -10136(%rbp)
	movabsq	$4417488157419490867, %rax
	movq	%rax, -10128(%rbp)
	movabsq	$202824096036516704, %rax
	movq	%rax, -10120(%rbp)
	movabsq	$7223339340677503017, %rax
	movq	%rax, -10112(%rbp)
	movabsq	$162259276829213363, %rax
	movq	%rax, -10104(%rbp)
	movabsq	$7867994130342094503, %rax
	movq	%rax, -10096(%rbp)
	movabsq	$259614842926741381, %rax
	movq	%rax, -10088(%rbp)
	movabsq	$2605046489531765280, %rax
	movq	%rax, -10080(%rbp)
	movabsq	$207691874341393105, %rax
	movq	%rax, -10072(%rbp)
	movabsq	$2084037191625412224, %rax
	movq	%rax, -10064(%rbp)
	movabsq	$166153499473114484, %rax
	movq	%rax, -10056(%rbp)
	movabsq	$-7733586937625071412, %rax
	movq	%rax, -10048(%rbp)
	movabsq	$265845599156983174, %rax
	movq	%rax, -10040(%rbp)
	movabsq	$-6186869550100057129, %rax
	movq	%rax, -10032(%rbp)
	movabsq	$212676479325586539, %rax
	movq	%rax, -10024(%rbp)
	movabsq	$-4949495640080045703, %rax
	movq	%rax, -10016(%rbp)
	movabsq	$170141183460469231, %rax
	movq	%rax, -10008(%rbp)
	movabsq	$-4229844209386162803, %rax
	movq	%rax, -10000(%rbp)
	movabsq	$272225893536750770, %rax
	movq	%rax, -9992(%rbp)
	movabsq	$-7073224182250840565, %rax
	movq	%rax, -9984(%rbp)
	movabsq	$217780714829400616, %rax
	movq	%rax, -9976(%rbp)
	movabsq	$5409467098425058518, %rax
	movq	%rax, -9968(%rbp)
	movabsq	$174224571863520493, %rax
	movq	%rax, -9960(%rbp)
	movabsq	$4965798542738183305, %rax
	movq	%rax, -9952(%rbp)
	movabsq	$278759314981632789, %rax
	movq	%rax, -9944(%rbp)
	movabsq	$7661987648932456967, %rax
	movq	%rax, -9936(%rbp)
	movabsq	$223007451985306231, %rax
	movq	%rax, -9928(%rbp)
	movabsq	$2440241304404055250, %rax
	movq	%rax, -9920(%rbp)
	movabsq	$178405961588244985, %rax
	movq	%rax, -9912(%rbp)
	movabsq	$3904386087046488400, %rax
	movq	%rax, -9904(%rbp)
	movabsq	$285449538541191976, %rax
	movq	%rax, -9896(%rbp)
	movabsq	$-565839945104719603, %rax
	movq	%rax, -9888(%rbp)
	movabsq	$228359630832953580, %rax
	movq	%rax, -9880(%rbp)
	movabsq	$-4142020770825686005, %rax
	movq	%rax, -9872(%rbp)
	movabsq	$182687704666362864, %rax
	movq	%rax, -9864(%rbp)
	movabsq	$-3313616616660548804, %rax
	movq	%rax, -9856(%rbp)
	movabsq	$146150163733090291, %rax
	movq	%rax, -9848(%rbp)
	movabsq	$-1612437771914967764, %rax
	movq	%rax, -9840(%rbp)
	movabsq	$233840261972944466, %rax
	movq	%rax, -9832(%rbp)
	movabsq	$-8668647847015794857, %rax
	movq	%rax, -9824(%rbp)
	movabsq	$187072209578355573, %rax
	movq	%rax, -9816(%rbp)
	movabsq	$-3245569462870725563, %rax
	movq	%rax, -9808(%rbp)
	movabsq	$149657767662684458, %rax
	movq	%rax, -9800(%rbp)
	movabsq	$2185786488890659746, %rax
	movq	%rax, -9792(%rbp)
	movabsq	$239452428260295134, %rax
	movq	%rax, -9784(%rbp)
	movabsq	$5437978005854438120, %rax
	movq	%rax, -9776(%rbp)
	movabsq	$191561942608236107, %rax
	movq	%rax, -9768(%rbp)
	movabsq	$-3028315224800270150, %rax
	movq	%rax, -9760(%rbp)
	movabsq	$153249554086588885, %rax
	movq	%rax, -9752(%rbp)
	movabsq	$6222742084545298729, %rax
	movq	%rax, -9744(%rbp)
	movabsq	$245199286538542217, %rax
	movq	%rax, -9736(%rbp)
	movabsq	$-2400503961847581663, %rax
	movq	%rax, -9728(%rbp)
	movabsq	$196159429230833773, %rax
	movq	%rax, -9720(%rbp)
	movabsq	$1768945645263844993, %rax
	movq	%rax, -9712(%rbp)
	movabsq	$156927543384667019, %rax
	movq	%rax, -9704(%rbp)
	movabsq	$-8237733411803578981, %rax
	movq	%rax, -9696(%rbp)
	movabsq	$251084069415467230, %rax
	movq	%rax, -9688(%rbp)
	movabsq	$8167208529524778108, %rax
	movq	%rax, -9680(%rbp)
	movabsq	$200867255532373784, %rax
	movq	%rax, -9672(%rbp)
	movabsq	$-8223628435347818806, %rax
	movq	%rax, -9664(%rbp)
	movabsq	$160693804425899027, %rax
	movq	%rax, -9656(%rbp)
	movabsq	$1599589762411131202, %rax
	movq	%rax, -9648(%rbp)
	movabsq	$257110087081438444, %rax
	movq	%rax, -9640(%rbp)
	movabsq	$4969020624670815285, %rax
	movq	%rax, -9632(%rbp)
	movabsq	$205688069665150755, %rax
	movq	%rax, -9624(%rbp)
	movabsq	$3975216499736652228, %rax
	movq	%rax, -9616(%rbp)
	movabsq	$164550455732120604, %rax
	movq	%rax, -9608(%rbp)
	movabsq	$-4707700044647087405, %rax
	movq	%rax, -9600(%rbp)
	movabsq	$263280729171392966, %rax
	movq	%rax, -9592(%rbp)
	movabsq	$7301886408508061046, %rax
	movq	%rax, -9584(%rbp)
	movabsq	$210624583337114373, %rax
	movq	%rax, -9576(%rbp)
	movabsq	$-5226537317419282133, %rax
	movq	%rax, -9568(%rbp)
	movabsq	$168499666669691498, %rax
	movq	%rax, -9560(%rbp)
	movabsq	$-983762078387030766, %rax
	movq	%rax, -9552(%rbp)
	movabsq	$269599466671506397, %rax
	movq	%rax, -9544(%rbp)
	movabsq	$6591687966774196033, %rax
	movq	%rax, -9536(%rbp)
	movabsq	$215679573337205118, %rax
	movq	%rax, -9528(%rbp)
	movabsq	$-5794696070806374143, %rax
	movq	%rax, -9520(%rbp)
	movabsq	$172543658669764094, %rax
	movq	%rax, -9512(%rbp)
	movabsq	$9175230360419352987, %rax
	movq	%rax, -9504(%rbp)
	movabsq	$276069853871622551, %rax
	movq	%rax, -9496(%rbp)
	movabsq	$3650835473593572067, %rax
	movq	%rax, -9488(%rbp)
	movabsq	$220855883097298041, %rax
	movq	%rax, -9480(%rbp)
	movabsq	$-768680435867052670, %rax
	movq	%rax, -9472(%rbp)
	movabsq	$176684706477838432, %rax
	movq	%rax, -9464(%rbp)
	movabsq	$-4919237512129194595, %rax
	movq	%rax, -9456(%rbp)
	movabsq	$282695530364541492, %rax
	movq	%rax, -9448(%rbp)
	movabsq	$3443307619780464970, %rax
	movq	%rax, -9440(%rbp)
	movabsq	$226156424291633194, %rax
	movq	%rax, -9432(%rbp)
	movabsq	$6443994910566282300, %rax
	movq	%rax, -9424(%rbp)
	movabsq	$180925139433306555, %rax
	movq	%rax, -9416(%rbp)
	movabsq	$5155195928453025840, %rax
	movq	%rax, -9408(%rbp)
	movabsq	$144740111546645244, %rax
	movq	%rax, -9400(%rbp)
	movabsq	$-2819732958700889626, %rax
	movq	%rax, -9392(%rbp)
	movabsq	$231584178474632390, %rax
	movq	%rax, -9384(%rbp)
	movabsq	$-5945135181702622024, %rax
	movq	%rax, -9376(%rbp)
	movabsq	$185267342779705912, %rax
	movq	%rax, -9368(%rbp)
	movabsq	$2622589484121723027, %rax
	movq	%rax, -9360(%rbp)
	movabsq	$148213874223764730, %rax
	movq	%rax, -9352(%rbp)
	movabsq	$4196143174594756843, %rax
	movq	%rax, -9344(%rbp)
	movabsq	$237142198758023568, %rax
	movq	%rax, -9336(%rbp)
	movabsq	$-7711131904549925495, %rax
	movq	%rax, -9328(%rbp)
	movabsq	$189713759006418854, %rax
	movq	%rax, -9320(%rbp)
	movabsq	$-6168905523639940396, %rax
	movq	%rax, -9312(%rbp)
	movabsq	$151771007205135083, %rax
	movq	%rax, -9304(%rbp)
	movabsq	$-2491551208340083987, %rax
	movq	%rax, -9296(%rbp)
	movabsq	$242833611528216133, %rax
	movq	%rax, -9288(%rbp)
	movabsq	$1696107848069843133, %rax
	movq	%rax, -9280(%rbp)
	movabsq	$194266889222572907, %rax
	movq	%rax, -9272(%rbp)
	movabsq	$-6021811351027946140, %rax
	movq	%rax, -9264(%rbp)
	movabsq	$155413511378058325, %rax
	movq	%rax, -9256(%rbp)
	movabsq	$1433148282581017146, %rax
	movq	%rax, -9248(%rbp)
	movabsq	$248661618204893321, %rax
	movq	%rax, -9240(%rbp)
	movabsq	$-2542830188677096606, %rax
	movq	%rax, -9232(%rbp)
	movabsq	$198929294563914656, %rax
	movq	%rax, -9224(%rbp)
	movabsq	$9033782293284053685, %rax
	movq	%rax, -9216(%rbp)
	movabsq	$159143435651131725, %rax
	movq	%rax, -9208(%rbp)
	movabsq	$-3992692404455065721, %rax
	movq	%rax, -9200(%rbp)
	movabsq	$254629497041810760, %rax
	movq	%rax, -9192(%rbp)
	movabsq	$-6883502738305962900, %rax
	movq	%rax, -9184(%rbp)
	movabsq	$203703597633448608, %rax
	movq	%rax, -9176(%rbp)
	movabsq	$-1817453375902859996, %rax
	movq	%rax, -9168(%rbp)
	movabsq	$162962878106758886, %rax
	movq	%rax, -9160(%rbp)
	movabsq	$781423413297334329, %rax
	movq	%rax, -9152(%rbp)
	movabsq	$260740604970814219, %rax
	movq	%rax, -9144(%rbp)
	movabsq	$4314487545379777786, %rax
	movq	%rax, -9136(%rbp)
	movabsq	$208592483976651375, %rax
	movq	%rax, -9128(%rbp)
	movabsq	$3451590036303822229, %rax
	movq	%rax, -9120(%rbp)
	movabsq	$166873987181321100, %rax
	movq	%rax, -9112(%rbp)
	movabsq	$5522544058086115566, %rax
	movq	%rax, -9104(%rbp)
	movabsq	$266998379490113760, %rax
	movq	%rax, -9096(%rbp)
	movabsq	$4418035246468892453, %rax
	movq	%rax, -9088(%rbp)
	movabsq	$213598703592091008, %rax
	movq	%rax, -9080(%rbp)
	movabsq	$-7533618247050617007, %rax
	movq	%rax, -9072(%rbp)
	movabsq	$170878962873672806, %rax
	movq	%rax, -9064(%rbp)
	movabsq	$-8364440380539076888, %rax
	movq	%rax, -9056(%rbp)
	movabsq	$273406340597876490, %rax
	movq	%rax, -9048(%rbp)
	movabsq	$8065842954536379782, %rax
	movq	%rax, -9040(%rbp)
	movabsq	$218725072478301192, %rax
	movq	%rax, -9032(%rbp)
	movabsq	$-926023265854716821, %rax
	movq	%rax, -9024(%rbp)
	movabsq	$174980057982640953, %rax
	movq	%rax, -9016(%rbp)
	movabsq	$5897060404116273733, %rax
	movq	%rax, -9008(%rbp)
	movabsq	$279968092772225526, %rax
	movq	%rax, -9000(%rbp)
	movabsq	$1028299508551108663, %rax
	movq	%rax, -8992(%rbp)
	movabsq	$223974474217780421, %rax
	movq	%rax, -8984(%rbp)
	movabsq	$-2866709207901023392, %rax
	movq	%rax, -8976(%rbp)
	movabsq	$179179579374224336, %rax
	movq	%rax, -8968(%rbp)
	movabsq	$-897385917899727105, %rax
	movq	%rax, -8960(%rbp)
	movabsq	$286687326998758938, %rax
	movq	%rax, -8952(%rbp)
	movabsq	$2971440080422128639, %rax
	movq	%rax, -8944(%rbp)
	movabsq	$229349861599007151, %rax
	movq	%rax, -8936(%rbp)
	movabsq	$-1312196750404207412, %rax
	movq	%rax, -8928(%rbp)
	movabsq	$183479889279205720, %rax
	movq	%rax, -8920(%rbp)
	movabsq	$-4739106215065276252, %rax
	movq	%rax, -8912(%rbp)
	movabsq	$146783911423364576, %rax
	movq	%rax, -8904(%rbp)
	movabsq	$-3893221129362531681, %rax
	movq	%rax, -8896(%rbp)
	movabsq	$234854258277383322, %rax
	movq	%rax, -8888(%rbp)
	movabsq	$4264120725993795302, %rax
	movq	%rax, -8880(%rbp)
	movabsq	$187883406621906658, %rax
	movq	%rax, -8872(%rbp)
	movabsq	$-7656749863430694728, %rax
	movq	%rax, -8864(%rbp)
	movabsq	$150306725297525326, %rax
	movq	%rax, -8856(%rbp)
	movabsq	$-8561450966747201242, %rax
	movq	%rax, -8848(%rbp)
	movabsq	$240490760476040522, %rax
	movq	%rax, -8840(%rbp)
	movabsq	$529536856086059653, %rax
	movq	%rax, -8832(%rbp)
	movabsq	$192392608380832418, %rax
	movq	%rax, -8824(%rbp)
	movabsq	$7802327114352668369, %rax
	movq	%rax, -8816(%rbp)
	movabsq	$153914086704665934, %rax
	movq	%rax, -8808(%rbp)
	movabsq	$1415676938738538420, %rax
	movq	%rax, -8800(%rbp)
	movabsq	$246262538727465495, %rax
	movq	%rax, -8792(%rbp)
	movabsq	$1132541550990830736, %rax
	movq	%rax, -8784(%rbp)
	movabsq	$197010030981972396, %rax
	movq	%rax, -8776(%rbp)
	movabsq	$-2783315573949245734, %rax
	movq	%rax, -8768(%rbp)
	movabsq	$157608024785577916, %rax
	movq	%rax, -8760(%rbp)
	movabsq	$-763956103576882852, %rax
	movq	%rax, -8752(%rbp)
	movabsq	$252172839656924666, %rax
	movq	%rax, -8744(%rbp)
	movabsq	$-7989862512345326928, %rax
	movq	%rax, -8736(%rbp)
	movabsq	$201738271725539733, %rax
	movq	%rax, -8728(%rbp)
	movabsq	$-2702541195134351219, %rax
	movq	%rax, -8720(%rbp)
	movabsq	$161390617380431786, %rax
	movq	%rax, -8712(%rbp)
	movabsq	$-634717097473051627, %rax
	movq	%rax, -8704(%rbp)
	movabsq	$258224987808690858, %rax
	movq	%rax, -8696(%rbp)
	movabsq	$3181575136763469022, %rax
	movq	%rax, -8688(%rbp)
	movabsq	$206579990246952687, %rax
	movq	%rax, -8680(%rbp)
	movabsq	$-4833437520073045429, %rax
	movq	%rax, -8672(%rbp)
	movabsq	$165263992197562149, %rax
	movq	%rax, -8664(%rbp)
	movabsq	$-7733500032116872687, %rax
	movq	%rax, -8656(%rbp)
	movabsq	$264422387516099439, %rax
	movq	%rax, -8648(%rbp)
	movabsq	$-6186800025693498149, %rax
	movq	%rax, -8640(%rbp)
	movabsq	$211537910012879551, %rax
	movq	%rax, -8632(%rbp)
	movabsq	$6118606423670932450, %rax
	movq	%rax, -8624(%rbp)
	movabsq	$169230328010303641, %rax
	movq	%rax, -8616(%rbp)
	movabsq	$2411072648389671274, %rax
	movq	%rax, -8608(%rbp)
	movabsq	$270768524816485826, %rax
	movq	%rax, -8600(%rbp)
	movabsq	$-1760490696030173304, %rax
	movq	%rax, -8592(%rbp)
	movabsq	$216614819853188660, %rax
	movq	%rax, -8584(%rbp)
	movabsq	$-5097741371566048966, %rax
	movq	%rax, -8576(%rbp)
	movabsq	$173291855882550928, %rax
	movq	%rax, -8568(%rbp)
	movabsq	$-777688565021857700, %rax
	movq	%rax, -8560(%rbp)
	movabsq	$277266969412081485, %rax
	movq	%rax, -8552(%rbp)
	movabsq	$-4311499666759396483, %rax
	movq	%rax, -8544(%rbp)
	movabsq	$221813575529665188, %rax
	movq	%rax, -8536(%rbp)
	movabsq	$240149081334393137, %rax
	movq	%rax, -8528(%rbp)
	movabsq	$177450860423732151, %rax
	movq	%rax, -8520(%rbp)
	movabsq	$-6994459099348791628, %rax
	movq	%rax, -8512(%rbp)
	movabsq	$283921376677971441, %rax
	movq	%rax, -8504(%rbp)
	movabsq	$5472479164746697667, %rax
	movq	%rax, -8496(%rbp)
	movabsq	$227137101342377153, %rax
	movq	%rax, -8488(%rbp)
	movabsq	$-6690063112428372836, %rax
	movq	%rax, -8480(%rbp)
	movabsq	$181709681073901722, %rax
	movq	%rax, -8472(%rbp)
	movabsq	$2026647139541122378, %rax
	movq	%rax, -8464(%rbp)
	movabsq	$145367744859121378, %rax
	movq	%rax, -8456(%rbp)
	movabsq	$-446713391476114519, %rax
	movq	%rax, -8448(%rbp)
	movabsq	$232588391774594204, %rax
	movq	%rax, -8440(%rbp)
	movabsq	$-357370713180891615, %rax
	movq	%rax, -8432(%rbp)
	movabsq	$186070713419675363, %rax
	movq	%rax, -8424(%rbp)
	movabsq	$3403452244197197031, %rax
	movq	%rax, -8416(%rbp)
	movabsq	$148856570735740291, %rax
	movq	%rax, -8408(%rbp)
	movabsq	$-1933174038768305396, %rax
	movq	%rax, -8400(%rbp)
	movabsq	$238170513177184465, %rax
	movq	%rax, -8392(%rbp)
	movabsq	$-5235888045756554640, %rax
	movq	%rax, -8384(%rbp)
	movabsq	$190536410541747572, %rax
	movq	%rax, -8376(%rbp)
	movabsq	$3189987192878576934, %rax
	movq	%rax, -8368(%rbp)
	movabsq	$152429128433398058, %rax
	movq	%rax, -8360(%rbp)
	movabsq	$1414630693863812771, %rax
	movq	%rax, -8352(%rbp)
	movabsq	$243886605493436893, %rax
	movq	%rax, -8344(%rbp)
	movabsq	$8510402184574870864, %rax
	movq	%rax, -8336(%rbp)
	movabsq	$195109284394749514, %rax
	movq	%rax, -8328(%rbp)
	movabsq	$-7949073511307744602, %rax
	movq	%rax, -8320(%rbp)
	movabsq	$156087427515799611, %rax
	movq	%rax, -8312(%rbp)
	movabsq	$-9029168803350481040, %rax
	movq	%rax, -8304(%rbp)
	movabsq	$249739884025279378, %rax
	movq	%rax, -8296(%rbp)
	movabsq	$-3533986227938474509, %rax
	movq	%rax, -8288(%rbp)
	movabsq	$199791907220223502, %rax
	movq	%rax, -8280(%rbp)
	movabsq	$4551508647133041040, %rax
	movq	%rax, -8272(%rbp)
	movabsq	$159833525776178802, %rax
	movq	%rax, -8264(%rbp)
	movabsq	$-7474981423554775630, %rax
	movq	%rax, -8256(%rbp)
	movabsq	$255733641241886083, %rax
	movq	%rax, -8248(%rbp)
	movabsq	$-2290636324101910181, %rax
	movq	%rax, -8240(%rbp)
	movabsq	$204586912993508866, %rax
	movq	%rax, -8232(%rbp)
	movabsq	$-9211206688765348791, %rax
	movq	%rax, -8224(%rbp)
	movabsq	$163669530394807093, %rax
	movq	%rax, -8216(%rbp)
	movabsq	$-7359233072540737419, %rax
	movq	%rax, -8208(%rbp)
	movabsq	$261871248631691349, %rax
	movq	%rax, -8200(%rbp)
	movabsq	$-5887386458032589935, %rax
	movq	%rax, -8192(%rbp)
	movabsq	$209496998905353079, %rax
	movq	%rax, -8184(%rbp)
	movabsq	$-4709909166426071948, %rax
	movq	%rax, -8176(%rbp)
	movabsq	$167597599124282463, %rax
	movq	%rax, -8168(%rbp)
	movabsq	$-157157036797894471, %rax
	movq	%rax, -8160(%rbp)
	movabsq	$268156158598851941, %rax
	movq	%rax, -8152(%rbp)
	movabsq	$-7504423258922136223, %rax
	movq	%rax, -8144(%rbp)
	movabsq	$214524926879081553, %rax
	movq	%rax, -8136(%rbp)
	movabsq	$-2314189792395798655, %rax
	movq	%rax, -8128(%rbp)
	movabsq	$171619941503265242, %rax
	movq	%rax, -8120(%rbp)
	movabsq	$-7392052482575188172, %rax
	movq	%rax, -8112(%rbp)
	movabsq	$274591906405224388, %rax
	movq	%rax, -8104(%rbp)
	movabsq	$-2224293171318240214, %rax
	movq	%rax, -8096(%rbp)
	movabsq	$219673525124179510, %rax
	movq	%rax, -8088(%rbp)
	movabsq	$-5468783351796502494, %rax
	movq	%rax, -8080(%rbp)
	movabsq	$175738820099343608, %rax
	movq	%rax, -8072(%rbp)
	movabsq	$-1371355733390583345, %rax
	movq	%rax, -8064(%rbp)
	movabsq	$281182112158949773, %rax
	movq	%rax, -8056(%rbp)
	movabsq	$2592264228029443648, %rax
	movq	%rax, -8048(%rbp)
	movabsq	$224945689727159819, %rax
	movq	%rax, -8040(%rbp)
	movabsq	$5763160197165465241, %rax
	movq	%rax, -8032(%rbp)
	movabsq	$179956551781727855, %rax
	movq	%rax, -8024(%rbp)
	movabsq	$9221056315464744386, %rax
	movq	%rax, -8016(%rbp)
	movabsq	$287930482850764568, %rax
	movq	%rax, -8008(%rbp)
	movabsq	$-3691201391853935461, %rax
	movq	%rax, -8000(%rbp)
	movabsq	$230344386280611654, %rax
	movq	%rax, -7992(%rbp)
	movabsq	$-2952961113483148369, %rax
	movq	%rax, -7984(%rbp)
	movabsq	$184275509024489323, %rax
	movq	%rax, -7976(%rbp)
	movabsq	$1326979923955391628, %rax
	movq	%rax, -7968(%rbp)
	movabsq	$147420407219591459, %rax
	movq	%rax, -7960(%rbp)
	movabsq	$-8944878565897104364, %rax
	movq	%rax, -7952(%rbp)
	movabsq	$235872651551346334, %rax
	movq	%rax, -7944(%rbp)
	movabsq	$-7155902852717683491, %rax
	movq	%rax, -7936(%rbp)
	movabsq	$188698121241077067, %rax
	movq	%rax, -7928(%rbp)
	movabsq	$1653975347309673853, %rax
	movq	%rax, -7920(%rbp)
	movabsq	$150958496992861654, %rax
	movq	%rax, -7912(%rbp)
	movabsq	$-8421685888530252805, %rax
	movq	%rax, -7904(%rbp)
	movabsq	$241533595188578646, %rax
	movq	%rax, -7896(%rbp)
	movabsq	$4330697733401528726, %rax
	movq	%rax, -7888(%rbp)
	movabsq	$193226876150862917, %rax
	movq	%rax, -7880(%rbp)
	movabsq	$-3914139442762597665, %rax
	movq	%rax, -7872(%rbp)
	movabsq	$154581500920690333, %rax
	movq	%rax, -7864(%rbp)
	movabsq	$1116074521063664381, %rax
	movq	%rax, -7856(%rbp)
	movabsq	$247330401473104534, %rax
	movq	%rax, -7848(%rbp)
	movabsq	$4582208431592841828, %rax
	movq	%rax, -7840(%rbp)
	movabsq	$197864321178483627, %rax
	movq	%rax, -7832(%rbp)
	movabsq	$-3712930884209547184, %rax
	movq	%rax, -7824(%rbp)
	movabsq	$158291456942786901, %rax
	movq	%rax, -7816(%rbp)
	movabsq	$-2251340599993365171, %rax
	movq	%rax, -7808(%rbp)
	movabsq	$253266331108459042, %rax
	movq	%rax, -7800(%rbp)
	movabsq	$5577625149489128510, %rax
	movq	%rax, -7792(%rbp)
	movabsq	$202613064886767234, %rax
	movq	%rax, -7784(%rbp)
	movabsq	$8151448934333213131, %rax
	movq	%rax, -7776(%rbp)
	movabsq	$162090451909413787, %rax
	movq	%rax, -7768(%rbp)
	movabsq	$-1715076964034500283, %rax
	movq	%rax, -7760(%rbp)
	movabsq	$259344723055062059, %rax
	movq	%rax, -7752(%rbp)
	movabsq	$-1372061571227600226, %rax
	movq	%rax, -7744(%rbp)
	movabsq	$207475778444049647, %rax
	movq	%rax, -7736(%rbp)
	movabsq	$6281048372501740465, %rax
	movq	%rax, -7728(%rbp)
	movabsq	$165980622755239718, %rax
	movq	%rax, -7720(%rbp)
	movabsq	$6360328581260874421, %rax
	movq	%rax, -7712(%rbp)
	movabsq	$265568996408383549, %rax
	movq	%rax, -7704(%rbp)
	movabsq	$8777611679750609860, %rax
	movq	%rax, -7696(%rbp)
	movabsq	$212455197126706839, %rax
	movq	%rax, -7688(%rbp)
	movabsq	$-7735305915167153405, %rax
	movq	%rax, -7680(%rbp)
	movabsq	$169964157701365471, %rax
	movq	%rax, -7672(%rbp)
	movabsq	$-8687140649525535124, %rax
	movq	%rax, -7664(%rbp)
	movabsq	$271942652322184754, %rax
	movq	%rax, -7656(%rbp)
	movabsq	$-6949712519620428099, %rax
	movq	%rax, -7648(%rbp)
	movabsq	$217554121857747803, %rax
	movq	%rax, -7640(%rbp)
	movabsq	$-1870421200954432156, %rax
	movq	%rax, -7632(%rbp)
	movabsq	$174043297486198242, %rax
	movq	%rax, -7624(%rbp)
	movabsq	$-6682022736269001774, %rax
	movq	%rax, -7616(%rbp)
	movabsq	$278469275977917188, %rax
	movq	%rax, -7608(%rbp)
	movabsq	$-1656269374273291096, %rax
	movq	%rax, -7600(%rbp)
	movabsq	$222775420782333750, %rax
	movq	%rax, -7592(%rbp)
	movabsq	$-5014364314160543200, %rax
	movq	%rax, -7584(%rbp)
	movabsq	$178220336625867000, %rax
	movq	%rax, -7576(%rbp)
	movabsq	$3045063541568861850, %rax
	movq	%rax, -7568(%rbp)
	movabsq	$285152538601387201, %rax
	movq	%rax, -7560(%rbp)
	movabsq	$-1253297981486820843, %rax
	movq	%rax, -7552(%rbp)
	movabsq	$228122030881109760, %rax
	movq	%rax, -7544(%rbp)
	movabsq	$-4691987199931366998, %rax
	movq	%rax, -7536(%rbp)
	movabsq	$182497624704887808, %rax
	movq	%rax, -7528(%rbp)
	movabsq	$-64240945203183275, %rax
	movq	%rax, -7520(%rbp)
	movabsq	$145998099763910246, %rax
	movq	%rax, -7512(%rbp)
	movabsq	$3586563302416817083, %rax
	movq	%rax, -7504(%rbp)
	movabsq	$233596959622256395, %rax
	movq	%rax, -7496(%rbp)
	movabsq	$2869250641933453667, %rax
	movq	%rax, -7488(%rbp)
	movabsq	$186877567697805116, %rax
	movq	%rax, -7480(%rbp)
	movabsq	$-1393948301195147390, %rax
	movq	%rax, -7472(%rbp)
	movabsq	$149502054158244092, %rax
	movq	%rax, -7464(%rbp)
	movabsq	$-5919666096654146147, %rax
	movq	%rax, -7456(%rbp)
	movabsq	$239203286653190548, %rax
	movq	%rax, -7448(%rbp)
	movabsq	$-1046384062581406594, %rax
	movq	%rax, -7440(%rbp)
	movabsq	$191362629322552438, %rax
	movq	%rax, -7432(%rbp)
	movabsq	$2852241564676785048, %rax
	movq	%rax, -7424(%rbp)
	movabsq	$153090103458041951, %rax
	movq	%rax, -7416(%rbp)
	movabsq	$-2815111126000964570, %rax
	movq	%rax, -7408(%rbp)
	movabsq	$244944165532867121, %rax
	movq	%rax, -7400(%rbp)
	movabsq	$8815957543424959314, %rax
	movq	%rax, -7392(%rbp)
	movabsq	$195955332426293697, %rax
	movq	%rax, -7384(%rbp)
	movabsq	$-325931594743853195, %rax
	movq	%rax, -7376(%rbp)
	movabsq	$156764265941034957, %rax
	movq	%rax, -7368(%rbp)
	movabsq	$-4210839366332075436, %rax
	movq	%rax, -7360(%rbp)
	movabsq	$250822825505655932, %rax
	movq	%rax, -7352(%rbp)
	movabsq	$4010026136418160298, %rax
	movq	%rax, -7344(%rbp)
	movabsq	$200658260404524746, %rax
	movq	%rax, -7336(%rbp)
	movabsq	$-481327905607382085, %rax
	movq	%rax, -7328(%rbp)
	movabsq	$160526608323619796, %rax
	movq	%rax, -7320(%rbp)
	movabsq	$2919224165770098987, %rax
	movq	%rax, -7312(%rbp)
	movabsq	$256842573317791675, %rax
	movq	%rax, -7304(%rbp)
	movabsq	$2335379332616079190, %rax
	movq	%rax, -7296(%rbp)
	movabsq	$205474058654233340, %rax
	movq	%rax, -7288(%rbp)
	movabsq	$1868303466092863352, %rax
	movq	%rax, -7280(%rbp)
	movabsq	$164379246923386672, %rax
	movq	%rax, -7272(%rbp)
	movabsq	$6678634360490491686, %rax
	movq	%rax, -7264(%rbp)
	movabsq	$263006795077418675, %rax
	movq	%rax, -7256(%rbp)
	movabsq	$5342907488392393349, %rax
	movq	%rax, -7248(%rbp)
	movabsq	$210405436061934940, %rax
	movq	%rax, -7240(%rbp)
	movabsq	$4274325990713914679, %rax
	movq	%rax, -7232(%rbp)
	movabsq	$168324348849547952, %rax
	movq	%rax, -7224(%rbp)
	movabsq	$-7918473673825377807, %rax
	movq	%rax, -7216(%rbp)
	movabsq	$269318958159276723, %rax
	movq	%rax, -7208(%rbp)
	movabsq	$-2645430124318391922, %rax
	movq	%rax, -7200(%rbp)
	movabsq	$215455166527421378, %rax
	movq	%rax, -7192(%rbp)
	movabsq	$1573004715287196786, %rax
	movq	%rax, -7184(%rbp)
	movabsq	$172364133221937103, %rax
	movq	%rax, -7176(%rbp)
	movabsq	$-1172541270282395466, %rax
	movq	%rax, -7168(%rbp)
	movabsq	$275782613155099364, %rax
	movq	%rax, -7160(%rbp)
	movabsq	$-938033016225916373, %rax
	movq	%rax, -7152(%rbp)
	movabsq	$220626090524079491, %rax
	movq	%rax, -7144(%rbp)
	movabsq	$-8129124042464553745, %rax
	movq	%rax, -7136(%rbp)
	movabsq	$176500872419263593, %rax
	movq	%rax, -7128(%rbp)
	movabsq	$-5627900838459465345, %rax
	movq	%rax, -7120(%rbp)
	movabsq	$282401395870821749, %rax
	movq	%rax, -7112(%rbp)
	movabsq	$-4502320670767572276, %rax
	movq	%rax, -7104(%rbp)
	movabsq	$225921116696657399, %rax
	movq	%rax, -7096(%rbp)
	movabsq	$-3601856536614057821, %rax
	movq	%rax, -7088(%rbp)
	movabsq	$180736893357325919, %rax
	movq	%rax, -7080(%rbp)
	movabsq	$-2881485229291246257, %rax
	movq	%rax, -7072(%rbp)
	movabsq	$144589514685860735, %rax
	movq	%rax, -7064(%rbp)
	movabsq	$6457670077359736959, %rax
	movq	%rax, -7056(%rbp)
	movabsq	$231343223497377177, %rax
	movq	%rax, -7048(%rbp)
	movabsq	$-2212561567596031079, %rax
	movq	%rax, -7040(%rbp)
	movabsq	$185074578797901741, %rax
	movq	%rax, -7032(%rbp)
	movabsq	$-9148746883560645510, %rax
	movq	%rax, -7024(%rbp)
	movabsq	$148059663038321393, %rax
	movq	%rax, -7016(%rbp)
	movabsq	$-7259297384213212170, %rax
	movq	%rax, -7008(%rbp)
	movabsq	$236895460861314229, %rax
	movq	%rax, -7000(%rbp)
	movabsq	$-5807437907370569736, %rax
	movq	%rax, -6992(%rbp)
	movabsq	$189516368689051383, %rax
	movq	%rax, -6984(%rbp)
	movabsq	$-956601511154545465, %rax
	movq	%rax, -6976(%rbp)
	movabsq	$151613094951241106, %rax
	movq	%rax, -6968(%rbp)
	movabsq	$2158786396894637579, %rax
	movq	%rax, -6960(%rbp)
	movabsq	$242580951921985771, %rax
	movq	%rax, -6952(%rbp)
	movabsq	$-1962319697226200260, %rax
	movq	%rax, -6944(%rbp)
	movabsq	$194064761537588616, %rax
	movq	%rax, -6936(%rbp)
	movabsq	$-8948553387264780854, %rax
	movq	%rax, -6928(%rbp)
	movabsq	$155251809230070893, %rax
	movq	%rax, -6920(%rbp)
	movabsq	$-6938987790139828721, %rax
	movq	%rax, -6912(%rbp)
	movabsq	$248402894768113429, %rax
	movq	%rax, -6904(%rbp)
	movabsq	$-5551190232111862977, %rax
	movq	%rax, -6896(%rbp)
	movabsq	$198722315814490743, %rax
	movq	%rax, -6888(%rbp)
	movabsq	$-751603370947580058, %rax
	movq	%rax, -6880(%rbp)
	movabsq	$158977852651592594, %rax
	movq	%rax, -6872(%rbp)
	movabsq	$-1202565393516128093, %rax
	movq	%rax, -6864(%rbp)
	movabsq	$254364564242548151, %rax
	movq	%rax, -6856(%rbp)
	movabsq	$-8340749944296723121, %rax
	movq	%rax, -6848(%rbp)
	movabsq	$203491651394038521, %rax
	movq	%rax, -6840(%rbp)
	movabsq	$4395446488788352473, %rax
	movq	%rax, -6832(%rbp)
	movabsq	$162793321115230817, %rax
	movq	%rax, -6824(%rbp)
	movabsq	$-7724680876906277336, %rax
	movq	%rax, -6816(%rbp)
	movabsq	$260469313784369307, %rax
	movq	%rax, -6808(%rbp)
	movabsq	$1198952927958798777, %rax
	movq	%rax, -6800(%rbp)
	movabsq	$208375451027495446, %rax
	movq	%rax, -6792(%rbp)
	movabsq	$-2730186472374871301, %rax
	movq	%rax, -6784(%rbp)
	movabsq	$166700360821996356, %rax
	movq	%rax, -6776(%rbp)
	movabsq	$-678949541057883759, %rax
	movq	%rax, -6768(%rbp)
	movabsq	$266720577315194170, %rax
	movq	%rax, -6760(%rbp)
	movabsq	$-4232508447588217330, %rax
	movq	%rax, -6752(%rbp)
	movabsq	$213376461852155336, %rax
	movq	%rax, -6744(%rbp)
	movabsq	$7682039686155157106, %rax
	movq	%rax, -6736(%rbp)
	movabsq	$170701169481724269, %rax
	movq	%rax, -6728(%rbp)
	movabsq	$1223217053622520399, %rax
	movq	%rax, -6720(%rbp)
	movabsq	$273121871170758831, %rax
	movq	%rax, -6712(%rbp)
	movabsq	$-2710775171843894004, %rax
	movq	%rax, -6704(%rbp)
	movabsq	$218497496936607064, %rax
	movq	%rax, -6696(%rbp)
	movabsq	$-2168620137475115203, %rax
	movq	%rax, -6688(%rbp)
	movabsq	$174797997549285651, %rax
	movq	%rax, -6680(%rbp)
	movabsq	$219556594781725998, %rax
	movq	%rax, -6672(%rbp)
	movabsq	$279676796078857043, %rax
	movq	%rax, -6664(%rbp)
	movabsq	$7554342905309201445, %rax
	movq	%rax, -6656(%rbp)
	movabsq	$223741436863085634, %rax
	movq	%rax, -6648(%rbp)
	movabsq	$-8713920934720280137, %rax
	movq	%rax, -6640(%rbp)
	movabsq	$178993149490468507, %rax
	movq	%rax, -6632(%rbp)
	movabsq	$815121763415193074, %rax
	movq	%rax, -6624(%rbp)
	movabsq	$286389039184749612, %rax
	movq	%rax, -6616(%rbp)
	movabsq	$-6726600218751666187, %rax
	movq	%rax, -6608(%rbp)
	movabsq	$229111231347799689, %rax
	movq	%rax, -6600(%rbp)
	movabsq	$-5381280175001332950, %rax
	movq	%rax, -6592(%rbp)
	movabsq	$183288985078239751, %rax
	movq	%rax, -6584(%rbp)
	movabsq	$6763022304224664610, %rax
	movq	%rax, -6576(%rbp)
	movabsq	$146631188062591801, %rax
	movq	%rax, -6568(%rbp)
	movabsq	$3442138057275642729, %rax
	movq	%rax, -6560(%rbp)
	movabsq	$234609900900146882, %rax
	movq	%rax, -6552(%rbp)
	movabsq	$-4624987183663306463, %rax
	movq	%rax, -6544(%rbp)
	movabsq	$187687920720117505, %rax
	movq	%rax, -6536(%rbp)
	movabsq	$-7389338561672555494, %rax
	movq	%rax, -6528(%rbp)
	movabsq	$150150336576094004, %rax
	movq	%rax, -6520(%rbp)
	movabsq	$6623802375033462826, %rax
	movq	%rax, -6512(%rbp)
	movabsq	$240240538521750407, %rax
	movq	%rax, -6504(%rbp)
	movabsq	$-2079655729457050385, %rax
	movq	%rax, -6496(%rbp)
	movabsq	$192192430817400325, %rax
	movq	%rax, -6488(%rbp)
	movabsq	$-5353073398307550631, %rax
	movq	%rax, -6480(%rbp)
	movabsq	$153753944653920260, %rax
	movq	%rax, -6472(%rbp)
	movabsq	$2503129006933649959, %rax
	movq	%rax, -6464(%rbp)
	movabsq	$246006311446272417, %rax
	movq	%rax, -6456(%rbp)
	movabsq	$-5376194423936900679, %rax
	movq	%rax, -6448(%rbp)
	movabsq	$196805049157017933, %rax
	movq	%rax, -6440(%rbp)
	movabsq	$-611606724407610220, %rax
	movq	%rax, -6432(%rbp)
	movabsq	$157444039325614346, %rax
	movq	%rax, -6424(%rbp)
	movabsq	$2710778055689733971, %rax
	movq	%rax, -6416(%rbp)
	movabsq	$251910462920982955, %rax
	movq	%rax, -6408(%rbp)
	movabsq	$2168622444551787177, %rax
	movq	%rax, -6400(%rbp)
	movabsq	$201528370336786364, %rax
	movq	%rax, -6392(%rbp)
	movabsq	$5424246770383340065, %rax
	movq	%rax, -6384(%rbp)
	movabsq	$161222696269429091, %rax
	movq	%rax, -6376(%rbp)
	movabsq	$1300097203129523457, %rax
	movq	%rax, -6368(%rbp)
	movabsq	$257956314031086546, %rax
	movq	%rax, -6360(%rbp)
	movabsq	$-2649271052238291558, %rax
	movq	%rax, -6352(%rbp)
	movabsq	$206365051224869236, %rax
	movq	%rax, -6344(%rbp)
	movabsq	$8948629602435097724, %rax
	movq	%rax, -6336(%rbp)
	movabsq	$165092040979895389, %rax
	movq	%rax, -6328(%rbp)
	movabsq	$3249760919670425388, %rax
	movq	%rax, -6320(%rbp)
	movabsq	$264147265567832623, %rax
	movq	%rax, -6312(%rbp)
	movabsq	$-8468237708489390659, %rax
	movq	%rax, -6304(%rbp)
	movabsq	$211317812454266098, %rax
	movq	%rax, -6296(%rbp)
	movabsq	$-3085241352049602204, %rax
	movq	%rax, -6288(%rbp)
	movabsq	$169054249963412878, %rax
	movq	%rax, -6280(%rbp)
	movabsq	$2442311466204457120, %rax
	movq	%rax, -6272(%rbp)
	movabsq	$270486799941460606, %rax
	movq	%rax, -6264(%rbp)
	movabsq	$-1735499641778344627, %rax
	movq	%rax, -6256(%rbp)
	movabsq	$216389439953168484, %rax
	movq	%rax, -6248(%rbp)
	movabsq	$-1388399713422675702, %rax
	movq	%rax, -6240(%rbp)
	movabsq	$173111551962534787, %rax
	movq	%rax, -6232(%rbp)
	movabsq	$-5910788356218191446, %rax
	movq	%rax, -6224(%rbp)
	movabsq	$276978483140055660, %rax
	movq	%rax, -6216(%rbp)
	movabsq	$-8417979499716463480, %rax
	movq	%rax, -6208(%rbp)
	movabsq	$221582786512044528, %rax
	movq	%rax, -6200(%rbp)
	movabsq	$-3045034785031260461, %rax
	movq	%rax, -6192(%rbp)
	movabsq	$177266229209635622, %rax
	movq	%rax, -6184(%rbp)
	movabsq	$-8561404470791927061, %rax
	movq	%rax, -6176(%rbp)
	movabsq	$283625966735416996, %rax
	movq	%rax, -6168(%rbp)
	movabsq	$4218922867592189321, %rax
	movq	%rax, -6160(%rbp)
	movabsq	$226900773388333597, %rax
	movq	%rax, -6152(%rbp)
	movabsq	$-4003559335410069189, %rax
	movq	%rax, -6144(%rbp)
	movabsq	$181520618710666877, %rax
	movq	%rax, -6136(%rbp)
	movabsq	$4175850161155765295, %rax
	movq	%rax, -6128(%rbp)
	movabsq	$145216494968533502, %rax
	movq	%rax, -6120(%rbp)
	movabsq	$-8076035001118416821, %rax
	movq	%rax, -6112(%rbp)
	movabsq	$232346391949653603, %rax
	movq	%rax, -6104(%rbp)
	movabsq	$-2771479186152823134, %rax
	movq	%rax, -6096(%rbp)
	movabsq	$185877113559722882, %rax
	movq	%rax, -6088(%rbp)
	movabsq	$5161514280561562140, %rax
	movq	%rax, -6080(%rbp)
	movabsq	$148701690847778306, %rax
	movq	%rax, -6072(%rbp)
	movabsq	$879725219414678777, %rax
	movq	%rax, -6064(%rbp)
	movabsq	$237922705356445290, %rax
	movq	%rax, -6056(%rbp)
	movabsq	$703780175531743021, %rax
	movq	%rax, -6048(%rbp)
	movabsq	$190338164285156232, %rax
	movq	%rax, -6040(%rbp)
	movabsq	$-6815673489058426229, %rax
	movq	%rax, -6032(%rbp)
	movabsq	$152270531428124985, %rax
	movq	%rax, -6024(%rbp)
	movabsq	$162968861732249003, %rax
	movq	%rax, -6016(%rbp)
	movabsq	$243632850284999977, %rax
	movq	%rax, -6008(%rbp)
	movabsq	$-7248322540098021444, %rax
	movq	%rax, -6000(%rbp)
	movabsq	$194906280227999981, %rax
	movq	%rax, -5992(%rbp)
	movabsq	$5269388412147313814, %rax
	movq	%rax, -5984(%rbp)
	movabsq	$155925024182399985, %rax
	movq	%rax, -5976(%rbp)
	movabsq	$8431021459435702103, %rax
	movq	%rax, -5968(%rbp)
	movabsq	$249480038691839976, %rax
	movq	%rax, -5960(%rbp)
	movabsq	$3055468352806651359, %rax
	movq	%rax, -5952(%rbp)
	movabsq	$199584030953471981, %rax
	movq	%rax, -5944(%rbp)
	movabsq	$-1244974132496589236, %rax
	movq	%rax, -5936(%rbp)
	movabsq	$159667224762777584, %rax
	movq	%rax, -5928(%rbp)
	movabsq	$-1991958611994542778, %rax
	movq	%rax, -5920(%rbp)
	movabsq	$255467559620444135, %rax
	movq	%rax, -5912(%rbp)
	movabsq	$-5282915704337544545, %rax
	movq	%rax, -5904(%rbp)
	movabsq	$204374047696355308, %rax
	movq	%rax, -5896(%rbp)
	movabsq	$-536983748728125313, %rax
	movq	%rax, -5888(%rbp)
	movabsq	$163499238157084246, %rax
	movq	%rax, -5880(%rbp)
	movabsq	$2830174816776909822, %rax
	movq	%rax, -5872(%rbp)
	movabsq	$261598781051334795, %rax
	movq	%rax, -5864(%rbp)
	movabsq	$2264139853421527858, %rax
	movq	%rax, -5856(%rbp)
	movabsq	$209279024841067836, %rax
	movq	%rax, -5848(%rbp)
	movabsq	$-1878036932004688037, %rax
	movq	%rax, -5840(%rbp)
	movabsq	$167423219872854268, %rax
	movq	%rax, -5832(%rbp)
	movabsq	$4373838538276319787, %rax
	movq	%rax, -5824(%rbp)
	movabsq	$267877151796566830, %rax
	movq	%rax, -5816(%rbp)
	movabsq	$3499070830621055830, %rax
	movq	%rax, -5808(%rbp)
	movabsq	$214301721437253464, %rax
	movq	%rax, -5800(%rbp)
	movabsq	$6488605479238754987, %rax
	movq	%rax, -5792(%rbp)
	movabsq	$171441377149802771, %rax
	movq	%rax, -5784(%rbp)
	movabsq	$3003071137298187333, %rax
	movq	%rax, -5776(%rbp)
	movabsq	$274306203439684434, %rax
	movq	%rax, -5768(%rbp)
	movabsq	$6091805724580460189, %rax
	movq	%rax, -5760(%rbp)
	movabsq	$219444962751747547, %rax
	movq	%rax, -5752(%rbp)
	movabsq	$-2505253049819452495, %rax
	movq	%rax, -5744(%rbp)
	movabsq	$175555970201398037, %rax
	movq	%rax, -5736(%rbp)
	movabsq	$-7697753694453034315, %rax
	movq	%rax, -5728(%rbp)
	movabsq	$280889552322236860, %rax
	movq	%rax, -5720(%rbp)
	movabsq	$8599192303405213841, %rax
	movq	%rax, -5712(%rbp)
	movabsq	$224711641857789488, %rax
	movq	%rax, -5704(%rbp)
	movabsq	$-4188692601501559897, %rax
	movq	%rax, -5696(%rbp)
	movabsq	$179769313486231590, %rax
	movq	%rax, -5688(%rbp)
	leaq	-11040(%rbp), %rax
	leaq	-10352(%rbp), %rdx
	movq	%rdx, %r8
	movl	$16, %ecx
	movl	$292, %edx
	movl	$292, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-11040(%rbp), %rax
	movq	-11032(%rbp), %rdx
	movq	%rax, _const_strconv__pow5_inv_split_64(%rip)
	movq	%rdx, 8+_const_strconv__pow5_inv_split_64(%rip)
	movq	-11024(%rbp), %rax
	movq	-11016(%rbp), %rdx
	movq	%rax, 16+_const_strconv__pow5_inv_split_64(%rip)
	movq	%rdx, 24+_const_strconv__pow5_inv_split_64(%rip)
	leaq	.LC550(%rip), %rax
	movq	%rax, _const_digit_pairs(%rip)
	movl	$200, 8+_const_digit_pairs(%rip)
	movl	$1, 12+_const_digit_pairs(%rip)
	leaq	-10352(%rbp), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	memdup
	movq	%rax, %rdx
	leaq	-11040(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	I_None___to_Interface_IError
	movq	-11040(%rbp), %rax
	movq	-11032(%rbp), %rdx
	movq	%rax, _const_none__(%rip)
	movq	%rdx, 8+_const_none__(%rip)
	movq	-11024(%rbp), %rax
	movq	-11016(%rbp), %rdx
	movq	%rax, 16+_const_none__(%rip)
	movq	%rdx, 24+_const_none__(%rip)
	leaq	.LC552(%rip), %rax
	movq	%rax, _const_flag__space(%rip)
	movl	$28, 8+_const_flag__space(%rip)
	movl	$1, 12+_const_flag__space(%rip)
	leaq	.LC553(%rip), %rax
	movq	%rax, _const_flag__underline(%rip)
	movl	$47, 8+_const_flag__underline(%rip)
	movl	$1, 12+_const_flag__underline(%rip)
	leaq	.LC30(%rip), %rax
	movq	%rax, _const_os__empty_str(%rip)
	movl	$0, 8+_const_os__empty_str(%rip)
	movl	$1, 12+_const_os__empty_str(%rip)
	leaq	.LC554(%rip), %rax
	movq	%rax, _const_os__dot_str(%rip)
	movl	$1, 8+_const_os__dot_str(%rip)
	movl	$1, 12+_const_os__dot_str(%rip)
	leaq	.LC195(%rip), %rax
	movq	%rax, _const_os__path_separator(%rip)
	movl	$1, 8+_const_os__path_separator(%rip)
	movl	$1, 12+_const_os__path_separator(%rip)
	movl	$0, _const_os__o_rdonly(%rip)
	movl	$1, _const_os__o_wronly(%rip)
	movl	$2, _const_os__o_rdwr(%rip)
	movl	$64, _const_os__o_create(%rip)
	movl	$256, _const_os__o_noctty(%rip)
	movl	$512, _const_os__o_trunc(%rip)
	movl	$1024, _const_os__o_append(%rip)
	movl	$2048, _const_os__o_nonblock(%rip)
	movl	$1052672, _const_os__o_sync(%rip)
	leaq	-11040(%rbp), %rax
	movq	-11008(%rbp), %rdx
	movl	-10996(%rbp), %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	os__init_os_args
	movq	-11040(%rbp), %rax
	movq	-11032(%rbp), %rdx
	movq	%rax, _const_os__args(%rip)
	movq	%rdx, 8+_const_os__args(%rip)
	movq	-11024(%rbp), %rax
	movq	-11016(%rbp), %rdx
	movq	%rax, 16+_const_os__args(%rip)
	movq	%rdx, 24+_const_os__args(%rip)
	leaq	.LC241(%rip), %rax
	movq	%rax, -10992(%rbp)
	movl	$2, -10984(%rbp)
	movl	$1, -10980(%rbp)
	leaq	.LC258(%rip), %rax
	movq	%rax, -10976(%rbp)
	movl	$3, -10968(%rbp)
	movl	$1, -10964(%rbp)
	leaq	.LC275(%rip), %rax
	movq	%rax, -10960(%rbp)
	movl	$3, -10952(%rbp)
	movl	$1, -10948(%rbp)
	leaq	.LC290(%rip), %rax
	movq	%rax, -10944(%rbp)
	movl	$3, -10936(%rbp)
	movl	$1, -10932(%rbp)
	leaq	.LC242(%rip), %rax
	movq	%rax, -10928(%rbp)
	movl	$2, -10920(%rbp)
	movl	$1, -10916(%rbp)
	leaq	.LC259(%rip), %rax
	movq	%rax, -10912(%rbp)
	movl	$3, -10904(%rbp)
	movl	$1, -10900(%rbp)
	leaq	.LC276(%rip), %rax
	movq	%rax, -10896(%rbp)
	movl	$3, -10888(%rbp)
	movl	$1, -10884(%rbp)
	leaq	.LC291(%rip), %rax
	movq	%rax, -10880(%rbp)
	movl	$3, -10872(%rbp)
	movl	$1, -10868(%rbp)
	leaq	.LC243(%rip), %rax
	movq	%rax, -10864(%rbp)
	movl	$3, -10856(%rbp)
	movl	$1, -10852(%rbp)
	leaq	.LC260(%rip), %rax
	movq	%rax, -10848(%rbp)
	movl	$4, -10840(%rbp)
	movl	$1, -10836(%rbp)
	leaq	.LC277(%rip), %rax
	movq	%rax, -10832(%rbp)
	movl	$4, -10824(%rbp)
	movl	$1, -10820(%rbp)
	leaq	.LC292(%rip), %rax
	movq	%rax, -10816(%rbp)
	movl	$4, -10808(%rbp)
	movl	$1, -10804(%rbp)
	leaq	.LC244(%rip), %rax
	movq	%rax, -10800(%rbp)
	movl	$3, -10792(%rbp)
	movl	$1, -10788(%rbp)
	leaq	.LC261(%rip), %rax
	movq	%rax, -10784(%rbp)
	movl	$4, -10776(%rbp)
	movl	$1, -10772(%rbp)
	leaq	.LC278(%rip), %rax
	movq	%rax, -10768(%rbp)
	movl	$4, -10760(%rbp)
	movl	$1, -10756(%rbp)
	leaq	.LC293(%rip), %rax
	movq	%rax, -10752(%rbp)
	movl	$4, -10744(%rbp)
	movl	$1, -10740(%rbp)
	leaq	.LC245(%rip), %rax
	movq	%rax, -10736(%rbp)
	movl	$3, -10728(%rbp)
	movl	$1, -10724(%rbp)
	leaq	.LC262(%rip), %rax
	movq	%rax, -10720(%rbp)
	movl	$4, -10712(%rbp)
	movl	$1, -10708(%rbp)
	leaq	.LC279(%rip), %rax
	movq	%rax, -10704(%rbp)
	movl	$4, -10696(%rbp)
	movl	$1, -10692(%rbp)
	leaq	.LC294(%rip), %rax
	movq	%rax, -10688(%rbp)
	movl	$4, -10680(%rbp)
	movl	$1, -10676(%rbp)
	leaq	.LC246(%rip), %rax
	movq	%rax, -10672(%rbp)
	movl	$3, -10664(%rbp)
	movl	$1, -10660(%rbp)
	leaq	.LC263(%rip), %rax
	movq	%rax, -10656(%rbp)
	movl	$4, -10648(%rbp)
	movl	$1, -10644(%rbp)
	leaq	.LC280(%rip), %rax
	movq	%rax, -10640(%rbp)
	movl	$4, -10632(%rbp)
	movl	$1, -10628(%rbp)
	leaq	.LC295(%rip), %rax
	movq	%rax, -10624(%rbp)
	movl	$4, -10616(%rbp)
	movl	$1, -10612(%rbp)
	leaq	.LC247(%rip), %rax
	movq	%rax, -10608(%rbp)
	movl	$3, -10600(%rbp)
	movl	$1, -10596(%rbp)
	leaq	.LC264(%rip), %rax
	movq	%rax, -10592(%rbp)
	movl	$4, -10584(%rbp)
	movl	$1, -10580(%rbp)
	leaq	.LC281(%rip), %rax
	movq	%rax, -10576(%rbp)
	movl	$4, -10568(%rbp)
	movl	$1, -10564(%rbp)
	leaq	.LC296(%rip), %rax
	movq	%rax, -10560(%rbp)
	movl	$4, -10552(%rbp)
	movl	$1, -10548(%rbp)
	leaq	.LC248(%rip), %rax
	movq	%rax, -10544(%rbp)
	movl	$3, -10536(%rbp)
	movl	$1, -10532(%rbp)
	leaq	.LC265(%rip), %rax
	movq	%rax, -10528(%rbp)
	movl	$4, -10520(%rbp)
	movl	$1, -10516(%rbp)
	leaq	.LC282(%rip), %rax
	movq	%rax, -10512(%rbp)
	movl	$4, -10504(%rbp)
	movl	$1, -10500(%rbp)
	leaq	.LC297(%rip), %rax
	movq	%rax, -10496(%rbp)
	movl	$4, -10488(%rbp)
	movl	$1, -10484(%rbp)
	leaq	.LC305(%rip), %rax
	movq	%rax, -10480(%rbp)
	movl	$4, -10472(%rbp)
	movl	$1, -10468(%rbp)
	leaq	.LC307(%rip), %rax
	movq	%rax, -10464(%rbp)
	movl	$4, -10456(%rbp)
	movl	$1, -10452(%rbp)
	leaq	.LC309(%rip), %rax
	movq	%rax, -10448(%rbp)
	movl	$5, -10440(%rbp)
	movl	$1, -10436(%rbp)
	leaq	.LC311(%rip), %rax
	movq	%rax, -10432(%rbp)
	movl	$5, -10424(%rbp)
	movl	$1, -10420(%rbp)
	leaq	.LC313(%rip), %rax
	movq	%rax, -10416(%rbp)
	movl	$5, -10408(%rbp)
	movl	$1, -10404(%rbp)
	leaq	.LC315(%rip), %rax
	movq	%rax, -10400(%rbp)
	movl	$5, -10392(%rbp)
	movl	$1, -10388(%rbp)
	leaq	.LC317(%rip), %rax
	movq	%rax, -10384(%rbp)
	movl	$5, -10376(%rbp)
	movl	$1, -10372(%rbp)
	leaq	.LC319(%rip), %rax
	movq	%rax, -10368(%rbp)
	movl	$5, -10360(%rbp)
	movl	$1, -10356(%rbp)
	leaq	-11040(%rbp), %rax
	leaq	-10992(%rbp), %rdx
	movq	%rdx, %r8
	movl	$16, %ecx
	movl	$40, %edx
	movl	$40, %esi
	movq	%rax, %rdi
	call	new_array_from_c_array
	movq	-11040(%rbp), %rax
	movq	-11032(%rbp), %rdx
	movq	%rax, _const_encoder__regi_base_code_offset_over_8(%rip)
	movq	%rdx, 8+_const_encoder__regi_base_code_offset_over_8(%rip)
	movq	-11024(%rbp), %rax
	movq	-11016(%rbp), %rdx
	movq	%rax, 16+_const_encoder__regi_base_code_offset_over_8(%rip)
	movq	%rdx, 24+_const_encoder__regi_base_code_offset_over_8(%rip)
	nop
	movq	-8(%rbp), %rbx
	leave
	ret
	.globl	_vcleanup
_vcleanup:
	pushq	%rbp
	movq	%rsp, %rbp
	nop
	popq	%rbp
	ret
	.globl	main
main:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	movq	%rsi, -16(%rbp)
	movl	-4(%rbp), %eax
	movl	%eax, g_main_argc(%rip)
	movq	-16(%rbp), %rax
	movq	%rax, g_main_argv(%rip)
	movq	-16(%rbp), %rdx
	movl	-4(%rbp), %eax
	movq	%rdx, %rsi
	movl	%eax, %edi
	call	_vinit
	call	main__main
	call	_vcleanup
	movl	$0, %eax
	leave
	ret
	.section	.note.GNU-stack,""
